<doc>
    <assembly>
        <name>UnityEditor</name>
    </assembly>
    <members>
        <member name="T:AssetModificationProcessor">
            <summary>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</summary>
            <remarks>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require locking of files.</remarks>
        </member>
        <member name="C:AssetModificationProcessor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.FractalNoise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.FractalNoise(System.Single,System.Single,System.Single)">
            <param name="inH">To be added.</param>
            <param name="inLacunarity">To be added.</param>
            <param name="inOctaves">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.FractalNoise(System.Single,System.Single,System.Single,TreeEditor.Perlin)">
            <param name="inH">To be added.</param>
            <param name="inLacunarity">To be added.</param>
            <param name="inOctaves">To be added.</param>
            <param name="noise">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.FractalNoise.BrownianMotion(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.FractalNoise.HybridMultifractal(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="offset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.FractalNoise.RidgedMultifractal(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="gain">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.Perlin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.Perlin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.Perlin.Noise(System.Single)">
            <param name="arg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.Perlin.Noise(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.Perlin.Noise(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.Perlin.SetSeed(System.Int32)">
            <param name="seed">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.RingLoop">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.RingLoop">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.RingLoop.baseOffset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.BuildVertices(System.Collections.Generic.List{TreeEditor.TreeVertex})">
            <param name="verts">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.Cap(System.Single,System.Single,System.Int32,System.Single,System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Int32)">
            <param name="sphereFactor">To be added.</param>
            <param name="noise">To be added.</param>
            <param name="mappingMode">To be added.</param>
            <param name="mappingScale">To be added.</param>
            <param name="verts">To be added.</param>
            <param name="tris">To be added.</param>
            <param name="materialIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.Connect(TreeEditor.RingLoop,System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Int32,System.Boolean,System.Boolean)">
            <param name="other">To be added.</param>
            <param name="tris">To be added.</param>
            <param name="materialIndex">To be added.</param>
            <param name="flipTris">To be added.</param>
            <param name="lowres">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.RingLoop.radius">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.Reset(System.Single,UnityEngine.Matrix4x4,System.Single,System.Int32)">
            <param name="r">To be added.</param>
            <param name="m">To be added.</param>
            <param name="bOffset">To be added.</param>
            <param name="segs">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.SetAnimationProperties(System.Single,System.Single,System.Single,System.Single)">
            <param name="primaryFactor">To be added.</param>
            <param name="secondaryFactor">To be added.</param>
            <param name="edgeFactor">To be added.</param>
            <param name="phase">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.SetFlares(System.Single,System.Single)">
            <param name="radius">To be added.</param>
            <param name="noise">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.SetNoise(System.Single,System.Single,System.Single)">
            <param name="scale">To be added.</param>
            <param name="scaleU">To be added.</param>
            <param name="scaleV">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.SetNoiseSeed(System.Int32)">
            <param name="seed">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.SetSpread(System.Single,System.Single)">
            <param name="top">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.RingLoop.SetSurfaceAngle(System.Single)">
            <param name="angleDeg">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.SmoothRandom">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.SmoothRandom">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.SmoothRandom.Get(System.Single)">
            <param name="speed">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.SmoothRandom.GetVector3(System.Single)">
            <param name="speed">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.SplineNode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.SplineNode(TreeEditor.SplineNode)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.SplineNode(UnityEngine.Vector3,System.Single)">
            <param name="p">To be added.</param>
            <param name="t">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.SplineNode.normal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.SplineNode.point">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.SplineNode.rot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.SplineNode.tangent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.SplineNode.time">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TextureAtlas">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TextureAtlas">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas.AddTexture(System.String,UnityEngine.Texture2D,UnityEngine.Color,UnityEngine.Texture2D,UnityEngine.Texture2D,UnityEngine.Texture2D,UnityEngine.Texture2D,System.Single,UnityEngine.Vector2,System.Boolean,UnityEngine.Vector2)">
            <param name="name">To be added.</param>
            <param name="diffuse">To be added.</param>
            <param name="diffuseColor">To be added.</param>
            <param name="normal">To be added.</param>
            <param name="gloss">To be added.</param>
            <param name="transtex">To be added.</param>
            <param name="shadowOffsetTex">To be added.</param>
            <param name="shininess">To be added.</param>
            <param name="scale">To be added.</param>
            <param name="tileV">To be added.</param>
            <param name="uvTiling">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas.atlasHeight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas.atlasPadding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas.atlasWidth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas.GetTexTiling(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas.GetUVRect(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas.nodes">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas.Pack(System.Int32@,System.Int32,System.Int32,System.Boolean)">
            <param name="targetWidth">To be added.</param>
            <param name="targetHeight">To be added.</param>
            <param name="padding">To be added.</param>
            <param name="correctPow2">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TextureAtlas+TextureNode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TextureAtlas+TextureNode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas+TextureNode.CompareTo(TreeEditor.TextureAtlas+TextureNode)">
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.diffuseColor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.diffuseTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.glossTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.normalTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TextureAtlas+TextureNode.Overlap(TreeEditor.TextureAtlas+TextureNode,TreeEditor.TextureAtlas+TextureNode)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.packedRect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.scale">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.shadowOffsetTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.shininess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.sourceRect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.tileV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.translucencyTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.uvRect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TextureAtlas+TextureNode.uvTiling">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeAOSphere">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAOSphere(UnityEngine.Vector3,System.Single,System.Single)">
            <param name="pos">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="density">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAOSphere.area">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAOSphere.density">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAOSphere.flag">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeAOSphere.PointOcclusion(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="pos">To be added.</param>
            <param name="nor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAOSphere.position">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAOSphere.radius">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAttribute(System.String,System.String,System.String)">
            <param name="uiLabel">To be added.</param>
            <param name="uiGadget">To be added.</param>
            <param name="uiOptions">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAttribute(System.String,System.String,System.Single,System.Single)">
            <param name="uiLabel">To be added.</param>
            <param name="uiGadget">To be added.</param>
            <param name="uiMin">To be added.</param>
            <param name="uiMax">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAttribute(System.String,System.String,System.Single,System.Single,System.String)">
            <param name="uiLabel">To be added.</param>
            <param name="uiGadget">To be added.</param>
            <param name="uiMin">To be added.</param>
            <param name="uiMax">To be added.</param>
            <param name="uiRequirement">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAttribute(System.String,System.String,System.Single,System.Single,System.String,System.Single,System.Single)">
            <param name="uiLabel">To be added.</param>
            <param name="uiGadget">To be added.</param>
            <param name="uiMin">To be added.</param>
            <param name="uiMax">To be added.</param>
            <param name="uiCurve">To be added.</param>
            <param name="uiCurveMin">To be added.</param>
            <param name="uiCurveMax">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAttribute(System.String,System.String,System.String,System.String,System.Single,System.Single,System.String)">
            <param name="uiLabel">To be added.</param>
            <param name="uiGadget">To be added.</param>
            <param name="uiOptions">To be added.</param>
            <param name="uiCurve">To be added.</param>
            <param name="uiCurveMin">To be added.</param>
            <param name="uiCurveMax">To be added.</param>
            <param name="uiRequirement">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeAttribute(System.String,System.String,System.Single,System.Single,System.String,System.Single,System.Single,System.String)">
            <param name="uiLabel">To be added.</param>
            <param name="uiGadget">To be added.</param>
            <param name="uiMin">To be added.</param>
            <param name="uiMax">To be added.</param>
            <param name="uiCurve">To be added.</param>
            <param name="uiCurveMin">To be added.</param>
            <param name="uiCurveMax">To be added.</param>
            <param name="uiRequirement">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeAttribute.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiCurveMax">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiCurveMin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiGadget">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiLabel">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiMax">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiMin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeAttribute.uiRequirement">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.AddGroup(TreeEditor.TreeGroup,System.Type)">
            <param name="parent">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.AddNode(TreeEditor.TreeGroup,TreeEditor.TreeNode)">
            <param name="g">To be added.</param>
            <param name="parent">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.AddNode(TreeEditor.TreeGroup,TreeEditor.TreeNode,System.Boolean)">
            <param name="g">To be added.</param>
            <param name="parent">To be added.</param>
            <param name="validate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.branchGroups">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.CheckExternalChanges">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.ClearReferences">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.DeleteGroup(TreeEditor.TreeGroup)">
            <param name="g">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.DeleteNode(TreeEditor.TreeNode)">
            <param name="n">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.DeleteNode(TreeEditor.TreeNode,System.Boolean)">
            <param name="n">To be added.</param>
            <param name="validate">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.DuplicateGroup(TreeEditor.TreeGroup)">
            <param name="g">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.DuplicateNode(TreeEditor.TreeNode)">
            <param name="n">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.GetAdaptiveHeightSegments(System.Single,System.Single)">
            <param name="h">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.GetAdaptiveRadialSegments(System.Single,System.Single)">
            <param name="r">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.GetAdaptiveSamples(TreeEditor.TreeGroup,TreeEditor.TreeNode,System.Single)">
            <param name="group">To be added.</param>
            <param name="node">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.GetGroup(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.GetNode(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.Initialize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.IsAncestor(TreeEditor.TreeGroup,TreeEditor.TreeGroup)">
            <param name="ancestor">To be added.</param>
            <param name="g">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.isInPreviewMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.leafGroups">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.LockGroup(TreeEditor.TreeGroup)">
            <param name="g">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.materialHash">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.mesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.nodes">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.optimizedCutoutMaterial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.optimizedSolidMaterial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.OptimizeMaterial(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle})">
            <param name="materials">To be added.</param>
            <param name="vertices">To be added.</param>
            <param name="triangles">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.PreviewMesh(UnityEngine.Matrix4x4,UnityEngine.Material[]@)">
            <param name="worldToLocalMatrix">To be added.</param>
            <param name="outMaterials">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeData.root">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.SetGroupParent(TreeEditor.TreeGroup,TreeEditor.TreeGroup)">
            <param name="g">To be added.</param>
            <param name="parent">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.SetNodeParent(TreeEditor.TreeNode,TreeEditor.TreeNode)">
            <param name="n">To be added.</param>
            <param name="parent">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.UnlockGroup(TreeEditor.TreeGroup)">
            <param name="g">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.UpdateDistribution(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.UpdateFrequency(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.UpdateMesh(UnityEngine.Matrix4x4,UnityEngine.Material[]@)">
            <param name="worldToLocalMatrix">To be added.</param>
            <param name="outMaterials">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.UpdateMesh(UnityEngine.Matrix4x4,System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)">
            <param name="matrix">To be added.</param>
            <param name="materials">To be added.</param>
            <param name="verts">To be added.</param>
            <param name="tris">To be added.</param>
            <param name="aoSpheres">To be added.</param>
            <param name="buildFlags">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <param name="aoDensity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.UpdateSeed(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeData.ValidateReferences">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeEditorHelper">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeEditorHelper">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.AreShadersCorrect">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.ExtractLabel(System.String)">
            <param name="uiString">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.ExtractTooltip(System.String)">
            <param name="uiString">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.GetGUIContent(System.String)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.GetOptimizedShaderName(UnityEngine.Shader)">
            <param name="shader">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.GetUIString(System.String)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.GUITooManyShaders">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.GUIWrongShader(System.String,UnityEngine.Material,TreeEditor.TreeEditorHelper+NodeType)">
            <param name="uniqueID">To be added.</param>
            <param name="value">To be added.</param>
            <param name="nodeType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.IsTreeBarkShader(UnityEngine.Shader)">
            <param name="shader">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.IsTreeLeafShader(UnityEngine.Shader)">
            <param name="shader">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.NodeHasWrongMaterial(TreeEditor.TreeGroup)">
            <param name="group">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.OnEnable(TreeEditor.TreeData)">
            <param name="treeData">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeEditorHelper.RefreshAllTreeShaders">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeEditorHelper+NodeType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeEditorHelper+NodeType.BarkNode">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeEditorHelper+NodeType.LeafNode">
            <summary>To be added.</summary>
        </member>
        <member name="T:TreeEditor.TreeGroup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeGroup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.animationEdge">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.animationPrimary">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.animationSecondary">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.BuildAOSpheres(System.Collections.Generic.List{TreeEditor.TreeAOSphere})">
            <param name="aoSpheres">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.CanHaveSubGroups">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.CheckExternalChanges">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.childGroupIDs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.ComputeAmbientOcclusion(UnityEngine.Vector3,UnityEngine.Vector3,System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Single)">
            <param name="pos">To be added.</param>
            <param name="nor">To be added.</param>
            <param name="aoSpheres">To be added.</param>
            <param name="aoDensity">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.ComputeWindFactor(TreeEditor.TreeNode,System.Single)">
            <param name="node">To be added.</param>
            <param name="offset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.CreateTangent(TreeEditor.TreeNode,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <param name="node">To be added.</param>
            <param name="rot">To be added.</param>
            <param name="normal">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionFrequency">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionNodes">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionPitch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionPitchCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionScale">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionScaleCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.distributionTwirl">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.GenerateBendBillboardNormalFactor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.GenerateBendNormalFactor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.GenerateDoubleSidedGeometry">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.GetMaterialIndex(UnityEngine.Material,System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Boolean)">
            <param name="m">To be added.</param>
            <param name="materials">To be added.</param>
            <param name="tileV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.GetRadiusAtTime(TreeEditor.TreeNode,System.Single,System.Boolean)">
            <param name="node">To be added.</param>
            <param name="t">To be added.</param>
            <param name="includeModifications">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.GetRootMatrix">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.GetRootSpread">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.Lock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.lockFlags">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.nodeIDs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.parentGroupID">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.seed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.showAnimationProps">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:TreeEditor.TreeGroup.uniqueID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.Unlock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.UpdateDistribution(System.Boolean,System.Boolean)">
            <param name="completeUpdate">To be added.</param>
            <param name="updateSubGroups">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.UpdateFrequency(TreeEditor.TreeData)">
            <param name="owner">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.UpdateMatrix">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.UpdateMesh(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)">
            <param name="materials">To be added.</param>
            <param name="verts">To be added.</param>
            <param name="tris">To be added.</param>
            <param name="aoSpheres">To be added.</param>
            <param name="buildFlags">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <param name="aoDensity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.UpdateParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroup.UpdateSeed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup.visible">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeGroup+BuildFlag">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup+BuildFlag.BuildAmbientOcclusion">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroup+BuildFlag.BuildWeldParts">
            <summary>To be added.</summary>
        </member>
        <member name="T:TreeEditor.TreeGroup+DistributionMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup+DistributionMode.Alternate">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroup+DistributionMode.Opposite">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroup+DistributionMode.Random">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroup+DistributionMode.Whorled">
            <summary>To be added.</summary>
        </member>
        <member name="T:TreeEditor.TreeGroup+LockFlag">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroup+LockFlag.LockAlignment">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroup+LockFlag.LockPosition">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroup+LockFlag.LockShape">
            <summary>To be added.</summary>
        </member>
        <member name="T:TreeEditor.TreeGroupBranch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeGroupBranch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.breakingChance">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.breakingSpot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.BuildAOSpheres(System.Collections.Generic.List{TreeEditor.TreeAOSphere})">
            <param name="aoSpheres">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.capSmoothing">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.crinkCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.crinklyness">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.flareHeight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.flareNoise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.flareSize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.frondCount">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.frondCrease">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.frondCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.frondRange">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.frondRotation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.frondWidth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.geometryMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.GetRadiusAtTime(TreeEditor.TreeNode,System.Single,System.Boolean)">
            <param name="node">To be added.</param>
            <param name="time">To be added.</param>
            <param name="includeModifications">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.height">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.lodQualityMultiplier">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.materialBranch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.materialBreak">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.materialFrond">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.noise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.noiseCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.noiseScaleU">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.noiseScaleV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.radius">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.radiusCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.radiusMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.seekBlend">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.seekCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.UpdateMatrix">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.UpdateMesh(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)">
            <param name="materials">To be added.</param>
            <param name="verts">To be added.</param>
            <param name="tris">To be added.</param>
            <param name="aoSpheres">To be added.</param>
            <param name="buildFlags">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <param name="aoDensity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.UpdateParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.UpdateSpline(TreeEditor.TreeNode)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupBranch.UpdateSplines">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.weldHeight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.weldSpreadBottom">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch.weldSpreadTop">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeGroupBranch+GeometryMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch+GeometryMode.Branch">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch+GeometryMode.BranchFrond">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroupBranch+GeometryMode.Frond">
            <summary>To be added.</summary>
        </member>
        <member name="T:TreeEditor.TreeGroupLeaf">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeGroupLeaf">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupLeaf.BuildAOSpheres(System.Collections.Generic.List{TreeEditor.TreeAOSphere})">
            <param name="aoSpheres">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupLeaf.CanHaveSubGroups">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf.geometryMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf.horizontalAlign">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf.instanceMesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf.materialLeaf">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf.perpendicularAlign">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf.size">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupLeaf.UpdateMatrix">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupLeaf.UpdateMesh(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)">
            <param name="materials">To be added.</param>
            <param name="verts">To be added.</param>
            <param name="tris">To be added.</param>
            <param name="aoSpheres">To be added.</param>
            <param name="buildFlags">To be added.</param>
            <param name="adaptiveQuality">To be added.</param>
            <param name="aoDensity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupLeaf.UpdateParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeGroupLeaf+GeometryMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.BILLBOARD">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.CROSS">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.MESH">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.PLANE">
            <summary>To be added.</summary>
        </member>
        <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.TRI_CROSS">
            <summary>To be added.</summary>
        </member>
        <member name="T:TreeEditor.TreeGroupRoot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeGroupRoot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.adaptiveLODQuality">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.aoDensity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupRoot.CanHaveSubGroups">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.enableAmbientOcclusion">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.enableMaterialOptimize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.enableWelding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.groundOffset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.rootMatrix">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.rootSpread">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupRoot.SetRootMatrix(UnityEngine.Matrix4x4)">
            <param name="m">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeGroupRoot.shadowTextureQuality">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeGroupRoot.UpdateParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeMaterial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeMaterial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeMaterial.material">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeMaterial.tileV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeNode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeNode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.angle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.animSeed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.baseAngle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.breakOffset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.capRange">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeNode.GetLocalMatrixAtTime(System.Single)">
            <param name="time">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeNode.GetPropertiesAtTime(System.Single,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Single@)">
            <param name="time">To be added.</param>
            <param name="pos">To be added.</param>
            <param name="rot">To be added.</param>
            <param name="rad">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeNode.GetRadiusAtTime(System.Single)">
            <param name="time">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeNode.GetScale">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeNode.GetSurfaceAngleAtTime(System.Single)">
            <param name="time">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.groupID">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.matrix">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.offset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.parentID">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.pitch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.rotation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.scale">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.seed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.size">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.spline">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.triEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.triStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:TreeEditor.TreeNode.uniqueID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.vertEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.vertStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeNode.visible">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeSpline">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeSpline">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeSpline(TreeEditor.TreeSpline)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.AddPoint(UnityEngine.Vector3,System.Single)">
            <param name="pos">To be added.</param>
            <param name="timeInSeconds">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.GetApproximateLength">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.GetNodeCount">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.GetNodes">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.GetPositionAtTime(System.Single)">
            <param name="timeParam">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.GetRotationAtTime(System.Single)">
            <param name="timeParam">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeSpline.nodes">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.RemoveNode(System.Int32)">
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.Reset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.SetNodeCount(System.Int32)">
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeSpline.tension">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.UpdateRotations">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeSpline.UpdateTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeTriangle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeTriangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="material">To be added.</param>
            <param name="v0">To be added.</param>
            <param name="v1">To be added.</param>
            <param name="v2">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeTriangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="material">To be added.</param>
            <param name="v0">To be added.</param>
            <param name="v1">To be added.</param>
            <param name="v2">To be added.</param>
            <param name="isBillboard">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeTriangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <param name="material">To be added.</param>
            <param name="v0">To be added.</param>
            <param name="v1">To be added.</param>
            <param name="v2">To be added.</param>
            <param name="isBillboard">To be added.</param>
            <param name="tileV">To be added.</param>
            <param name="isCutout">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeTriangle.flip">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeTriangle.isBillboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeTriangle.isCutout">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeTriangle.materialIndex">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeTriangle.tileV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeTriangle.v">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:TreeEditor.TreeVertex">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:TreeEditor.TreeVertex">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.color">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.flag">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeVertex.Lerp4(TreeEditor.TreeVertex[],UnityEngine.Vector2)">
            <param name="tv">To be added.</param>
            <param name="factor">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.nor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.pos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeVertex.SetAmbientOcclusion(System.Single)">
            <param name="ao">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:TreeEditor.TreeVertex.SetAnimationProperties(System.Single,System.Single,System.Single,System.Single)">
            <param name="primaryFactor">To be added.</param>
            <param name="secondaryFactor">To be added.</param>
            <param name="edgeFactor">To be added.</param>
            <param name="phase">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.tangent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.uv0">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:TreeEditor.TreeVertex.uv1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ActiveEditorTracker">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ActiveEditorTracker">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ActiveEditorTracker.activeEditors">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.ClearDirty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.Destroy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.Equals(System.Object)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.ForceRebuild">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.GetVisible(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ActiveEditorTracker.hasComponentsWhichCannotBeMultiEdited">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.HasCustomEditor(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ActiveEditorTracker.inspectorMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ActiveEditorTracker.isDirty">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ActiveEditorTracker.isLocked">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.MakeCustomEditor(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.RebuildIfNecessary">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.SetVisible(System.Int32,System.Int32)">
            <param name="index">To be added.</param>
            <param name="visible">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ActiveEditorTracker.sharedTracker">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ActiveEditorTracker.VerifyModifiedMonoBehaviours">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AndroidBuildSubtarget">
            <summary>Target Android build platform.</summary>
            <remarks>See Also: EditorUserBuildSettings.androidBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.ASTC">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.ATC">
            <summary>ATI texture compression. Available on devices running Adreno GPU, including HTC Nexus One, Droid Incredible, EVO, and others.</summary>
            <remarks>See Also: EditorUserBuildSettings.androidBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.DXT">
            <summary>S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra2 platform, including Motorala Xoom, Motorola Atrix, Droid Bionic, and others.</summary>
            <remarks>See Also: EditorUserBuildSettings.androidBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.ETC">
            <summary>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</summary>
            <remarks>See Also: EditorUserBuildSettings.androidBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.ETC2">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.Generic">
            <summary>Don't override texture compression.</summary>
            <remarks>See Also: EditorUserBuildSettings.androidBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidBuildSubtarget.PVRTC">
            <summary>PowerVR texture compression. Available in devices running PowerVR SGX530/540 GPU, such as Motorola DROID series; Samsung Galaxy S, Nexus S, and Galaxy Tab; and others.</summary>
            <remarks>See Also: EditorUserBuildSettings.androidBuildSubtarget.</remarks>
        </member>
        <member name="T:UnityEditor.AndroidPreferredInstallLocation">
            <summary>Preferred application install location.</summary>
            <remarks>See Also: PlayerSettings.Android.preferredInstallLocation.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidPreferredInstallLocation.Auto">
            <summary>Let the OS decide, app doesn't have any preferences.</summary>
        </member>
        <member name="F:UnityEditor.AndroidPreferredInstallLocation.ForceInternal">
            <summary>Force installation into internal memory. Needed for things like Live Wallpapers.</summary>
        </member>
        <member name="F:UnityEditor.AndroidPreferredInstallLocation.PreferExternal">
            <summary>Prefer external, if possible. Install to internal otherwise.</summary>
        </member>
        <member name="T:UnityEditor.AndroidSdkVersions">
            <summary>Supported Android SDK versions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel10">
            <summary>Android 2.3.3, "Gingerbread", API level 10.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel11">
            <summary>Android 3.0, "Honeycomb", API level 11.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel12">
            <summary>Android 3.1, "Honeycomb", API level 12.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel13">
            <summary>Android 3.2, "Honeycomb", API level 13.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel14">
            <summary>Android 4.0, "Ice Cream Sandwich", API level 14.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel15">
            <summary>Android 4.0.3, "Ice Cream Sandwich", API level 15.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel16">
            <summary>Android 4.1, "Jelly Bean", API level 16.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel17">
            <summary>Android 4.2, "Jelly Bean", API level 16.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel6">
            <summary>Android 2.0.1, "Eclair", API level 6.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel7">
            <summary>Android 2.1, "Eclair", API level 7.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel8">
            <summary>Android 2.2, "Froyo", API level 8.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel9">
            <summary>Android 2.3.1, "Gingerbread", API level 9.</summary>
        </member>
        <member name="T:UnityEditor.AndroidShowActivityIndicatorOnLoading">
            <summary>Application should show ActivityIndicator when loading.</summary>
            <remarks>See Also: PlayerSettings.Android.showActivityIndicatorOnLoading.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.DontShow">
            <summary>Don't Show.</summary>
        </member>
        <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedLarge">
            <summary>Inversed Large.</summary>
        </member>
        <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedSmall">
            <summary>Inversed Small.</summary>
        </member>
        <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Large">
            <summary>Large.</summary>
        </member>
        <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Small">
            <summary>Small.</summary>
        </member>
        <member name="T:UnityEditor.AndroidSplashScreenScale">
            <summary>Android splash screen scale modes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidSplashScreenScale.Center">
            <summary>Center.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFill">
            <summary>Scale to fill.</summary>
        </member>
        <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFit">
            <summary>Scale to fit.</summary>
        </member>
        <member name="T:UnityEditor.AndroidTargetDevice">
            <summary>Target Android device architecture.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AndroidTargetDevice.ARMv7">
            <summary>ARMv7 only.</summary>
        </member>
        <member name="T:UnityEditor.AnimationClipCurveData">
            <summary>An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component / material attached to a GameObject / animated bone.</summary>
            <remarks>See Also: AnimationUtility, ObjectNames.</remarks>
        </member>
        <member name="C:UnityEditor.AnimationClipCurveData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AnimationClipCurveData(UnityEditor.EditorCurveBinding)">
            <param name="binding">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipCurveData.curve">
            <summary>The actual animation curve.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipCurveData.path">
            <summary>The path of the GameObject / bone being animated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipCurveData.propertyName">
            <summary>The name of the property being animated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipCurveData.type">
            <summary>The type of the component / material being animated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AnimationClipSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AnimationClipSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.cycleOffset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.heightFromFeet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.keepOriginalOrientation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.keepOriginalPositionXZ">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.keepOriginalPositionY">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.level">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.loopBlend">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.loopBlendOrientation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.loopBlendPositionXZ">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.loopBlendPositionY">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.loopTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.mirror">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.orientationOffsetY">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.startTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationClipSettings.stopTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AnimationMode">
            <summary>AnimationMode is used by the AnimationWindow to store properties modifed by the AnimationClip playback.</summary>
            <remarks>When exiting AnimationMode all properties are reverted to their default state. Animated properties are also highlighted by the inspector. Use AnimationMode.StartAnimationMode to enter animation mode. In Animation mode the editor is tinted to show that it is animating. Properties can be animated via AnimationMode.SampleAnimationClip.</remarks>
        </member>
        <member name="C:UnityEditor.AnimationMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.AddPropertyModification(UnityEditor.EditorCurveBinding,UnityEditor.PropertyModification,System.Boolean)">
            <param name="binding">To be added.</param>
            <param name="modification">To be added.</param>
            <param name="keepPrefabOverride">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AnimationMode.animatedPropertyColor">
            <summary>The color used to show that a property is currently being animated.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.BeginSampling">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.EndSampling">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.InAnimationMode">
            <summary>Are we currently in AnimationMode.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.IsPropertyAnimated(UnityEngine.Object,System.String)">
            <param name="target">To be added.</param>
            <param name="propertyPath">To be added.</param>
            <summary>Is the specified property currently in animation mode and being animated?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.SampleAnimationClip(UnityEngine.GameObject,UnityEngine.AnimationClip,System.Single)">
            <param name="gameObject">To be added.</param>
            <param name="clip">To be added.</param>
            <param name="time">To be added.</param>
            <summary>Samples an AnimationClip on the object and also records any modified properties in AnimationMode.</summary>
            <remarks>This function must always be surrounded by AnimationMode.BeginSample and AnimationMode.EndSample. When a property is no longer sampled (through SampleAnimationClip or AddPropertyModification) between BeginSample and EndSample it will automatically revert to the original value when EndSample is called.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.StartAnimationMode">
            <summary>Starts the animation mode.</summary>
            <remarks>When the Animation Mode is enabled, the editor is tinted in a special color to indicated that animations are playing and recorded.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationMode.StopAnimationMode">
            <summary>Stops Animation mode, reverts all properties that were animated in animation mode.</summary>
            <remarks>AnimationMode stores per property modifications. They are added either via AnimationMode.SampleClip or AnimationMode.AddPropertyModification. StopAnimationMode reverts all of these properties.</remarks>
        </member>
        <member name="T:UnityEditor.AnimationUtility">
            <summary>Editor utility functions for modifying animation clips.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AnimationUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.CalculateTransformPath(UnityEngine.Transform,UnityEngine.Transform)">
            <param name="targetTransform">To be added.</param>
            <param name="root">To be added.</param>
            <summary>Calculates path from root transform to target transform.</summary>
            <returns>To be added.</returns>
            <remarks>Returns a string representing the path in a transform hierarchy from a given root transform down to a given target transform. The root transform does not need to be an actual root, but it must be higher in the hierarchy than the target transform. The target and root may also be the same transform.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.ConstrainToPolynomialCurve(UnityEngine.AnimationCurve)">
            <param name="curve">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>Retrieves all curves from a specific animation clip.</summary>
            <returns>To be added.</returns>
            <remarks>If includeCurveData is false, all animation curves in returned results will be null. Use this when you only want to get the list of curves, their types and names.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip,System.Boolean)">
            <param name="clip">To be added.</param>
            <param name="includeCurveData">To be added.</param>
            <summary>Retrieves all curves from a specific animation clip.</summary>
            <returns>To be added.</returns>
            <remarks>If includeCurveData is false, all animation curves in returned results will be null. Use this when you only want to get the list of curves, their types and names.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAnimatableBindings(UnityEngine.GameObject,UnityEngine.GameObject)">
            <param name="targetObject">To be added.</param>
            <param name="root">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAnimatedObject(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)">
            <param name="gameObject">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAnimationClips(UnityEngine.Animation)">
            <param name="component">To be added.</param>
            <summary>Returns the array of AnimationClips that are referenced in the Animation component.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAnimationClips(UnityEngine.GameObject)">
            <param name="gameObject">To be added.</param>
            <summary>Returns the array of AnimationClips that are referenced in the Animation component.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAnimationClipSettings(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetAnimationEvents(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>Retrieves all animation events associated with the animation clip.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetCurveBindings(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
            <param name="clip">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>Unity automatic combines position curves, scale curves, rotation curves internally.</summary>
            <returns>To be added.</returns>
            <remarks>Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,System.String,System.Type,System.String)">
            <param name="clip">To be added.</param>
            <param name="relativePath">To be added.</param>
            <param name="type">To be added.</param>
            <param name="propertyName">To be added.</param>
            <summary>Unity automatic combines position curves, scale curves, rotation curves internally.</summary>
            <returns>To be added.</returns>
            <remarks>Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetEditorCurveValueType(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)">
            <param name="root">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetFloatValue(UnityEngine.GameObject,UnityEditor.EditorCurveBinding,System.Single@)">
            <param name="root">To be added.</param>
            <param name="binding">To be added.</param>
            <param name="data">To be added.</param>
            <summary>Retrieves the current float value by sampling a curve value on a specific GameObject.</summary>
            <returns>To be added.</returns>
            <remarks>Useful for recording keyframes.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetFloatValue(UnityEngine.GameObject,System.String,System.Type,System.String,System.Single@)">
            <param name="root">To be added.</param>
            <param name="relativePath">To be added.</param>
            <param name="type">To be added.</param>
            <param name="propertyName">To be added.</param>
            <param name="data">To be added.</param>
            <summary>Retrieves the current float value by sampling a curve value on a specific GameObject.</summary>
            <returns>To be added.</returns>
            <remarks>Useful for recording keyframes.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
            <param name="clip">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceValue(UnityEngine.GameObject,UnityEditor.EditorCurveBinding,UnityEngine.Object@)">
            <param name="root">To be added.</param>
            <param name="binding">To be added.</param>
            <param name="targetObject">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.InAnimationMode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.IsValidPolynomialCurve(UnityEngine.AnimationCurve)">
            <param name="curve">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationUtility.onCurveWasModified">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.PropertyModificationToEditorCurveBinding(UnityEditor.PropertyModification,UnityEngine.GameObject,UnityEditor.EditorCurveBinding@)">
            <param name="modification">To be added.</param>
            <param name="gameObject">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.SetAnimationClips(UnityEngine.Animation,UnityEngine.AnimationClip[])">
            <param name="animation">To be added.</param>
            <param name="clips">To be added.</param>
            <summary>Sets the array of AnimationClips to be referenced in the Animation component.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.SetAnimationEvents(UnityEngine.AnimationClip,UnityEngine.AnimationEvent[])">
            <param name="clip">To be added.</param>
            <param name="events">To be added.</param>
            <summary>Replaces all animation events in the animation clip.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.SetAnimationType(UnityEngine.AnimationClip,UnityEditor.ModelImporterAnimationType)">
            <param name="clip">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.SetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEngine.AnimationCurve)">
            <param name="clip">To be added.</param>
            <param name="binding">To be added.</param>
            <param name="curve">To be added.</param>
            <summary>Unity automatic combines position curves, scale curves, rotation curves internally.</summary>
            <remarks>Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.SetEditorCurve(UnityEngine.AnimationClip,System.String,System.Type,System.String,UnityEngine.AnimationCurve)">
            <param name="clip">To be added.</param>
            <param name="relativePath">To be added.</param>
            <param name="type">To be added.</param>
            <param name="propertyName">To be added.</param>
            <param name="curve">To be added.</param>
            <summary>Unity automatic combines position curves, scale curves, rotation curves internally.</summary>
            <remarks>Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.SetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEditor.ObjectReferenceKeyframe[])">
            <param name="clip">To be added.</param>
            <param name="binding">To be added.</param>
            <param name="keyframes">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.StartAnimationMode(UnityEngine.Object[])">
            <param name="objects">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AnimationUtility.StopAnimationMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AnimationUtility+CurveModifiedType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AnimationUtility+CurveModifiedType.ClipModified">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AnimationUtility+CurveModifiedType.CurveDeleted">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AnimationUtility+CurveModifiedType.CurveModified">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.AnimationUtility+OnCurveWasModified">
            <param name="clip">To be added.</param>
            <param name="binding">To be added.</param>
            <param name="deleted">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ApiCompatibilityLevel">
            <summary>.NET API compatibility level.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0">
            <summary>.NET 2.0.</summary>
        </member>
        <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0_Subset">
            <summary>.NET 2.0 Subset.</summary>
        </member>
        <member name="T:UnityEditor.ArrayUtility">
            <summary>Helpers for builtin arrays ...</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ArrayUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.Add``1(``0[]@,``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.AddRange``1(``0[]@,``0[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="items">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.ArrayEquals``1(``0[],``0[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.Clear``1(``0[]@)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.Contains``1(``0[],``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.Find``1(``0[],System.Predicate{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="match">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.FindAll``1(``0[],System.Predicate{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="match">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.FindIndex``1(``0[],System.Predicate{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="match">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.IndexOf``1(``0[],``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.Insert``1(``0[]@,System.Int32,``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.LastIndexOf``1(``0[],``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.Remove``1(``0[]@,``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ArrayUtility.RemoveAt``1(``0[]@,System.Int32)">
            <typeparam name="T">To be added.</typeparam>
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AspectRatio">
            <summary>Aspect ratio.</summary>
            <remarks>This enum is used when modifying and inspecting supported aspect ratios in PlayerSettings.</remarks>
        </member>
        <member name="F:UnityEditor.AspectRatio.Aspect16by10">
            <summary>16:10 aspect ratio.</summary>
        </member>
        <member name="F:UnityEditor.AspectRatio.Aspect16by9">
            <summary>16:9 aspect ratio.</summary>
        </member>
        <member name="F:UnityEditor.AspectRatio.Aspect4by3">
            <summary>4:3 aspect ratio.</summary>
        </member>
        <member name="F:UnityEditor.AspectRatio.Aspect5by4">
            <summary>5:4 aspect ratio.</summary>
        </member>
        <member name="F:UnityEditor.AspectRatio.AspectOthers">
            <summary>Undefined aspect ratios.</summary>
        </member>
        <member name="T:UnityEditor.AssemblyHelper">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssemblyHelper">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.CheckForAssemblyFileNameMismatch(System.String)">
            <param name="assemblyPath">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.ExtractAllClassesThatInheritMonoBehaviourAndScriptableObject(System.String,System.String[]@,System.String[]@)">
            <param name="path">To be added.</param>
            <param name="classNamesArray">To be added.</param>
            <param name="classNameSpacesArray">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.ExtractAssemblyTypeInfo(System.String)">
            <param name="assemblyPathName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.ExtractInternalAssemblyName(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.FindAssembliesReferencedBy(System.String,System.String[],UnityEditor.BuildTarget)">
            <param name="path">To be added.</param>
            <param name="foldersToSearch">To be added.</param>
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.FindAssembliesReferencedBy(System.String[],System.String[],UnityEditor.BuildTarget)">
            <param name="paths">To be added.</param>
            <param name="foldersToSearch">To be added.</param>
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.GetNamesOfAssembliesLoadedInCurrentDomain">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.IsInternalAssembly(System.String)">
            <param name="file">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyHelper.IsManagedAssembly(System.String)">
            <param name="file">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssemblyTypeInfoGenerator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssemblyTypeInfoGenerator(System.String)">
            <param name="assembly">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssemblyTypeInfoGenerator.ClassInfoArray">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssemblyTypeInfoGenerator.gatherClassInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssemblyTypeInfoGenerator+ClassInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssemblyTypeInfoGenerator+ClassInfo.fields">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssemblyTypeInfoGenerator+ClassInfo.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssemblyTypeInfoGenerator+FieldInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssemblyTypeInfoGenerator+FieldInfo.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssemblyTypeInfoGenerator+FieldInfo.type">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssetDatabase">
            <summary>An Interface for accessing assets and performing operations on assets.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssetDatabase">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,System.String)">
            <summary>Adds objectToAdd to an existing asset at path.Adds objectToAdd to an existing asset identified by assetObject.</summary>
            <remarks>To be added.</remarks>
            <param name="objectToAdd">Object to add to the existing asset.</param>
            <param name="assetPath">Filesystem path to the asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
            <param name="assetObject">To be added.</param>
            <summary>Adds objectToAdd to an existing asset at path.Adds objectToAdd to an existing asset identified by assetObject.</summary>
            <remarks>To be added.</remarks>
            <param name="objectToAdd">Object to add to the existing asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.AssetPathToGUID(System.String)">
            <summary>Get the GUID for the asset at path.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
            <param name="path">Filesystem path for the asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ClearLabels(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Removes all labels attached to an asset.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.Contains(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>Is object an asset?</summary>
            <returns>To be added.</returns>
            <remarks>Returns true when an object is an asset (corresponds to a file in the Assets folder),  and false if it is not (for example object in the scene, or an object created at runtime).</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.Contains(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Is object an asset?</summary>
            <returns>To be added.</returns>
            <remarks>Returns true when an object is an asset (corresponds to a file in the Assets folder),  and false if it is not (for example object in the scene, or an object created at runtime).</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.CopyAsset(System.String,System.String)">
            <summary>Duplicates the asset at path and stores it at newPath.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
            <param name="path">Filesystem path of the source asset.</param>
            <param name="newPath">Filesystem path of the new asset to create.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.CreateAsset(UnityEngine.Object,System.String)">
            <summary>Creates a new asset at path.</summary>
            <remarks>You must ensure that the path uses a supported extension ('.mat' for materials, '.cubemap' for cubemaps, '.GUISkin' for skins, '.anim' for animations and '.asset' for arbitrary other assets.) You can add more assets to the file using AssetDatabase.AddObjectToAsset after the asset has been created. If an asset already exists at path it will be deleted prior to creating a new asset. All paths are relative to the project folder, for example: "Assets MyTextures hello.png". Be aware that if adding multiple objects to an asset, the order in which the objects are added does not really matter. In other words, asset will not be special within the asset and not be any form of "root" to objects added later. The object displayed as the asset's main object in the project view is the one that is considered most important (decided based on type) within the collection of objects.</remarks>
            <param name="asset">Object to use in creating the asset.</param>
            <param name="path">Filesystem path for the new asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.CreateFolder(System.String,System.String)">
            <summary>Create a new folder.</summary>
            <returns>The GUID of the newly created folder.</returns>
            <remarks>To be added.</remarks>
            <example>string guid = AssetDatabase.CreateFolder("Assets", "My Folder");  string newFolderPath = AssetDatabase.GUIDToAssetPath(guid);</example>
            <param name="parentFolder">The name of the parent folder.</param>
            <param name="newFolderName">The name of the new folder.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.DeleteAsset(System.String)">
            <summary>Deletes the asset file at path.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if the asset has been successfully deleted, false if it doesn't exit or couldn't be removed. All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: AssetDatabase.MoveAssetToTrash.</remarks>
            <param name="path">Filesystem path of the asset to be deleted.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String)">
            <param name="assetPathName">To be added.</param>
            <param name="fileName">To be added.</param>
            <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
            <remarks>See Also: ExportPackageOptions for information on how you can affect what gets exported.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String)">
            <param name="assetPathNames">To be added.</param>
            <param name="fileName">To be added.</param>
            <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
            <remarks>See Also: ExportPackageOptions for information on how you can affect what gets exported.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String,UnityEditor.ExportPackageOptions)">
            <param name="assetPathName">To be added.</param>
            <param name="fileName">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
            <remarks>See Also: ExportPackageOptions for information on how you can affect what gets exported.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String,UnityEditor.ExportPackageOptions)">
            <param name="assetPathNames">To be added.</param>
            <param name="fileName">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</summary>
            <remarks>See Also: ExportPackageOptions for information on how you can affect what gets exported.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GenerateUniqueAssetPath(System.String)">
            <param name="path">To be added.</param>
            <summary>Creates a new unique path for an asset.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetAllAssetPaths">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetAssetOrScenePath(UnityEngine.Object)">
            <param name="assetObject">To be added.</param>
            <summary>Returns the path name relative to the project folder where the asset is stored.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png" When a GameObject is part of a scene, the scene path is returned.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetAssetPath(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>Returns the path name relative to the project folder where the asset is stored.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetAssetPath(UnityEngine.Object)">
            <param name="assetObject">To be added.</param>
            <summary>Returns the path name relative to the project folder where the asset is stored.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetCachedIcon(System.String)">
            <param name="path">To be added.</param>
            <summary>Retrieves an icon for the asset at the given asset path.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[])">
            <param name="pathNames">To be added.</param>
            <summary>Given an asset pathName, returns the list of all assets it depends on.Given an array of pathNames, returns the list of all assets that the assets depend on.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetLabels(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Returns all labels attached to a given asset.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GetTextMetaDataPathFromAssetPath(System.String)">
            <summary>Gets the path to the text .meta file associated with an asset.</summary>
            <returns>The path to the .meta text file or empty string if the file does not exist.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="path">The path to the asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.GUIDToAssetPath(System.String)">
            <param name="guid">To be added.</param>
            <summary>Translate a GUID to its current asset path.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String)">
            <param name="path">To be added.</param>
            <summary>Import asset at path.</summary>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: ImportAssetOptions.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String,UnityEditor.ImportAssetOptions)">
            <param name="path">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Import asset at path.</summary>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: ImportAssetOptions.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ImportPackage(System.String,System.Boolean)">
            <param name="packagePath">To be added.</param>
            <param name="interactive">To be added.</param>
            <summary>Imports package at packagePath into the current project.</summary>
            <remarks>If interactive is true, an import package dialog will be opened, else all assets in the package will be imported into the current project.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsMainAsset(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>Is asset a main asset in the project window?</summary>
            <returns>To be added.</returns>
            <remarks>For example an imported model has a GameObject as its root and several Meshes and child GameObjects in expanded state. The root GameObject is the main asset in this case.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsMainAsset(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Is asset a main asset in the project window?</summary>
            <returns>To be added.</returns>
            <remarks>For example an imported model has a GameObject as its root and several Meshes and child GameObjects in expanded state. The root GameObject is the main asset in this case.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String)">
            <summary>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</summary>
            <returns>True is the asset can be edited.</returns>
            <remarks>Used to disable editor controls.</remarks>
            <example />
            <param name="assetPath">Is the path to the asset on disk relative to project folder.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object)">
            <param name="assetObject">To be added.</param>
            <summary>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</summary>
            <returns>True is the asset can be edited.</returns>
            <remarks>Used to disable editor controls.</remarks>
            <example />
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String,System.String@)">
            <summary>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</summary>
            <returns>True is the asset can be edited.</returns>
            <remarks>Used to disable editor controls.</remarks>
            <example />
            <param name="assetPath">Is the path to the asset on disk relative to project folder.</param>
            <param name="message">Used to give reason for not open.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object,System.String@)">
            <param name="assetObject">To be added.</param>
            <summary>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</summary>
            <returns>True is the asset can be edited.</returns>
            <remarks>Used to disable editor controls.</remarks>
            <example />
            <param name="message">Used to give reason for not open.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsSubAsset(System.Int32)">
            <summary>Does the asset form part of another asset?</summary>
            <returns>To be added.</returns>
            <remarks>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</remarks>
            <param name="instanceID">Instance ID of the asset Object to query.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.IsSubAsset(UnityEngine.Object)">
            <summary>Does the asset form part of another asset?</summary>
            <returns>To be added.</returns>
            <remarks>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</remarks>
            <param name="obj">The asset Object to query.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.LoadAllAssetRepresentationsAtPath(System.String)">
            <param name="assetPath">To be added.</param>
            <summary>Returns all asset representations at assetPath.</summary>
            <returns>To be added.</returns>
            <remarks>Asset representations are objects in the asset that are visible in the Project view. All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: AssetDatabase:LoadMainAssetAtPath, AssetDatabase.LoadAssetAtPath, AssetDatabase.LoadAllAssetsAtPath.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)">
            <summary>Returns an array of all asset objects at assetPath.</summary>
            <returns>To be added.</returns>
            <remarks>Some asset files may contain multiple objects (such as a Maya file which may contain multiple Meshes and GameObjects). All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: AssetDatabase.LoadAssetAtPath.</remarks>
            <param name="assetPath">Filesystem path to the asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)">
            <summary>Returns the first asset object of type type at given path assetPath.</summary>
            <returns>To be added.</returns>
            <remarks>Some asset files may contain multiple objects. (such as a Maya file which may contain multiple Meshes and GameObjects). All paths are relative to the project folder, for example: "Assets MyTextures hello.png". Note: The assetPath parameter is not case sensitive. ALL asset names &amp; paths in Unity use forward slashes, even on Windows.See Also: AssetDatabase.LoadMainAssetAtPath, AssetDatabase.LoadAllAssetsAtPath.</remarks>
            <param name="assetPath">Filesystem path of the asset to load.</param>
            <param name="type">Data type of the asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)">
            <summary>Returns the main asset object at assetPath.</summary>
            <returns>To be added.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: AssetDatabase.LoadAssetAtPath, AssetDatabase.LoadAllAssetsAtPath.</remarks>
            <param name="assetPath">Filesystem path of the asset to load.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.MoveAsset(System.String,System.String)">
            <summary>Move an asset file from one folder to another.</summary>
            <returns>An empty string if the asset has been successfully moved, otherwise an error message.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
            <example />
            <param name="oldPath">The path where the asset currently resides.</param>
            <param name="newPath">The path which the asset should be moved to.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.MoveAssetToTrash(System.String)">
            <param name="path">To be added.</param>
            <summary>Moves the asset at path to the trash.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if the asset has been successfully removed, false if it doesn't exit or couldn't be moved to the trash. All paths are relative to the project folder, for example: "Assets MyTextures hello.png" See Also: AssetDatabase.DeleteAsset.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>Opens the asset with associated application.Opens the asset(s) with associated application(s).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Opens the asset with associated application.Opens the asset(s) with associated application(s).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object[])">
            <param name="objects">To be added.</param>
            <summary>Opens the asset with associated application.Opens the asset(s) with associated application(s).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32,System.Int32)">
            <param name="instanceID">To be added.</param>
            <param name="lineNumber">To be added.</param>
            <summary>Opens the asset with associated application.Opens the asset(s) with associated application(s).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object,System.Int32)">
            <param name="target">To be added.</param>
            <param name="lineNumber">To be added.</param>
            <summary>Opens the asset with associated application.Opens the asset(s) with associated application(s).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.Refresh">
            <summary>Import any changed assets.</summary>
            <remarks>This will import any assets that have changed their content modification data or have been added-removed to the project folder. This method implicitly triggers an asset garbage collection (see Resources.UnloadUnusedAssets ). See Also: ImportAssetOptions.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.Refresh(UnityEditor.ImportAssetOptions)">
            <param name="options">To be added.</param>
            <summary>Import any changed assets.</summary>
            <remarks>This will import any assets that have changed their content modification data or have been added-removed to the project folder. This method implicitly triggers an asset garbage collection (see Resources.UnloadUnusedAssets ). See Also: ImportAssetOptions.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.RefreshDelayed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.RefreshDelayed(UnityEditor.ImportAssetOptions)">
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.RenameAsset(System.String,System.String)">
            <summary>Rename an asset file.</summary>
            <returns>An empty string, if the asset has been successfully renamed, otherwise an error message.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png".</remarks>
            <example />
            <param name="pathName">The path where the asset currently resides.</param>
            <param name="newName">The new name which should be given to the asset.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.SaveAssets">
            <summary>Writes all unsaved asset changes to disk.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.SetLabels(UnityEngine.Object,System.String[])">
            <param name="obj">To be added.</param>
            <param name="labels">To be added.</param>
            <summary>Replaces that list of labels on an asset.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.StartAssetEditing">
            <summary>Begin Asset importing. This lets you group several asset imports together into one larger import.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.StopAssetEditing">
            <summary>Stop Asset importing. This lets you group several asset imports together into one larger import.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetDatabase.ValidateMoveAsset(System.String,System.String)">
            <summary>Checks if an asset file can be moved from one folder to another. (Without actually moving the file).</summary>
            <returns>An empty string if the asset can be moved, otherwise an error message.</returns>
            <remarks>All paths are relative to the project folder, for example: "Assets MyTextures hello.png". See Also: AssetDatabase.MoveAsset.</remarks>
            <example />
            <param name="oldPath">The path where the asset currently resides.</param>
            <param name="newPath">The path which the asset should be moved to.</param>
        </member>
        <member name="M:UnityEditor.AssetDatabase.WriteImportSettingsIfDirty(System.String)">
            <param name="path">To be added.</param>
            <summary>Writes the import settings to disk.</summary>
            <returns>To be added.</returns>
            <remarks>In order to make the cache server import assets.</remarks>
        </member>
        <member name="T:UnityEditor.AssetDeleteResult">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetDeleteResult.DidDelete">
            <summary>Tells Unity that the asset was deleted by the callback. Unity will not try to delete the asset, but will delete the cached version and preview file.</summary>
        </member>
        <member name="F:UnityEditor.AssetDeleteResult.DidNotDelete">
            <summary>Tells the internal implementation that the callback did not delete the asset. The asset will be delete by the internal implementation.</summary>
        </member>
        <member name="F:UnityEditor.AssetDeleteResult.FailedDelete">
            <summary>Tells Unity that the file cannot be deleted and Unity should leave it alone.</summary>
        </member>
        <member name="T:UnityEditor.AssetImporter">
            <summary>Base class from which asset importers for specific asset types derive.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssetImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssetImporter.assetPath">
            <summary>The path name of the asset for this importer. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssetImporter.assetTimeStamp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetImporter.GetAtPath(System.String)">
            <param name="path">To be added.</param>
            <summary>Retrieves the asset importer for the asset at path.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: ModelImporter, TextureImporter, AudioImporter.</remarks>
        </member>
        <member name="P:UnityEditor.AssetImporter.userData">
            <summary>Get or set any user data.</summary>
            <value>To be added.</value>
            <remarks>This can be usefull during asset post processing if you want to associate eg. a model with an auxillary xml file to control some parts of the importing or you can put your xml data directly in to the userData field.</remarks>
        </member>
        <member name="T:UnityEditor.AssetModificationProcessor">
            <summary>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</summary>
            <remarks>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require locking of files.</remarks>
        </member>
        <member name="C:UnityEditor.AssetModificationProcessor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssetMoveResult">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetMoveResult.DidMove">
            <summary>Tells the internal implementation that the script moved the asset physically on disk.</summary>
            <remarks>The internal implementation will not try to move the asset on disk, but will move it in the internal database to keep consistency.</remarks>
        </member>
        <member name="F:UnityEditor.AssetMoveResult.DidNotMove">
            <summary>Tells the internal implementation that the asset was not moved physically on disk by the script.</summary>
            <remarks>This means that it is safe for the internal implementation to move the asset.</remarks>
        </member>
        <member name="F:UnityEditor.AssetMoveResult.FailedMove">
            <summary>Tells the internal implementation that the script could not move the assets.</summary>
            <remarks>Unity should not attempt to move the asset nor should it update its internal representation of the assets position on disk.</remarks>
        </member>
        <member name="T:UnityEditor.AssetPostprocessor">
            <summary>AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.</summary>
            <remarks>In a production pipeline AssetPostprocessors should always be placed in pre-built dll's in the project instead of in scripts. AssetPostprocessors change the output of imported assets, thus a compile error in one of the scripts will lead to assets being imported differently. This can be a severe issue when working in a production pipeline. By using dll's for AssetPostprocessors you ensure that they can always be executed even if the scripts have compile errors. This way you can override default values in the import settings or modify the imported data like textures or meshes.</remarks>
        </member>
        <member name="C:UnityEditor.AssetPostprocessor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssetPostprocessor.assetImporter">
            <summary>Reference to the asset importer.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssetPostprocessor.assetPath">
            <summary>The path name of the asset being imported.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPostprocessor.GetPostprocessOrder">
            <summary>Override the order in which importers are processed.</summary>
            <returns>To be added.</returns>
            <remarks>By overriding GetImportOrder you can sort in which order postprocessors are executed. Smaller priorities will be imported first.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPostprocessor.GetVersion">
            <summary>Returns the version of the asset postprocessor.</summary>
            <returns>To be added.</returns>
            <remarks>When the script is recompiled, if a version change is detected, the assets associated with this asset postprocessor will be reimported.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String)">
            <param name="warning">To be added.</param>
            <summary>Logs an import error message to the console.</summary>
            <remarks>Pass an asset as the second argument to link the error to the asset in the editor. See Also: Debug.LogError.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String,UnityEngine.Object)">
            <param name="warning">To be added.</param>
            <param name="context">To be added.</param>
            <summary>Logs an import error message to the console.</summary>
            <remarks>Pass an asset as the second argument to link the error to the asset in the editor. See Also: Debug.LogError.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String)">
            <param name="warning">To be added.</param>
            <summary>Logs an import warning to the console.</summary>
            <remarks>Pass an asset as the second argument to link the warning to the asset in the editor. See Also: Debug.LogWarning.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String,UnityEngine.Object)">
            <param name="warning">To be added.</param>
            <param name="context">To be added.</param>
            <summary>Logs an import warning to the console.</summary>
            <remarks>Pass an asset as the second argument to link the warning to the asset in the editor. See Also: Debug.LogWarning.</remarks>
        </member>
        <member name="P:UnityEditor.AssetPostprocessor.preview">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssetPreview">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssetPreview">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPreview.GetAssetPreview(UnityEngine.Object)">
            <param name="asset">To be added.</param>
            <summary>Returns a preview texture for an asset.Returns a preview texture for an instanceID of an asset.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPreview.GetMiniThumbnail(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Returns the thumbnail for an object (like the ones you see in the project view).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPreview.GetMiniTypeThumbnail(System.Type)">
            <param name="type">To be added.</param>
            <summary>Returns the thumbnail for the type.Returns the thumbnail for the object's type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreview(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreviews">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssetsItem">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssetsItem">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.assetIsDir">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.changeFlags">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.enabled">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.exists">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.exportedAssetPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.guid">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.guidFolder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.message">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.parentGuid">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.pathName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetsItem.previewPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AssetStatus">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStatus.BadState">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.Calculating">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.ClientOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.Conflict">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.Ignored">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.NewLocalVersion">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.NewVersionAvailable">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.RestoredFromTrash">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.Same">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.ServerOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AssetStatus.Unchanged">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.AssetStoreAsset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.AssetStoreAsset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.className">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.displayName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.AssetStoreAsset.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.dynamicPreviewURL">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssetStoreAsset.HasLivePreview">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.id">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.packageID">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AssetStoreAsset.Preview">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.previewImage">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.price">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AssetStoreAsset.staticPreviewURL">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AudioImporter">
            <summary>Audio importer lets you modify AudioClip import settings from editor scripts.</summary>
            <remarks>Settings of this class match the ones exposed in Audio Import Settings.</remarks>
        </member>
        <member name="C:UnityEditor.AudioImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.channels">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.compressionBitrate">
            <summary>Compression bitrate.</summary>
            <value>To be added.</value>
            <remarks>This value is in bits/second, e.g. 128000 would be 128 kbps.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.forceToMono">
            <summary>Force this clip to mono?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.format">
            <summary>Format of imported audio.</summary>
            <value>To be added.</value>
            <remarks>See Also: AudioImporterFormat.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.hardware">
            <summary>Use hardware voice/decoder if available.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.loadType">
            <summary>Set/get the way Unity is loading the Audio data.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.loopable">
            <summary>Is this clip loopable?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.AudioImporter.threeD">
            <summary>Is this clip a 2D or 3D sound?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.AudioImporterChannels">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AudioImporterChannels.Automatic">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AudioImporterChannels.Mono">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.AudioImporterChannels.Stereo">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.AudioImporterFormat">
            <summary>Imported audio format for AudioImporter.</summary>
            <remarks>See Also: AudioImporter.format.</remarks>
        </member>
        <member name="F:UnityEditor.AudioImporterFormat.Compressed">
            <summary>Ogg compressed audio.</summary>
            <remarks>See Also: AudioImporter.format.</remarks>
        </member>
        <member name="F:UnityEditor.AudioImporterFormat.Native">
            <summary>Native format.</summary>
            <remarks>See Also: AudioImporter.format.</remarks>
        </member>
        <member name="T:UnityEditor.AudioImporterLoadType">
            <summary>The way we load audio assets AudioImporter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.AudioImporterLoadType.CompressedInMemory">
            <summary>Keep audio compressed in memory.</summary>
        </member>
        <member name="F:UnityEditor.AudioImporterLoadType.DecompressOnLoad">
            <summary>Decompress audio data on load.</summary>
        </member>
        <member name="F:UnityEditor.AudioImporterLoadType.StreamFromDisc">
            <summary>Stream audio from disc.</summary>
        </member>
        <member name="T:UnityEditor.BlackBerryBuildSubtarget">
            <summary>Texture Compression Types.</summary>
            <remarks>ETC1 can be used for universal BAR files or PVRTC and ATC can be used for targeting specific hardware.</remarks>
        </member>
        <member name="F:UnityEditor.BlackBerryBuildSubtarget.ATC">
            <summary>ATI texture compression. Available on BlackBerry devices running Adreno GPU.</summary>
        </member>
        <member name="F:UnityEditor.BlackBerryBuildSubtarget.ETC">
            <summary>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</summary>
        </member>
        <member name="F:UnityEditor.BlackBerryBuildSubtarget.Generic">
            <summary>Don't override texture compression.</summary>
        </member>
        <member name="F:UnityEditor.BlackBerryBuildSubtarget.PVRTC">
            <summary>PowerVR texture compression. Available on BlackBerry devices running PowerVR GPU's.</summary>
        </member>
        <member name="T:UnityEditor.BlackBerryBuildType">
            <summary>Build types available for BlackBerry.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.BlackBerryBuildType.Debug">
            <summary>Build type for local testing purposes.</summary>
            <remarks>This BuildType requires a debug token to be imported in the editor and deployed to the device.</remarks>
        </member>
        <member name="F:UnityEditor.BlackBerryBuildType.Submission">
            <summary>Signed build used for submission to BlackBerry AppWorld.</summary>
            <remarks>This build should only be used for final submission. When using submission builds you will not have access to any log files.</remarks>
        </member>
        <member name="T:UnityEditor.BodyPart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.BodyPart.Avatar">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.Body">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.Head">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.Last">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.LeftArm">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.LeftFingers">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.LeftLeg">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.RightArm">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.RightFingers">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BodyPart.RightLeg">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.BoneState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.BoneState.BoneLenghtIsZero">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BoneState.Duplicate">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BoneState.InvalidHierarchy">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BoneState.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BoneState.NotFound">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BoneState.Valid">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.BuildAssetBundleOptions">
            <summary>Asset Bundle building options.</summary>
            <remarks>See Also: BuildPipeline.BuildAssetBundle.</remarks>
        </member>
        <member name="F:UnityEditor.BuildAssetBundleOptions.CollectDependencies">
            <summary>Includes all dependencies.</summary>
            <remarks>This follows all references to any assets, GameObjects or components and includes them in the build. See Also: BuildPipeline.BuildAssetBundle.</remarks>
        </member>
        <member name="F:UnityEditor.BuildAssetBundleOptions.CompleteAssets">
            <summary>Forces inclusion of the entire asset.</summary>
            <remarks>For example if you pass a Mesh into the BuildPipeline.BuildAssetBundle function and use CompleteAssets it would also include the GameObject and any animation clips in the same asset. See Also: BuildPipeline.BuildAssetBundle.</remarks>
        </member>
        <member name="F:UnityEditor.BuildAssetBundleOptions.DeterministicAssetBundle">
            <summary>Builds an asset bundle using a hash for the id of the object stored in the asset bundle.</summary>
            <remarks>This allows you to rebuild an asset bundle and reference assets in it directly. When rebuilding the asset bundle the objects in it are guaranteed to have the same id after rebuilding the asset bundle. Due to it being a 32 bit hash space, if you have a lot of objects in the asset bundle it will increase the potential for hash conflicts. Unity will give an error and not build the asset bundle in that case. The hash is based on the GUID of the asset and the local id of the object in the asset. DeterministicAssetBundle are also slower to load from than normal asset bundles, this is because the threaded background loading API usually expects objects to be ordered in a way that makes reading reduce seeking. With DeterministicAssetBundles that is not possible.</remarks>
        </member>
        <member name="F:UnityEditor.BuildAssetBundleOptions.DisableWriteTypeTree">
            <summary>Do not include type information within the AssetBundle.</summary>
            <remarks>Specifying this flag will make an AssetBundle susceptible to script or Unity version changes, but will make the file smaller and a bit faster to load. This flag affects only AssetBundles for platforms that have type information included by default. Mobile and console platform always build without type information. Type information must be present for Web platforms, therefore Unity will reject to build an AssetBundle if you specify this flag when building for BuildTarget.WebPlayer, for example. See Also: BuildPipeline.BuildAssetBundle.</remarks>
        </member>
        <member name="F:UnityEditor.BuildAssetBundleOptions.UncompressedAssetBundle">
            <summary>Don't compress the data when creating the asset bundle.</summary>
            <remarks>This makes it faster to build &amp; load, but since it is much bigger it will take longer to download.</remarks>
        </member>
        <member name="T:UnityEditor.BuildOptions">
            <summary>Building options. Multiple options can be combined together.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.AcceptExternalModificationsToPlayer">
            <summary>Used when building XCode (iPhone) or Eclipse (Android) projects.</summary>
            <remarks>On iPhone, this setting will append an existing XCode project. Existing XCode project setting changes will be preserved. On Android, this setting will create a new Eclipse project. Existing Eclipse project setting changes will be discarded. See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.AllowDebugging">
            <summary>Allow script debuggers to attach to the player remotely.</summary>
            <remarks>Note that script debugging is not supported on the webplayer. See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.AutoRunPlayer">
            <summary>Run the built player.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.BuildAdditionalStreamedScenes">
            <summary>Build a compressed asset bundle that contains streamed scenes loadable with the WWW class.</summary>
            <remarks>This allows you to on demand load scenes and their assets when needed instead of a simple linear progressing download. The best way to build a streamed scene asset bundle is to use BuildPipeline.BuildStreamedSceneAssetBundle See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.CompressTextures">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildOptions.ConnectToHost">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildOptions.ConnectWithProfiler">
            <summary>Start the player with a connection to the profiler in the editor.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.DeployOnline">
            <summary>Generate online version of webplayer.</summary>
            <remarks>Generate HTML for the webplayer which references the Unity-hosted version of UnityObject2.js. When this option is not used the HTML will reference a copy of UnityObject2.js which will be dropped into the build folder alongside the HTML. This version of UnityObject2.js is easier to work with, and allows you to debug Javascript locally. See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.Development">
            <summary>Build a development version of the player.</summary>
            <remarks>A development build includes debug symbols and enablesthe Profiler. (To profile a webplayer you need to have the development version of the web player installed. The unity3d file can be profiled only when the development webplayer is active.) Note that a development build of a webplayer means that the unity3d file created is not LZMA compressed. See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.EnableHeadlessMode">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildOptions.InstallInBuildFolder">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildOptions.None">
            <summary>Perform the specified build without any special settings or extra tasks.</summary>
        </member>
        <member name="F:UnityEditor.BuildOptions.ShowBuiltPlayer">
            <summary>Show the built player.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.StripDebugSymbols">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildOptions.SymlinkLibraries">
            <summary>Symlink runtime libraries when generating iOS XCode project. (Faster iteration time).</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.UncompressedAssetBundle">
            <summary>Don't compress the data when creating the asset bundle.</summary>
            <remarks>This makes it faster to build &amp; load, but since it is much bigger it will take longer to download.</remarks>
        </member>
        <member name="F:UnityEditor.BuildOptions.WebPlayerOfflineDeployment">
            <summary>Copy UnityObject.js alongside Web Player so it wouldn't have to be downloaded from internet.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="T:UnityEditor.BuildPipeline">
            <summary>Lets you programmatically build players or AssetBundles which can be loaded from the web.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.BuildPipeline">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String)">
            <param name="mainAsset">To be added.</param>
            <param name="assets">To be added.</param>
            <param name="pathName">To be added.</param>
            <summary>Builds an asset bundle (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window. mainAsset lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. All paths are relative to the project folder. Like: "Assets MyTextures hello.png". The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. Note that asset bundles built for standalone or webplayer targets cannot be loaded by applications built for mobile platforms and vice versa. Furthermore, bundles are not compatible between iOS and Android platforms. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32@)">
            <param name="mainAsset">To be added.</param>
            <param name="assets">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="crc">To be added.</param>
            <summary>Builds an asset bundle (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window. mainAsset lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. All paths are relative to the project folder. Like: "Assets MyTextures hello.png". The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. Note that asset bundles built for standalone or webplayer targets cannot be loaded by applications built for mobile platforms and vice versa. Furthermore, bundles are not compatible between iOS and Android platforms. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions)">
            <param name="mainAsset">To be added.</param>
            <param name="assets">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <summary>Builds an asset bundle (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window. mainAsset lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. All paths are relative to the project folder. Like: "Assets MyTextures hello.png". The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. Note that asset bundles built for standalone or webplayer targets cannot be loaded by applications built for mobile platforms and vice versa. Furthermore, bundles are not compatible between iOS and Android platforms. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions)">
            <param name="mainAsset">To be added.</param>
            <param name="assets">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="crc">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <summary>Builds an asset bundle (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window. mainAsset lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. All paths are relative to the project folder. Like: "Assets MyTextures hello.png". The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. Note that asset bundles built for standalone or webplayer targets cannot be loaded by applications built for mobile platforms and vice versa. Furthermore, bundles are not compatible between iOS and Android platforms. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
            <param name="mainAsset">To be added.</param>
            <param name="assets">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <param name="targetPlatform">To be added.</param>
            <summary>Builds an asset bundle (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window. mainAsset lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. All paths are relative to the project folder. Like: "Assets MyTextures hello.png". The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. Note that asset bundles built for standalone or webplayer targets cannot be loaded by applications built for mobile platforms and vice versa. Furthermore, bundles are not compatible between iOS and Android platforms. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
            <param name="mainAsset">To be added.</param>
            <param name="assets">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="crc">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <param name="targetPlatform">To be added.</param>
            <summary>Builds an asset bundle (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window. mainAsset lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. All paths are relative to the project folder. Like: "Assets MyTextures hello.png". The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. Note that asset bundles built for standalone or webplayer targets cannot be loaded by applications built for mobile platforms and vice versa. Furthermore, bundles are not compatible between iOS and Android platforms. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String)">
            <param name="assets">To be added.</param>
            <param name="assetNames">To be added.</param>
            <param name="pathName">To be added.</param>
            <summary>Builds an asset bundle, with custom names for the assets (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. In the assetNames parameter, supply an array of strings of the same size as the number of assets. These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: BuildAssetBundle, AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32@)">
            <param name="assets">To be added.</param>
            <param name="assetNames">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="crc">To be added.</param>
            <summary>Builds an asset bundle, with custom names for the assets (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. In the assetNames parameter, supply an array of strings of the same size as the number of assets. These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: BuildAssetBundle, AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions)">
            <param name="assets">To be added.</param>
            <param name="assetNames">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <summary>Builds an asset bundle, with custom names for the assets (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. In the assetNames parameter, supply an array of strings of the same size as the number of assets. These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: BuildAssetBundle, AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions)">
            <param name="assets">To be added.</param>
            <param name="assetNames">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="crc">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <summary>Builds an asset bundle, with custom names for the assets (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. In the assetNames parameter, supply an array of strings of the same size as the number of assets. These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: BuildAssetBundle, AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
            <param name="assets">To be added.</param>
            <param name="assetNames">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <param name="targetPlatform">To be added.</param>
            <summary>Builds an asset bundle, with custom names for the assets (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. In the assetNames parameter, supply an array of strings of the same size as the number of assets. These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: BuildAssetBundle, AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
            <param name="assets">To be added.</param>
            <param name="assetNames">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="crc">To be added.</param>
            <param name="assetBundleOptions">To be added.</param>
            <param name="targetPlatform">To be added.</param>
            <summary>Builds an asset bundle, with custom names for the assets (Unity Pro only).</summary>
            <returns>To be added.</returns>
            <remarks>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. In the assetNames parameter, supply an array of strings of the same size as the number of assets. These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead. The compressed asset bundle file will be saved at pathName. options allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload. The function returns a boolean value which is true if the build succeeded and false otherwise. See Also: BuildAssetBundle, AssetBundle class, WWW.assetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildPlayer(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
            <summary>Builds a player (Unity Pro only).</summary>
            <returns>An error message if an error occurred.</returns>
            <remarks>Use this function to programatically create a build of your project. Note that any references to GameObjects acquired in the editor script before the BuildPlayer call will be invalid after it and will need to be reacquired.</remarks>
            <example>// Build a folder containing unity3d file and html file  @MenuItem ("Build/BuildWebplayer")  static function MyBuild(){  var levels : String[] = ["Assets/Scene1.unity", "Assets/Scene2.unity"];  BuildPipeline.BuildPlayer( levels, "WebPlayerBuild",      BuildTarget.WebPlayer, BuildOptions.None);  }</example>
            <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).</param>
            <param name="locationPathName">The path where the application will be built.</param>
            <param name="target">The BuildTarget to build.</param>
            <param name="options">Additional BuildOptions, like whether to run the built player.</param>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget)">
            <summary>Builds one or more scenes and all their dependencies into a compressed asset bundle.</summary>
            <returns>String with an error message, empty on success.</returns>
            <remarks>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file. The scene can be downloaded and loaded using the WWW class. You can use WWW.LoadFromCacheOrDownload to cache the downloaded scene after it has been downloaded. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.When downloading the built compressed file, you need to call WWW.assetBundle in order to make the scene available to the Application.LoadLevel() and Application.LoadLevelAdditive() functions.</remarks>
            <example>// Build a streamed unity3d file. This contain one scene that can be downloaded  // on demand and loaded once its asset bundle has been loaded. @MenuItem ("Build/BuildWebplayerStreamed")  static function MyBuild(){  var levels : String[] = ["Assets/Level1.unity"];  BuildPipeline.BuildStreamedSceneAssetBundle( levels, "Streamed-Level1.unity3d", BuildTarget.WebPlayer);  }  function Start () {  // Download compressed scene. If version 5 of the file named "Streamed-Level1.unity3d" was previously downloaded and cached.  // Then Unity will completely skip the download and load the decompressed scene directly from disk.  var download = WWW.LoadFromCacheOrDownload ("http://myWebSite.com/Streamed-Level1.unity3d", 5);  yield download;    // Handle error  if (download.error != null)  {   Debug.LogError(download.error);   return;  }    // In order to make the scene available from LoadLevel, we have to load the asset bundle.  // The AssetBundle class also lets you force unload all assets and file storage once it is no longer needed.  var bundle = download.assetBundle;    // Load the level we have just downloaded  Application.LoadLevel ("Level1");  }</example>
            <param name="levels">Pathnames of levels to include in the asset bundle.</param>
            <param name="locationPath">Pathname for the output asset bundle.</param>
            <param name="target">Runtime platform on which the asset bundle will be used.</param>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,System.UInt32@)">
            <summary>Builds one or more scenes and all their dependencies into a compressed asset bundle.</summary>
            <returns>String with an error message, empty on success.</returns>
            <remarks>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file. The scene can be downloaded and loaded using the WWW class. You can use WWW.LoadFromCacheOrDownload to cache the downloaded scene after it has been downloaded. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.When downloading the built compressed file, you need to call WWW.assetBundle in order to make the scene available to the Application.LoadLevel() and Application.LoadLevelAdditive() functions.</remarks>
            <example>// Build a streamed unity3d file. This contain one scene that can be downloaded  // on demand and loaded once its asset bundle has been loaded. @MenuItem ("Build/BuildWebplayerStreamed")  static function MyBuild(){  var levels : String[] = ["Assets/Level1.unity"];  BuildPipeline.BuildStreamedSceneAssetBundle( levels, "Streamed-Level1.unity3d", BuildTarget.WebPlayer);  }  function Start () {  // Download compressed scene. If version 5 of the file named "Streamed-Level1.unity3d" was previously downloaded and cached.  // Then Unity will completely skip the download and load the decompressed scene directly from disk.  var download = WWW.LoadFromCacheOrDownload ("http://myWebSite.com/Streamed-Level1.unity3d", 5);  yield download;    // Handle error  if (download.error != null)  {   Debug.LogError(download.error);   return;  }    // In order to make the scene available from LoadLevel, we have to load the asset bundle.  // The AssetBundle class also lets you force unload all assets and file storage once it is no longer needed.  var bundle = download.assetBundle;    // Load the level we have just downloaded  Application.LoadLevel ("Level1");  }</example>
            <param name="levels">Pathnames of levels to include in the asset bundle.</param>
            <param name="locationPath">Pathname for the output asset bundle.</param>
            <param name="target">Runtime platform on which the asset bundle will be used.</param>
            <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
            <summary>Builds one or more scenes and all their dependencies into a compressed asset bundle.</summary>
            <returns>String with an error message, empty on success.</returns>
            <remarks>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file. The scene can be downloaded and loaded using the WWW class. You can use WWW.LoadFromCacheOrDownload to cache the downloaded scene after it has been downloaded. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.When downloading the built compressed file, you need to call WWW.assetBundle in order to make the scene available to the Application.LoadLevel() and Application.LoadLevelAdditive() functions.</remarks>
            <example>// Build a streamed unity3d file. This contain one scene that can be downloaded  // on demand and loaded once its asset bundle has been loaded. @MenuItem ("Build/BuildWebplayerStreamed")  static function MyBuild(){  var levels : String[] = ["Assets/Level1.unity"];  BuildPipeline.BuildStreamedSceneAssetBundle( levels, "Streamed-Level1.unity3d", BuildTarget.WebPlayer);  }  function Start () {  // Download compressed scene. If version 5 of the file named "Streamed-Level1.unity3d" was previously downloaded and cached.  // Then Unity will completely skip the download and load the decompressed scene directly from disk.  var download = WWW.LoadFromCacheOrDownload ("http://myWebSite.com/Streamed-Level1.unity3d", 5);  yield download;    // Handle error  if (download.error != null)  {   Debug.LogError(download.error);   return;  }    // In order to make the scene available from LoadLevel, we have to load the asset bundle.  // The AssetBundle class also lets you force unload all assets and file storage once it is no longer needed.  var bundle = download.assetBundle;    // Load the level we have just downloaded  Application.LoadLevel ("Level1");  }</example>
            <param name="levels">Pathnames of levels to include in the asset bundle.</param>
            <param name="locationPath">Pathname for the output asset bundle.</param>
            <param name="target">Runtime platform on which the asset bundle will be used.</param>
            <param name="options">Build options. See BuildOptions for possible values.</param>
        </member>
        <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,System.UInt32@,UnityEditor.BuildOptions)">
            <summary>Builds one or more scenes and all their dependencies into a compressed asset bundle.</summary>
            <returns>String with an error message, empty on success.</returns>
            <remarks>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file. The scene can be downloaded and loaded using the WWW class. You can use WWW.LoadFromCacheOrDownload to cache the downloaded scene after it has been downloaded. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.When downloading the built compressed file, you need to call WWW.assetBundle in order to make the scene available to the Application.LoadLevel() and Application.LoadLevelAdditive() functions.</remarks>
            <example>// Build a streamed unity3d file. This contain one scene that can be downloaded  // on demand and loaded once its asset bundle has been loaded. @MenuItem ("Build/BuildWebplayerStreamed")  static function MyBuild(){  var levels : String[] = ["Assets/Level1.unity"];  BuildPipeline.BuildStreamedSceneAssetBundle( levels, "Streamed-Level1.unity3d", BuildTarget.WebPlayer);  }  function Start () {  // Download compressed scene. If version 5 of the file named "Streamed-Level1.unity3d" was previously downloaded and cached.  // Then Unity will completely skip the download and load the decompressed scene directly from disk.  var download = WWW.LoadFromCacheOrDownload ("http://myWebSite.com/Streamed-Level1.unity3d", 5);  yield download;    // Handle error  if (download.error != null)  {   Debug.LogError(download.error);   return;  }    // In order to make the scene available from LoadLevel, we have to load the asset bundle.  // The AssetBundle class also lets you force unload all assets and file storage once it is no longer needed.  var bundle = download.assetBundle;    // Load the level we have just downloaded  Application.LoadLevel ("Level1");  }</example>
            <param name="levels">Pathnames of levels to include in the asset bundle.</param>
            <param name="locationPath">Pathname for the output asset bundle.</param>
            <param name="target">Runtime platform on which the asset bundle will be used.</param>
            <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
            <param name="options">Build options. See BuildOptions for possible values.</param>
        </member>
        <member name="P:UnityEditor.BuildPipeline.isBuildingPlayer">
            <summary>Is a player currently being built?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.PopAssetDependencies">
            <summary>Lets you manage cross-references and dependencies between different asset bundles and player builds.</summary>
            <remarks>If a asset bundle has dependencies to other asset bundles, it is your responsibility to make sure the dependent asset bundles are loaded through the WWW class. When you push asset dependencies it will share all resources on that layer, pushing recursively always inherits the previous dependencies. PushAssetDependencies and PopAssetDependencies must even each other out.See Also: PushAssetDependencies, BuildAssetBundle.</remarks>
        </member>
        <member name="M:UnityEditor.BuildPipeline.PushAssetDependencies">
            <summary>Lets you manage cross-references and dependencies between different asset bundles and player builds.</summary>
            <remarks>If a asset bundle has dependencies to other asset bundles, it is your responsibility to make sure the dependent asset bundles are loaded through the WWW class. When you push asset dependencies it will share all resources on that layer, pushing recursively always inherits the previous dependencies. PushAssetDependencies and PopAssetDependencies must even each other out.See Also: PopAssetDependencies, BuildAssetBundle.</remarks>
        </member>
        <member name="T:UnityEditor.BuildTarget">
            <summary>Target build platform.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.Android">
            <summary>Build an Android .apk standalone app.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.BB10">
            <summary>Build a BB10 app.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.FlashPlayer">
            <summary>Build content as an swf file for playback with Adobe Flash.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.iPhone">
            <summary>Build an iPhone player.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.MetroPlayer">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.NaCl">
            <summary>Build a Web Player with the Native Client runtime.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.PS3">
            <summary>Build a PS3 Standalone.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneGLESEmu">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneLinux">
            <summary>Build a Linux standalone.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneLinux64">
            <summary>Build a Linux 64-bit standalone.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneLinuxUniversal">
            <summary>Build a Linux universal standalone.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel">
            <summary>Build an OS X standalone (Intel only).</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel64">
            <summary>Build an OSX Intel 64-bit standalone.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneOSXUniversal">
            <summary>Build a universal OSX standalone.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneWindows">
            <summary>Build a Windows standalone.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.StandaloneWindows64">
            <summary>Build a Windows 64-bit standalone.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.Tizen">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildTarget.WebPlayer">
            <summary>Build a web player.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.WebPlayerStreamed">
            <summary>Build a streamed web player.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.Wii">
            <summary>Build a Wii standalone.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.WP8Player">
            <summary>Build a Windows Phone 8 player.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTarget.XBOX360">
            <summary>Build a XBox Standalone.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer.</remarks>
        </member>
        <member name="T:UnityEditor.BuildTargetGroup">
            <summary>Build target group.</summary>
            <remarks>See Also: BuildPipeline.BuildPlayer, BuildTarget.</remarks>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.Android">
            <summary>Android target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.BB10">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.FlashPlayer">
            <summary>Flash player target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.GLESEmu">
            <summary>GLESEmu target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.iPhone">
            <summary>Apple iOS target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.Metro">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.NaCl">
            <summary>Google/Chrome Native Client target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.PS3">
            <summary>Sony Playstation 3 target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.Standalone">
            <summary>Mac/PC standalone target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.Tizen">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.Unknown">
            <summary>Unknown target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.WebPlayer">
            <summary>Mac/PC webplayer target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.Wii">
            <summary>Nintendo Wii target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.WP8">
            <summary>Windows Phone 8 target.</summary>
        </member>
        <member name="F:UnityEditor.BuildTargetGroup.XBOX360">
            <summary>Microsoft XBOX360 target.</summary>
        </member>
        <member name="T:UnityEditor.CallbackOrderAttribute">
            <summary>Smaller m_CallbackOrder values will be called first.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.CallbackOrderAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.CallbackOrderAttribute.m_CallbackOrder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.CanEditMultipleObjects">
            <summary>Attribute used to make a custom editor support multi-object editing.</summary>
            <remarks>When multiple objects are selected, Editors that don't have this attribute will show the message "Multi-object editing not supported". See the Editor class documentation on how to make an Editor support multi-object editing. See Also: Editor class.</remarks>
        </member>
        <member name="C:UnityEditor.CanEditMultipleObjects">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ClipAnimationMaskType">
            <summary>AnimationClip mask options for ModelImporterClipAnimation.</summary>
            <remarks>Mask can be used to specify which transforms animation should be imported when generating the clip. See Also: ModelImporterClipAnimation.maskType.</remarks>
        </member>
        <member name="F:UnityEditor.ClipAnimationMaskType.CopyFromOther">
            <summary>Use a mask from your project to specify which transforms animation should be imported.</summary>
            <remarks>See Also: ModelImporterClipAnimation.maskType.</remarks>
        </member>
        <member name="F:UnityEditor.ClipAnimationMaskType.CreateFromThisModel">
            <summary>A mask containing all the transform in the file will be created internally.</summary>
            <remarks>For Humanoid rig, unity will convert all the transforms animation into muscle animation, these transforms cannot be edited in the mask. See Also: ModelImporterClipAnimation.maskType.</remarks>
        </member>
        <member name="T:UnityEditor.CustomEditor">
            <summary>Tells an Editor class which run-time type it's an editor for.</summary>
            <remarks>When you make a custom editor for a component, you need put this attribute on the editor class. See Also: Editor class.</remarks>
        </member>
        <member name="C:UnityEditor.CustomEditor(System.Type)">
            <param name="inspectedType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.CustomEditor(System.Type,System.Boolean)">
            <param name="inspectedType">To be added.</param>
            <param name="editorForChildClasses">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.CustomPropertyDrawer">
            <summary>Tells a custom PropertyDrawer which run-time Serializable class or PropertyAttribute it's a drawer for.</summary>
            <remarks>When you make a custom PropertyDrawer, you need put this attribute on the drawer class. If the drawer is for a Serializable class, then pass the type of the class to the CustomPropertyDrawer attribute. If the drawer is for a PropertyAttribute, then pass the type of the PropertyAttribute to the CustomPropertyDrawer attribute. See Also: PropertyDrawer class.</remarks>
        </member>
        <member name="C:UnityEditor.CustomPropertyDrawer(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.CustomPropertyDrawer(System.Type,System.Boolean)">
            <param name="type">To be added.</param>
            <param name="useForChildren">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.DragAndDrop">
            <summary>Editor drag &amp;amp; drop operations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.DragAndDrop">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.DragAndDrop.AcceptDrag">
            <summary>Accept a drag operation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.DragAndDrop.activeControlID">
            <summary>Get or set ID of currently active drag and drop control.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.DragAndDrop.GetGenericData(System.String)">
            <param name="type">To be added.</param>
            <summary>Get data associated with current drag and drop operation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.DragAndDrop.objectReferences">
            <summary>References to objects being dragged.</summary>
            <value>To be added.</value>
            <remarks>Never returns null. If no object references are available returns an empty array. See Also: paths, PrepareStartDrag, StartDrag.</remarks>
        </member>
        <member name="P:UnityEditor.DragAndDrop.paths">
            <summary>The file names being dragged.</summary>
            <value>To be added.</value>
            <remarks>Never returns null. If no paths are available returns an empty array. See Also: objectReferences, PrepareStartDrag, StartDrag.</remarks>
        </member>
        <member name="M:UnityEditor.DragAndDrop.PrepareStartDrag">
            <summary>Clears drag &amp;amp; drop data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.DragAndDrop.SetGenericData(System.String,System.Object)">
            <param name="type">To be added.</param>
            <param name="data">To be added.</param>
            <summary>Set data associated with current drag and drop operation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.DragAndDrop.StartDrag(System.String)">
            <param name="title">To be added.</param>
            <summary>Start a drag operation.</summary>
            <remarks>Initiates a drag operation with the current drag object state. Use paths and/or objectReferences to setup drag state. See Also: PrepareStartDrag, paths, objectReferences.</remarks>
        </member>
        <member name="P:UnityEditor.DragAndDrop.visualMode">
            <summary>The visual indication of the drag.</summary>
            <value>To be added.</value>
            <remarks>Default is DragAndDropVisualMode.Link.</remarks>
        </member>
        <member name="T:UnityEditor.DragAndDropVisualMode">
            <summary>Visual indication mode for Drag &amp;amp; Drop operation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.DragAndDropVisualMode.Copy">
            <summary>Copy dragged objects.</summary>
            <remarks>See Also: DragAndDrop class.</remarks>
        </member>
        <member name="F:UnityEditor.DragAndDropVisualMode.Generic">
            <summary>Generic drag operation.</summary>
            <remarks>See Also: DragAndDrop class.</remarks>
        </member>
        <member name="F:UnityEditor.DragAndDropVisualMode.Link">
            <summary>Link dragged objects to target.</summary>
            <remarks>See Also: DragAndDrop class.</remarks>
        </member>
        <member name="F:UnityEditor.DragAndDropVisualMode.Move">
            <summary>Move dragged objects.</summary>
            <remarks>See Also: DragAndDrop class.</remarks>
        </member>
        <member name="F:UnityEditor.DragAndDropVisualMode.None">
            <summary>No indication (drag should not be performed).</summary>
            <remarks>See Also: DragAndDrop class.</remarks>
        </member>
        <member name="F:UnityEditor.DragAndDropVisualMode.Rejected">
            <summary>Rejected drag operation.</summary>
            <remarks>See Also: DragAndDrop class.</remarks>
        </member>
        <member name="T:UnityEditor.DrawCameraMode">
            <summary>Drawing modes for Handles.DrawCamera.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.DrawCameraMode.LightmapResolution">
            <summary>Draw textured with overlaid lightmap resolution grid.</summary>
        </member>
        <member name="F:UnityEditor.DrawCameraMode.Normal">
            <summary>Draw the camera like it would be drawn in-game. This uses the clear flags of the camera.</summary>
        </member>
        <member name="F:UnityEditor.DrawCameraMode.RenderPaths">
            <summary>Draw color-coded render paths. Objects are colored Green for Deferred, Yellow for Forward and Red for VertexLit.</summary>
        </member>
        <member name="F:UnityEditor.DrawCameraMode.Textured">
            <summary>Draw the camera textured with selection wireframe and no background clearing.</summary>
        </member>
        <member name="F:UnityEditor.DrawCameraMode.TexturedWire">
            <summary>Draw the camera where all objects have a wireframe overlay. and no background clearing.</summary>
        </member>
        <member name="F:UnityEditor.DrawCameraMode.Wireframe">
            <summary>Draw the camera in wireframe and no background clearing.</summary>
        </member>
        <member name="T:UnityEditor.DrawGizmo">
            <summary>The DrawGizmo attribute allows you to supply a gizmo renderer for any Component.</summary>
            <remarks>At the moment you can only supply gizmo drawers for engine-components. All gizmo drawing methods need to be static.</remarks>
        </member>
        <member name="C:UnityEditor.DrawGizmo(UnityEditor.GizmoType)">
            <param name="gizmo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.DrawGizmo(UnityEditor.GizmoType,System.Type)">
            <param name="gizmo">To be added.</param>
            <param name="drawnGizmoType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.DrawGizmo.drawnType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.DrawGizmo.drawOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Editor">
            <summary>Base class to derive custom Editors from. Use this to create your own custom inspectors and editors for your objects.</summary>
            <remarks>Consider a script MyPlayer with variables for armor, damage, and a reference to a gun GameObject:Using a custom Editor, the apperance of the script in the Inspector can be changed, for example to look like this:Alternatively, if automatic handling of multi-object editing, undo, and prefab overrides is not needed, the script variables can be modified directly by the editor without using the SerializedObject and SerializedProperty system, as in the example below.</remarks>
        </member>
        <member name="C:UnityEditor.Editor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Make a custom editor for obj or objects.</summary>
            <returns>To be added.</returns>
            <remarks>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Returns NULL if obj doesn't have a custom editor class defined. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.And the script attached to a waypath GameObject:</remarks>
        </member>
        <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[])">
            <param name="objects">To be added.</param>
            <summary>Make a custom editor for obj or objects.</summary>
            <returns>To be added.</returns>
            <remarks>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Returns NULL if obj doesn't have a custom editor class defined. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.And the script attached to a waypath GameObject:</remarks>
        </member>
        <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object,System.Type)">
            <param name="obj">To be added.</param>
            <param name="editorType">To be added.</param>
            <summary>Make a custom editor for obj or objects.</summary>
            <returns>To be added.</returns>
            <remarks>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Returns NULL if obj doesn't have a custom editor class defined. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.And the script attached to a waypath GameObject:</remarks>
        </member>
        <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[],System.Type)">
            <param name="objects">To be added.</param>
            <param name="editorType">To be added.</param>
            <summary>Make a custom editor for obj or objects.</summary>
            <returns>To be added.</returns>
            <remarks>By default an appropriate editor is chosen that has a matching CustomEditor attribute. If an editorType is specified, an editor of that type is created instead. Returns NULL if obj doesn't have a custom editor class defined. Consider a script WaypointPathEditor for editing the Transforms of a wayPoint array.And the script attached to a waypath GameObject:</remarks>
        </member>
        <member name="M:UnityEditor.Editor.DrawDefaultInspector">
            <summary>Draw the built-in inspector.</summary>
            <returns>To be added.</returns>
            <remarks>Call this function from inside OnInspectorGUI method to draw the automatic inspector. It is useful you don't want to redo the entire inspector, but you want to add a few buttons to it. See Also: OnInspectorGUI.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.DrawHeader">
            <summary>Call this function to draw the header of the editor.</summary>
            <remarks>This function is relevant if you are creating and managing your own Editor objects. See Also: Editor.CreateEditor.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.DrawPropertiesExcluding(UnityEditor.SerializedObject,System.String[])">
            <param name="obj">To be added.</param>
            <param name="propertyToExclude">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.GetInfoString">
            <summary>Implement this method to show asset information on top of the asset preview.</summary>
            <returns>To be added.</returns>
            <remarks>You will also have to implement HasPreviewGUI and OnPreviewGUI in addition to this method. The default implementation just returns an empty string, which disables the feature. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.GetPreviewTitle">
            <summary>Override this method if you want to change the label of the Preview area.</summary>
            <returns>To be added.</returns>
            <remarks>If null is returned the default text "Preview" will be used. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.HasPreviewGUI">
            <summary>Override this method in subclasses if you implement OnPreviewGUI.</summary>
            <returns>To be added.</returns>
            <remarks>You can also use it to disable or enable preview depending on the target asset. The default implementation simply returns false, so if you override OnPreviewGUI you have to override this method as well. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.OnHeaderGUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.OnInspectorGUI">
            <summary>Implement this function to make a custom inspector.</summary>
            <remarks>Inside this function you can add your own custom GUI for the inspector of a specific object class. Note: This function has to be overrided in order to work. Check the example: See Also: Editor.DrawDefaultInspector.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <summary>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</summary>
            <remarks>Implement this instead of OnPreviewGUI if you only want to display interactive custom previews (you can implement both if some previews are interactive and others aren't). The overidden method should use the rectangle passed in and render a preview of the asset into it. The default implementation is a no-op. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</remarks>
            <param name="r">Rectangle in which to draw the preview.</param>
            <param name="background">Background image.</param>
        </member>
        <member name="M:UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <summary>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</summary>
            <remarks>If you implement OnInteractivePreviewGUI then this will only be called for non-interactive custom previews. The overidden method should use the rectangle passed in and render a preview of the asset into it. The default implementation is a no-op. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.See Also: OnInteractivePreviewGUI.</remarks>
            <param name="r">Rectangle in which to draw the preview.</param>
            <param name="background">Background image.</param>
        </member>
        <member name="M:UnityEditor.Editor.OnPreviewSettings">
            <summary>Override this method if you want to show custom controls in the preview header.</summary>
            <remarks>The default implementation is a no-op. Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector. This means that it is currently not possible for a component to have its own inspector preview.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)">
            <param name="assetPath">To be added.</param>
            <param name="subAssets">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Override this method if you want to render a static preview that shows.</summary>
            <returns>To be added.</returns>
            <remarks>If null is returned the builtin icon for the class type is used.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.Repaint">
            <summary>Repaint any inspectors that shows this editor.</summary>
            <remarks>Useful when you want to make sure the inspector updates to show changes made in OnSceneGUI.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.RequiresConstantRepaint">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Editor.serializedObject">
            <summary>A SerializedObject representing the object or objects being inspected.</summary>
            <value>To be added.</value>
            <remarks>The serializedObject can be used inside the OnInspectorGUI function of a custom Editor as described on the page about the Editor class. The serializedObject should not be used inside OnSceneGUI or OnPreviewGUI. Use the target property directly in those callback functions instead. See Also: Editor class, SerializedObject class.</remarks>
        </member>
        <member name="P:UnityEditor.Editor.target">
            <summary>The object being inspected.</summary>
            <value>To be added.</value>
            <remarks>For editors that support multi-object editing, the target property should not be used inside OnInspectorGUI since it only refers to the first of the edited objects. It should still be used in OnSceneGUI and OnPreviewGUI, which will be called once for each of the selected objects with the target property referring to each of them in turn. See Also: targets, serializedObject, Editor class.</remarks>
        </member>
        <member name="P:UnityEditor.Editor.targets">
            <summary>An array of all the object being inspected.</summary>
            <value>To be added.</value>
            <remarks>For editors that support multi-object editing, the targets property can be used in OnInspectorGUI, but usually it is better to handle things through the serializedObject instead as described on the page about the Editor class. See Also: serializedObject, Editor class.</remarks>
        </member>
        <member name="M:UnityEditor.Editor.UseDefaultMargins">
            <summary>Override this method in subclasses to return false if you don't want default margins.</summary>
            <returns>To be added.</returns>
            <remarks>By default, content in the Inspector has a large left margin and a small right margin. This is because the entire Editor.OnInspectorGUI callback is wrapped in a vertical group with the EditorStyles.inspectorDefaultMargins style. For a consistent look, these default margins should be used for most GUI with regular controls. However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the Editor.UseDefaultMargins method in your custom Editor and make it return false. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the EditorStyles.inspectorFullWidthMargins style and wrap other parts of the GUI inside a vertical group with the EditorStyles.inspectorDefaultMargins style. See Also: EditorGUILayout.BeginVertical, EditorGUILayout.EndVertical, EditorStyles.inspectorDefaultMargins, EditorStyles.inspectorFullWidthMargins.</remarks>
        </member>
        <member name="T:UnityEditor.EditorApplication">
            <summary>Main Application class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorApplication">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.applicationContentsPath">
            <summary>Path to the Unity editor contents folder. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The contents folder contains several items internally required by the editor for building players. See Also: applicationPath.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.applicationPath">
            <summary>Returns the path to the Unity editor application. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: applicationContentsPath.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.Beep">
            <summary>Plays system beep sound.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.currentScene">
            <summary>The path of the scene that the user has currently open (Will be an empty string if no scene is currently open). (Read Only)</summary>
            <value>To be added.</value>
            <remarks>All paths are relative to the project folder. Like: "Assets MyScenes MyScene.unity".</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.delayCall">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.ExecuteMenuItem(System.String)">
            <param name="menuItemPath">To be added.</param>
            <summary>Invokes the menu item in the specified path.</summary>
            <returns>To be added.</returns>
            <remarks>This function also works with Editor Scripts.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.Exit(System.Int32)">
            <param name="returnValue">To be added.</param>
            <summary>Exit the Unity editor application.</summary>
            <remarks>Calling this function will exit right away, without asking to save changes, so you may lose data! This function is mostly useful for exiting out of a commandline process with a specific error. See Also: Commandline Arguments.</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.hierarchyWindowChanged">
            <summary>Each time an object is (or a group of objects are) created, renamed, parented, unparented or destroyed this callback is raised.</summary>
            <remarks>See Also: EditorWindow.OnHierarchyChange.</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.hierarchyWindowItemOnGUI">
            <summary>Delegate for OnGUI events for every visible list item in the HierarchyWindow.</summary>
            <remarks>See Also: EditorApplication.HierarchyWindowItemCallback, EditorApplication.RepaintHierarchyWindow.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.isCompiling">
            <summary>Is editor currently compiling scripts? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.isPaused">
            <summary>Is editor currently paused?</summary>
            <value>To be added.</value>
            <remarks>Lets you change pause state programmatically, like pressing the Pause button in the main toolbar. See Also: isPlaying.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.isPlaying">
            <summary>Is editor currently in play mode?</summary>
            <value>To be added.</value>
            <remarks>Setting isPlaying delays the result until after all script code has completed for this frame. See Also: isPaused, isPlayingOrWillChangePlaymode.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.isPlayingOrWillChangePlaymode">
            <summary>Is editor either currently in play mode, or about to switch to it? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This will return true when editor will switch to play mode after finishing some tasks (e.g. after scripts will be recompiled). See Also: isPlaying, isCompiling.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.isUpdating">
            <summary>Is editor currently updating? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.LockReloadAssemblies">
            <summary>Prevents loading of assemblies when it is inconvenient.</summary>
            <remarks>For example during drag operations you might want to prevent assembly reloading to not lose state during the drag. Each LockReloadAssemblies must be matched by UnlockReloadAssemblies, otherwise scripts will never unload. Unity automatically prevents reloading during mouse down. See Also: EditorApplication.UnlockReloadAssemblies.</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.modifierKeysChanged">
            <summary>Delegate for changed keyboard modifier keys.</summary>
            <remarks>Add your functions to this delegate to get a callback whenever the keyboard modifier keys have changed. See Also: EditorApplication.CallbackFunction.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.NewScene">
            <summary>Create a new scene.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.OpenProject(System.String,System.String[])">
            <summary>Open another project.</summary>
            <remarks>Note that this function will not exit immediately. It will open another project after executing function returns.</remarks>
            <param name="projectPath">The path of a project to open.</param>
            <param name="args">Arguments to pass to command line.</param>
        </member>
        <member name="M:UnityEditor.EditorApplication.OpenScene(System.String)">
            <param name="path">To be added.</param>
            <summary>Opens the scene at path.</summary>
            <returns>To be added.</returns>
            <remarks>The scene that is currently open will not be saved, use SaveSceneIfUserWantsTo for that. All paths are relative to the project folder. Like: "Assets MyScenes MyScene.unity".</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.OpenSceneAdditive(System.String)">
            <param name="path">To be added.</param>
            <summary>Opens the scene at path additively.</summary>
            <remarks>All paths are relative to the project folder. Like: "Assets MyScenes MyScene.unity".</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.playmodeStateChanged">
            <summary>Delegate for play mode state changes.</summary>
            <remarks>Add your functions to this delegate to get a callback whenever the playmode state changes (enter/exit play mode, pause). See Also: EditorApplication.CallbackFunction.</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.projectWindowChanged">
            <summary>Callback raised whenever the state of the Project window changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.projectWindowItemOnGUI">
            <summary>Delegate for OnGUI events for every visible list item in the ProjectWindow.</summary>
            <remarks>See Also: EditorApplication.ProjectWindowItemCallback, EditorApplication.RepaintProjectWindow.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.RepaintAnimationWindow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.RepaintHierarchyWindow">
            <summary>Can be used to ensure repaint of the HierarchyWindow.</summary>
            <remarks>See Also: EditorApplication.HierarchyWindowItemCallback, EditorApplication.hierarchyWindowItemOnGUI.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.RepaintProjectWindow">
            <summary>Can be used to ensure repaint of the ProjectWindow.</summary>
            <remarks>See Also: EditorApplication.ProjectWindowItemCallback, EditorApplication.projectWindowItemOnGUI.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.SaveAssets">
            <summary>Saves all serializable assets that have not yet been written to disk (eg. Materials).</summary>
            <remarks>Also makes sure the asset database is written.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.SaveCurrentSceneIfUserWantsTo">
            <summary>Ask the user if he wants to save the open scene.</summary>
            <returns>To be added.</returns>
            <remarks>You might want to call this before opening another scene or creating a new scene. A return value of true indicates that you may continue. A return value of false indicates that the user cancelled the operation and you should not Open another Scene.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.SaveScene">
            <summary>Save the open scene.</summary>
            <returns>True if the save succeeded, otherwise false.</returns>
            <remarks>All paths are relative to the project folder, such as: "Assets MyScenes MyScene.unity". Folders specified in the path must already exist before calling the function. If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown. The function returns false if the save failed. This can happen if the specified path is invalid or if the user cancels in the case of a save dialog. When calling the function, the unsaved changes marker is cleared, just as when saving using the file menu. (On Windows, the unsaved changes marker is an asterix after the file name in the window title. On Mac OS X it's a dot inside the red close button of the window.) When a path is specified, the currentScene is also changed to be the specified asset. When saveAsCopy is set to true however, neither the currentScene or the unsaved changes marker is changed. See Also: currentScene.</remarks>
            <example>// Simple editor window that autosaves the working scene  // Make sure to have this window opened to be able to execute the auto save.   import UnityEditor;   class SimpleAutoSave extends EditorWindow {    var saveTime : float = 300;  var nextSave : float = 0;    @MenuItem("Example/Simple autoSave")  static function Init() {   var window : SimpleAutoSave =    EditorWindow.GetWindowWithRect(    SimpleAutoSave,    Rect(0,0,165,40));   window.Show();  }  function OnGUI() {   EditorGUILayout.LabelField("Save Each:", saveTime + " Secs");   var timeToSave : int = nextSave - EditorApplication.timeSinceStartup;   EditorGUILayout.LabelField("Next Save:", timeToSave.ToString() + " Sec");   this.Repaint();      if(EditorApplication.timeSinceStartup &amp;gt; nextSave) {   var path : String [] = EditorApplication.currentScene.Split(char.Parse("/"));   path[path.Length -1] = "AutoSave_" + path[path.Length-1];    EditorApplication.SaveScene(String.Join("/",path), true);   Debug.Log("Saved Scene");   nextSave = EditorApplication.timeSinceStartup + saveTime;   }  }  }</example>
        </member>
        <member name="M:UnityEditor.EditorApplication.SaveScene(System.String)">
            <summary>Save the open scene.</summary>
            <returns>True if the save succeeded, otherwise false.</returns>
            <remarks>All paths are relative to the project folder, such as: "Assets MyScenes MyScene.unity". Folders specified in the path must already exist before calling the function. If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown. The function returns false if the save failed. This can happen if the specified path is invalid or if the user cancels in the case of a save dialog. When calling the function, the unsaved changes marker is cleared, just as when saving using the file menu. (On Windows, the unsaved changes marker is an asterix after the file name in the window title. On Mac OS X it's a dot inside the red close button of the window.) When a path is specified, the currentScene is also changed to be the specified asset. When saveAsCopy is set to true however, neither the currentScene or the unsaved changes marker is changed. See Also: currentScene.</remarks>
            <example>// Simple editor window that autosaves the working scene  // Make sure to have this window opened to be able to execute the auto save.   import UnityEditor;   class SimpleAutoSave extends EditorWindow {    var saveTime : float = 300;  var nextSave : float = 0;    @MenuItem("Example/Simple autoSave")  static function Init() {   var window : SimpleAutoSave =    EditorWindow.GetWindowWithRect(    SimpleAutoSave,    Rect(0,0,165,40));   window.Show();  }  function OnGUI() {   EditorGUILayout.LabelField("Save Each:", saveTime + " Secs");   var timeToSave : int = nextSave - EditorApplication.timeSinceStartup;   EditorGUILayout.LabelField("Next Save:", timeToSave.ToString() + " Sec");   this.Repaint();      if(EditorApplication.timeSinceStartup &amp;gt; nextSave) {   var path : String [] = EditorApplication.currentScene.Split(char.Parse("/"));   path[path.Length -1] = "AutoSave_" + path[path.Length-1];    EditorApplication.SaveScene(String.Join("/",path), true);   Debug.Log("Saved Scene");   nextSave = EditorApplication.timeSinceStartup + saveTime;   }  }  }</example>
            <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
        </member>
        <member name="M:UnityEditor.EditorApplication.SaveScene(System.String,System.Boolean)">
            <summary>Save the open scene.</summary>
            <returns>True if the save succeeded, otherwise false.</returns>
            <remarks>All paths are relative to the project folder, such as: "Assets MyScenes MyScene.unity". Folders specified in the path must already exist before calling the function. If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown. The function returns false if the save failed. This can happen if the specified path is invalid or if the user cancels in the case of a save dialog. When calling the function, the unsaved changes marker is cleared, just as when saving using the file menu. (On Windows, the unsaved changes marker is an asterix after the file name in the window title. On Mac OS X it's a dot inside the red close button of the window.) When a path is specified, the currentScene is also changed to be the specified asset. When saveAsCopy is set to true however, neither the currentScene or the unsaved changes marker is changed. See Also: currentScene.</remarks>
            <example>// Simple editor window that autosaves the working scene  // Make sure to have this window opened to be able to execute the auto save.   import UnityEditor;   class SimpleAutoSave extends EditorWindow {    var saveTime : float = 300;  var nextSave : float = 0;    @MenuItem("Example/Simple autoSave")  static function Init() {   var window : SimpleAutoSave =    EditorWindow.GetWindowWithRect(    SimpleAutoSave,    Rect(0,0,165,40));   window.Show();  }  function OnGUI() {   EditorGUILayout.LabelField("Save Each:", saveTime + " Secs");   var timeToSave : int = nextSave - EditorApplication.timeSinceStartup;   EditorGUILayout.LabelField("Next Save:", timeToSave.ToString() + " Sec");   this.Repaint();      if(EditorApplication.timeSinceStartup &amp;gt; nextSave) {   var path : String [] = EditorApplication.currentScene.Split(char.Parse("/"));   path[path.Length -1] = "AutoSave_" + path[path.Length-1];    EditorApplication.SaveScene(String.Join("/",path), true);   Debug.Log("Saved Scene");   nextSave = EditorApplication.timeSinceStartup + saveTime;   }  }  }</example>
            <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
            <param name="saveAsCopy">If set to true, the scene will be saved without changing the currentScene and without clearing the unsaved changes marker.</param>
        </member>
        <member name="F:UnityEditor.EditorApplication.searchChanged">
            <summary>Callback raised whenever the contents of a window's search box are changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.Step">
            <summary>Perform a single frame step.</summary>
            <remarks>As if you pressed the Step button in the main toolbar.</remarks>
        </member>
        <member name="P:UnityEditor.EditorApplication.timeSinceStartup">
            <summary>The time since the editor was started. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This property contains the time since the editor was started, in seconds.  Unlike Time.realtimeSinceStartup, this is not reset when starting play mode. See Also: Time.realtimeSinceStartup</remarks>
        </member>
        <member name="M:UnityEditor.EditorApplication.UnlockReloadAssemblies">
            <summary>Must be called after LockReloadAssemblies, to reenable loading of assemblies.</summary>
            <remarks>See Also: EditorApplication.LockReloadAssemblies.</remarks>
        </member>
        <member name="F:UnityEditor.EditorApplication.update">
            <summary>Delegate for generic updates.</summary>
            <remarks>Add your functions to this delegate to get an update callback at approximately 100 times per second. See Also: EditorApplication.CallbackFunction.</remarks>
        </member>
        <member name="T:UnityEditor.EditorApplication+CallbackFunction">
            <summary>Delegate to be called from EditorApplication callbacks.</summary>
            <remarks>CallbackFunction is used by EditorApplication.update, EditorApplication.modifierKeysChanged, EditorApplication.playmodeStateChanged, and EditorApplication.hierarchyWindowChanged.</remarks>
        </member>
        <member name="T:UnityEditor.EditorApplication+HierarchyWindowItemCallback">
            <param name="instanceID">To be added.</param>
            <param name="selectionRect">To be added.</param>
            <summary>Delegate to be called for every visible list item in the HierarchyWindow on every OnGUI event.</summary>
            <remarks>See Also: EditorApplication.hierarchyWindowItemOnGUI.</remarks>
        </member>
        <member name="T:UnityEditor.EditorApplication+ProjectWindowItemCallback">
            <param name="guid">To be added.</param>
            <param name="selectionRect">To be added.</param>
            <summary>Delegate to be called for every visible list item in the ProjectWindow on every OnGUI event.</summary>
            <remarks>See Also: EditorApplication.projectWindowItemOnGUI.</remarks>
        </member>
        <member name="T:UnityEditor.EditorBehaviorMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorBehaviorMode.Mode2D">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.EditorBehaviorMode.Mode3D">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.EditorBuildSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorBuildSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorBuildSettings.scenes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorBuildSettingsScene">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorBuildSettingsScene">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorBuildSettingsScene(System.String,System.Boolean)">
            <param name="path">To be added.</param>
            <param name="enable">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorBuildSettingsScene.CompareTo(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorBuildSettingsScene.enabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorBuildSettingsScene.path">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorCurveBinding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorCurveBinding.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorCurveBinding.FloatCurve(System.String,System.Type,System.String)">
            <param name="inPath">To be added.</param>
            <param name="inType">To be added.</param>
            <param name="inPropertyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorCurveBinding.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorCurveBinding.isPPtrCurve">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorCurveBinding.op_Equality(UnityEditor.EditorCurveBinding,UnityEditor.EditorCurveBinding)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorCurveBinding.op_Inequality(UnityEditor.EditorCurveBinding,UnityEditor.EditorCurveBinding)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorCurveBinding.path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorCurveBinding.PPtrCurve(System.String,System.Type,System.String)">
            <param name="inPath">To be added.</param>
            <param name="inType">To be added.</param>
            <param name="inPropertyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorCurveBinding.propertyName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorCurveBinding.type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorGUI">
            <summary>These work pretty much like the normal GUI functions - and also have matching implementations in EditorGUILayout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorGUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUI.actionKey">
            <summary>Is the platform-dependent "action" modifier key held down? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The key is Command on Mac OS X, Control on Windows.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.BeginChangeCheck">
            <summary>Check if any control was changed inside a block of code.</summary>
            <remarks>When needing to check if GUI.changed is set to true inside a block of code, wrap the code inside BeginChangeCheck () and EndChangeCheck () like this:EndChangeCheck will only return true if GUI.changed was set to true inside the block, but GUI.changed will be true afterwards both if it was set to true inside and if it was already true to begin with.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.BeginDisabledGroup(System.Boolean)">
            <summary>Create a group of controls that can be disabled.</summary>
            <remarks>If disabled is true, the controls inside the group will be disabled. If false, the enabled/disabled state will not be changed.The group cannot be used to enable controls that would otherwise be disabled to begin with. The groups can be nested and the controls within a child group will be disabled both if that child group is itself disabled or if a parent group is.</remarks>
            <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.BeginProperty(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
            <summary>Create a Property wrapper, useful for making regular GUI controls work with SerializedProperty.</summary>
            <returns>The actual label to use for the control.</returns>
            <remarks>Most EditorGUI and EditorGUILayout GUI controls already have overloads that work with SerializedProperty. However, for GUI controls that don't handle SerializedProperty you can wrap them inside BeginProperty and EndProperty as shown in the example below. You can use this for your own custom GUI controls too. BeginProperty and EndProperty automatically handle default labels, bold font for prefab overrides, revert to prefab right click menu, and setting showMixedValue to true if the values of the property are different when multi-object editing.See Also: EndProperty.</remarks>
            <example>// A slider function that takes a SerializedProperty  function Slider (position : Rect, property : SerializedProperty, leftValue : float, rightValue : float, label : GUIContent) {  label = EditorGUI.BeginProperty (position, label, property);    EditorGUI.BeginChangeCheck ();  var newValue = EditorGUI.Slider (position, label, property.floatValue, leftValue, rightValue);  // Only assign the value back if it was actually changed by the user.  // Otherwise a single value will be assigned to all objects when multi-object editing,  // even when the user didn't touch the control.  if (EditorGUI.EndChangeCheck ())   property.floatValue = newValue;    EditorGUI.EndProperty ();  }</example>
            <param name="totalPosition">Rectangle on the screen to use for the control, including label if applicable.</param>
            <param name="label">Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.</param>
            <param name="property">The SerializedProperty to use for the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.Bounds)">
            <summary>Make Center &amp;amp; Extents field for entering a Bounds.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple script that shows radius of bounds of selected MeshFilter class EditorGUILayoutBoundsField extends EditorWindow { var radius : float = 0;  var bounds : Bounds; @MenuItem("Examples/Show Radius of mesh bounds")  static function Init() {   var window = GetWindow(EditorGUILayoutBoundsField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select a mesh in the Hierarchy view and click 'Capture Bounds'");   EditorGUILayout.BeginHorizontal();   bounds = EditorGUILayout.BoundsField("Mesh bounds:", bounds);   if(GUILayout.Button("Capture Bounds") &amp;amp;&amp;amp; Selection.activeTransform)   {    var meshFilter : MeshFilter = Selection.activeTransform.GetComponentInChildren(MeshFilter);    if (meshFilter)    bounds = meshFilter.sharedMesh.bounds;   }   EditorGUILayout.EndHorizontal();     EditorGUILayout.LabelField("Radius:", bounds.size.magnitude.ToString());   if(GUILayout.Button("Close"))   this.Close();   }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Bounds)">
            <summary>Make Center &amp;amp; Extents field for entering a Bounds.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple script that shows radius of bounds of selected MeshFilter class EditorGUILayoutBoundsField extends EditorWindow { var radius : float = 0;  var bounds : Bounds; @MenuItem("Examples/Show Radius of mesh bounds")  static function Init() {   var window = GetWindow(EditorGUILayoutBoundsField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select a mesh in the Hierarchy view and click 'Capture Bounds'");   EditorGUILayout.BeginHorizontal();   bounds = EditorGUILayout.BoundsField("Mesh bounds:", bounds);   if(GUILayout.Button("Capture Bounds") &amp;amp;&amp;amp; Selection.activeTransform)   {    var meshFilter : MeshFilter = Selection.activeTransform.GetComponentInChildren(MeshFilter);    if (meshFilter)    bounds = meshFilter.sharedMesh.bounds;   }   EditorGUILayout.EndHorizontal();     EditorGUILayout.LabelField("Radius:", bounds.size.magnitude.ToString());   if(GUILayout.Button("Close"))   this.Close();   }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.Color)">
            <summary>Make a field for selecting a Color.</summary>
            <returns>The color selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change The color of the selected GameObjects   class EditorGUIColorField extends EditorWindow {    var matColor : Color = Color.white;  @MenuItem("Examples/Massive Color Change")  static function Init() {   var window = GetWindow(EditorGUIColorField);   window.position = Rect(0,0,170,60);   window.Show();  }  function OnGUI() {   matColor = EditorGUI.ColorField(Rect(3,3,position.width - 6, 15),    "New Color:",    matColor);   if(GUI.Button(Rect(3,25,position.width-6, 30),"Change!"))   ChangeColors();  }     function ChangeColors() {   if(Selection.activeGameObject)   for(var t in Selection.gameObjects)    if(t.renderer)    t.renderer.sharedMaterial.color = matColor;  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="value">The color to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,System.String,UnityEngine.Color)">
            <summary>Make a field for selecting a Color.</summary>
            <returns>The color selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change The color of the selected GameObjects   class EditorGUIColorField extends EditorWindow {    var matColor : Color = Color.white;  @MenuItem("Examples/Massive Color Change")  static function Init() {   var window = GetWindow(EditorGUIColorField);   window.position = Rect(0,0,170,60);   window.Show();  }  function OnGUI() {   matColor = EditorGUI.ColorField(Rect(3,3,position.width - 6, 15),    "New Color:",    matColor);   if(GUI.Button(Rect(3,25,position.width-6, 30),"Change!"))   ChangeColors();  }     function ChangeColors() {   if(Selection.activeGameObject)   for(var t in Selection.gameObjects)    if(t.renderer)    t.renderer.sharedMaterial.color = matColor;  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The color to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color)">
            <summary>Make a field for selecting a Color.</summary>
            <returns>The color selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change The color of the selected GameObjects   class EditorGUIColorField extends EditorWindow {    var matColor : Color = Color.white;  @MenuItem("Examples/Massive Color Change")  static function Init() {   var window = GetWindow(EditorGUIColorField);   window.position = Rect(0,0,170,60);   window.Show();  }  function OnGUI() {   matColor = EditorGUI.ColorField(Rect(3,3,position.width - 6, 15),    "New Color:",    matColor);   if(GUI.Button(Rect(3,25,position.width-6, 30),"Change!"))   ChangeColors();  }     function ChangeColors() {   if(Selection.activeGameObject)   for(var t in Selection.gameObjects)    if(t.renderer)    t.renderer.sharedMaterial.color = matColor;  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The color to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="value">The curve to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <remarks>To be added.</remarks>
            <returns>The curve edited by the user.</returns>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class EditorGUICurveField extends EditorWindow {    var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);    @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(EditorGUICurveField);   window.position = Rect(0,0,200,100);   window.Show();  }    function OnGUI() {   curveX = EditorGUI.CurveField(   Rect(3,3,position.width-6,15),   "Animation on X", curveX);   curveY = EditorGUI.CurveField(   Rect(3,20,position.width-6,15),   "Animation on Y", curveY);   curveZ = EditorGUI.CurveField(   Rect(3,45,position.width-6,15),   "Animation on Z", curveZ);     if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);    comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // FollowAnimationCurve.js  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DoPasswordField(System.Int32,UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <param name="id">To be added.</param>
            <param name="position">To be added.</param>
            <param name="password">To be added.</param>
            <param name="style">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.DoPasswordField(System.Int32,UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
            <param name="id">To be added.</param>
            <param name="position">To be added.</param>
            <param name="label">To be added.</param>
            <param name="password">To be added.</param>
            <param name="style">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Draws the texture within a rectangle.</summary>
            <remarks>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
            <summary>Draws the texture within a rectangle.</summary>
            <remarks>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="mat">Material to be used when drawing the texture.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode)">
            <summary>Draws the texture within a rectangle.</summary>
            <remarks>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="mat">Material to be used when drawing the texture.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode,System.Single)">
            <summary>Draws the texture within a rectangle.</summary>
            <remarks>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map and the fallback blit material will be chosen otherwise.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="mat">Material to be used when drawing the texture.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
            <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawRect(UnityEngine.Rect,UnityEngine.Color)">
            <param name="rect">To be added.</param>
            <param name="color">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Draws the alpha channel of a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
            <summary>Draws the alpha channel of a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)">
            <summary>Draws the alpha channel of a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
            <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawTextureTransparent(UnityEngine.Rect,UnityEngine.Texture)">
            <param name="position">To be added.</param>
            <param name="image">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawTextureTransparent(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
            <param name="position">To be added.</param>
            <param name="image">To be added.</param>
            <param name="scaleMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.DrawTextureTransparent(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)">
            <param name="position">To be added.</param>
            <param name="image">To be added.</param>
            <param name="scaleMode">To be added.</param>
            <param name="imageAspect">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String)">
            <param name="text">To be added.</param>
            <summary>Draws a label with a drop shadow.</summary>
            <remarks>Not superfast, so use with caution.</remarks>
            <param name="position">Where to show the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Draws a label with a drop shadow.</summary>
            <remarks>Not superfast, so use with caution.</remarks>
            <param name="position">Where to show the label.</param>
            <param name="content">Text to show @style style to use.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <param name="text">To be added.</param>
            <param name="style">To be added.</param>
            <summary>Draws a label with a drop shadow.</summary>
            <remarks>Not superfast, so use with caution.</remarks>
            <param name="position">Where to show the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <param name="style">To be added.</param>
            <summary>Draws a label with a drop shadow.</summary>
            <remarks>Not superfast, so use with caution.</remarks>
            <param name="position">Where to show the label.</param>
            <param name="content">Text to show @style style to use.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EndChangeCheck">
            <summary>Ends a change check started with BeginChangeCheck ().</summary>
            <returns>True if GUI.changed was set to true, otherwise false.</returns>
            <remarks>See Also: BeginChangeCheck.</remarks>
            <example />
        </member>
        <member name="M:UnityEditor.EditorGUI.EndDisabledGroup">
            <summary>Ends a disabled group started with BeginDisabledGroup.</summary>
            <remarks>See Also: BeginDisabledGroup.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.EndProperty">
            <summary>Ends a Property wrapper started with BeginProperty.</summary>
            <remarks>See Also: BeginProperty.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum)">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUI.EnumMaskField ( new Rect (0, 0, 300, 20), "Static Flags", staticFlagMask );  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="enumValue">Enum to use for the flags.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUI.EnumMaskField ( new Rect (0, 0, 300, 20), "Static Flags", staticFlagMask );  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum)">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUI.EnumMaskField ( new Rect (0, 0, 300, 20), "Static Flags", staticFlagMask );  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Caption/label for the control.</param>
            <param name="enumValue">Enum to use for the flags.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUI.EnumMaskField ( new Rect (0, 0, 300, 20), "Static Flags", staticFlagMask );  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Caption/label for the control.</param>
            <param name="enumValue">Enum to use for the flags.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUI.EnumMaskField ( new Rect (0, 0, 300, 20), "Static Flags", staticFlagMask );  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Caption/label for the control.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUI.EnumMaskField ( new Rect (0, 0, 300, 20), "Static Flags", staticFlagMask );  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Caption/label for the control.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum)">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Shows info of a GameObject depending on the selected option   enum OPTIONS {  Position = 0,  Rotation = 1,  Scale = 2,  }   class EditorGUIEnumPopup extends EditorWindow {    var display : OPTIONS = OPTIONS.Position;    @MenuItem("Examples/Editor GUI Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUIEnumPopup);   window.position = Rect(0, 0, 220, 80);   window.Show();  }    function OnGUI() {   var selectedObj : Transform = Selection.activeTransform;   display = EditorGUI.EnumPopup(   Rect(3,3,position.width - 6, 15),   "Show:",   display);   EditorGUI.LabelField(Rect(0, 20, position.width,15),    "Name:",    selectedObj ? selectedObj.name : "Select an Object");   if(selectedObj) {   switch(display) {    case OPTIONS.Position:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Position:",     selectedObj.position.ToString());    break;        case OPTIONS.Rotation:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Rotation:",     selectedObj.rotation.ToString());    break;       case OPTIONS.Scale:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Scale:",     selectedObj.localScale.ToString());    break;       default:    Debug.LogError("Unrecognized Option");    break;   }   }   if(GUI.Button(Rect(3,position.height - 25, position.width - 6, 24),"Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selected">The enum option the field shows.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Shows info of a GameObject depending on the selected option   enum OPTIONS {  Position = 0,  Rotation = 1,  Scale = 2,  }   class EditorGUIEnumPopup extends EditorWindow {    var display : OPTIONS = OPTIONS.Position;    @MenuItem("Examples/Editor GUI Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUIEnumPopup);   window.position = Rect(0, 0, 220, 80);   window.Show();  }    function OnGUI() {   var selectedObj : Transform = Selection.activeTransform;   display = EditorGUI.EnumPopup(   Rect(3,3,position.width - 6, 15),   "Show:",   display);   EditorGUI.LabelField(Rect(0, 20, position.width,15),    "Name:",    selectedObj ? selectedObj.name : "Select an Object");   if(selectedObj) {   switch(display) {    case OPTIONS.Position:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Position:",     selectedObj.position.ToString());    break;        case OPTIONS.Rotation:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Rotation:",     selectedObj.rotation.ToString());    break;       case OPTIONS.Scale:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Scale:",     selectedObj.localScale.ToString());    break;       default:    Debug.LogError("Unrecognized Option");    break;   }   }   if(GUI.Button(Rect(3,position.height - 25, position.width - 6, 24),"Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum)">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Shows info of a GameObject depending on the selected option   enum OPTIONS {  Position = 0,  Rotation = 1,  Scale = 2,  }   class EditorGUIEnumPopup extends EditorWindow {    var display : OPTIONS = OPTIONS.Position;    @MenuItem("Examples/Editor GUI Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUIEnumPopup);   window.position = Rect(0, 0, 220, 80);   window.Show();  }    function OnGUI() {   var selectedObj : Transform = Selection.activeTransform;   display = EditorGUI.EnumPopup(   Rect(3,3,position.width - 6, 15),   "Show:",   display);   EditorGUI.LabelField(Rect(0, 20, position.width,15),    "Name:",    selectedObj ? selectedObj.name : "Select an Object");   if(selectedObj) {   switch(display) {    case OPTIONS.Position:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Position:",     selectedObj.position.ToString());    break;        case OPTIONS.Rotation:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Rotation:",     selectedObj.rotation.ToString());    break;       case OPTIONS.Scale:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Scale:",     selectedObj.localScale.ToString());    break;       default:    Debug.LogError("Unrecognized Option");    break;   }   }   if(GUI.Button(Rect(3,position.height - 25, position.width - 6, 24),"Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Shows info of a GameObject depending on the selected option   enum OPTIONS {  Position = 0,  Rotation = 1,  Scale = 2,  }   class EditorGUIEnumPopup extends EditorWindow {    var display : OPTIONS = OPTIONS.Position;    @MenuItem("Examples/Editor GUI Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUIEnumPopup);   window.position = Rect(0, 0, 220, 80);   window.Show();  }    function OnGUI() {   var selectedObj : Transform = Selection.activeTransform;   display = EditorGUI.EnumPopup(   Rect(3,3,position.width - 6, 15),   "Show:",   display);   EditorGUI.LabelField(Rect(0, 20, position.width,15),    "Name:",    selectedObj ? selectedObj.name : "Select an Object");   if(selectedObj) {   switch(display) {    case OPTIONS.Position:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Position:",     selectedObj.position.ToString());    break;        case OPTIONS.Rotation:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Rotation:",     selectedObj.rotation.ToString());    break;       case OPTIONS.Scale:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Scale:",     selectedObj.localScale.ToString());    break;       default:    Debug.LogError("Unrecognized Option");    break;   }   }   if(GUI.Button(Rect(3,position.height - 25, position.width - 6, 24),"Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Shows info of a GameObject depending on the selected option   enum OPTIONS {  Position = 0,  Rotation = 1,  Scale = 2,  }   class EditorGUIEnumPopup extends EditorWindow {    var display : OPTIONS = OPTIONS.Position;    @MenuItem("Examples/Editor GUI Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUIEnumPopup);   window.position = Rect(0, 0, 220, 80);   window.Show();  }    function OnGUI() {   var selectedObj : Transform = Selection.activeTransform;   display = EditorGUI.EnumPopup(   Rect(3,3,position.width - 6, 15),   "Show:",   display);   EditorGUI.LabelField(Rect(0, 20, position.width,15),    "Name:",    selectedObj ? selectedObj.name : "Select an Object");   if(selectedObj) {   switch(display) {    case OPTIONS.Position:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Position:",     selectedObj.position.ToString());    break;        case OPTIONS.Rotation:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Rotation:",     selectedObj.rotation.ToString());    break;       case OPTIONS.Scale:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Scale:",     selectedObj.localScale.ToString());    break;       default:    Debug.LogError("Unrecognized Option");    break;   }   }   if(GUI.Button(Rect(3,position.height - 25, position.width - 6, 24),"Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Shows info of a GameObject depending on the selected option   enum OPTIONS {  Position = 0,  Rotation = 1,  Scale = 2,  }   class EditorGUIEnumPopup extends EditorWindow {    var display : OPTIONS = OPTIONS.Position;    @MenuItem("Examples/Editor GUI Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUIEnumPopup);   window.position = Rect(0, 0, 220, 80);   window.Show();  }    function OnGUI() {   var selectedObj : Transform = Selection.activeTransform;   display = EditorGUI.EnumPopup(   Rect(3,3,position.width - 6, 15),   "Show:",   display);   EditorGUI.LabelField(Rect(0, 20, position.width,15),    "Name:",    selectedObj ? selectedObj.name : "Select an Object");   if(selectedObj) {   switch(display) {    case OPTIONS.Position:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Position:",     selectedObj.position.ToString());    break;        case OPTIONS.Rotation:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Rotation:",     selectedObj.rotation.ToString());    break;       case OPTIONS.Scale:    EditorGUI.LabelField(Rect(0, 40, position.width,15),     "Scale:",     selectedObj.localScale.ToString());    break;       default:    Debug.LogError("Unrecognized Option");    break;   }   }   if(GUI.Button(Rect(3,position.height - 25, position.width - 6, 24),"Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single)">
            <summary>Make a text field for entering floats.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUIFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUIFloatField);   window.position = Rect(0, 0, 210, 30);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.FloatField(Rect(3,3,150, 20),    "Increase scale by:",     sizeMultiplier);   if(GUI.Button(Rect(160,3,45,20), "Scale!"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="position">Rectangle on the screen to use for the float field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
            <summary>Make a text field for entering floats.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUIFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUIFloatField);   window.position = Rect(0, 0, 210, 30);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.FloatField(Rect(3,3,150, 20),    "Increase scale by:",     sizeMultiplier);   if(GUI.Button(Rect(160,3,45,20), "Scale!"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="position">Rectangle on the screen to use for the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single)">
            <summary>Make a text field for entering floats.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUIFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUIFloatField);   window.position = Rect(0, 0, 210, 30);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.FloatField(Rect(3,3,150, 20),    "Increase scale by:",     sizeMultiplier);   if(GUI.Button(Rect(160,3,45,20), "Scale!"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="position">Rectangle on the screen to use for the float field.</param>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single)">
            <summary>Make a text field for entering floats.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUIFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUIFloatField);   window.position = Rect(0, 0, 210, 30);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.FloatField(Rect(3,3,150, 20),    "Increase scale by:",     sizeMultiplier);   if(GUI.Button(Rect(160,3,45,20), "Scale!"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="position">Rectangle on the screen to use for the float field.</param>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
            <summary>Make a text field for entering floats.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUIFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUIFloatField);   window.position = Rect(0, 0, 210, 30);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.FloatField(Rect(3,3,150, 20),    "Increase scale by:",     sizeMultiplier);   if(GUI.Button(Rect(160,3,45,20), "Scale!"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="position">Rectangle on the screen to use for the float field.</param>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
            <summary>Make a text field for entering floats.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUIFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUIFloatField);   window.position = Rect(0, 0, 210, 30);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.FloatField(Rect(3,3,150, 20),    "Increase scale by:",     sizeMultiplier);   if(GUI.Button(Rect(160,3,45,20), "Scale!"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="position">Rectangle on the screen to use for the float field.</param>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.FocusTextInControl(System.String)">
            <summary>Move keyboard focus to a named text field and begin editing of the content.</summary>
            <remarks>In Editor GUI, text fields can have keyboard focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. EditorGUI.FocusTextInControl is like GUI.FocusControl in that it gives keyboard focus to a control, but it also begins editing of the text itself. See Also: GUI.SetNextControlName, GUI.GetNameOfFocusedControl.</remarks>
            <param name="name">Name set using GUI.SetNextControlName.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class EditorGUIFoldout extends EditorWindow {  var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(EditorGUIFoldout);   window.position = Rect(0, 0, 150, 60);   window.Show();  }    function OnGUI() {   showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =    EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),     "Position",     Selection.activeTransform.position);    status = Selection.activeTransform.name;   }   if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the arrow and label.</param>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)">
            <summary>Get the height needed for a PropertyField control.</summary>
            <returns>To be added.</returns>
            <remarks>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children if the includeChildren parameter is set to true, which is the default. If the property has a custom PropertyDrawer, the function will return the height returned by that drawer. The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</remarks>
            <param name="property">Height of the property area.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>Get the height needed for a PropertyField control.</summary>
            <returns>To be added.</returns>
            <remarks>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children if the includeChildren parameter is set to true, which is the default. If the property has a custom PropertyDrawer, the function will return the height returned by that drawer. The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</remarks>
            <param name="property">Height of the property area.</param>
            <param name="label">Descriptive text or image.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
            <summary>Get the height needed for a PropertyField control.</summary>
            <returns>To be added.</returns>
            <remarks>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children if the includeChildren parameter is set to true, which is the default. If the property has a custom PropertyDrawer, the function will return the height returned by that drawer. The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</remarks>
            <param name="property">Height of the property area.</param>
            <param name="label">Descriptive text or image.</param>
            <param name="includeChildren">Should the returned height include the height of child properties?</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a label for some control.</summary>
            <remarks>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its Rect explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</remarks>
            <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
            <param name="labelPosition">Rectangle on the screen to use for the label.</param>
            <param name="label">Label to show for the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
            <summary>Make a label for some control.</summary>
            <remarks>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its Rect explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</remarks>
            <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
            <param name="labelPosition">Rectangle on the screen to use for the label.</param>
            <param name="label">Label to show for the control.</param>
            <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a label for some control.</summary>
            <remarks>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its Rect explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</remarks>
            <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
            <param name="labelPosition">Rectangle on the screen to use for the label.</param>
            <param name="label">Label to show for the control.</param>
            <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
            <param name="style">Optional GUIStyle to use for the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.HelpBox(UnityEngine.Rect,System.String,UnityEditor.MessageType)">
            <summary>Make a help box with a message to the user.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to draw the help box within.</param>
            <param name="message">The message text.</param>
            <param name="type">The type of message.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IndentedRect(UnityEngine.Rect)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUI.indentLevel">
            <summary>The indent level of the field labels.</summary>
            <value>To be added.</value>
            <remarks>The indent level is 1 by default in LookLikeInspector and 0 by default in LookLikeControls but this may change in the future. To maximize future compatibility, do not make assumptions about what a specific indent level means, but instead just increase or decrease by one around blocks of controls that need to be more indented, as in the example above.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object)">
            <summary>Make an inspector-window-like titlebar.</summary>
            <returns>The foldout state selected by the user.</returns>
            <remarks>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {  var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(Rect(3,15,position.width,20),"Select an Object to inspect");   }    }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the titlebar.</param>
            <param name="foldout">The foldout state shown with the arrow.</param>
            <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object[])">
            <param name="targetObjs">To be added.</param>
            <summary>Make an inspector-window-like titlebar.</summary>
            <returns>The foldout state selected by the user.</returns>
            <remarks>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {  var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(Rect(3,15,position.width,20),"Select an Object to inspect");   }    }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the titlebar.</param>
            <param name="foldout">The foldout state shown with the arrow.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32)">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUIIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUIIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.IntField(Rect(0,35,position.width,15),    "Number of clones:",     clones);   if(GUI.Button(Rect(0,10,position.width, 20), "Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="position">Rectangle on the screen to use for the int field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUIIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUIIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.IntField(Rect(0,35,position.width,15),    "Number of clones:",     clones);   if(GUI.Button(Rect(0,10,position.width, 20), "Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="position">Rectangle on the screen to use for the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32)">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUIIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUIIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.IntField(Rect(0,35,position.width,15),    "Number of clones:",     clones);   if(GUI.Button(Rect(0,10,position.width, 20), "Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="position">Rectangle on the screen to use for the int field.</param>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUIIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUIIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.IntField(Rect(0,35,position.width,15),    "Number of clones:",     clones);   if(GUI.Button(Rect(0,10,position.width, 20), "Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="position">Rectangle on the screen to use for the int field.</param>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUIIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUIIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.IntField(Rect(0,35,position.width,15),    "Number of clones:",     clones);   if(GUI.Button(Rect(0,10,position.width, 20), "Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="position">Rectangle on the screen to use for the int field.</param>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUIIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUIIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUI.IntField(Rect(0,35,position.width,15),    "Number of clones:",     clones);   if(GUI.Button(Rect(0,10,position.width, 20), "Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="position">Rectangle on the screen to use for the int field.</param>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[])">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[])">
            <summary>Make an integer popup selection field.</summary>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <returns>The value of the option that has been selected by the user.</returns>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="property">The SerializedProperty to use for the control.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[])">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent)">
            <summary>Make an integer popup selection field.</summary>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <returns>The value of the option that has been selected by the user.</returns>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="property">The SerializedProperty to use for the control.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
            <param name="label">Optional label in front of the field.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
            <summary>Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected integer as a parameter and returns the integer selected by the user.</remarks>
            <example>// Multiplies the scale of the selected transform.     class EditorGUIIntPopup extends EditorWindow { var selectedSize : int = 1;  var names : String[] = ["Double", "Triple", "Quadruple"];  var sizes : int[] = [2,3,4];    @MenuItem("Examples/Editor GUI Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUIIntPopup);   window.position = Rect(0,0,180,60);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUI.IntPopup(   Rect(3,3,position.width - 6,20),   "Size:",    selectedSize,   names,   sizes);   if(GUI.Button(Rect(0,25,position.width,position.height - 27), "Modify"))   Rescale();  }  function Rescale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale *= selectedSize;   else   Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.Int32,System.Int32,System.Int32)">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUIIntSlider extends EditorWindow {  var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;    @MenuItem("Examples/Editor GUI int slider usage")  static function Init() {   var window = GetWindow(EditorGUIIntSlider);   window.position = Rect(0,0,150, 95);   window.Show();  }    function OnGUI() {   cloneTimesX = EditorGUI.IntSlider(Rect(0,0,position.width, 20), cloneTimesX, 1, 10);   cloneTimesY = EditorGUI.IntSlider(Rect(0,25,position.width, 20), cloneTimesY, 1, 10);   cloneTimesZ = EditorGUI.IntSlider(Rect(0,50,position.width, 20), cloneTimesZ, 1, 10);    if(GUI.Button(Rect(0,75,position.width,15),"Make Grid!"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);  }   }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32)">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUIIntSlider extends EditorWindow {  var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;    @MenuItem("Examples/Editor GUI int slider usage")  static function Init() {   var window = GetWindow(EditorGUIIntSlider);   window.position = Rect(0,0,150, 95);   window.Show();  }    function OnGUI() {   cloneTimesX = EditorGUI.IntSlider(Rect(0,0,position.width, 20), cloneTimesX, 1, 10);   cloneTimesY = EditorGUI.IntSlider(Rect(0,25,position.width, 20), cloneTimesY, 1, 10);   cloneTimesZ = EditorGUI.IntSlider(Rect(0,50,position.width, 20), cloneTimesZ, 1, 10);    if(GUI.Button(Rect(0,75,position.width,15),"Make Grid!"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);  }   }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUIIntSlider extends EditorWindow {  var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;    @MenuItem("Examples/Editor GUI int slider usage")  static function Init() {   var window = GetWindow(EditorGUIIntSlider);   window.position = Rect(0,0,150, 95);   window.Show();  }    function OnGUI() {   cloneTimesX = EditorGUI.IntSlider(Rect(0,0,position.width, 20), cloneTimesX, 1, 10);   cloneTimesY = EditorGUI.IntSlider(Rect(0,25,position.width, 20), cloneTimesY, 1, 10);   cloneTimesZ = EditorGUI.IntSlider(Rect(0,50,position.width, 20), cloneTimesZ, 1, 10);    if(GUI.Button(Rect(0,75,position.width,15),"Make Grid!"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);  }   }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String)">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUIIntSlider extends EditorWindow {  var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;    @MenuItem("Examples/Editor GUI int slider usage")  static function Init() {   var window = GetWindow(EditorGUIIntSlider);   window.position = Rect(0,0,150, 95);   window.Show();  }    function OnGUI() {   cloneTimesX = EditorGUI.IntSlider(Rect(0,0,position.width, 20), cloneTimesX, 1, 10);   cloneTimesY = EditorGUI.IntSlider(Rect(0,25,position.width, 20), cloneTimesY, 1, 10);   cloneTimesZ = EditorGUI.IntSlider(Rect(0,50,position.width, 20), cloneTimesZ, 1, 10);    if(GUI.Button(Rect(0,75,position.width,15),"Make Grid!"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);  }   }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent)">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUIIntSlider extends EditorWindow {  var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;    @MenuItem("Examples/Editor GUI int slider usage")  static function Init() {   var window = GetWindow(EditorGUIIntSlider);   window.position = Rect(0,0,150, 95);   window.Show();  }    function OnGUI() {   cloneTimesX = EditorGUI.IntSlider(Rect(0,0,position.width, 20), cloneTimesX, 1, 10);   cloneTimesY = EditorGUI.IntSlider(Rect(0,25,position.width, 20), cloneTimesY, 1, 10);   cloneTimesZ = EditorGUI.IntSlider(Rect(0,50,position.width, 20), cloneTimesZ, 1, 10);    if(GUI.Button(Rect(0,75,position.width,15),"Make Grid!"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);  }   }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUIIntSlider extends EditorWindow {  var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;    @MenuItem("Examples/Editor GUI int slider usage")  static function Init() {   var window = GetWindow(EditorGUIIntSlider);   window.position = Rect(0,0,150, 95);   window.Show();  }    function OnGUI() {   cloneTimesX = EditorGUI.IntSlider(Rect(0,0,position.width, 20), cloneTimesX, 1, 10);   cloneTimesY = EditorGUI.IntSlider(Rect(0,25,position.width, 20), cloneTimesY, 1, 10);   cloneTimesZ = EditorGUI.IntSlider(Rect(0,50,position.width, 20), cloneTimesZ, 1, 10);    if(GUI.Button(Rect(0,75,position.width,15),"Make Grid!"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);  }   }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
            <param name="style">Style information (color, etc) for displaying the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
            <param name="style">Style information (color, etc) for displaying the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
            <param name="style">Style information (color, etc) for displaying the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label field.</param>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
            <param name="style">Style information (color, etc) for displaying the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32)">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="layer">The layer shown in the field.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32)">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[])">
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUI.MaskField (new Rect (0, 0, 300, 20), "Player Flags", flags, options, false);  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="mask">The current mask to display.</param>
            <param name="displayedOptions">A string array containing the labels for each flag.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUI.MaskField (new Rect (0, 0, 300, 20), "Player Flags", flags, options, false);  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="mask">The current mask to display.</param>
            <param name="displayedOptions">A string array containing the labels for each flag.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[])">
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUI.MaskField (new Rect (0, 0, 300, 20), "Player Flags", flags, options, false);  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Label for the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="displayedOptions">A string array containing the labels for each flag.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[])">
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUI.MaskField (new Rect (0, 0, 300, 20), "Player Flags", flags, options, false);  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Label for the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="displayedOptions">A string array containing the labels for each flag.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUI.MaskField (new Rect (0, 0, 300, 20), "Player Flags", flags, options, false);  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Label for the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="displayedOptions">A string array containing the labels for each flag.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUI.MaskField (new Rect (0, 0, 300, 20), "Player Flags", flags, options, false);  }  }</example>
            <param name="position">Rectangle on the screen to use for this control.</param>
            <param name="label">Label for the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="displayedOptions">A string array containing the labels for each flag.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,System.Single@,System.Single@,System.Single,System.Single)">
            <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
            <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
            <param name="minLimit">The limit at the left end of the slider.</param>
            <param name="maxLimit">The limit at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.GUIContent,UnityEngine.Rect,System.Single@,System.Single@,System.Single,System.Single)">
            <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Optional label in front of the slider.</param>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
            <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
            <param name="minLimit">The limit at the left end of the slider.</param>
            <param name="maxLimit">The limit at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type)">
            <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in Editor class.</remarks>
            <example>//Select the dependencies of the found GameObject   class EditorGUIObjectField extends EditorWindow {    var obj : GameObject = null;    @MenuItem("Examples/Select Dependencies")  static function Init () {   var window = GetWindow(EditorGUIObjectField);   window.position = Rect(0, 0, 250, 80);   window.Show();  }    function OnInspectorUpdate () {   Repaint ();  }    function OnGUI () {    obj = EditorGUI.ObjectField(Rect(3,3,position.width - 6, 20),    "Find Dependency",    obj,    GameObject);     if (obj) {    if (GUI.Button(Rect(3,25,position.width - 6, 20), "Check Dependencies"))    Selection.objects = EditorUtility.CollectDependencies ([obj]);   } else {   EditorGUI.LabelField (Rect (3, 25, position.width - 6, 20),    "Missing:",    "Select an object first");   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type)">
            <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in Editor class.</remarks>
            <example>//Select the dependencies of the found GameObject   class EditorGUIObjectField extends EditorWindow {    var obj : GameObject = null;    @MenuItem("Examples/Select Dependencies")  static function Init () {   var window = GetWindow(EditorGUIObjectField);   window.position = Rect(0, 0, 250, 80);   window.Show();  }    function OnInspectorUpdate () {   Repaint ();  }    function OnGUI () {    obj = EditorGUI.ObjectField(Rect(3,3,position.width - 6, 20),    "Find Dependency",    obj,    GameObject);     if (obj) {    if (GUI.Button(Rect(3,25,position.width - 6, 20), "Check Dependencies"))    Selection.objects = EditorUtility.CollectDependencies ([obj]);   } else {   EditorGUI.LabelField (Rect (3, 25, position.width - 6, 20),    "Missing:",    "Select an object first");   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type)">
            <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in Editor class.</remarks>
            <example>//Select the dependencies of the found GameObject   class EditorGUIObjectField extends EditorWindow {    var obj : GameObject = null;    @MenuItem("Examples/Select Dependencies")  static function Init () {   var window = GetWindow(EditorGUIObjectField);   window.position = Rect(0, 0, 250, 80);   window.Show();  }    function OnInspectorUpdate () {   Repaint ();  }    function OnGUI () {    obj = EditorGUI.ObjectField(Rect(3,3,position.width - 6, 20),    "Find Dependency",    obj,    GameObject);     if (obj) {    if (GUI.Button(Rect(3,25,position.width - 6, 20), "Check Dependencies"))    Selection.objects = EditorUtility.CollectDependencies ([obj]);   } else {   EditorGUI.LabelField (Rect (3, 25, position.width - 6, 20),    "Missing:",    "Select an object first");   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type,System.Boolean)">
            <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in Editor class.</remarks>
            <example>//Select the dependencies of the found GameObject   class EditorGUIObjectField extends EditorWindow {    var obj : GameObject = null;    @MenuItem("Examples/Select Dependencies")  static function Init () {   var window = GetWindow(EditorGUIObjectField);   window.position = Rect(0, 0, 250, 80);   window.Show();  }    function OnInspectorUpdate () {   Repaint ();  }    function OnGUI () {    obj = EditorGUI.ObjectField(Rect(3,3,position.width - 6, 20),    "Find Dependency",    obj,    GameObject);     if (obj) {    if (GUI.Button(Rect(3,25,position.width - 6, 20), "Check Dependencies"))    Selection.objects = EditorUtility.CollectDependencies ([obj]);   } else {   EditorGUI.LabelField (Rect (3, 25, position.width - 6, 20),    "Missing:",    "Select an object first");   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type,System.Boolean)">
            <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in Editor class.</remarks>
            <example>//Select the dependencies of the found GameObject   class EditorGUIObjectField extends EditorWindow {    var obj : GameObject = null;    @MenuItem("Examples/Select Dependencies")  static function Init () {   var window = GetWindow(EditorGUIObjectField);   window.position = Rect(0, 0, 250, 80);   window.Show();  }    function OnInspectorUpdate () {   Repaint ();  }    function OnGUI () {    obj = EditorGUI.ObjectField(Rect(3,3,position.width - 6, 20),    "Find Dependency",    obj,    GameObject);     if (obj) {    if (GUI.Button(Rect(3,25,position.width - 6, 20), "Check Dependencies"))    Selection.objects = EditorUtility.CollectDependencies ([obj]);   } else {   EditorGUI.LabelField (Rect (3, 25, position.width - 6, 20),    "Missing:",    "Select an object first");   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean)">
            <summary>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See example in Editor class.</remarks>
            <example>//Select the dependencies of the found GameObject   class EditorGUIObjectField extends EditorWindow {    var obj : GameObject = null;    @MenuItem("Examples/Select Dependencies")  static function Init () {   var window = GetWindow(EditorGUIObjectField);   window.position = Rect(0, 0, 250, 80);   window.Show();  }    function OnInspectorUpdate () {   Repaint ();  }    function OnGUI () {    obj = EditorGUI.ObjectField(Rect(3,3,position.width - 6, 20),    "Find Dependency",    obj,    GameObject);     if (obj) {    if (GUI.Button(Rect(3,25,position.width - 6, 20), "Check Dependencies"))    Selection.objects = EditorUtility.CollectDependencies ([obj]);   } else {   EditorGUI.LabelField (Rect (3, 25, position.width - 6, 20),    "Missing:",    "Select an object first");   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUIPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUIPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUI.PasswordField(   Rect(3,3,position.width - 6, 20),   "Type Something:",   text);   EditorGUI.LabelField(   Rect(3,25,position.width - 5, 20),    "Written Text:",     text); }  }</example>
            <param name="position">Rectangle on the screen to use for the password field.</param>
            <param name="password">The password to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUIPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUIPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUI.PasswordField(   Rect(3,3,position.width - 6, 20),   "Type Something:",   text);   EditorGUI.LabelField(   Rect(3,25,position.width - 5, 20),    "Written Text:",     text); }  }</example>
            <param name="position">Rectangle on the screen to use for the password field.</param>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUIPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUIPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUI.PasswordField(   Rect(3,3,position.width - 6, 20),   "Type Something:",   text);   EditorGUI.LabelField(   Rect(3,25,position.width - 5, 20),    "Written Text:",     text); }  }</example>
            <param name="position">Rectangle on the screen to use for the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUIPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUIPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUI.PasswordField(   Rect(3,3,position.width - 6, 20),   "Type Something:",   text);   EditorGUI.LabelField(   Rect(3,25,position.width - 5, 20),    "Written Text:",     text); }  }</example>
            <param name="position">Rectangle on the screen to use for the password field.</param>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUIPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUIPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUI.PasswordField(   Rect(3,3,position.width - 6, 20),   "Type Something:",   text);   EditorGUI.LabelField(   Rect(3,25,position.width - 5, 20),    "Written Text:",     text); }  }</example>
            <param name="position">Rectangle on the screen to use for the password field.</param>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUIPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUIPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUI.PasswordField(   Rect(3,3,position.width - 6, 20),   "Type Something:",   text);   EditorGUI.LabelField(   Rect(3,25,position.width - 5, 20),    "Written Text:",     text); }  }</example>
            <param name="position">Rectangle on the screen to use for the password field.</param>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Adds a component to the selected GameObjects   class EditorGUIPopup extends EditorWindow {  var options : String[] = ["Rigidbody", "Box Collider", "Sphere Collider"];  var index : int = 0;    @MenuItem("Examples/Editor GUI Popup usage")  static function Init() {   var window = GetWindow(EditorGUIPopup);   window.position = Rect(0,0,180,80);   window.Show();  }  function OnGUI() {   index = EditorGUI.Popup(   Rect(0,0,position.width, 20),   "Component:",   index,    options);      if(GUI.Button(Rect(0,25,position.width, position.height - 26),"Add Component"))   AddComponentToObjects();  }  function AddComponentToObjects() {   if(!Selection.activeGameObject) {   Debug.LogError("Please select at least one GameObject first");   return;   }   for(var go : GameObject in Selection.gameObjects)   go.AddComponent(options[index]);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a label in front of some control.</summary>
            <returns>Rectangle on the screen to use just for the control itself.</returns>
            <remarks>And the script attached to the editor script:</remarks>
            <example>// Inflates a mesh  //  // Usage: Select a mesh and drag it to the object field.  // Press calculate and after finishing just press play and see your mesh growing.  //  // Note: To control the ratio of inflation just change the increaseRatio  // var in the "InflateMesh.js" sript   class InflateMeshEditor extends EditorWindow {    var object : MeshFilter;    @MenuItem("Examples/Inflate Mesh")  static function Init () {   var window = GetWindow (InflateMeshEditor);   window.Show ();  }    function OnGUI () {   var rect = EditorGUILayout.GetControlRect ();   rect = EditorGUI.PrefixLabel (rect, GUIContent ("Select a mesh"));   object = EditorGUI.ObjectField (rect,    "Calculate:",    object,    MeshFilter);     EditorGUI.BeginDisabledGroup (!object);   if(GUI.Button (EditorGUILayout.GetControlRect (), "Calculate!"))   Calculate ();   EditorGUI.EndDisabledGroup ();  }    function Calculate () {   var finalNormals = new Vector3[0];   var mesh = object.sharedMesh;   var vertices = mesh.vertices;   var normals = mesh.normals;    // Find identical vertices   // this will hold an ID for each vertex, vertices at   // the same position will share the same ID!   var vertexIDs = new int[vertices.length];   var counter : int = 0;  for (var i = 0; i &amp;lt; vertices.length; i++) {   for (var j = 0; j &amp;lt; vertices.length; j++) {    if (vertexIDs[i] == 0) {     counter++;     vertexIDs[i] = counter;    }    if (i != j)     if (vertices[i] == vertices[j] &amp;amp;&amp;amp; vertices[i] != 0)      vertexIDs[j] = vertexIDs[i];   }   }    finalNormals = normals;   calculated = 0.5;   // Calcualte average normals    // counter is the highest vertexID, now go through all the groups and collect normal data   for (var k = 1; k &amp;lt;= counter; k++) {    var curAvgNormal : Vector3 = Vector3.zero;   for (var l = 0; l &amp;lt; vertexIDs.length; l++)    if (vertexIDs[l] == k) {     // Add up all the normals of the vertices with identical positions     curAvgNormal += normals[l];    }   curAvgNormal.Normalize(); //Normalize the result   for (var m = 0; m &amp;lt; vertexIDs.length; m++)    if (vertexIDs[m] == k)     finalNormals[m] = curAvgNormal;   }   object.gameObject.AddComponent ("InflateMesh").fNormals = finalNormals;   Debug.Log ("Done Adding Component, press play and see your mesh being inflated!");  }  }  // InflateMesh.js  private var mesh : Mesh;  private var vertices = new Vector3[0];  private var normals = new Vector3[0];  var fNormals = new Vector3[0];  var increaseRatio = 0.005;  function Start () {  mesh = GetComponent (MeshFilter).mesh;  vertices = mesh.vertices;  normals = mesh.normals;  }   function Update () {  for (var i = 0; i &amp;lt; vertices.length; i++) {   vertices[i] += fNormals[i] * Time.deltaTime * increaseRatio;  }  mesh.vertices = vertices;  }</example>
            <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent)">
            <summary>Make a label in front of some control.</summary>
            <returns>Rectangle on the screen to use just for the control itself.</returns>
            <remarks>And the script attached to the editor script:</remarks>
            <example>// Inflates a mesh  //  // Usage: Select a mesh and drag it to the object field.  // Press calculate and after finishing just press play and see your mesh growing.  //  // Note: To control the ratio of inflation just change the increaseRatio  // var in the "InflateMesh.js" sript   class InflateMeshEditor extends EditorWindow {    var object : MeshFilter;    @MenuItem("Examples/Inflate Mesh")  static function Init () {   var window = GetWindow (InflateMeshEditor);   window.Show ();  }    function OnGUI () {   var rect = EditorGUILayout.GetControlRect ();   rect = EditorGUI.PrefixLabel (rect, GUIContent ("Select a mesh"));   object = EditorGUI.ObjectField (rect,    "Calculate:",    object,    MeshFilter);     EditorGUI.BeginDisabledGroup (!object);   if(GUI.Button (EditorGUILayout.GetControlRect (), "Calculate!"))   Calculate ();   EditorGUI.EndDisabledGroup ();  }    function Calculate () {   var finalNormals = new Vector3[0];   var mesh = object.sharedMesh;   var vertices = mesh.vertices;   var normals = mesh.normals;    // Find identical vertices   // this will hold an ID for each vertex, vertices at   // the same position will share the same ID!   var vertexIDs = new int[vertices.length];   var counter : int = 0;  for (var i = 0; i &amp;lt; vertices.length; i++) {   for (var j = 0; j &amp;lt; vertices.length; j++) {    if (vertexIDs[i] == 0) {     counter++;     vertexIDs[i] = counter;    }    if (i != j)     if (vertices[i] == vertices[j] &amp;amp;&amp;amp; vertices[i] != 0)      vertexIDs[j] = vertexIDs[i];   }   }    finalNormals = normals;   calculated = 0.5;   // Calcualte average normals    // counter is the highest vertexID, now go through all the groups and collect normal data   for (var k = 1; k &amp;lt;= counter; k++) {    var curAvgNormal : Vector3 = Vector3.zero;   for (var l = 0; l &amp;lt; vertexIDs.length; l++)    if (vertexIDs[l] == k) {     // Add up all the normals of the vertices with identical positions     curAvgNormal += normals[l];    }   curAvgNormal.Normalize(); //Normalize the result   for (var m = 0; m &amp;lt; vertexIDs.length; m++)    if (vertexIDs[m] == k)     finalNormals[m] = curAvgNormal;   }   object.gameObject.AddComponent ("InflateMesh").fNormals = finalNormals;   Debug.Log ("Done Adding Component, press play and see your mesh being inflated!");  }  }  // InflateMesh.js  private var mesh : Mesh;  private var vertices = new Vector3[0];  private var normals = new Vector3[0];  var fNormals = new Vector3[0];  var increaseRatio = 0.005;  function Start () {  mesh = GetComponent (MeshFilter).mesh;  vertices = mesh.vertices;  normals = mesh.normals;  }   function Update () {  for (var i = 0; i &amp;lt; vertices.length; i++) {   vertices[i] += fNormals[i] * Time.deltaTime * increaseRatio;  }  mesh.vertices = vertices;  }</example>
            <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
            <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ProgressBar(UnityEngine.Rect,System.Single,System.String)">
            <param name="position">To be added.</param>
            <param name="text">To be added.</param>
            <summary>Make a progress bar.</summary>
            <remarks>Value goes from 0 to 1, where 0 means 0% of the bar filled and 1 means the bar is at 100% fully filled</remarks>
            <param name="value">Value that is shown.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="position">Where to show the property field.</param>
            <param name="property">The SerializedProperty to make a field for.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Boolean)">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="position">Where to show the property field.</param>
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="position">Where to show the property field.</param>
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="position">Where to show the property field.</param>
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
            <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>Make an X, Y, W &amp;amp; H field for entering a Rect.Make an X, Y, W &amp;amp; H for Rect using SerializedProperty (not public).</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Find all the cameras in the scene and shows all their viewports togheter   class EditorGUIRectField extends EditorWindow {    var cameras : Camera[];    @MenuItem("Examples/Editor GUI RectField usage")  static function Init() {   var window = GetWindow(EditorGUIRectField);   window.position = Rect(0,0,150,120);   window.Show();  }    function OnGUI() {   if(GUI.Button(Rect(3,3,position.width-6,20),"Update list"))    cameras = FindObjectsOfType(Camera);     if(cameras)   for(var i = 0; i &amp;lt; cameras.Length; i++) {   cameras[i].rect = EditorGUI.RectField(    Rect(3,25+45*i,position.width - 6, 25),    cameras[i].name,    cameras[i].rect);   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,System.String,UnityEngine.Rect)">
            <summary>Make an X, Y, W &amp;amp; H field for entering a Rect.Make an X, Y, W &amp;amp; H for Rect using SerializedProperty (not public).</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Find all the cameras in the scene and shows all their viewports togheter   class EditorGUIRectField extends EditorWindow {    var cameras : Camera[];    @MenuItem("Examples/Editor GUI RectField usage")  static function Init() {   var window = GetWindow(EditorGUIRectField);   window.position = Rect(0,0,150,120);   window.Show();  }    function OnGUI() {   if(GUI.Button(Rect(3,3,position.width-6,20),"Update list"))    cameras = FindObjectsOfType(Camera);     if(cameras)   for(var i = 0; i &amp;lt; cameras.Length; i++) {   cameras[i].rect = EditorGUI.RectField(    Rect(3,25+45*i,position.width - 6, 25),    cameras[i].name,    cameras[i].rect);   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rect)">
            <summary>Make an X, Y, W &amp;amp; H field for entering a Rect.Make an X, Y, W &amp;amp; H for Rect using SerializedProperty (not public).</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Find all the cameras in the scene and shows all their viewports togheter   class EditorGUIRectField extends EditorWindow {    var cameras : Camera[];    @MenuItem("Examples/Editor GUI RectField usage")  static function Init() {   var window = GetWindow(EditorGUIRectField);   window.position = Rect(0,0,150,120);   window.Show();  }    function OnGUI() {   if(GUI.Button(Rect(3,3,position.width-6,20),"Update list"))    cameras = FindObjectsOfType(Camera);     if(cameras)   for(var i = 0; i &amp;lt; cameras.Length; i++) {   cameras[i].rect = EditorGUI.RectField(    Rect(3,25+45*i,position.width - 6, 25),    cameras[i].name,    cameras[i].rect);   }  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String)">
            <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="text">The text to show.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="text">The text to show.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="P:UnityEditor.EditorGUI.showMixedValue">
            <summary>Makes the following controls give the appearance of editing multiple different values.</summary>
            <value>To be added.</value>
            <remarks>This is sometimes useful when creating custom editors and you want to represent a value in a non-standard way in the GUI while also supporting multi-object editing.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUISlider extends EditorWindow {    var scale : float = 1.0;    @MenuItem("Examples/EditorGUI Slider usage")  static function Init() {   var window = GetWindow(EditorGUISlider);   window.position = Rect(0,0,150,30);   window.Show();  }    function OnGUI() {   scale = EditorGUI.Slider(Rect(5,5,150,20),scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single)">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUISlider extends EditorWindow {    var scale : float = 1.0;    @MenuItem("Examples/EditorGUI Slider usage")  static function Init() {   var window = GetWindow(EditorGUISlider);   window.position = Rect(0,0,150,30);   window.Show();  }    function OnGUI() {   scale = EditorGUI.Slider(Rect(5,5,150,20),scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.String,System.Single,System.Single,System.Single)">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUISlider extends EditorWindow {    var scale : float = 1.0;    @MenuItem("Examples/EditorGUI Slider usage")  static function Init() {   var window = GetWindow(EditorGUISlider);   window.position = Rect(0,0,150,30);   window.Show();  }    function OnGUI() {   scale = EditorGUI.Slider(Rect(5,5,150,20),scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,System.String)">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUISlider extends EditorWindow {    var scale : float = 1.0;    @MenuItem("Examples/EditorGUI Slider usage")  static function Init() {   var window = GetWindow(EditorGUISlider);   window.position = Rect(0,0,150,30);   window.Show();  }    function OnGUI() {   scale = EditorGUI.Slider(Rect(5,5,150,20),scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent)">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUISlider extends EditorWindow {    var scale : float = 1.0;    @MenuItem("Examples/EditorGUI Slider usage")  static function Init() {   var window = GetWindow(EditorGUISlider);   window.position = Rect(0,0,150,30);   window.Show();  }    function OnGUI() {   scale = EditorGUI.Slider(Rect(5,5,150,20),scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,System.Single,System.Single)">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUISlider extends EditorWindow {    var scale : float = 1.0;    @MenuItem("Examples/EditorGUI Slider usage")  static function Init() {   var window = GetWindow(EditorGUISlider);   window.position = Rect(0,0,150,30);   window.Show();  }    function OnGUI() {   scale = EditorGUI.Slider(Rect(5,5,150,20),scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String)">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="tag">The tag the field shows.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String)">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change the Tag and/or the layer of the selected GameObjects.   class EditorGUITagLayerField extends EditorWindow {    var selectedTag : String = "";  var selectedLayer : int = 0;    @MenuItem("Examples/Tag - Layer for Selection")  static function Init() {   var window = GetWindow(EditorGUITagLayerField);   window.position = Rect(0,0,350,70);   window.Show();  }    function OnGUI() {   selectedTag = EditorGUI.TagField(   Rect(3,3,position.width/2 - 6, 20),   "New Tag:",   selectedTag);   selectedLayer = EditorGUI.LayerField(   Rect(position.width/2 + 3,3, position.width/2 - 6, 20),   "New Layer:",   selectedLayer);      if(Selection.activeGameObject) {   if(GUI.Button(Rect(3,25,90,17),"Change Tags"))    for(var go : GameObject in Selection.gameObjects)    go.tag = selectedTag;     if(GUI.Button(Rect(position.width-96, 25,90,17),"Change Layers"))    for(var go : GameObject in Selection.gameObjects)    go.layer = selectedLayer;   }  }    function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String)">
            <summary>Make a text area.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</remarks>
            <example>// Create a window where you can have notes  // This doesnt preserve the notes between sessions.  //  // check EditorPrefs Get/SetString to save the notes.    class EditorGUITextArea extends EditorWindow {    var note : String = "Notes:\n-&amp;gt;";    @MenuItem("Examples/Notes")  static function Init() {   var window = GetWindow(EditorGUITextArea);   window.Show();  }    function OnGUI() {   note = EditorGUI.TextArea(Rect(3,3,position.width - 6, position.height - 35), note);   if(GUI.Button(Rect(0, position.height - 30, position.width, 25), "Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">The text to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text area.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</remarks>
            <example>// Create a window where you can have notes  // This doesnt preserve the notes between sessions.  //  // check EditorPrefs Get/SetString to save the notes.    class EditorGUITextArea extends EditorWindow {    var note : String = "Notes:\n-&amp;gt;";    @MenuItem("Examples/Notes")  static function Init() {   var window = GetWindow(EditorGUITextArea);   window.Show();  }    function OnGUI() {   note = EditorGUI.TextArea(Rect(3,3,position.width - 6, position.height - 35), note);   if(GUI.Button(Rect(0, position.height - 30, position.width, 25), "Close"))   this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String)">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Changes the name of the selected Objects to the one typed in the text field   class EditorGUITextField extends EditorWindow {    var objNames : String = "";    @MenuItem("Examples/Bulk Name change")  static function Init() {   var window = GetWindow(EditorGUITextField);   window.Show();  }    function OnGUI() {   EditorGUI.DropShadowLabel(Rect(0, 0, position.width, 20),   "Select the objects to rename.");   objNames = EditorGUI.TextField(Rect(10,25,position.width - 20, 20),    "New Names:",     objNames);   if(Selection.activeTransform)   if(GUI.Button(Rect(0, 50, position.width, 30), "Bulk rename!"))    for(var t : Transform in Selection.transforms)    t.name = objNames;  }  function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">The text to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String)">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Changes the name of the selected Objects to the one typed in the text field   class EditorGUITextField extends EditorWindow {    var objNames : String = "";    @MenuItem("Examples/Bulk Name change")  static function Init() {   var window = GetWindow(EditorGUITextField);   window.Show();  }    function OnGUI() {   EditorGUI.DropShadowLabel(Rect(0, 0, position.width, 20),   "Select the objects to rename.");   objNames = EditorGUI.TextField(Rect(10,25,position.width - 20, 20),    "New Names:",     objNames);   if(Selection.activeTransform)   if(GUI.Button(Rect(0, 50, position.width, 30), "Bulk rename!"))    for(var t : Transform in Selection.transforms)    t.name = objNames;  }  function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Changes the name of the selected Objects to the one typed in the text field   class EditorGUITextField extends EditorWindow {    var objNames : String = "";    @MenuItem("Examples/Bulk Name change")  static function Init() {   var window = GetWindow(EditorGUITextField);   window.Show();  }    function OnGUI() {   EditorGUI.DropShadowLabel(Rect(0, 0, position.width, 20),   "Select the objects to rename.");   objNames = EditorGUI.TextField(Rect(10,25,position.width - 20, 20),    "New Names:",     objNames);   if(Selection.activeTransform)   if(GUI.Button(Rect(0, 50, position.width, 30), "Bulk rename!"))    for(var t : Transform in Selection.transforms)    t.name = objNames;  }  function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Changes the name of the selected Objects to the one typed in the text field   class EditorGUITextField extends EditorWindow {    var objNames : String = "";    @MenuItem("Examples/Bulk Name change")  static function Init() {   var window = GetWindow(EditorGUITextField);   window.Show();  }    function OnGUI() {   EditorGUI.DropShadowLabel(Rect(0, 0, position.width, 20),   "Select the objects to rename.");   objNames = EditorGUI.TextField(Rect(10,25,position.width - 20, 20),    "New Names:",     objNames);   if(Selection.activeTransform)   if(GUI.Button(Rect(0, 50, position.width, 30), "Bulk rename!"))    for(var t : Transform in Selection.transforms)    t.name = objNames;  }  function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Changes the name of the selected Objects to the one typed in the text field   class EditorGUITextField extends EditorWindow {    var objNames : String = "";    @MenuItem("Examples/Bulk Name change")  static function Init() {   var window = GetWindow(EditorGUITextField);   window.Show();  }    function OnGUI() {   EditorGUI.DropShadowLabel(Rect(0, 0, position.width, 20),   "Select the objects to rename.");   objNames = EditorGUI.TextField(Rect(10,25,position.width - 20, 20),    "New Names:",     objNames);   if(Selection.activeTransform)   if(GUI.Button(Rect(0, 50, position.width, 30), "Bulk rename!"))    for(var t : Transform in Selection.transforms)    t.name = objNames;  }  function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Changes the name of the selected Objects to the one typed in the text field   class EditorGUITextField extends EditorWindow {    var objNames : String = "";    @MenuItem("Examples/Bulk Name change")  static function Init() {   var window = GetWindow(EditorGUITextField);   window.Show();  }    function OnGUI() {   EditorGUI.DropShadowLabel(Rect(0, 0, position.width, 20),   "Select the objects to rename.");   objNames = EditorGUI.TextField(Rect(10,25,position.width - 20, 20),    "New Names:",     objNames);   if(Selection.activeTransform)   if(GUI.Button(Rect(0, 50, position.width, 30), "Bulk rename!"))    for(var t : Transform in Selection.transforms)    t.name = objNames;  }  function OnInspectorUpdate() {   Repaint();  }  }</example>
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean)">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Use a toggle button to show/hide a button that can close the window.   class EditorGUIToggle extends EditorWindow {    var showClose : boolean = true;    @MenuItem("Examples/EditorGUI Toggle usage")  static function Init() {   var window = GetWindow(EditorGUIToggle);   window.Show();  }    function OnGUI() {   showClose = EditorGUI.Toggle(Rect(0,5,position.width,20),    "Show Close Button",    showClose);   if(showClose)   if(GUI.Button(Rect(0, 25, position.width, 100),"Close Window!"))    this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Use a toggle button to show/hide a button that can close the window.   class EditorGUIToggle extends EditorWindow {    var showClose : boolean = true;    @MenuItem("Examples/EditorGUI Toggle usage")  static function Init() {   var window = GetWindow(EditorGUIToggle);   window.Show();  }    function OnGUI() {   showClose = EditorGUI.Toggle(Rect(0,5,position.width,20),    "Show Close Button",    showClose);   if(showClose)   if(GUI.Button(Rect(0, 25, position.width, 100),"Close Window!"))    this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean)">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Use a toggle button to show/hide a button that can close the window.   class EditorGUIToggle extends EditorWindow {    var showClose : boolean = true;    @MenuItem("Examples/EditorGUI Toggle usage")  static function Init() {   var window = GetWindow(EditorGUIToggle);   window.Show();  }    function OnGUI() {   showClose = EditorGUI.Toggle(Rect(0,5,position.width,20),    "Show Close Button",    showClose);   if(showClose)   if(GUI.Button(Rect(0, 25, position.width, 100),"Close Window!"))    this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Use a toggle button to show/hide a button that can close the window.   class EditorGUIToggle extends EditorWindow {    var showClose : boolean = true;    @MenuItem("Examples/EditorGUI Toggle usage")  static function Init() {   var window = GetWindow(EditorGUIToggle);   window.Show();  }    function OnGUI() {   showClose = EditorGUI.Toggle(Rect(0,5,position.width,20),    "Show Close Button",    showClose);   if(showClose)   if(GUI.Button(Rect(0, 25, position.width, 100),"Close Window!"))    this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Use a toggle button to show/hide a button that can close the window.   class EditorGUIToggle extends EditorWindow {    var showClose : boolean = true;    @MenuItem("Examples/EditorGUI Toggle usage")  static function Init() {   var window = GetWindow(EditorGUIToggle);   window.Show();  }    function OnGUI() {   showClose = EditorGUI.Toggle(Rect(0,5,position.width,20),    "Show Close Button",    showClose);   if(showClose)   if(GUI.Button(Rect(0, 25, position.width, 100),"Close Window!"))    this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Use a toggle button to show/hide a button that can close the window.   class EditorGUIToggle extends EditorWindow {    var showClose : boolean = true;    @MenuItem("Examples/EditorGUI Toggle usage")  static function Init() {   var window = GetWindow(EditorGUIToggle);   window.Show();  }    function OnGUI() {   showClose = EditorGUI.Toggle(Rect(0,5,position.width,20),    "Show Close Button",    showClose);   if(showClose)   if(GUI.Button(Rect(0, 25, position.width, 100),"Close Window!"))    this.Close();  }  }</example>
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean)">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>The value set by the user.</returns>
            <remarks>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>The value set by the user.</returns>
            <remarks>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>The value set by the user.</returns>
            <remarks>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
            <param name="labelStyle">Optional GUIStyle to use for the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>The value set by the user.</returns>
            <remarks>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toggle.</param>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
            <param name="labelStyle">Optional GUIStyle to use for the label.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,System.String,UnityEngine.Vector2)">
            <summary>Make an X &amp;amp; Y field for entering a Vector2.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {   var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(Rect(3,15,position.width,20),"Select an Object to inspect");   }    }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
            <summary>Make an X &amp;amp; Y field for entering a Vector2.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {   var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(Rect(3,15,position.width,20),"Select an Object to inspect");   }    }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,System.String,UnityEngine.Vector3)">
            <summary>Make an X, Y &amp;amp; Z field for entering a Vector3.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {  var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(    Rect(3,15,position.width,20),    "Select an Object to inspect");   }    }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector3)">
            <summary>Make an X, Y &amp;amp; Z field for entering a Vector3.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {  var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(    Rect(3,15,position.width,20),    "Select an Object to inspect");   }    }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="M:UnityEditor.EditorGUI.Vector4Field(UnityEngine.Rect,System.String,UnityEngine.Vector4)">
            <summary>Make an X, Y, Z &amp;amp; W field for entering a Vector4.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor window that shows the detailed rotation (X,Y,Z and W components),  // the position in 3D space and position in Screen space of the selected  // transform.   class CustomTransformInspector extends EditorWindow {  var showing : boolean = true;  var rotationComp : Vector4;    @MenuItem("Examples/GameObject detailed inspector")  static function Init() {   var window = GetWindow(CustomTransformInspector);   window.Show();  }    function OnInspectorUpdate() {   Repaint();  }  function OnGUI() {   var currObj = Selection.activeTransform;   showing = EditorGUI.InspectorTitlebar(Rect(0,0,position.width, 20), showing, currObj);   if(showing) {   if(currObj) {    currObj.position = EditorGUI.Vector3Field(Rect(3,15,position.width-6,20),     "Position in 3D Space:",     currObj.position);       EditorGUI.Vector2Field(Rect(3,50,position.width-6,20),     "Position in Screen Space:",     Camera.main.WorldToScreenPoint(currObj.position));       rotationComp = EditorGUI.Vector4Field(Rect(3, 85, position.width-6, 20),      "Detailed Rotation:",      QuaternionToVector4(currObj.localRotation));    currObj.localRotation = ConvertToQuaternion(rotationComp);         currObj.localScale = EditorGUI.Vector3Field(Rect(3,120,position.width-6,20),      "Scale:",      currObj.localScale);       } else {    EditorGUI.DropShadowLabel(Rect(3,15,position.width,20),"Select an Object to inspect");   }    }   }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }  }</example>
            <param name="position">Rectangle on the screen to use for the field.</param>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
        </member>
        <member name="T:UnityEditor.EditorGUILayout">
            <summary>Auto-layouted version of EditorGUI.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorGUILayout">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
            <summary>Begin a horizontal group and get its rect back.</summary>
            <returns>To be added.</returns>
            <remarks>This is an extension to GUILayout.BeginHorizontal. It can be used for making compound controls</remarks>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a horizontal group and get its rect back.</summary>
            <returns>To be added.</returns>
            <remarks>This is an extension to GUILayout.BeginHorizontal. It can be used for making compound controls</remarks>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Begin an automatically layouted scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</remarks>
            <example>// Simple Editor Window that creates a scroll view with a Label inside   class BeginEndScrollView extends EditorWindow {    var scrollPos : Vector2;  var t : String = "This is a string inside a Scroll view!";    @MenuItem("Examples/Write text on ScrollView")  static function Init() {   var window = GetWindow(BeginEndScrollView);   window.Show();  }    function OnGUI() {   EditorGUILayout.BeginHorizontal();   scrollPos =    EditorGUILayout.BeginScrollView(scrollPos, GUILayout.Width (100), GUILayout.Height (100));    GUILayout.Label(t);   EditorGUILayout.EndScrollView();   if(GUILayout.Button("Add More Text", GUILayout.Width (100), GUILayout.Height (100)))    t += " \nAnd this is more text!";   EditorGUILayout.EndHorizontal();   if(GUILayout.Button("Clear"))   t = "";  }  }</example>
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle)">
            <param name="style">To be added.</param>
            <summary>Begin an automatically layouted scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</remarks>
            <example>// Simple Editor Window that creates a scroll view with a Label inside   class BeginEndScrollView extends EditorWindow {    var scrollPos : Vector2;  var t : String = "This is a string inside a Scroll view!";    @MenuItem("Examples/Write text on ScrollView")  static function Init() {   var window = GetWindow(BeginEndScrollView);   window.Show();  }    function OnGUI() {   EditorGUILayout.BeginHorizontal();   scrollPos =    EditorGUILayout.BeginScrollView(scrollPos, GUILayout.Width (100), GUILayout.Height (100));    GUILayout.Label(t);   EditorGUILayout.EndScrollView();   if(GUILayout.Button("Add More Text", GUILayout.Width (100), GUILayout.Height (100)))    t += " \nAnd this is more text!";   EditorGUILayout.EndHorizontal();   if(GUILayout.Button("Clear"))   t = "";  }  }</example>
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Begin an automatically layouted scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</remarks>
            <example>// Simple Editor Window that creates a scroll view with a Label inside   class BeginEndScrollView extends EditorWindow {    var scrollPos : Vector2;  var t : String = "This is a string inside a Scroll view!";    @MenuItem("Examples/Write text on ScrollView")  static function Init() {   var window = GetWindow(BeginEndScrollView);   window.Show();  }    function OnGUI() {   EditorGUILayout.BeginHorizontal();   scrollPos =    EditorGUILayout.BeginScrollView(scrollPos, GUILayout.Width (100), GUILayout.Height (100));    GUILayout.Label(t);   EditorGUILayout.EndScrollView();   if(GUILayout.Button("Add More Text", GUILayout.Width (100), GUILayout.Height (100)))    t += " \nAnd this is more text!";   EditorGUILayout.EndHorizontal();   if(GUILayout.Button("Clear"))   t = "";  }  }</example>
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Begin an automatically layouted scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</remarks>
            <example>// Simple Editor Window that creates a scroll view with a Label inside   class BeginEndScrollView extends EditorWindow {    var scrollPos : Vector2;  var t : String = "This is a string inside a Scroll view!";    @MenuItem("Examples/Write text on ScrollView")  static function Init() {   var window = GetWindow(BeginEndScrollView);   window.Show();  }    function OnGUI() {   EditorGUILayout.BeginHorizontal();   scrollPos =    EditorGUILayout.BeginScrollView(scrollPos, GUILayout.Width (100), GUILayout.Height (100));    GUILayout.Label(t);   EditorGUILayout.EndScrollView();   if(GUILayout.Button("Add More Text", GUILayout.Width (100), GUILayout.Height (100)))    t += " \nAnd this is more text!";   EditorGUILayout.EndHorizontal();   if(GUILayout.Button("Clear"))   t = "";  }  }</example>
            <param name="scrollPosition">The position to use display.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <param name="background">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Begin an automatically layouted scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</remarks>
            <example>// Simple Editor Window that creates a scroll view with a Label inside   class BeginEndScrollView extends EditorWindow {    var scrollPos : Vector2;  var t : String = "This is a string inside a Scroll view!";    @MenuItem("Examples/Write text on ScrollView")  static function Init() {   var window = GetWindow(BeginEndScrollView);   window.Show();  }    function OnGUI() {   EditorGUILayout.BeginHorizontal();   scrollPos =    EditorGUILayout.BeginScrollView(scrollPos, GUILayout.Width (100), GUILayout.Height (100));    GUILayout.Label(t);   EditorGUILayout.EndScrollView();   if(GUILayout.Button("Add More Text", GUILayout.Width (100), GUILayout.Height (100)))    t += " \nAnd this is more text!";   EditorGUILayout.EndHorizontal();   if(GUILayout.Button("Clear"))   t = "";  }  }</example>
            <param name="scrollPosition">The position to use display.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(System.String,System.Boolean)">
            <summary>Begin a vertical group with a toggle to enable or disable all the controls within at once.</summary>
            <returns>The enabled state selected by the user.</returns>
            <remarks>See Also: EndToggleGroup.</remarks>
            <example>// C# Example  // Simple script that lets you align GameObjects  // positionrotationscale wise with the selected active transform   using UnityEngine;  using UnityEditor;   public class Aligner : EditorWindow {  bool[] pos = new bool[3] { true, true, true };  bool[] rot = new bool[3] { true, true, true };  bool[] scale = new bool[3] { true, true, true };    bool posGroupEnabled = true;  bool rotGroupEnabled = true;  bool scaleGroupEnabled = false;    void OnGUI() {   posGroupEnabled = EditorGUILayout.BeginToggleGroup("Align position", posGroupEnabled);   pos[0] = EditorGUILayout.Toggle("x", pos[0]);   pos[1] = EditorGUILayout.Toggle("y", pos[1]);   pos[2] = EditorGUILayout.Toggle("z", pos[2]);   EditorGUILayout.EndToggleGroup();    rotGroupEnabled = EditorGUILayout.BeginToggleGroup("Align rotation", rotGroupEnabled);   rot[0] = EditorGUILayout.Toggle("x", rot[0]);   rot[1] = EditorGUILayout.Toggle("y", rot[1]);   rot[2] = EditorGUILayout.Toggle("z", rot[2]);   EditorGUILayout.EndToggleGroup();    scaleGroupEnabled = EditorGUILayout.BeginToggleGroup("Align scale", scaleGroupEnabled);   scale[0] = EditorGUILayout.Toggle("x", scale[0]);   scale[1] = EditorGUILayout.Toggle("y", scale[1]);   scale[2] = EditorGUILayout.Toggle("z", scale[2]);   EditorGUILayout.EndToggleGroup();    GUILayout.Space(30);   if (GUILayout.Button("Align!"))   Align();  }    void Align() {   Transform[] transforms = Selection.transforms;   Transform activeTransform = Selection.activeTransform;   if (transforms.Length &amp;lt; 2) {   Debug.LogWarning("Aligner: select at least two objects.");   return;   }   for (int i = 0; i &amp;lt; transforms.Length; i++) {   if (posGroupEnabled) {    Vector3 newPos;    newPos.x = pos[0] ?     activeTransform.position.x : transforms[i].position.x;    newPos.y = pos[1] ?     activeTransform.position.y : transforms[i].position.y;    newPos.z = pos[2] ?     activeTransform.position.z : transforms[i].position.z;    transforms[i].position = newPos;   }   if (rotGroupEnabled) {    Vector3 newRot;    newRot.x = rot[0] ?     activeTransform.rotation.eulerAngles.x : transforms[i].rotation.eulerAngles.x;    newRot.y = rot[1] ?     activeTransform.rotation.eulerAngles.y : transforms[i].rotation.eulerAngles.y;    newRot.z = rot[2] ?     activeTransform.rotation.eulerAngles.z : transforms[i].rotation.eulerAngles.z;    transforms[i].rotation = Quaternion.Euler(newRot);   }   if (scaleGroupEnabled) {    Vector3 newScale;    newScale.x = scale[0] ?     activeTransform.localScale.x : transforms[i].localScale.x;    newScale.y = scale[1] ?     activeTransform.localScale.y : transforms[i].localScale.y;    newScale.z = scale[2] ?     activeTransform.localScale.z : transforms[i].localScale.z;    transforms[i].localScale = newScale;   }   }  }    [MenuItem("Examples/Position-Rotation-Scale Aligner")]  static void Init() {   Aligner window = (Aligner)EditorWindow.GetWindow(typeof(Aligner));   window.Show();  }  }</example>
            <param name="label">Label to show above the toggled controls.</param>
            <param name="toggle">Enabled state of the toggle group.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(UnityEngine.GUIContent,System.Boolean)">
            <summary>Begin a vertical group with a toggle to enable or disable all the controls within at once.</summary>
            <returns>The enabled state selected by the user.</returns>
            <remarks>See Also: EndToggleGroup.</remarks>
            <example>// C# Example  // Simple script that lets you align GameObjects  // positionrotationscale wise with the selected active transform   using UnityEngine;  using UnityEditor;   public class Aligner : EditorWindow {  bool[] pos = new bool[3] { true, true, true };  bool[] rot = new bool[3] { true, true, true };  bool[] scale = new bool[3] { true, true, true };    bool posGroupEnabled = true;  bool rotGroupEnabled = true;  bool scaleGroupEnabled = false;    void OnGUI() {   posGroupEnabled = EditorGUILayout.BeginToggleGroup("Align position", posGroupEnabled);   pos[0] = EditorGUILayout.Toggle("x", pos[0]);   pos[1] = EditorGUILayout.Toggle("y", pos[1]);   pos[2] = EditorGUILayout.Toggle("z", pos[2]);   EditorGUILayout.EndToggleGroup();    rotGroupEnabled = EditorGUILayout.BeginToggleGroup("Align rotation", rotGroupEnabled);   rot[0] = EditorGUILayout.Toggle("x", rot[0]);   rot[1] = EditorGUILayout.Toggle("y", rot[1]);   rot[2] = EditorGUILayout.Toggle("z", rot[2]);   EditorGUILayout.EndToggleGroup();    scaleGroupEnabled = EditorGUILayout.BeginToggleGroup("Align scale", scaleGroupEnabled);   scale[0] = EditorGUILayout.Toggle("x", scale[0]);   scale[1] = EditorGUILayout.Toggle("y", scale[1]);   scale[2] = EditorGUILayout.Toggle("z", scale[2]);   EditorGUILayout.EndToggleGroup();    GUILayout.Space(30);   if (GUILayout.Button("Align!"))   Align();  }    void Align() {   Transform[] transforms = Selection.transforms;   Transform activeTransform = Selection.activeTransform;   if (transforms.Length &amp;lt; 2) {   Debug.LogWarning("Aligner: select at least two objects.");   return;   }   for (int i = 0; i &amp;lt; transforms.Length; i++) {   if (posGroupEnabled) {    Vector3 newPos;    newPos.x = pos[0] ?     activeTransform.position.x : transforms[i].position.x;    newPos.y = pos[1] ?     activeTransform.position.y : transforms[i].position.y;    newPos.z = pos[2] ?     activeTransform.position.z : transforms[i].position.z;    transforms[i].position = newPos;   }   if (rotGroupEnabled) {    Vector3 newRot;    newRot.x = rot[0] ?     activeTransform.rotation.eulerAngles.x : transforms[i].rotation.eulerAngles.x;    newRot.y = rot[1] ?     activeTransform.rotation.eulerAngles.y : transforms[i].rotation.eulerAngles.y;    newRot.z = rot[2] ?     activeTransform.rotation.eulerAngles.z : transforms[i].rotation.eulerAngles.z;    transforms[i].rotation = Quaternion.Euler(newRot);   }   if (scaleGroupEnabled) {    Vector3 newScale;    newScale.x = scale[0] ?     activeTransform.localScale.x : transforms[i].localScale.x;    newScale.y = scale[1] ?     activeTransform.localScale.y : transforms[i].localScale.y;    newScale.z = scale[2] ?     activeTransform.localScale.z : transforms[i].localScale.z;    transforms[i].localScale = newScale;   }   }  }    [MenuItem("Examples/Position-Rotation-Scale Aligner")]  static void Init() {   Aligner window = (Aligner)EditorWindow.GetWindow(typeof(Aligner));   window.Show();  }  }</example>
            <param name="label">Label to show above the toggled controls.</param>
            <param name="toggle">Enabled state of the toggle group.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical group and get its rect back.</summary>
            <returns>To be added.</returns>
            <remarks>This is an extension to GUILayout.BeginVertical. It can be used for making compound controls</remarks>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical group and get its rect back.</summary>
            <returns>To be added.</returns>
            <remarks>This is an extension to GUILayout.BeginVertical. It can be used for making compound controls</remarks>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
            <summary>Make Center &amp;amp; Extents field for entering a Bounds.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BoundsField(System.String,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
            <summary>Make Center &amp;amp; Extents field for entering a Bounds.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.GUIContent,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
            <summary>Make Center &amp;amp; Extents field for entering a Bounds.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for selecting a Color.</summary>
            <returns>The color selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change The color of the selected GameObjects   class MassiveColorChange extends EditorWindow {    var matColor : Color = Color.white;    @MenuItem("Examples/Massive Color Change")  static function Init() {   var window = GetWindow(MassiveColorChange);   window.Show();  }  function OnGUI() {   matColor = EditorGUILayout.ColorField("New Color", matColor);     if(GUILayout.Button("Change!"))   ChangeColors();  }    function ChangeColors() {   if(Selection.activeGameObject)   for(var t in Selection.gameObjects)    if(t.renderer)    t.renderer.sharedMaterial.color = matColor;  }  }</example>
            <param name="value">The color to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ColorField(System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for selecting a Color.</summary>
            <returns>The color selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change The color of the selected GameObjects   class MassiveColorChange extends EditorWindow {    var matColor : Color = Color.white;    @MenuItem("Examples/Massive Color Change")  static function Init() {   var window = GetWindow(MassiveColorChange);   window.Show();  }  function OnGUI() {   matColor = EditorGUILayout.ColorField("New Color", matColor);     if(GUILayout.Button("Change!"))   ChangeColors();  }    function ChangeColors() {   if(Selection.activeGameObject)   for(var t in Selection.gameObjects)    if(t.renderer)    t.renderer.sharedMaterial.color = matColor;  }  }</example>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The color to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for selecting a Color.</summary>
            <returns>The color selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Change The color of the selected GameObjects   class MassiveColorChange extends EditorWindow {    var matColor : Color = Color.white;    @MenuItem("Examples/Massive Color Change")  static function Init() {   var window = GetWindow(MassiveColorChange);   window.Show();  }  function OnGUI() {   matColor = EditorGUILayout.ColorField("New Color", matColor);     if(GUILayout.Button("Change!"))   ChangeColors();  }    function ChangeColors() {   if(Selection.activeGameObject)   for(var t in Selection.gameObjects)    if(t.renderer)    t.renderer.sharedMaterial.color = matColor;  }  }</example>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The color to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class FollowCurve extends EditorWindow {     var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);      @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(FollowCurve);   window.Show();  }    function OnGUI() {   curveX = EditorGUILayout.CurveField("Animation on X", curveX);   curveY = EditorGUILayout.CurveField("Animation on Y", curveY);   curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);     if(GUILayout.Button("Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);   comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="value">The curve to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class FollowCurve extends EditorWindow {     var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);      @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(FollowCurve);   window.Show();  }    function OnGUI() {   curveX = EditorGUILayout.CurveField("Animation on X", curveX);   curveY = EditorGUILayout.CurveField("Animation on Y", curveY);   curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);     if(GUILayout.Button("Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);   comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class FollowCurve extends EditorWindow {     var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);      @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(FollowCurve);   window.Show();  }    function OnGUI() {   curveX = EditorGUILayout.CurveField("Animation on X", curveX);   curveY = EditorGUILayout.CurveField("Animation on Y", curveY);   curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);     if(GUILayout.Button("Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);   comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class FollowCurve extends EditorWindow {     var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);      @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(FollowCurve);   window.Show();  }    function OnGUI() {   curveX = EditorGUILayout.CurveField("Animation on X", curveX);   curveY = EditorGUILayout.CurveField("Animation on Y", curveY);   curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);     if(GUILayout.Button("Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);   comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class FollowCurve extends EditorWindow {     var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);      @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(FollowCurve);   window.Show();  }    function OnGUI() {   curveX = EditorGUILayout.CurveField("Animation on X", curveX);   curveY = EditorGUILayout.CurveField("Animation on Y", curveY);   curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);     if(GUILayout.Button("Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);   comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for editing an AnimationCurve.Make a field for editing an AnimationCurve.</summary>
            <returns>The curve edited by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Makes the selected GameObject follow the animation curve.  //  // Usage: Generate the curves for X,Y and Z axis of your desired GameObject  // Select an Object and click Generate Curve.  // Press Play and see your object moving.     class FollowCurve extends EditorWindow {     var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);  var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);      @MenuItem("Examples/Create Curve For Object")  static function Init() {   var window = GetWindow(FollowCurve);   window.Show();  }    function OnGUI() {   curveX = EditorGUILayout.CurveField("Animation on X", curveX);   curveY = EditorGUILayout.CurveField("Animation on Y", curveY);   curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);     if(GUILayout.Button("Generate Curve"))   AddCurveToSelectedGameObject();  }    function AddCurveToSelectedGameObject() {   if(Selection.activeGameObject) {   var comp : FollowAnimationCurve =    Selection.activeGameObject.AddComponent(FollowAnimationCurve);   comp.SetCurves(curveX, curveY, curveZ);   } else {   Debug.LogError("No GameObject selected for adding an animation curve");   }  }  }  // This script has to go outside of the Editor Folder.   var curveX : AnimationCurve;  var curveY : AnimationCurve;  var curveZ : AnimationCurve;   function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {  curveX = xC;  curveY = yC;  curveZ = zC;  }  function Update() {  transform.position = Vector3(curveX.Evaluate(Time.time),      curveY.Evaluate(Time.time),      curveZ.Evaluate(Time.time));  }</example>
            <param name="label">Optional label to display in front of the field.</param>
            <param name="value">The curve to edit.</param>
            <param name="color">The color to show the curve with.</param>
            <param name="ranges">Optional rectangle that the curve is restrained within.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EndHorizontal">
            <summary>Close a group started with BeginHorizontal.</summary>
            <remarks>See Also: EditorGUILayout.BeginHorizontal</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EndScrollView">
            <summary>Ends a scrollview started with a call to BeginScrollView.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EndToggleGroup">
            <summary>Close a group started with BeginToggleGroup.</summary>
            <remarks>See Also: BeginToggleGroup</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EndVertical">
            <summary>Close a group started with BeginVertical.</summary>
            <remarks>See Also: EditorGUILayout.BeginVertical</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUILayout.EnumMaskField ( "Static Flags", staticFlagMask );  }  }</example>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUILayout.EnumMaskField ( "Static Flags", staticFlagMask );  }  }</example>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUILayout.EnumMaskField ( "Static Flags", staticFlagMask );  }  }</example>
            <param name="label">Prefix label for this field.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUILayout.EnumMaskField ( "Static Flags", staticFlagMask );  }  }</example>
            <param name="label">Prefix label for this field.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUILayout.EnumMaskField ( "Static Flags", staticFlagMask );  }  }</example>
            <param name="label">Prefix label for this field.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a field for enum based masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleEnumMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleEnumMaskUsage);   window.Show();  }    var staticFlagMask : StaticEditorFlags = 0;  function OnGUI() {   staticFlagMask = EditorGUILayout.EnumMaskField ( "Static Flags", staticFlagMask );  }  }</example>
            <param name="label">Prefix label for this field.</param>
            <param name="enumValue">Enum to use for the flags.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUILayoutOption[])">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   enum OPTIONS {   CUBE = 0,   SPHERE = 1,   PLANE = 2  }  class EditorGUILayoutEnumPopup extends EditorWindow {  var op : OPTIONS;    @MenuItem("Examples/Editor GUILayout Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutEnumPopup);   window.Show();  }  function OnGUI() {   op = EditorGUILayout.EnumPopup("Primitive to create:", op);   if(GUILayout.Button("Create"))   InstantiatePrimitive(op);  }  function InstantiatePrimitive(op : OPTIONS) {   switch (op) {   case OPTIONS.CUBE:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case OPTIONS.SPHERE:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case OPTIONS.PLANE:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="selected">The enum option the field shows.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   enum OPTIONS {   CUBE = 0,   SPHERE = 1,   PLANE = 2  }  class EditorGUILayoutEnumPopup extends EditorWindow {  var op : OPTIONS;    @MenuItem("Examples/Editor GUILayout Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutEnumPopup);   window.Show();  }  function OnGUI() {   op = EditorGUILayout.EnumPopup("Primitive to create:", op);   if(GUILayout.Button("Create"))   InstantiatePrimitive(op);  }  function InstantiatePrimitive(op : OPTIONS) {   switch (op) {   case OPTIONS.CUBE:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case OPTIONS.SPHERE:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case OPTIONS.PLANE:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="selected">The enum option the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   enum OPTIONS {   CUBE = 0,   SPHERE = 1,   PLANE = 2  }  class EditorGUILayoutEnumPopup extends EditorWindow {  var op : OPTIONS;    @MenuItem("Examples/Editor GUILayout Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutEnumPopup);   window.Show();  }  function OnGUI() {   op = EditorGUILayout.EnumPopup("Primitive to create:", op);   if(GUILayout.Button("Create"))   InstantiatePrimitive(op);  }  function InstantiatePrimitive(op : OPTIONS) {   switch (op) {   case OPTIONS.CUBE:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case OPTIONS.SPHERE:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case OPTIONS.PLANE:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   enum OPTIONS {   CUBE = 0,   SPHERE = 1,   PLANE = 2  }  class EditorGUILayoutEnumPopup extends EditorWindow {  var op : OPTIONS;    @MenuItem("Examples/Editor GUILayout Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutEnumPopup);   window.Show();  }  function OnGUI() {   op = EditorGUILayout.EnumPopup("Primitive to create:", op);   if(GUILayout.Button("Create"))   InstantiatePrimitive(op);  }  function InstantiatePrimitive(op : OPTIONS) {   switch (op) {   case OPTIONS.CUBE:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case OPTIONS.SPHERE:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case OPTIONS.PLANE:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   enum OPTIONS {   CUBE = 0,   SPHERE = 1,   PLANE = 2  }  class EditorGUILayoutEnumPopup extends EditorWindow {  var op : OPTIONS;    @MenuItem("Examples/Editor GUILayout Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutEnumPopup);   window.Show();  }  function OnGUI() {   op = EditorGUILayout.EnumPopup("Primitive to create:", op);   if(GUILayout.Button("Create"))   InstantiatePrimitive(op);  }  function InstantiatePrimitive(op : OPTIONS) {   switch (op) {   case OPTIONS.CUBE:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case OPTIONS.SPHERE:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case OPTIONS.PLANE:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an enum popup selection field.</summary>
            <returns>The enum option that has been selected by the user.</returns>
            <remarks>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   enum OPTIONS {   CUBE = 0,   SPHERE = 1,   PLANE = 2  }  class EditorGUILayoutEnumPopup extends EditorWindow {  var op : OPTIONS;    @MenuItem("Examples/Editor GUILayout Enum Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutEnumPopup);   window.Show();  }  function OnGUI() {   op = EditorGUILayout.EnumPopup("Primitive to create:", op);   if(GUILayout.Button("Create"))   InstantiatePrimitive(op);  }  function InstantiatePrimitive(op : OPTIONS) {   switch (op) {   case OPTIONS.CUBE:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case OPTIONS.SPHERE:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case OPTIONS.PLANE:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selected">The enum option the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering float values.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUILayoutFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUILayoutFloatField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.FloatField("Increase scale by:", sizeMultiplier);   if(GUILayout.Button("Scale"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering float values.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUILayoutFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUILayoutFloatField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.FloatField("Increase scale by:", sizeMultiplier);   if(GUILayout.Button("Scale"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering float values.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUILayoutFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUILayoutFloatField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.FloatField("Increase scale by:", sizeMultiplier);   if(GUILayout.Button("Scale"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering float values.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUILayoutFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUILayoutFloatField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.FloatField("Increase scale by:", sizeMultiplier);   if(GUILayout.Button("Scale"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering float values.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUILayoutFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUILayoutFloatField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.FloatField("Increase scale by:", sizeMultiplier);   if(GUILayout.Button("Scale"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering float values.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that multiplies the scale of the current selected GameObject    class EditorGUILayoutFloatField extends EditorWindow {    var sizeMultiplier : float = 1;    @MenuItem("Examples/Scale selected Object")  static function Init() {   var window = GetWindow(EditorGUILayoutFloatField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.FloatField("Increase scale by:", sizeMultiplier);   if(GUILayout.Button("Scale"))   Selection.activeTransform.localScale =    Selection.activeTransform.localScale * sizeMultiplier;  }  }</example>
            <param name="label">Optional label to display in front of the float field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class FoldoutUsage extends EditorWindow {    var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(FoldoutUsage);   window.Show();  }    function OnGUI() {   showPosition = EditorGUILayout.Foldout(showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =     EditorGUILayout.Vector3Field("Position", Selection.activeTransform.position);    status = Selection.activeTransform.name;   }     if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class FoldoutUsage extends EditorWindow {    var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(FoldoutUsage);   window.Show();  }    function OnGUI() {   showPosition = EditorGUILayout.Foldout(showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =     EditorGUILayout.Vector3Field("Position", Selection.activeTransform.position);    status = Selection.activeTransform.name;   }     if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,UnityEngine.GUIStyle)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class FoldoutUsage extends EditorWindow {    var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(FoldoutUsage);   window.Show();  }    function OnGUI() {   showPosition = EditorGUILayout.Foldout(showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =     EditorGUILayout.Vector3Field("Position", Selection.activeTransform.position);    status = Selection.activeTransform.name;   }     if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a label with a foldout arrow to the left of it.</summary>
            <returns>The foldout state selected by the user. If true, you should render sub-objects.</returns>
            <remarks>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</remarks>
            <example>// Create a foldable menu that hides/shows the selected transform  // position.  // if no Transform is selected, the Foldout item will be folded until  // a transform is selected.   class FoldoutUsage extends EditorWindow {    var showPosition : boolean = true;  var status : String = "Select a GameObject";  @MenuItem("Examples/Foldout Usage")  static function Init() {   var window = GetWindow(FoldoutUsage);   window.Show();  }    function OnGUI() {   showPosition = EditorGUILayout.Foldout(showPosition, status);   if(showPosition)   if(Selection.activeTransform) {    Selection.activeTransform.position =     EditorGUILayout.Vector3Field("Position", Selection.activeTransform.position);    status = Selection.activeTransform.name;   }     if(!Selection.activeTransform) {   status = "Select a GameObject";   showPosition = false;   }  }  function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="foldout">The shown foldout state.</param>
            <param name="content">The label to show.</param>
            <param name="style">Optional GUIStyle.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.GetControlRect(UnityEngine.GUILayoutOption[])">
            <summary>Get a rect for an Editor control.</summary>
            <returns>To be added.</returns>
            <remarks>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</remarks>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Get a rect for an Editor control.</summary>
            <returns>To be added.</returns>
            <remarks>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</remarks>
            <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Get a rect for an Editor control.</summary>
            <returns>To be added.</returns>
            <remarks>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</remarks>
            <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
            <param name="height">The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Get a rect for an Editor control.</summary>
            <returns>To be added.</returns>
            <remarks>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout. Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</remarks>
            <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
            <param name="height">The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.</param>
            <param name="style">Optional GUIStyle to use for the control.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType)">
            <summary>Make a help box with a message to the user.</summary>
            <remarks>To be added.</remarks>
            <param name="message">The message text.</param>
            <param name="type">The type of message.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType,System.Boolean)">
            <summary>Make a help box with a message to the user.</summary>
            <remarks>To be added.</remarks>
            <param name="message">The message text.</param>
            <param name="type">The type of message.</param>
            <param name="wide">If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object)">
            <summary>Make an inspector-window-like titlebar.</summary>
            <returns>The foldout state selected by the user.</returns>
            <remarks>The titlebar has an arrow for foling out, a help icon, and a settings menu that depends on the type of the object supplied.</remarks>
            <example>// Create a custom transform inspector that shows the X,Y,Z,W quaternion components  // instead of the rotation angles.   class InspectorTitlebarUsage extends EditorWindow {    var fold : boolean = true;  var rotationComponents : Vector4;  var selectedTransform : Transform;    @MenuItem("Examples/Inspector Titlebar")  static function Init() {   var window = GetWindow(InspectorTitlebarUsage);   window.Show();  }   function OnGUI() {   if(Selection.activeGameObject) {   selectedTransform = Selection.activeGameObject.transform;   fold = EditorGUILayout.InspectorTitlebar(fold, selectedTransform);   if(fold) {    selectedTransform.position =     EditorGUILayout.Vector3Field("Position", selectedTransform.position);    EditorGUILayout.Space();    rotationComponents =     EditorGUILayout.Vector4Field("Detailed Rotation",     QuaternionToVector4(selectedTransform.localRotation));    EditorGUILayout.Space();    selectedTransform.localScale =    EditorGUILayout.Vector3Field("Scale", selectedTransform.localScale);   }   selectedTransform.localRotation = ConvertToQuaternion(rotationComponents);   EditorGUILayout.Space();   }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }   function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="foldout">The foldout state shown with the arrow.</param>
            <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object[])">
            <param name="targetObjs">To be added.</param>
            <summary>Make an inspector-window-like titlebar.</summary>
            <returns>The foldout state selected by the user.</returns>
            <remarks>The titlebar has an arrow for foling out, a help icon, and a settings menu that depends on the type of the object supplied.</remarks>
            <example>// Create a custom transform inspector that shows the X,Y,Z,W quaternion components  // instead of the rotation angles.   class InspectorTitlebarUsage extends EditorWindow {    var fold : boolean = true;  var rotationComponents : Vector4;  var selectedTransform : Transform;    @MenuItem("Examples/Inspector Titlebar")  static function Init() {   var window = GetWindow(InspectorTitlebarUsage);   window.Show();  }   function OnGUI() {   if(Selection.activeGameObject) {   selectedTransform = Selection.activeGameObject.transform;   fold = EditorGUILayout.InspectorTitlebar(fold, selectedTransform);   if(fold) {    selectedTransform.position =     EditorGUILayout.Vector3Field("Position", selectedTransform.position);    EditorGUILayout.Space();    rotationComponents =     EditorGUILayout.Vector4Field("Detailed Rotation",     QuaternionToVector4(selectedTransform.localRotation));    EditorGUILayout.Space();    selectedTransform.localScale =    EditorGUILayout.Vector3Field("Scale", selectedTransform.localScale);   }   selectedTransform.localRotation = ConvertToQuaternion(rotationComponents);   EditorGUILayout.Space();   }  }    function ConvertToQuaternion(v4 : Vector4) {   return Quaternion(v4.x, v4.y, v4.z, v4.w);  }  function QuaternionToVector4(q : Quaternion) {   return Vector4(q.x, q.y, q.z, q.w);  }   function OnInspectorUpdate() {   this.Repaint();  }  }</example>
            <param name="foldout">The foldout state shown with the arrow.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUILayoutIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUILayoutIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.IntField("Number of clones:", clones);   if(GUILayout.Button("Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUILayoutIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUILayoutIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.IntField("Number of clones:", clones);   if(GUILayout.Button("Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUILayoutIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUILayoutIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.IntField("Number of clones:", clones);   if(GUILayout.Button("Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUILayoutIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUILayoutIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.IntField("Number of clones:", clones);   if(GUILayout.Button("Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUILayoutIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUILayoutIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.IntField("Number of clones:", clones);   if(GUILayout.Button("Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field for entering integers.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor Script that clones the selected GameObject a number of times.   class EditorGUILayoutIntField extends EditorWindow {    var clones : int = 1;    @MenuItem("Examples/Clone Object")  static function Init() {   var window = GetWindow(EditorGUILayoutIntField);   window.Show();  }    function OnGUI() {   sizeMultiplier = EditorGUILayout.IntField("Number of clones:", clones);   if(GUILayout.Button("Clone!"))   for(var i = 0; i &amp;lt; clones; i++)    Instantiate(Selection.activeGameObject, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="label">Optional label to display in front of the int field.</param>
            <param name="value">The value to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <remarks>To be added.</remarks>
            <returns>The value of the option that has been selected by the user.</returns>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="property">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <remarks>To be added.</remarks>
            <returns>The value of the option that has been selected by the user.</returns>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="property">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <remarks>To be added.</remarks>
            <returns>The value of the option that has been selected by the user.</returns>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="property">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="label">Optional label in front of the field.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an integer popup selection field.Make an integer popup selection field.</summary>
            <returns>The value of the option that has been selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Editor Script that lets you rescale the current selected GameObject.   class EditorGUILayoutIntPopup extends EditorWindow {  var selectedSize : int = 1;  var names : String[] = ["Normal", "Double", "Quadruple"];  var sizes : int[] = [1,2,4];    @MenuItem("Examples/Editor GUILayout Int Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntPopup);   window.Show();  }  function OnGUI() {   selectedSize = EditorGUILayout.IntPopup("Resize Scale: ", selectedSize, names, sizes);   if(GUILayout.Button("Scale"))   ReScale();  }  function ReScale() {   if(Selection.activeTransform)   Selection.activeTransform.localScale =    Vector3(selectedSize, selectedSize, selectedSize);   else Debug.LogError("No Object selected, please select an object to scale.");  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedValue">The value of the option the field shows.</param>
            <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
            <param name="optionValues">An array with the values for each option.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change an integer value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUILayoutIntSlider extends EditorWindow {    var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;  @MenuItem("Examples/Editor GUILayout IntSlider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntSlider);   window.Show();  }  function OnGUI() {   cloneTimesX = EditorGUILayout.IntSlider(cloneTimesX, 1, 10);   cloneTimesY = EditorGUILayout.IntSlider(cloneTimesY, 1, 10);   cloneTimesZ = EditorGUILayout.IntSlider(cloneTimesZ, 1, 10);     if(GUILayout.Button("Duplicate object"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);     }  }</example>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change an integer value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUILayoutIntSlider extends EditorWindow {    var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;  @MenuItem("Examples/Editor GUILayout IntSlider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntSlider);   window.Show();  }  function OnGUI() {   cloneTimesX = EditorGUILayout.IntSlider(cloneTimesX, 1, 10);   cloneTimesY = EditorGUILayout.IntSlider(cloneTimesY, 1, 10);   cloneTimesZ = EditorGUILayout.IntSlider(cloneTimesZ, 1, 10);     if(GUILayout.Button("Duplicate object"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);     }  }</example>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change an integer value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUILayoutIntSlider extends EditorWindow {    var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;  @MenuItem("Examples/Editor GUILayout IntSlider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntSlider);   window.Show();  }  function OnGUI() {   cloneTimesX = EditorGUILayout.IntSlider(cloneTimesX, 1, 10);   cloneTimesY = EditorGUILayout.IntSlider(cloneTimesY, 1, 10);   cloneTimesZ = EditorGUILayout.IntSlider(cloneTimesZ, 1, 10);     if(GUILayout.Button("Duplicate object"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);     }  }</example>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change an integer value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUILayoutIntSlider extends EditorWindow {    var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;  @MenuItem("Examples/Editor GUILayout IntSlider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntSlider);   window.Show();  }  function OnGUI() {   cloneTimesX = EditorGUILayout.IntSlider(cloneTimesX, 1, 10);   cloneTimesY = EditorGUILayout.IntSlider(cloneTimesY, 1, 10);   cloneTimesZ = EditorGUILayout.IntSlider(cloneTimesZ, 1, 10);     if(GUILayout.Button("Duplicate object"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);     }  }</example>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change an integer value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUILayoutIntSlider extends EditorWindow {    var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;  @MenuItem("Examples/Editor GUILayout IntSlider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntSlider);   window.Show();  }  function OnGUI() {   cloneTimesX = EditorGUILayout.IntSlider(cloneTimesX, 1, 10);   cloneTimesY = EditorGUILayout.IntSlider(cloneTimesY, 1, 10);   cloneTimesZ = EditorGUILayout.IntSlider(cloneTimesZ, 1, 10);     if(GUILayout.Button("Duplicate object"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);     }  }</example>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change an integer value between a min and a max.Make a slider the user can drag to change an integer value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you clone your object in a grid   class EditorGUILayoutIntSlider extends EditorWindow {    var cloneTimesX : int = 1;  var cloneTimesY : int = 1;  var cloneTimesZ : int = 1;  var spacing : int = 2;  @MenuItem("Examples/Editor GUILayout IntSlider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutIntSlider);   window.Show();  }  function OnGUI() {   cloneTimesX = EditorGUILayout.IntSlider(cloneTimesX, 1, 10);   cloneTimesY = EditorGUILayout.IntSlider(cloneTimesY, 1, 10);   cloneTimesZ = EditorGUILayout.IntSlider(cloneTimesZ, 1, 10);     if(GUILayout.Button("Duplicate object"))   CloneSelected();  }  function CloneSelected() {   if(!Selection.activeGameObject) {   Debug.LogError("Select a GameObject first");   return;   }   for(var i = 0; i &amp;lt; cloneTimesX; i++)   for(var j = 0; j &amp;lt; cloneTimesY; j++)    for(var k = 0; k &amp;lt; cloneTimesZ; k++)    Instantiate(Selection.activeGameObject,     Vector3(i,j,k)*spacing,     Selection.activeGameObject.transform.rotation);     }  }</example>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <summary>Make a label field. (Useful for showing read-only info.)</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label in front of the label field.</param>
            <param name="label2">The label to show to the right.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set the layer for the selected GameObjects.   class EditorGUILayoutLayerField extends EditorWindow {    var selectedLayer : int = 0;  @MenuItem("Examples/Set Layer For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutLayerField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Layer For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);   if(GUILayout.Button("Set Layer!"))   SetLayer();  }  function SetLayer() {   for(var go : GameObject in Selection.gameObjects)   go.layer = selectedLayer;  }  }</example>
            <param name="layer">The layer shown in the field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set the layer for the selected GameObjects.   class EditorGUILayoutLayerField extends EditorWindow {    var selectedLayer : int = 0;  @MenuItem("Examples/Set Layer For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutLayerField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Layer For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);   if(GUILayout.Button("Set Layer!"))   SetLayer();  }  function SetLayer() {   for(var go : GameObject in Selection.gameObjects)   go.layer = selectedLayer;  }  }</example>
            <param name="layer">The layer shown in the field.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set the layer for the selected GameObjects.   class EditorGUILayoutLayerField extends EditorWindow {    var selectedLayer : int = 0;  @MenuItem("Examples/Set Layer For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutLayerField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Layer For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);   if(GUILayout.Button("Set Layer!"))   SetLayer();  }  function SetLayer() {   for(var go : GameObject in Selection.gameObjects)   go.layer = selectedLayer;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set the layer for the selected GameObjects.   class EditorGUILayoutLayerField extends EditorWindow {    var selectedLayer : int = 0;  @MenuItem("Examples/Set Layer For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutLayerField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Layer For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);   if(GUILayout.Button("Set Layer!"))   SetLayer();  }  function SetLayer() {   for(var go : GameObject in Selection.gameObjects)   go.layer = selectedLayer;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set the layer for the selected GameObjects.   class EditorGUILayoutLayerField extends EditorWindow {    var selectedLayer : int = 0;  @MenuItem("Examples/Set Layer For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutLayerField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Layer For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);   if(GUILayout.Button("Set Layer!"))   SetLayer();  }  function SetLayer() {   for(var go : GameObject in Selection.gameObjects)   go.layer = selectedLayer;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a layer selection field.</summary>
            <returns>The layer selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set the layer for the selected GameObjects.   class EditorGUILayoutLayerField extends EditorWindow {    var selectedLayer : int = 0;  @MenuItem("Examples/Set Layer For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutLayerField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Layer For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);   if(GUILayout.Button("Set Layer!"))   SetLayer();  }  function SetLayer() {   for(var go : GameObject in Selection.gameObjects)   go.layer = selectedLayer;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="layer">The layer shown in the field.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
            <param name="displayedOptions">To be added.</param>
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUILayout.MaskField ("Player Flags", flags, options);  }  }</example>
            <param name="mask">The current mask to display.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="displayedOptions">To be added.</param>
            <param name="style">To be added.</param>
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUILayout.MaskField ("Player Flags", flags, options);  }  }</example>
            <param name="mask">The current mask to display.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
            <param name="displayedOptions">To be added.</param>
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUILayout.MaskField ("Player Flags", flags, options);  }  }</example>
            <param name="label">Prefix label of the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
            <param name="displayedOptions">To be added.</param>
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUILayout.MaskField ("Player Flags", flags, options);  }  }</example>
            <param name="label">Prefix label of the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="displayedOptions">To be added.</param>
            <param name="style">To be added.</param>
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUILayout.MaskField ("Player Flags", flags, options);  }  }</example>
            <param name="label">Prefix label of the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="displayedOptions">To be added.</param>
            <param name="style">To be added.</param>
            <summary>Make a field for masks.</summary>
            <returns>The value modified by the user.</returns>
            <remarks>To be added.</remarks>
            <example>class SimpleMaskUsage extends EditorWindow {  @MenuItem("Examples/Mask Field Usage")  static function Init() {   var window = GetWindow(SimpleMaskUsage);   window.Show();  }    var flags : int = 0;  var options : String[] = ["CanJump", "CanShoot", "CanSwim"];  function OnGUI() {   flags = EditorGUILayout.MaskField ("Player Flags", flags, options);  }  }</example>
            <param name="label">Prefix label of the field.</param>
            <param name="mask">The current mask to display.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
            <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
            <param name="minLimit">The limit at the left end of the slider.</param>
            <param name="maxLimit">The limit at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(UnityEngine.GUIContent,System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a special slider the user can use to specify a range between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Optional label in front of the slider.</param>
            <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
            <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
            <param name="minLimit">The limit at the left end of the slider.</param>
            <param name="maxLimit">The limit at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
            <summary>Make a field to receive any object type.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the Editor class for further information.</remarks>
            <example />
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
            <summary>Make a field to receive any object type.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the Editor class for further information.</remarks>
            <example />
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
            <summary>Make a field to receive any object type.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the Editor class for further information.</remarks>
            <example />
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a field to receive any object type.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the Editor class for further information.</remarks>
            <example />
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
            <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a field to receive any object type.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the Editor class for further information.</remarks>
            <example />
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
            <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a field to receive any object type.</summary>
            <returns>The object that has been set by the user.</returns>
            <remarks>You can assign objects either by drag and drop or by selecting an object using the Object Picker. Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene. If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. See the example in the Editor class for further information.</remarks>
            <example />
            <param name="label">Optional label in front of the field.</param>
            <param name="obj">The object the field shows.</param>
            <param name="objType">The type of the objects that can be assigned.</param>
            <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
            <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUILayoutPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUILayout.PasswordField("Type Something:",text);   EditorGUILayout.LabelField("Written Text:", text);  }  }</example>
            <param name="password">The password to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUILayoutPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUILayout.PasswordField("Type Something:",text);   EditorGUILayout.LabelField("Written Text:", text);  }  }</example>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUILayoutPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUILayout.PasswordField("Type Something:",text);   EditorGUILayout.LabelField("Written Text:", text);  }  }</example>
            <param name="password">The password to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUILayoutPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUILayout.PasswordField("Type Something:",text);   EditorGUILayout.LabelField("Written Text:", text);  }  }</example>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUILayoutPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUILayout.PasswordField("Type Something:",text);   EditorGUILayout.LabelField("Written Text:", text);  }  }</example>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The password entered by the user.</returns>
            <remarks>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Editor Script that creates a password field and lets you visualize what have you  // typed in a label.   class EditorGUILayoutPasswordField extends EditorWindow {    var text : String = "Some text here";    @MenuItem("Examples/Editor Password field usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPasswordField);   window.Show();  }    function OnGUI() {   text = EditorGUILayout.PasswordField("Type Something:",text);   EditorGUILayout.LabelField("Written Text:", text);  }  }</example>
            <param name="label">Optional label to display in front of the password field.</param>
            <param name="password">The password to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a generic popup selection field.</summary>
            <returns>The index of the option that has been selected by the user.</returns>
            <remarks>Takes the currently selected index as a parameter and returns the index selected by the user.</remarks>
            <example>// Creates an instance of a primitive depending on the option selected by the user.   class EditorGUILayoutPopup extends EditorWindow {  var options : String[] = ["Cube", "Sphere", "Plane"];  var index : int = 0;    @MenuItem("Examples/Editor GUILayout Popup usage")  static function Init() {   var window = GetWindow(EditorGUILayoutPopup);   window.Show();  }  function OnGUI() {   index = EditorGUILayout.Popup(index, options);   if(GUILayout.Button("Create"))   InstantiatePrimitive();  }  function InstantiatePrimitive() {   switch (index) {   case 0:    var cube : GameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);     cube.transform.position = Vector3.zero;     break;   case 1:    var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);    sphere.transform.position = Vector3.zero;    break;   case 2:    var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);    plane.transform.position = Vector3.zero;    break;   default:    Debug.LogError("Unrecognized Option");    break;   }  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="selectedIndex">The index of the option the field shows.</param>
            <param name="displayedOptions">An array with the options shown in the popup.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String)">
            <summary>Make a label in front of some control.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent)">
            <summary>Make a label in front of some control.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle)">
            <param name="followingStyle">To be added.</param>
            <summary>Make a label in front of some control.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <param name="followingStyle">To be added.</param>
            <summary>Make a label in front of some control.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <param name="followingStyle">To be added.</param>
            <param name="labelStyle">To be added.</param>
            <summary>Make a label in front of some control.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <param name="followingStyle">To be added.</param>
            <param name="labelStyle">To be added.</param>
            <summary>Make a label in front of some control.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Label to show in front of the control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a field for SerializedProperty.</summary>
            <returns>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</returns>
            <remarks>See Also: SerializedProperty, SerializedObject.</remarks>
            <example />
            <param name="property">The SerializedProperty to make a field for.</param>
            <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
            <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
            <summary>Make an X, Y, W &amp;amp; H field for entering a Rect.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that lets you modify another's window position value  //  // To use this script you need to open first the DummyWindow window.   class MoveResizeSelectedWindow extends EditorWindow {    var pos : Rect;    @MenuItem("Examples/Move - Resize other window")  static function Init() {   var window = GetWindow(MoveResizeSelectedWindow);   window.Show();  }    function OnGUI() {   DummyWindow.instance.position =    EditorGUILayout.RectField("Window's position:",       DummyWindow.instance.position);   if(GUILayout.Button("Reset position"))   DummyWindow.instance.position = Rect(0,0,200,200);   if(GUILayout.Button("Close"))   this.Close();  }  }  // Dummy window that is going to be moved.   class DummyWindow extends EditorWindow {    static var instance;  @MenuItem("Examples/Dummy Window")  static function Init() {   var window = GetWindow(DummyWindow);   window.Show();  }  function DummyWindow() {   instance = this;  }  }</example>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.RectField(System.String,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
            <summary>Make an X, Y, W &amp;amp; H field for entering a Rect.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that lets you modify another's window position value  //  // To use this script you need to open first the DummyWindow window.   class MoveResizeSelectedWindow extends EditorWindow {    var pos : Rect;    @MenuItem("Examples/Move - Resize other window")  static function Init() {   var window = GetWindow(MoveResizeSelectedWindow);   window.Show();  }    function OnGUI() {   DummyWindow.instance.position =    EditorGUILayout.RectField("Window's position:",       DummyWindow.instance.position);   if(GUILayout.Button("Reset position"))   DummyWindow.instance.position = Rect(0,0,200,200);   if(GUILayout.Button("Close"))   this.Close();  }  }  // Dummy window that is going to be moved.   class DummyWindow extends EditorWindow {    static var instance;  @MenuItem("Examples/Dummy Window")  static function Init() {   var window = GetWindow(DummyWindow);   window.Show();  }  function DummyWindow() {   instance = this;  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.GUIContent,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
            <summary>Make an X, Y, W &amp;amp; H field for entering a Rect.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that lets you modify another's window position value  //  // To use this script you need to open first the DummyWindow window.   class MoveResizeSelectedWindow extends EditorWindow {    var pos : Rect;    @MenuItem("Examples/Move - Resize other window")  static function Init() {   var window = GetWindow(MoveResizeSelectedWindow);   window.Show();  }    function OnGUI() {   DummyWindow.instance.position =    EditorGUILayout.RectField("Window's position:",       DummyWindow.instance.position);   if(GUILayout.Button("Reset position"))   DummyWindow.instance.position = Rect(0,0,200,200);   if(GUILayout.Button("Close"))   this.Close();  }  }  // Dummy window that is going to be moved.   class DummyWindow extends EditorWindow {    static var instance;  @MenuItem("Examples/Dummy Window")  static function Init() {   var window = GetWindow(DummyWindow);   window.Show();  }  function DummyWindow() {   instance = this;  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
            <remarks>To be added.</remarks>
            <param name="text">The text to show.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</summary>
            <remarks>To be added.</remarks>
            <param name="text">The text to show.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Separator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Slider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUILayoutSlider extends EditorWindow {    var scale : float = 0.0;    @MenuItem("Examples/Editor GUILayout Slider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutSlider);   window.Show();  }    function OnGUI() {   scale = EditorGUILayout.Slider(scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUILayoutSlider extends EditorWindow {    var scale : float = 0.0;    @MenuItem("Examples/Editor GUILayout Slider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutSlider);   window.Show();  }    function OnGUI() {   scale = EditorGUILayout.Slider(scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Slider(System.String,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUILayoutSlider extends EditorWindow {    var scale : float = 0.0;    @MenuItem("Examples/Editor GUILayout Slider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutSlider);   window.Show();  }    function OnGUI() {   scale = EditorGUILayout.Slider(scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUILayoutSlider extends EditorWindow {    var scale : float = 0.0;    @MenuItem("Examples/Editor GUILayout Slider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutSlider);   window.Show();  }    function OnGUI() {   scale = EditorGUILayout.Slider(scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <remarks>To be added.</remarks>
            <returns>The value that has been set by the user.</returns>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUILayoutSlider extends EditorWindow {    var scale : float = 0.0;    @MenuItem("Examples/Editor GUILayout Slider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutSlider);   window.Show();  }    function OnGUI() {   scale = EditorGUILayout.Slider(scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="label">Optional label in front of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEngine.GUIContent,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a slider the user can drag to change a value between a min and a max.Make a slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Editor script that lets you scale the selected GameObject between 1 and 100   class EditorGUILayoutSlider extends EditorWindow {    var scale : float = 0.0;    @MenuItem("Examples/Editor GUILayout Slider usage")  static function Init() {   var window = GetWindow(EditorGUILayoutSlider);   window.Show();  }    function OnGUI() {   scale = EditorGUILayout.Slider(scale,1, 100);  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.localScale = Vector3(scale, scale, scale);  }  }</example>
            <param name="label">Optional label in front of the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Space">
            <summary>Make a small space between the previous control and the following.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set a tag for the selected GameObjects.   class EditorGUILayoutTagField extends EditorWindow {    var tagStr = "";  @MenuItem("Examples/Set Tags For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutTagField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Tags For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   tagStr = EditorGUILayout.TagField("Tag for Objects:",tagStr);   if(GUILayout.Button("Set Tag!"))   SetTags();  }  function SetTags() {   for(var go : GameObject in Selection.gameObjects)   go.tag = tagStr;  }  }</example>
            <param name="tag">The tag the field shows.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set a tag for the selected GameObjects.   class EditorGUILayoutTagField extends EditorWindow {    var tagStr = "";  @MenuItem("Examples/Set Tags For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutTagField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Tags For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   tagStr = EditorGUILayout.TagField("Tag for Objects:",tagStr);   if(GUILayout.Button("Set Tag!"))   SetTags();  }  function SetTags() {   for(var go : GameObject in Selection.gameObjects)   go.tag = tagStr;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set a tag for the selected GameObjects.   class EditorGUILayoutTagField extends EditorWindow {    var tagStr = "";  @MenuItem("Examples/Set Tags For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutTagField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Tags For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   tagStr = EditorGUILayout.TagField("Tag for Objects:",tagStr);   if(GUILayout.Button("Set Tag!"))   SetTags();  }  function SetTags() {   for(var go : GameObject in Selection.gameObjects)   go.tag = tagStr;  }  }</example>
            <param name="tag">The tag the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set a tag for the selected GameObjects.   class EditorGUILayoutTagField extends EditorWindow {    var tagStr = "";  @MenuItem("Examples/Set Tags For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutTagField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Tags For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   tagStr = EditorGUILayout.TagField("Tag for Objects:",tagStr);   if(GUILayout.Button("Set Tag!"))   SetTags();  }  function SetTags() {   for(var go : GameObject in Selection.gameObjects)   go.tag = tagStr;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set a tag for the selected GameObjects.   class EditorGUILayoutTagField extends EditorWindow {    var tagStr = "";  @MenuItem("Examples/Set Tags For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutTagField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Tags For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   tagStr = EditorGUILayout.TagField("Tag for Objects:",tagStr);   if(GUILayout.Button("Set Tag!"))   SetTags();  }  function SetTags() {   for(var go : GameObject in Selection.gameObjects)   go.tag = tagStr;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a tag selection field.</summary>
            <returns>The tag selected by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple editor script that lets you set a tag for the selected GameObjects.   class EditorGUILayoutTagField extends EditorWindow {    var tagStr = "";  @MenuItem("Examples/Set Tags For Selection")  static function Init() {   var window = GetWindow(EditorGUILayoutTagField);   window.Show();  }  //Disable menu if we dont have at least 1 gameobject selected  @MenuItem("Examples/Set Tags For Selection", true)  static function ValidateSelection() {   return Selection.activeGameObject != null;  }    function OnGUI() {   tagStr = EditorGUILayout.TagField("Tag for Objects:",tagStr);   if(GUILayout.Button("Set Tag!"))   SetTags();  }  function SetTags() {   for(var go : GameObject in Selection.gameObjects)   go.tag = tagStr;  }  }</example>
            <param name="label">Optional label in front of the field.</param>
            <param name="tag">The tag the field shows.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text area.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</remarks>
            <example>// Simple script that lets you visualize your scripts in an editor window  // This can be expanded to save your scripts also in the editor window.   class EditorGUILayoutTextArea extends EditorWindow {   var text : String = "Nothing Opened...";  var txtAsset : TextAsset;  var scroll : Vector2;    @MenuItem("Examples/Script Visualizer")  static function Init() {   var window = GetWindow(EditorGUILayoutTextArea);   window.Show();  }  function OnGUI() {   var newTxtAsset : TextAsset = EditorGUILayout.ObjectField(txtAsset, TextAsset);     if (newTxtAsset != txtAsset)    ReadTextAsset(newTxtAsset);      scroll = EditorGUILayout.BeginScrollView(scroll);    text = EditorGUILayout.TextArea(text, GUILayout.Height(position.height - 30));    EditorGUILayout.EndScrollView();  }    function ReadTextAsset(txt : TextAsset) {   text = txt.text;   txtAsset = txt;  }  }</example>
            <param name="text">The text to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text area.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</remarks>
            <example>// Simple script that lets you visualize your scripts in an editor window  // This can be expanded to save your scripts also in the editor window.   class EditorGUILayoutTextArea extends EditorWindow {   var text : String = "Nothing Opened...";  var txtAsset : TextAsset;  var scroll : Vector2;    @MenuItem("Examples/Script Visualizer")  static function Init() {   var window = GetWindow(EditorGUILayoutTextArea);   window.Show();  }  function OnGUI() {   var newTxtAsset : TextAsset = EditorGUILayout.ObjectField(txtAsset, TextAsset);     if (newTxtAsset != txtAsset)    ReadTextAsset(newTxtAsset);      scroll = EditorGUILayout.BeginScrollView(scroll);    text = EditorGUILayout.TextArea(text, GUILayout.Height(position.height - 30));    EditorGUILayout.EndScrollView();  }    function ReadTextAsset(txt : TextAsset) {   text = txt.text;   txtAsset = txt;  }  }</example>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Automatically change the name of the selected object via a text field   class EditorGUILayoutTextField extends EditorWindow {   var objectName : String = "";  @MenuItem("Examples/GUILayout TextField")  static function Init() {   var window = GetWindow(EditorGUILayoutTextField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the hierarchy view");   if(Selection.activeGameObject)   Selection.activeGameObject.name =    EditorGUILayout.TextField("Object Name: ", Selection.activeGameObject.name);   this.Repaint();  }  }</example>
            <param name="text">The text to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Automatically change the name of the selected object via a text field   class EditorGUILayoutTextField extends EditorWindow {   var objectName : String = "";  @MenuItem("Examples/GUILayout TextField")  static function Init() {   var window = GetWindow(EditorGUILayoutTextField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the hierarchy view");   if(Selection.activeGameObject)   Selection.activeGameObject.name =    EditorGUILayout.TextField("Object Name: ", Selection.activeGameObject.name);   this.Repaint();  }  }</example>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Automatically change the name of the selected object via a text field   class EditorGUILayoutTextField extends EditorWindow {   var objectName : String = "";  @MenuItem("Examples/GUILayout TextField")  static function Init() {   var window = GetWindow(EditorGUILayoutTextField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the hierarchy view");   if(Selection.activeGameObject)   Selection.activeGameObject.name =    EditorGUILayout.TextField("Object Name: ", Selection.activeGameObject.name);   this.Repaint();  }  }</example>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Automatically change the name of the selected object via a text field   class EditorGUILayoutTextField extends EditorWindow {   var objectName : String = "";  @MenuItem("Examples/GUILayout TextField")  static function Init() {   var window = GetWindow(EditorGUILayoutTextField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the hierarchy view");   if(Selection.activeGameObject)   Selection.activeGameObject.name =    EditorGUILayout.TextField("Object Name: ", Selection.activeGameObject.name);   this.Repaint();  }  }</example>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Automatically change the name of the selected object via a text field   class EditorGUILayoutTextField extends EditorWindow {   var objectName : String = "";  @MenuItem("Examples/GUILayout TextField")  static function Init() {   var window = GetWindow(EditorGUILayoutTextField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the hierarchy view");   if(Selection.activeGameObject)   Selection.activeGameObject.name =    EditorGUILayout.TextField("Object Name: ", Selection.activeGameObject.name);   this.Repaint();  }  }</example>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a text field.</summary>
            <returns>The text entered by the user.</returns>
            <remarks>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor, and it can have an optional label in front.</remarks>
            <example>// Automatically change the name of the selected object via a text field   class EditorGUILayoutTextField extends EditorWindow {   var objectName : String = "";  @MenuItem("Examples/GUILayout TextField")  static function Init() {   var window = GetWindow(EditorGUILayoutTextField);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the hierarchy view");   if(Selection.activeGameObject)   Selection.activeGameObject.name =    EditorGUILayout.TextField("Object Name: ", Selection.activeGameObject.name);   this.Repaint();  }  }</example>
            <param name="label">Optional label to display in front of the text field.</param>
            <param name="text">The text to edit.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Show a button if the toggle control is selected.   class EditorGUILayoutToggle extends EditorWindow {    var showBtn : boolean = true;    @MenuItem("Examples/Editor GUILayout Toggle Usage")  static function Init() {   var window = GetWindow(EditorGUILayoutToggle);   window.Show();  }  function OnGUI() {   showBtn = EditorGUILayout.Toggle("Show Button", showBtn);   if(showBtn)   if(GUILayout.Button("Close"))    this.Close();  }  }</example>
            <param name="value">The shown state of the toggle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Show a button if the toggle control is selected.   class EditorGUILayoutToggle extends EditorWindow {    var showBtn : boolean = true;    @MenuItem("Examples/Editor GUILayout Toggle Usage")  static function Init() {   var window = GetWindow(EditorGUILayoutToggle);   window.Show();  }  function OnGUI() {   showBtn = EditorGUILayout.Toggle("Show Button", showBtn);   if(showBtn)   if(GUILayout.Button("Close"))    this.Close();  }  }</example>
            <param name="value">The shown state of the toggle.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Show a button if the toggle control is selected.   class EditorGUILayoutToggle extends EditorWindow {    var showBtn : boolean = true;    @MenuItem("Examples/Editor GUILayout Toggle Usage")  static function Init() {   var window = GetWindow(EditorGUILayoutToggle);   window.Show();  }  function OnGUI() {   showBtn = EditorGUILayout.Toggle("Show Button", showBtn);   if(showBtn)   if(GUILayout.Button("Close"))    this.Close();  }  }</example>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Show a button if the toggle control is selected.   class EditorGUILayoutToggle extends EditorWindow {    var showBtn : boolean = true;    @MenuItem("Examples/Editor GUILayout Toggle Usage")  static function Init() {   var window = GetWindow(EditorGUILayoutToggle);   window.Show();  }  function OnGUI() {   showBtn = EditorGUILayout.Toggle("Show Button", showBtn);   if(showBtn)   if(GUILayout.Button("Close"))    this.Close();  }  }</example>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Show a button if the toggle control is selected.   class EditorGUILayoutToggle extends EditorWindow {    var showBtn : boolean = true;    @MenuItem("Examples/Editor GUILayout Toggle Usage")  static function Init() {   var window = GetWindow(EditorGUILayoutToggle);   window.Show();  }  function OnGUI() {   showBtn = EditorGUILayout.Toggle("Show Button", showBtn);   if(showBtn)   if(GUILayout.Button("Close"))    this.Close();  }  }</example>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle.</summary>
            <returns>The selected state of the toggle.</returns>
            <remarks>To be added.</remarks>
            <example>// Show a button if the toggle control is selected.   class EditorGUILayoutToggle extends EditorWindow {    var showBtn : boolean = true;    @MenuItem("Examples/Editor GUILayout Toggle Usage")  static function Init() {   var window = GetWindow(EditorGUILayoutToggle);   window.Show();  }  function OnGUI() {   showBtn = EditorGUILayout.Toggle("Show Button", showBtn);   if(showBtn)   if(GUILayout.Button("Close"))    this.Close();  }  }</example>
            <param name="label">Optional label in front of the toggle.</param>
            <param name="value">The shown state of the toggle.</param>
            <param name="style">Optional GUIStyle.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>To be added.</returns>
            <remarks>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>To be added.</returns>
            <remarks>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>To be added.</returns>
            <remarks>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
            <param name="labelStyle">Optional GUIStyle to use for the label.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</summary>
            <returns>To be added.</returns>
            <remarks>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</remarks>
            <param name="label">Label to display next to the toggle.</param>
            <param name="value">The value to edit.</param>
            <param name="labelStyle">Optional GUIStyle to use for the label.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Vector2Field(System.String,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
            <summary>Make an X &amp;amp; Y field for entering a Vector2.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that measures the distance between 2 points   class EditorGUILayoutVector2Field extends EditorWindow {    var distance : float = 0;  var p1 : Vector2;  var p2 : Vector2;    @MenuItem("Examples/Measure Distance")  static function Init() {   var window = GetWindow(EditorGUILayoutVector2Field);   window.Show();  }  function OnGUI() {   p1 = EditorGUILayout.Vector2Field("Point 1:", p1);   p2 = EditorGUILayout.Vector2Field("Point 2:", p2);   EditorGUILayout.LabelField("Distance:", distance.ToString());   if(GUILayout.Button("Close"))   this.Close();   }  function OnInspectorUpdate() {   distance = Vector2.Distance(p1,p2);   this.Repaint();  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Vector2Field(UnityEngine.GUIContent,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
            <summary>Make an X &amp;amp; Y field for entering a Vector2.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that measures the distance between 2 points   class EditorGUILayoutVector2Field extends EditorWindow {    var distance : float = 0;  var p1 : Vector2;  var p2 : Vector2;    @MenuItem("Examples/Measure Distance")  static function Init() {   var window = GetWindow(EditorGUILayoutVector2Field);   window.Show();  }  function OnGUI() {   p1 = EditorGUILayout.Vector2Field("Point 1:", p1);   p2 = EditorGUILayout.Vector2Field("Point 2:", p2);   EditorGUILayout.LabelField("Distance:", distance.ToString());   if(GUILayout.Button("Close"))   this.Close();   }  function OnInspectorUpdate() {   distance = Vector2.Distance(p1,p2);   this.Repaint();  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Vector3Field(System.String,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
            <summary>Make an X, Y &amp;amp; Z field for entering a Vector3.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that measures the distance between 2 GameObjects  // or measure the distance between 2 positions in 3D space   class EditorGUILayoutVector3Field extends EditorWindow {    var distance : float = 0;  var obj1 : Vector3;  var obj2 : Vector3;    @MenuItem("Examples/Measure Distance between 2 objects")  static function Init() {   var window = GetWindow(EditorGUILayoutVector3Field);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the Hierarchy view and click 'Capture Position'");   EditorGUILayout.BeginHorizontal();   obj1 = EditorGUILayout.Vector3Field("GameObject 1:", obj1);   if(GUILayout.Button("Capture Position"))    obj1 = Selection.activeTransform.position;   EditorGUILayout.EndHorizontal();     EditorGUILayout.BeginHorizontal();   obj2 = EditorGUILayout.Vector3Field("GameObject 2:", obj2);   if(GUILayout.Button("Capture Position"))    obj2 = Selection.activeTransform.position;   EditorGUILayout.EndHorizontal();   EditorGUILayout.LabelField("Distance:", distance.ToString());   if(GUILayout.Button("Close"))   this.Close();   }  function OnInspectorUpdate() {   distance = Vector3.Distance(obj1,obj2);   this.Repaint();  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Vector3Field(UnityEngine.GUIContent,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
            <summary>Make an X, Y &amp;amp; Z field for entering a Vector3.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple Script that measures the distance between 2 GameObjects  // or measure the distance between 2 positions in 3D space   class EditorGUILayoutVector3Field extends EditorWindow {    var distance : float = 0;  var obj1 : Vector3;  var obj2 : Vector3;    @MenuItem("Examples/Measure Distance between 2 objects")  static function Init() {   var window = GetWindow(EditorGUILayoutVector3Field);   window.Show();  }  function OnGUI() {   GUILayout.Label("Select an object in the Hierarchy view and click 'Capture Position'");   EditorGUILayout.BeginHorizontal();   obj1 = EditorGUILayout.Vector3Field("GameObject 1:", obj1);   if(GUILayout.Button("Capture Position"))    obj1 = Selection.activeTransform.position;   EditorGUILayout.EndHorizontal();     EditorGUILayout.BeginHorizontal();   obj2 = EditorGUILayout.Vector3Field("GameObject 2:", obj2);   if(GUILayout.Button("Capture Position"))    obj2 = Selection.activeTransform.position;   EditorGUILayout.EndHorizontal();   EditorGUILayout.LabelField("Distance:", distance.ToString());   if(GUILayout.Button("Close"))   this.Close();   }  function OnInspectorUpdate() {   distance = Vector3.Distance(obj1,obj2);   this.Repaint();  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEditor.EditorGUILayout.Vector4Field(System.String,UnityEngine.Vector4,UnityEngine.GUILayoutOption[])">
            <summary>Make an X, Y, Z &amp;amp; W field for entering a Vector4.</summary>
            <returns>The value entered by the user.</returns>
            <remarks>To be added.</remarks>
            <example>// Simple script that lets you modify the X,Y,Z and W  // Quaternion values of the selected GameObject   class ModifyQuaternionDirectly extends EditorWindow {      var quat : Quaternion;  var values : Vector4;  @MenuItem("Examples/Modify internal Quaternion")  static function Init() {   var window = GetWindow(ModifyQuaternionDirectly);   window.Show();  }    function OnGUI() {     values = EditorGUILayout.Vector4Field("Components:",values);   if(GUILayout.Button("Capture Rotation"))   values = QuaternionToVector4(Selection.activeTransform.rotation);   if(GUILayout.Button("Close"))   this.Close();  }  function OnInspectorUpdate() {   if(Selection.activeTransform)   Selection.activeTransform.rotation =    Quaternion(values.x, values.y, values.z, values.w);  }  function QuaternionToVector4(rot : Quaternion) {   return Vector4(rot.x, rot.y, rot.z, rot.w);  }  }</example>
            <param name="label">Label to display above the field.</param>
            <param name="value">The value to edit.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="T:UnityEditor.EditorGUIUtility">
            <summary>Miscellaneous helper stuff for EditorGUI.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorGUIUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor)">
            <summary>Add a custom mouse pointer to a control.</summary>
            <remarks>To be added.</remarks>
            <param name="position">The rectangle the control should be shown within.</param>
            <param name="mouse">The mouse cursor to use.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor,System.Int32)">
            <summary>Add a custom mouse pointer to a control.</summary>
            <remarks>To be added.</remarks>
            <param name="position">The rectangle the control should be shown within.</param>
            <param name="mouse">The mouse cursor to use.</param>
            <param name="controlID">ID of a target control.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.CommandEvent(System.String)">
            <param name="commandName">To be added.</param>
            <summary>Creates an event.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.DrawColorSwatch(UnityEngine.Rect,UnityEngine.Color)">
            <summary>Draw a color swatch.</summary>
            <remarks>To be added.</remarks>
            <param name="position">The rectangle to draw the color swatch within.</param>
            <param name="color">The color to draw.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color)">
            <summary>Draw a curve swatch.</summary>
            <remarks>Pass in the curve to draw either with the curve parameter or with the property parameter.</remarks>
            <param name="position">The rectangle to draw the color swatch within.</param>
            <param name="curve">The curve to draw.</param>
            <param name="property">The curve to draw as a SerializedProperty.</param>
            <param name="color">The color to draw the curve with.</param>
            <param name="bgColor">The color to draw the background with.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
            <summary>Draw a curve swatch.</summary>
            <remarks>Pass in the curve to draw either with the curve parameter or with the property parameter.</remarks>
            <param name="position">The rectangle to draw the color swatch within.</param>
            <param name="curve">The curve to draw.</param>
            <param name="property">The curve to draw as a SerializedProperty.</param>
            <param name="color">The color to draw the curve with.</param>
            <param name="bgColor">The color to draw the background with.</param>
            <param name="curveRanges">Optional parameter to specify the range of the curve which should be included in swatch.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
            <param name="position">To be added.</param>
            <param name="property">To be added.</param>
            <param name="property2">To be added.</param>
            <param name="color">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="curveRanges">To be added.</param>
            <summary>Draw swatch with a filled region between two SerializedProperty curves.Draw swatch with a filled region between two curves.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
            <param name="position">To be added.</param>
            <param name="curve">To be added.</param>
            <param name="curve2">To be added.</param>
            <param name="color">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="curveRanges">To be added.</param>
            <summary>Draw swatch with a filled region between two SerializedProperty curves.Draw swatch with a filled region between two curves.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.editingTextField">
            <summary>Is a text field currently editing text?</summary>
            <value>To be added.</value>
            <remarks>In Editor GUI, text fields can have focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. editingTextField is true when a text field is in this text editing mode.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.fieldWidth">
            <summary>The minimum width in pixels reserved for the fields of Editor GUI controls.</summary>
            <value>To be added.</value>
            <remarks>Most Editor GUI controls consist of a label as well as the control field itself. The minimum width of the field is controlled by the fieldWidth value. Fields often appear wider than the minimum width, since Editor GUI controls are usually set to occupy a Rect that expands to fill the available horizontal space. Within this Rect, the field will take up all the space not used by the EditorGUIUtility.labelWidth. The fieldWidth also controls the width of the text field in EditorGUI.Slider controls.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.FindTexture(System.String)">
            <param name="name">To be added.</param>
            <summary>Get a texture from its source filename.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.GetBuiltinSkin(UnityEditor.EditorSkin)">
            <param name="skin">To be added.</param>
            <summary>Get one of the built-in GUI skins, which can be the game view, inspector or scene view skin as chosen by the parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.GetIconSize">
            <summary>Get the size that has been set using SetIconSize.</summary>
            <returns>To be added.</returns>
            <remarks>The default size is Vector2.zero where the size is determined by the available space. See Also: SetIconSize.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerControlID">
            <summary>The controlID of the currently showing object picker.</summary>
            <returns>To be added.</returns>
            <remarks>See ShowObjectPicker.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerObject">
            <summary>The object currently selected in the object picker.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.HasObjectThumbnail(System.Type)">
            <param name="objType">To be added.</param>
            <summary>Does a given class have per-object thumbnails?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.hierarchyMode">
            <summary>Is the Editor GUI is hierarchy mode?</summary>
            <value>To be added.</value>
            <remarks>In hierarchy mode, EditorGUI.Foldout controls are positioned with the foldout triangle to the left of the specified Rect for the control, rather than being inside the Rect. This way, the label of the foldout is aligned together with labels of other Editor GUI controls.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.HSVToRGB(System.Single,System.Single,System.Single)">
            <param name="H">To be added.</param>
            <param name="S">To be added.</param>
            <param name="V">To be added.</param>
            <summary>Convert a set of HSV values to an RGB Color.</summary>
            <returns>The RGB color calculated from the HSV values passed into the function. The alpha value of the color will be 1.</returns>
            <remarks>All values are in the range 0 - 1. See Also: RGBToHSV.</remarks>
            <example>// Simple script that shows the color info on  // RGB (Red Green Blue) values and  // HSV (Hue Saturation Value) values.   class RGBHSVInfo extends Editor{     @MenuItem("Examples/Color Info")  static function CheckColor() {   var h : float = 0;   var s : float = 0;   var v : float = 0;    var objColor : Color = Color.white;     var obj = Selection.activeGameObject.renderer;   if(!obj.renderer.material) {   Debug.LogError("Selected Object doesnt have a material.");   return;   }   objColor = obj.renderer.sharedMaterial.color;   EditorGUIUtility.RGBToHSV(objColor,h,s,v);   objColor = EditorGUIUtility.HSVToRGB(h,s,v);   Debug.Log("RGB: " + objColor.r + "," + objColor.g + "," + objColor.b);   Debug.Log("HSV: " + h + "," + s + "," + v);  }    @MenuItem("Examples/Color Info", true)  static function ValidateCheckColor() {   return Selection.activeGameObject != null;  }  }</example>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.isProSkin">
            <summary>Is the user currently using the pro skin? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.labelWidth">
            <summary>The width in pixels reserved for labels of Editor GUI controls.</summary>
            <value>To be added.</value>
            <remarks>Editor GUI controls have a certain width allocated for labels. This width can be changed by setting labelWidth to a different value. Setting it to 0 will reset the label width to the default value. The default value can vary, for example depending on the width of the Inspector window.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.Load(System.String)">
            <param name="path">To be added.</param>
            <summary>Load a built-in resource.</summary>
            <returns>To be added.</returns>
            <remarks>This function will look in Assets/Editor Default Resources/ + path for the resource. If not there, it will try the built-in editor resources by name.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.LoadRequired(System.String)">
            <param name="path">To be added.</param>
            <summary>Load a built-in resource that has to be there.</summary>
            <returns>To be added.</returns>
            <remarks>This function will look in Assets/Editor Default Resources/whatever for the resource.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls">
            <summary>Make all EditorGUI look like regular controls.</summary>
            <remarks>This will make the default styles used by EditorGUI look like controls (e.g. EditorGUI.Popup becomes a full popup menu).</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single)">
            <summary>Make all EditorGUI look like regular controls.</summary>
            <remarks>This will make the default styles used by EditorGUI look like controls (e.g. EditorGUI.Popup becomes a full popup menu).</remarks>
            <param name="labelWidth">Width to use for prefixed labels.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single,System.Single)">
            <summary>Make all EditorGUI look like regular controls.</summary>
            <remarks>This will make the default styles used by EditorGUI look like controls (e.g. EditorGUI.Popup becomes a full popup menu).</remarks>
            <param name="labelWidth">Width to use for prefixed labels.</param>
            <param name="fieldWidth">Width of text entries.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.LookLikeInspector">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorGUIUtility.native">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.ObjectContent(UnityEngine.Object,System.Type)">
            <param name="obj">To be added.</param>
            <param name="type">To be added.</param>
            <summary>Return a GUIContent object with the name and icon of an Object.</summary>
            <returns>To be added.</returns>
            <remarks>If the object is null, the icon will be picked according to type.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.PingObject(System.Int32)">
            <param name="targetInstanceID">To be added.</param>
            <summary>Ping an object in a window like clicking it in an inspector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.PingObject(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Ping an object in a window like clicking it in an inspector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.QueueGameViewInputEvent(UnityEngine.Event)">
            <param name="evt">To be added.</param>
            <summary>Send an input event into the game.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,System.Boolean,System.Boolean)">
            <param name="gui">To be added.</param>
            <summary>Render all ingame cameras.</summary>
            <remarks>To be added.</remarks>
            <param name="cameraRect">The device coordinates to render all game cameras into.</param>
            <param name="gizmos">Show gizmos as well.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,UnityEngine.Rect,System.Boolean,System.Boolean)">
            <param name="statsRect">To be added.</param>
            <param name="gui">To be added.</param>
            <summary>Render all ingame cameras.</summary>
            <remarks>To be added.</remarks>
            <param name="cameraRect">The device coordinates to render all game cameras into.</param>
            <param name="gizmos">Show gizmos as well.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.RGBToHSV(UnityEngine.Color,System.Single@,System.Single@,System.Single@)">
            <summary>Convert a color from RGB to HSV color space.</summary>
            <remarks>All values are in the 0-1 range See Also: HSVToRGB.</remarks>
            <param name="rgbColor">The color to convert from.</param>
            <param name="H">The hue of the color is written to this variable.</param>
            <param name="S">The saturation of the color is written to this variable.</param>
            <param name="V">The value of the color is written to this variable.</param>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.SetIconSize(UnityEngine.Vector2)">
            <param name="size">To be added.</param>
            <summary>Set icons rendered as part of GUIContent to be rendered at a specific size.</summary>
            <remarks>Set the size to Vector2.zero to use the default behaviour where the size is determined by the available space. See Also: GetIconSize.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.SetWantsMouseJumping(System.Int32)">
            <param name="wantz">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorGUIUtility.ShowObjectPicker``1(UnityEngine.Object,System.Boolean,System.String,System.Int32)">
            <typeparam name="T">To be added.</typeparam>
            <param name="obj">To be added.</param>
            <param name="allowSceneObjects">To be added.</param>
            <param name="searchFilter">To be added.</param>
            <param name="controlID">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.singleLineHeight">
            <summary>Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.</summary>
            <value>To be added.</value>
            <remarks>When creating your own multi-line controls, such as controls for custom classes with multiple fields, you can use EditorGULayout.GetControlRect and pass in a height value that is a multiple of EditorGUIUtility.singleLineHeight. This is advisable over hardcoding specific pixel values. See Also: EditorGUILayout.GetControlRect.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.systemCopyBuffer">
            <summary>The system copy buffer.</summary>
            <value>To be added.</value>
            <remarks>Use this to make Copy and Paste work for your own stuff.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.whiteTexture">
            <summary>Get a white texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorGUIUtility.wideMode">
            <summary>Is the Editor GUI currently in wide mode?</summary>
            <value>To be added.</value>
            <remarks>Wide mode is a mode for Editor GUI where the controls for structs such as Vector3 and Rect are inlined so they take up less vertical space. For example, in wide mode a Vector3Field takes up one line height instead of two, and a RectField takes up two line heights instead of three. When creating your own multi-line controls, you can query wideMode and make the layout of your control follow the same logic.</remarks>
        </member>
        <member name="T:UnityEditor.EditorMaterialUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorMaterialUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorMaterialUtility.ResetDefaultTextures(UnityEngine.Material,System.Boolean)">
            <param name="material">To be added.</param>
            <param name="overrideSetTextures">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorMaterialUtility.SetShaderDefaults(UnityEngine.Shader,System.String[],UnityEngine.Texture[])">
            <param name="shader">To be added.</param>
            <param name="name">To be added.</param>
            <param name="textures">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorPrefs">
            <summary>Stores and accesses Unity editor preferences.</summary>
            <remarks>On Mac OS X, EditorPrefs are stored in @@~ Library Preferences/com.unity3d.UnityEditor.plist@@. On Windows, EditorPrefs are stored in the registry under the HKCU\Software\Unity Technologies\UnityEditor key.</remarks>
        </member>
        <member name="C:UnityEditor.EditorPrefs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.DeleteAll">
            <summary>Removes all keys and values from the preferences. Use with caution.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.DeleteKey(System.String)">
            <param name="key">To be added.</param>
            <summary>Removes key and its corresponding value from the preferences.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetBool(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetBool(System.String,System.Boolean)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String,System.Single)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetInt(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetInt(System.String,System.Int32)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetString(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.GetString(System.String,System.String)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.HasKey(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns true if key exists in the preferences.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.SetBool(System.String,System.Boolean)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.SetFloat(System.String,System.Single)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorPrefs.SetString(System.String,System.String)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorSettings.defaultBehaviorMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorSettings.externalVersionControl">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorSettings.serializationMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorSettings.spritePackerMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorSettings.webSecurityEmulationHostUrl">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorSkin">
            <summary>Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorSkin.Game">
            <summary>The skin used for game views.</summary>
        </member>
        <member name="F:UnityEditor.EditorSkin.Inspector">
            <summary>The skin used for inspectors.</summary>
        </member>
        <member name="F:UnityEditor.EditorSkin.Scene">
            <summary>The skin used for scene views.</summary>
        </member>
        <member name="T:UnityEditor.EditorStyles">
            <summary>Common GUIStyles used for EditorGUI controls. These are set up by calling EditorGUIUtility.LookLikeInspector and EditorGUIUtility.LookLikeControls.</summary>
            <remarks>Use these styles to make GUI that looks native to Unity.</remarks>
        </member>
        <member name="C:UnityEditor.EditorStyles">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.boldFont">
            <summary>Bold font.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.boldLabel">
            <summary>Style for bold label.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.colorField">
            <summary>Style used for headings for Color fields.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.foldout">
            <summary>Style used for headings for EditorGUI.Foldout.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.foldoutPreDrop">
            <summary>Style used for headings for EditorGUI.Foldout.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.inspectorDefaultMargins">
            <summary>Wrap content in a vertical group with this style to get the default margins used in the Inspector.</summary>
            <value>To be added.</value>
            <remarks>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls. However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the Editor.UseDefaultMargins method in your custom Editor. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the EditorStyles.inspectorFullWidthMargins style and wrap other parts of the GUI inside a vertical group with the EditorStyles.inspectorDefaultMargins style. See Also: EditorGUILayout.BeginVertical, EditorGUILayout.EndVertical, Editor.UseDefaultMargins, EditorStyles.inspectorFullWidthMargins.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.inspectorFullWidthMargins">
            <summary>Wrap content in a vertical group with this style to get full width margins in the Inspector.</summary>
            <value>To be added.</value>
            <remarks>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls. However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the Editor.UseDefaultMargins method in your custom Editor. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the EditorStyles.inspectorFullWidthMargins style and wrap other parts of the GUI inside a vertical group with the EditorStyles.inspectorDefaultMargins style. See Also: EditorGUILayout.BeginVertical, EditorGUILayout.EndVertical, Editor.UseDefaultMargins, EditorStyles.inspectorDefaultMargins.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.label">
            <summary>Style used for the labelled on all EditorGUI overloads that take a prefix label.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.largeLabel">
            <summary>Style for label with large font.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.layerMaskField">
            <summary>Style used for headings for Layer masks.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniBoldFont">
            <summary>Mini Bold font.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniBoldLabel">
            <summary>Style for mini bold label.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniButton">
            <summary>Style used for a standalone small button.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniButtonLeft">
            <summary>Style used for the leftmost button in a horizontal button group.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniButtonMid">
            <summary>Style used for the middle buttons in a horizontal group.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniButtonRight">
            <summary>Style used for the rightmost button in a horizontal group.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniFont">
            <summary>Mini font.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniLabel">
            <summary>Style for label with small font.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.miniTextField">
            <summary>Smaller text field.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.numberField">
            <summary>Style used for field editors for numbers.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.objectField">
            <summary>Style used for headings for object fields.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.objectFieldThumb">
            <summary>Style used for headings for the Select button in object fields.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.popup">
            <summary>Style used for EditorGUI.Popup, EditorGUI.EnumPopup,.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.radioButton">
            <summary>Style used for a radio button.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.standardFont">
            <summary>Standard font.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.structHeadingLabel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.textField">
            <summary>Style used for EditorGUI.TextField.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toggle">
            <summary>Style used for headings for EditorGUI.Toggle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toggleGroup">
            <summary>Style used for headings for EditorGUILayout.BeginToggleGroup.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toolbar">
            <summary>Toolbar background from top of windows.</summary>
            <value>To be added.</value>
            <remarks>The toolbar is used as a background for other toolbar elements See Also: toolbarButton, toolbarPopup, toolbarDropDown.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toolbarButton">
            <summary>Style for Button and Toggles in toolbars.</summary>
            <value>To be added.</value>
            <remarks>See Also: Example at toolbar.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toolbarDropDown">
            <summary>Toolbar Dropdown.</summary>
            <value>To be added.</value>
            <remarks>See Also: Example at toolbar.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toolbarPopup">
            <summary>Toolbar Popup.</summary>
            <value>To be added.</value>
            <remarks>See Also: Example at toolbar.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.toolbarTextField">
            <summary>Toolbar text field.</summary>
            <value>To be added.</value>
            <remarks>See Also: Example at toolbar.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.whiteBoldLabel">
            <summary>Style for white bold label.</summary>
            <value>To be added.</value>
            <remarks>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.whiteLabel">
            <summary>Style for white label.</summary>
            <value>To be added.</value>
            <remarks>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.whiteLargeLabel">
            <summary>Style for white large label.</summary>
            <value>To be added.</value>
            <remarks>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.whiteMiniLabel">
            <summary>Style for white mini label.</summary>
            <value>To be added.</value>
            <remarks>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.wordWrappedLabel">
            <summary>Style for word wrapped label.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorStyles.wordWrappedMiniLabel">
            <summary>Style for word wrapped mini label.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorUserBuildSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorUserBuildSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.activeBuildTarget">
            <summary>The currently active build target.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.EditorUserBuildSettings.activeBuildTargetChanged">
            <summary>Triggered in response to SwitchActiveBuildTarget.</summary>
            <remarks>See Also: System.Action.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.activeScriptCompilationDefines">
            <summary>DEFINE directives for the compiler.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.allowDebugging">
            <summary>Enable source-level debuggers to connect.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSubtarget">
            <summary>Android platform options.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.appendProject">
            <summary>Append (rather than replace) the build of an iOS Xcode project.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.blackberryBuildSubtarget">
            <summary>The texture compression type to be used when building.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.blackberryBuildType">
            <summary>The build type to be used.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.connectProfiler">
            <summary>Start the player with a connection to the profiler.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.development">
            <summary>Enables a development build.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.enableHeadlessMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.explicitNullChecks">
            <summary>Are null references actively checked?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.flashBuildSubtarget">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUserBuildSettings.GetBuildLocation(UnityEditor.BuildTarget)">
            <param name="target">To be added.</param>
            <summary>Get the current location for the build.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.installInBuildFolder">
            <summary>Place the built player in the build folder.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.metroBuildType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.metroSDK">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.ps3BuildSubtarget">
            <summary>PS3 Build Subtarget.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.selectedBuildTargetGroup">
            <summary>The currently selected build target group.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.selectedMetroTarget">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.selectedStandaloneTarget">
            <summary>The currently selected target for a standalone build.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUserBuildSettings.SetBuildLocation(UnityEditor.BuildTarget,System.String)">
            <param name="target">To be added.</param>
            <param name="location">To be added.</param>
            <summary>Set a new location for the build.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUserBuildSettings.SwitchActiveBuildTarget(UnityEditor.BuildTarget)">
            <param name="target">To be added.</param>
            <summary>Select a new build target to be active.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.symlinkLibraries">
            <summary>Symlink runtime libraries with an iOS Xcode project.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerDeployOnline">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerOfflineDeployment">
            <summary>Build the webplayer along with the UnityObject.js file (so it doesn't need to be downloaded).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerStreamed">
            <summary>Select the streaming option for a webplayer build.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.wiiBuildDebugLevel">
            <summary>Wii player debug level.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.wiiBuildSubtarget">
            <summary>Wii platform options.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.xboxBuildSubtarget">
            <summary>Xbox Build subtarget.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserBuildSettings.xboxRunMethod">
            <summary>Selected Xbox Run Method.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorUserSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorUserSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserSettings.AutomaticAdd">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUserSettings.GetConfigValue(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUserSettings.SetConfigValue(System.String,System.String)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorUserSettings.WorkOffline">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorUtility">
            <summary>Editor utility functions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.EditorUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.BuildResourceFile(UnityEngine.Object[],System.String)">
            <param name="selection">To be added.</param>
            <param name="pathName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.ClearProgressBar">
            <summary>Removes progress bar.</summary>
            <remarks>Will remove any progress bar previously shown using EditorUtility.DisplayProgressBar. See Also: DisplayProgressBar, DisplayCancelableProgressBar functions.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CollectDeepHierarchy(UnityEngine.Object[])">
            <param name="roots">To be added.</param>
            <summary>Collect all objects in the hierarchy rooted at each of the given objects. This is most useful for linearizing entire GameObject hierarchies including all their components.</summary>
            <returns>To be added.</returns>
            <remarks>Note that the traversal will not include assets referenced from within the hierarchy. For example, having a MeshFilter component in the hierarchy will not cause the referenced Mesh to be included in the resulting list.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CollectDependencies(UnityEngine.Object[])">
            <param name="roots">To be added.</param>
            <summary>Calculates and returns a list of all assets the assets listed in roots depend on.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CompileCSharp(System.String[],System.String[],System.String[],System.String)">
            <param name="sources">To be added.</param>
            <param name="references">To be added.</param>
            <param name="defines">To be added.</param>
            <param name="outputFile">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,System.Int32)">
            <param name="texture">To be added.</param>
            <param name="format">To be added.</param>
            <param name="quality">To be added.</param>
            <summary>Compress a texture.</summary>
            <remarks>Use this function to explicitly compress a texture into specified format. If you want to do texture compression in-game, use Texture2D.Compress function, which will use faster but lower quality DXT compression.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,UnityEngine.TextureCompressionQuality)">
            <param name="texture">To be added.</param>
            <param name="format">To be added.</param>
            <param name="quality">To be added.</param>
            <summary>Compress a texture.</summary>
            <remarks>Use this function to explicitly compress a texture into specified format. If you want to do texture compression in-game, use Texture2D.Compress function, which will use faster but lower quality DXT compression.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CopySerialized(UnityEngine.Object,UnityEngine.Object)">
            <param name="source">To be added.</param>
            <param name="dest">To be added.</param>
            <summary>Copy all settings of a Unity Object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CreateEmptyPrefab(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.CreateGameObjectWithHideFlags(System.String,UnityEngine.HideFlags,System.Type[])">
            <param name="name">To be added.</param>
            <param name="flags">To be added.</param>
            <param name="components">To be added.</param>
            <summary>Creates a GameObject with HideFlags and specified components.</summary>
            <returns>To be added.</returns>
            <remarks>This is very similar to creating a GameObject the usual way, except it sets the specified HideFlags immediately.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)">
            <param name="title">To be added.</param>
            <param name="info">To be added.</param>
            <param name="progress">To be added.</param>
            <summary>Displays or updates a progress bar that has a cancel button.</summary>
            <returns>To be added.</returns>
            <remarks>The window title will be set to title and the info will be set to info. Progress should be set to a value between 0.0 and 1.0, where 0 means nothing done and 1.0 means 100% completed. This is useful if you perform any lengthy operations in your editor scripts or wizards, and want to notify the user about the progress. Return argument of this function tells if user had pressed the cancel button. It is then your responsibility to stop the task you were doing. See Also: DisplayProgressBar, ClearProgressBar functions.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayCustomMenu(UnityEngine.Rect,UnityEngine.GUIContent[],System.Int32,UnityEditor.EditorUtility+SelectMenuItemFunction,System.Object)">
            <param name="position">To be added.</param>
            <param name="options">To be added.</param>
            <param name="selected">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="userData">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String)">
            <summary>Displays a modal dialog.</summary>
            <returns>To be added.</returns>
            <remarks>Use it for displaying message boxes in the editor. ok and cancel are labels to be displayed on the dialog buttons. If cancel is empty (the default), then only one button is displayed. DisplayDialog returns true if ok button is pressed. See Also: DisplayDialogComplex function.</remarks>
            <param name="title">The title of the message box.</param>
            <param name="message">The text of the message.</param>
            <param name="ok">Label displayed on the OK dialog button.</param>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String,System.String)">
            <summary>Displays a modal dialog.</summary>
            <returns>To be added.</returns>
            <remarks>Use it for displaying message boxes in the editor. ok and cancel are labels to be displayed on the dialog buttons. If cancel is empty (the default), then only one button is displayed. DisplayDialog returns true if ok button is pressed. See Also: DisplayDialogComplex function.</remarks>
            <param name="title">The title of the message box.</param>
            <param name="message">The text of the message.</param>
            <param name="ok">Label displayed on the OK dialog button.</param>
            <param name="cancel">Label displayed on the Cancel dialog button.</param>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayDialogComplex(System.String,System.String,System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="message">To be added.</param>
            <param name="ok">To be added.</param>
            <param name="cancel">To be added.</param>
            <param name="alt">To be added.</param>
            <summary>Displays a modal dialog with three buttons.</summary>
            <returns>To be added.</returns>
            <remarks>Use it for displaying message boxes in the editor. Similar to DisplayDialog, only this version shows a dialog with three buttons. ok, cancel and alt are labels to be displayed on the buttons. DisplayDialogComplex returns an integer 0, 1 or 2 corresponding to ok, cancel and alt buttons. See Also: DisplayDialog function.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayPopupMenu(UnityEngine.Rect,System.String,UnityEditor.MenuCommand)">
            <param name="position">To be added.</param>
            <param name="menuItemPath">To be added.</param>
            <param name="command">To be added.</param>
            <summary>Displays a popup menu.</summary>
            <remarks>Menu is shown at position pos, generated from a submenu specified by menuItemPath using a MenuCommand as menu context.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)">
            <param name="title">To be added.</param>
            <param name="info">To be added.</param>
            <param name="progress">To be added.</param>
            <summary>Displays or updates a progress bar.</summary>
            <remarks>The window title will be set to title and the info will be set to info. Progress should be set to a value between 0.0 and 1.0, where 0 means nothing done and 1.0 means 100% completed. This is useful if you perform any lengthy operations in your editor scripts or wizards, and want to notify the user about the progress. See Also: DisplayCancelableProgressBar, ClearProgressBar functions.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.ExtractOggFile(UnityEngine.Object,System.String)">
            <param name="obj">To be added.</param>
            <param name="path">To be added.</param>
            <summary>Saves an AudioClip or MovieTexture to a file.</summary>
            <returns>To be added.</returns>
            <remarks>Will save an Ogg Vorbis or Ogg Theora file at the specified path.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.FindAsset(System.String,System.Type)">
            <param name="path">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.FindPrefabRoot(UnityEngine.GameObject)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.FocusProjectWindow">
            <summary>Brings the project window to the front and focuses it.</summary>
            <remarks>This is commonly called after a menu item that creates and selects an asset is invoked.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.FormatBytes(System.Int32)">
            <param name="bytes">To be added.</param>
            <summary>Returns a text for a number of bytes.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.GetAssetPath(UnityEngine.Object)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.GetObjectEnabled(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.GetPrefabParent(UnityEngine.Object)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.GetPrefabType(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.InstanceIDToObject(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>Translates an instance ID to a reference to an object.</summary>
            <returns>To be added.</returns>
            <remarks>If the object is not loaded from disk, loads it from disk.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.InstantiatePrefab(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.InvokeDiffTool(System.String,System.String,System.String,System.String,System.String,System.String)">
            <param name="leftTitle">To be added.</param>
            <param name="leftFile">To be added.</param>
            <param name="rightTitle">To be added.</param>
            <param name="rightFile">To be added.</param>
            <param name="ancestorTitle">To be added.</param>
            <param name="ancestorFile">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.IsPersistent(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Determines if an object is stored on disk.</summary>
            <returns>To be added.</returns>
            <remarks>Typically assets like prefabs, textures, audio clips, animation clips, materials are stored on disk. Returns false if the object lives in the scene. Typically this is a GameObject or component but it could also be a material that was created from code and not stored in an asset but instead stored in the scene.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.LoadWindowLayout(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="directory">To be added.</param>
            <param name="extension">To be added.</param>
            <summary>Displays the "open file" dialog and returns the selected path name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SaveFilePanel function.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.OpenFolderPanel(System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="folder">To be added.</param>
            <param name="defaultName">To be added.</param>
            <summary>Displays the "open folder" dialog and returns the selected path name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: OpenFilePanel, SaveFolderPanel functions.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.OpenWithDefaultApp(System.String)">
            <param name="fileName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.ReconnectToLastPrefab(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object)">
            <param name="go">To be added.</param>
            <param name="targetPrefab">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object,UnityEditor.ReplacePrefabOptions)">
            <param name="go">To be added.</param>
            <param name="targetPrefab">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.ResetToPrefabState(UnityEngine.Object)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.RevealInFinder(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="directory">To be added.</param>
            <param name="defaultName">To be added.</param>
            <param name="extension">To be added.</param>
            <summary>Displays the "save file" dialog and returns the selected path name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: OpenFilePanel function.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SaveFilePanelInProject(System.String,System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="defaultName">To be added.</param>
            <param name="extension">To be added.</param>
            <param name="message">To be added.</param>
            <summary>Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SaveFilePanel function.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SaveFilePanelInProject(System.String,System.String,System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="defaultName">To be added.</param>
            <param name="extension">To be added.</param>
            <param name="message">To be added.</param>
            <param name="path">To be added.</param>
            <summary>Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SaveFilePanel function.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SaveFolderPanel(System.String,System.String,System.String)">
            <param name="title">To be added.</param>
            <param name="folder">To be added.</param>
            <param name="defaultName">To be added.</param>
            <summary>Displays the "save folder" dialog and returns the selected path name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SaveFilePanel, OpenFilePanel functions.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SetDirty(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Marks target object as dirty.</summary>
            <remarks>Unity internally uses the dirty flag to find out when assets have changed and need to be saved to disk. E.g. if you modify a prefab's MonoBehaviour or ScriptableObject variables, you must tell Unity that the value has changed. Unity builtin components internally call SetDirty whenever a property changes. MonoBehaviour or ScriptableObject don't do this automatically so if you want your value to be saved you need to call SetDirty.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SetObjectEnabled(UnityEngine.Object,System.Boolean)">
            <param name="target">To be added.</param>
            <param name="enabled">To be added.</param>
            <summary>Set the enabled state of the object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.SetSelectedWireframeHidden(UnityEngine.Renderer,System.Boolean)">
            <param name="renderer">To be added.</param>
            <param name="enabled">To be added.</param>
            <summary>Set whether the renderer's wireframe will be hidden when the renderer's gameobject is selected.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssets">
            <summary>Unloads assets that are not used.</summary>
            <remarks>An asset is deemed to be unused if it isn't reached after walking the whole GameObject hierarchy, including script components. Static variables are also examined. See Also: Resources.UnloadUnusedAssets.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssetsIgnoreManagedReferences">
            <summary>Unloads assets that are not used, including the ones that are referenced only from scripts.</summary>
            <remarks>Similarly to UnloadUnusedAssets it will unload unused assets, but additionally it will also unload assets that are referenced only by the script properties or static variables. The unloaded assets will be loaded again on the first use. See Also: Resources.UnloadUnusedAssets.</remarks>
        </member>
        <member name="M:UnityEditor.EditorUtility.WarnPrefab(UnityEngine.Object,System.String,System.String,System.String)">
            <param name="target">To be added.</param>
            <param name="title">To be added.</param>
            <param name="warning">To be added.</param>
            <param name="okButton">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorUtility+SelectMenuItemFunction">
            <param name="userData">To be added.</param>
            <param name="options">To be added.</param>
            <param name="selected">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.EditorWindow">
            <summary>Derive from this class to create an editor window.</summary>
            <remarks>Create your own custom editor window that can float free or be docked as a tab, just like the native windows in the Unity interface. Editor windows are typically opened using a menu item.</remarks>
        </member>
        <member name="C:UnityEditor.EditorWindow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.antiAlias">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.autoRepaintOnSceneChange">
            <summary>Does the window automatically repaint whenever the scene has changed?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.BeginWindows">
            <summary>Mark the beginning area of all popup windows.</summary>
            <remarks>GUI.Window behaves somewhat differently in the editor than inside your games. In games, GUI.Window pops up a window on your screen. In the editor,  GUI.Window shows a subwindow inside one of your editor windows. Begin/EndWindows is used to determine where these can go. You need to have all calls to GUI.Window or GUILayout.Window inside a BeginWindows / EndWindows pair. Like this:The placement of the BeginWindows / EndWindows pair determines where popup windows will appear; all windows are clipped to the clipping area defined by GUI.BeginGroup or GUI.BeginScrollView. A small example of that</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.Close">
            <summary>Close the editor window.</summary>
            <remarks>This will destroy the editor window</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.depthBufferBits">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.EndWindows">
            <summary>Close a window group started with EditorWindow.BeginWindows.</summary>
            <remarks>The placement of the BeginWindows / EndWindows pair determines where popup windows will appear; all windows are clipped to the clipping area defined by GUI.BeginGroup or GUI.BeginScrollView. A small example of that:</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.Focus">
            <summary>Moves keyboard focus to this EditorWindow.</summary>
            <remarks>See Also: focusedWindow .And on another file:</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.focusedWindow">
            <summary>The EditorWindow which currently has keyboard focus. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>focusedWindow can be null if no window has focus. See Also: mouseOverWindow, Focus.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type)">
            <summary>Focuses the first found EditorWindow of specified type if it is open.Focuses the first found EditorWindow of type T if it is open.</summary>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type)">
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean)">
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
            <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String)">
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
            <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
            <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String,System.Boolean)">
            <param name="focus">To be added.</param>
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.Returns the first EditorWindow of type T which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
            <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
            <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="utility">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Type[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="desiredDockNextTo">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="utility">To be added.</param>
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <param name="focus">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Type[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <param name="desiredDockNextTo">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String,System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="utility">To be added.</param>
            <param name="title">To be added.</param>
            <param name="focus">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean,System.Type[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <param name="focus">To be added.</param>
            <param name="desiredDockNextTo">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect)">
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type t which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
            <param name="rect">The position on the screen where a newly created window will show.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean)">
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type t which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
            <param name="rect">The position on the screen where a newly created window will show.</param>
            <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean,System.String)">
            <summary>Returns the first EditorWindow of type t which is currently on the screen.Returns the first EditorWindow of type t which is currently on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of the window. Must derive from EditorWindow.</param>
            <param name="rect">The position on the screen where a newly created window will show.</param>
            <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
            <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect)">
            <typeparam name="T">To be added.</typeparam>
            <param name="rect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="rect">To be added.</param>
            <param name="utility">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="rect">To be added.</param>
            <param name="utility">To be added.</param>
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="rect">To be added.</param>
            <param name="utility">To be added.</param>
            <param name="title">To be added.</param>
            <param name="focus">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.maximized">
            <summary>Is this window maximized.</summary>
            <value>To be added.</value>
            <remarks>Set this value to maximize / unmaximize a window. If the window is undocked, this value will always be false and setting it will have no effect.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.maxSize">
            <summary>The maximum size of this window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.minSize">
            <summary>The minimum size of this window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.mouseOverWindow">
            <summary>The EditorWindow currently under the mouse cursor. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>mouseOverWindow can be null if there is no window under the cursor. See Also: focusedWindow.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.position">
            <summary>The position of the window in screen space.</summary>
            <value>To be added.</value>
            <remarks>Setting this value will undock the window if it's docked</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.RemoveNotification">
            <summary>Stop showing notification message.</summary>
            <remarks>Notification message fades away automatically after some time. This function will remove it immediately.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.Repaint">
            <summary>Make the window repaint.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.SendEvent(UnityEngine.Event)">
            <param name="e">To be added.</param>
            <summary>Sends an Event to a window.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.Show">
            <summary>Show the EditorWindow.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.Show(System.Boolean)">
            <param name="immediateDisplay">To be added.</param>
            <summary>Show the EditorWindow.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>Show window with dropdown behaviour (e.g. window is closed when it loses focus) and having.</summary>
            <remarks>Appearance as 'ShowMode.PopupMenu' (no frame).  Note this function auto fits the window to screen while trying to place it first below then above. So windowSize might change when fitting it to screen therefore make sure to get 'position' afterwards  to check size was cropped.</remarks>
            <param name="buttonRect">Is used for positioning the window.</param>
            <param name="windowSize">Is used for setting up initial size of the window.</param>
        </member>
        <member name="M:UnityEditor.EditorWindow.ShowAuxWindow">
            <summary>Show the editor window in the auxiliary window.</summary>
            <remarks>The single auxiliary window can be re-used by different editor windows at different times. Showing an editor window in the auxiliary window can be useful to avoid clutter of many small windows.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent)">
            <param name="notification">To be added.</param>
            <summary>Show a notification message.</summary>
            <remarks>Displays notification message on the window. Unlike message boxes or log messages notification will fade out automatically after some time.  Call RemoveNotification to remove it immediately.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.ShowPopup">
            <summary>Used for popup style windows.</summary>
            <remarks>On mac this means light shadow and no titlebar</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.ShowTab">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.EditorWindow.ShowUtility">
            <summary>Show the EditorWindow as a floating utility window.</summary>
            <remarks>Utility windows will always be in front of normal windows, and will be hidden when user switches to another application. Note: You dont need to use EditorWindow.GetWindow() before using this function to show the window.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.title">
            <summary>The title of this window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.EditorWindow.wantsMouseMove">
            <summary>Does the GUI in this editor window want MouseMove events?</summary>
            <value>To be added.</value>
            <remarks>If set to true, the window recieves an OnGUI call whenever the mouse is moved over the window. Note: This function does not trigger Repaint() Automatically.</remarks>
        </member>
        <member name="T:UnityEditor.ExportPackageOptions">
            <summary>Export package option. Multiple options can be combined together using the | operator.</summary>
            <remarks>See Also: AssetDatabase.ExportPackage.</remarks>
        </member>
        <member name="F:UnityEditor.ExportPackageOptions.Default">
            <summary>Default mode. Will not include dependencies or subdirectories nor include Library assets unless specifically included in the asset list.</summary>
            <remarks>The export process will happen synchronously, ie. the ExportPackage function will not return until the package is fully exported.</remarks>
        </member>
        <member name="F:UnityEditor.ExportPackageOptions.IncludeDependencies">
            <summary>In addition to the assets paths listed, all dependent assets will be included as well.</summary>
        </member>
        <member name="F:UnityEditor.ExportPackageOptions.IncludeLibraryAssets">
            <summary>The exported package will include all library assets, ie. the project settings located in the Library folder of the project.</summary>
            <remarks>This is useful for exporting an entire project in a single unitypackage:</remarks>
        </member>
        <member name="F:UnityEditor.ExportPackageOptions.Interactive">
            <summary>The export operation will be run asynchronously and reveal the exported package file in a file browser window after the export is finished.</summary>
            <remarks>Note. When interactive mode is enabled, ExportPackage will return immediately before the package file has been created.</remarks>
        </member>
        <member name="F:UnityEditor.ExportPackageOptions.Recurse">
            <summary>Will recurse through any subdirectories listed and include all assets inside them.</summary>
        </member>
        <member name="T:UnityEditor.ExternalVersionControl">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ExternalVersionControl(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ExternalVersionControl.AssetServer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ExternalVersionControl.AutoDetect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ExternalVersionControl.Disabled">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ExternalVersionControl.Generic">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ExternalVersionControl.op_Implicit(System.String)~UnityEditor.ExternalVersionControl">
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ExternalVersionControl.op_Implicit(UnityEditor.ExternalVersionControl)~System.String">
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ExternalVersionControl.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.FileUtil">
            <summary>Lets you do move, copy, delete operations over files or directories.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.FileUtil">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.CopyFileOrDirectory(System.String,System.String)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>Copies a file or a directory.</summary>
            <remarks>This function's path can be relative to the project root folder or be an absolute path. All file separators should be forward ones "/". Make sure to include the name of the files or directories at the end of the "to" argument.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.CopyFileOrDirectoryFollowSymlinks(System.String,System.String)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>Copies the file or directory.</summary>
            <remarks>Copies from from path to the destination, to, path. In presence of symbolic links (OS X only), the actual files to which symbolic links point to are copied, not the symbolic links themselves.See Also: FileUtil.CopyFileOrDirectory.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.DeleteFileOrDirectory(System.String)">
            <param name="path">To be added.</param>
            <summary>Deletes a file or a directory given a path.</summary>
            <returns>To be added.</returns>
            <remarks>This function's path is relative to the project root folder but it can also accept absolute paths. All file separators should be forward ones "/" (Unix style).</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.GetProjectRelativePath(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.GetUniqueTempPathInProject">
            <summary>Returns a unique path in the Temp folder within your current project.</summary>
            <returns>To be added.</returns>
            <remarks>The returned path is relative to the project folder. The returned path is of a form Temp/UnityTempFile- uniqueID, where uniqueID is guaranteed to be unique over space and time. You can use it to create temporary files/folders and be sure that you are not overriding somebody else's files, plus you don't have to keep track of the unique IDs yourself.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.MoveFileOrDirectory(System.String,System.String)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>Moves a file or a directory from a given path to another path.</summary>
            <remarks>This function's path is relative to the project root folder but it can also accept absolute paths. All file separators should be forward ones "/". Make sure to include the name of the files or directories at the end of the "to" argument.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.ReplaceDirectory(System.String,System.String)">
            <param name="src">To be added.</param>
            <param name="dst">To be added.</param>
            <summary>Replaces a directory.</summary>
            <remarks>Replaces the directory located at dst with the directory located at src. if dst doesnt exists it copies the file. If dst exists then it deletes it and copies the directory at src to dst See Also: FileUtil.ReplaceFile.</remarks>
        </member>
        <member name="M:UnityEditor.FileUtil.ReplaceFile(System.String,System.String)">
            <param name="src">To be added.</param>
            <param name="dst">To be added.</param>
            <summary>Replaces a file.</summary>
            <remarks>Replaces the file located at dst with the file located at src. if dst doesnt exists it just copies the file. If dst exists then it deletes it and copies the file at src to dst See Also: FileUtil.ReplaceDirectory.</remarks>
        </member>
        <member name="T:UnityEditor.FlashBuildSubtarget">
            <summary>Target Flash build player.</summary>
            <remarks>See Also: EditorUserBuildSettings.flashBuildSubTarget.</remarks>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot2">
            <summary>FlashPlayer 11.2 SWF version 15.</summary>
            <remarks>See Also: EditorUserBuildSettings.flashBuildSubTarget.</remarks>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot3">
            <summary>FlashPlayer 11.3 SWF version 16.</summary>
            <remarks>See Also: EditorUserBuildSettings.flashBuildSubTarget.</remarks>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot4">
            <summary>FlashPlayer 11.4 SWF version 17.</summary>
            <remarks>See Also: EditorUserBuildSettings.flashBuildSubTarget.</remarks>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot5">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot6">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot7">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot8">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.FontRenderingMode">
            <summary>Font rendering mode constants for TrueTypeFontImporter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.FontRenderingMode.HintedRaster">
            <summary>Use hinted font rendering without anti-aliasing. This is the crispest font rendering option, and may be most readable for small.</summary>
            <remarks>Font sizes.</remarks>
        </member>
        <member name="F:UnityEditor.FontRenderingMode.HintedSmooth">
            <summary>Use Anti-Aliased Font rendering with hinting. This forces character lines to run along pixel boundaries, and generally produces.</summary>
            <remarks>A crisper output then FontRenderingMode.Smooth, more similar to the font rendering used on Windows. It is slower to render textures then when using smooth mode, but may be easier to read for small font sizes.</remarks>
        </member>
        <member name="F:UnityEditor.FontRenderingMode.OSDefault">
            <summary>Use the OS default font rendering mode. This selects either FontRenderingMode.HintedSmooth or.</summary>
            <remarks>FontRenderingMode.HintedRaster on Windows, and either FontRenderingMode.Smooth or FontRenderingMode.HintedRaster on Mac OS X, depending on the system preferences. This mode is only available for dynamic fonts, as static fonts are generated at build time.</remarks>
        </member>
        <member name="F:UnityEditor.FontRenderingMode.Smooth">
            <summary>Use Anti-Aliased Font rendering. When using dynamic fonts, this is the mode which is fastest in rendering font textures.</summary>
            <remarks>This mode looks very similar to the font rendering on Mac OS X.</remarks>
        </member>
        <member name="T:UnityEditor.FontTextureCase">
            <summary>Texture case constants for TrueTypeFontImporter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.FontTextureCase.ASCII">
            <summary>Import basic ASCII character set.</summary>
        </member>
        <member name="F:UnityEditor.FontTextureCase.ASCIILowerCase">
            <summary>Only import lower case ASCII character set.</summary>
        </member>
        <member name="F:UnityEditor.FontTextureCase.ASCIIUpperCase">
            <summary>Only import upper case ASCII character set.</summary>
        </member>
        <member name="F:UnityEditor.FontTextureCase.CustomSet">
            <summary>Custom set of characters.</summary>
        </member>
        <member name="F:UnityEditor.FontTextureCase.Dynamic">
            <summary>Render characters into font texture at runtime as needed.</summary>
        </member>
        <member name="F:UnityEditor.FontTextureCase.Unicode">
            <summary>Import a set of Unicode characters common for latin scripts.</summary>
        </member>
        <member name="T:UnityEditor.GameObjectUtility">
            <summary>GameObject utility functions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.GameObjectUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.AreStaticEditorFlagsSet(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
            <param name="go">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>Returns true if the passed in StaticEditorFlags are set.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.DeoptimizeTransformHierarchy(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayer(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>Get the navmesh layer for the GameObject.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerFromName(System.String)">
            <param name="name">To be added.</param>
            <summary>Get the navmesh layer from the layer name.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerNames">
            <summary>Get all the navmesh layer names.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.GetStaticEditorFlags(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>Gets the set StaticEditorFlags.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.OptimizeTransformHierarchy(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.SetNavMeshLayer(UnityEngine.GameObject,System.Int32)">
            <param name="go">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>Set the navmesh layer for the gameobject.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GameObjectUtility.SetStaticEditorFlags(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
            <param name="go">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>Sets the StaticEditorFlags.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.GameViewSizeGroupType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.Android">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.BB10">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.iOS">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.PS3">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.Standalone">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.Tizen">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.WebPlayer">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.Wii">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.WP8">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.GameViewSizeGroupType.Xbox360">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.GenericMenu">
            <summary>The GenericMenu lets you create a custom context and dropdown menus.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.GenericMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)">
            <param name="content">To be added.</param>
            <summary>Add a disabled item to the menu.</summary>
            <remarks>See Also: GenericMenu.AddItem, GenericMenu.AddSeparator.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu+MenuFunction)">
            <param name="content">To be added.</param>
            <param name="on">To be added.</param>
            <param name="func">To be added.</param>
            <summary>Add an item to the menu.Add an item to the menu.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu+MenuFunction2,System.Object)">
            <param name="content">To be added.</param>
            <param name="on">To be added.</param>
            <param name="func">To be added.</param>
            <param name="userData">To be added.</param>
            <summary>Add an item to the menu.Add an item to the menu.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.AddSeparator(System.String)">
            <param name="path">To be added.</param>
            <summary>Add a seperator item to the menu.</summary>
            <remarks>See Also: GenericMenu.AddItem, GenericMenu.AddDisabledItem.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.DropDown(UnityEngine.Rect)">
            <param name="position">To be added.</param>
            <summary>Show the menu at the given screen rect.</summary>
            <remarks>See Also: GenericMenu.ShowAsContext.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.GetItemCount">
            <summary>Get number of items in the menu.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.GenericMenu.ShowAsContext">
            <summary>Show the menu under the mouse.</summary>
            <remarks>See Also: GenericMenu.DropDown.</remarks>
        </member>
        <member name="T:UnityEditor.GenericMenu+MenuFunction">
            <summary>Callback function, called when a menu item is selected.</summary>
            <remarks>See Also: GenericMenu.MenuFunction2.</remarks>
        </member>
        <member name="T:UnityEditor.GenericMenu+MenuFunction2">
            <param name="userData">To be added.</param>
            <summary>Callback function with user data, called when a menu item is selected.</summary>
            <remarks>See Also: GenericMenu.MenuFunction.</remarks>
        </member>
        <member name="T:UnityEditor.GizmoType">
            <summary>Determines how a gizmo is drawn or picked in the Unity editor.</summary>
            <remarks>The types can be combined together with an OR operator. See Also: DrawGizmo.</remarks>
        </member>
        <member name="F:UnityEditor.GizmoType.Active">
            <summary>Draw the gizmo if it is active (shown in the inspector).</summary>
        </member>
        <member name="F:UnityEditor.GizmoType.NotSelected">
            <summary>Draw the gizmo if it is not selected and also no parent/ancestor object is selected.</summary>
        </member>
        <member name="F:UnityEditor.GizmoType.Pickable">
            <summary>The gizmo can be picked in the editor.</summary>
        </member>
        <member name="F:UnityEditor.GizmoType.Selected">
            <summary>Draw the gizmo if it is selected.</summary>
            <remarks>It is recommended to always use GizmoType.SelectedOrChild instead.</remarks>
        </member>
        <member name="F:UnityEditor.GizmoType.SelectedOrChild">
            <summary>Draw the gizmo if it is selected or a child of the selection.</summary>
        </member>
        <member name="T:UnityEditor.Handles">
            <summary>Custom 3D GUI controls and drawing in the scene view.</summary>
            <remarks>Handles are the 3D controls that Unity uses to manipulate items in the scene view. There are a number of built-in Handle GUIs, such as the familiar tools to position, scale and rotate an object via the Transform component. However, it is also possible to define your own Handle GUIs to use with custom component editors. Such GUIs can be a very useful way to edit procedurally-generated scene content, "invisible" items and groups of related objects, such as waypoints and location markers. You can also supplement the 3D Handle GUI in the scene with 2D buttons and other controls overlaid on the scene view. This is done by enclosing standard Unity GUI calls in a Handles.BeginGUI / EndGUI pair within the / OnSceneGUI / function. You can use HandleUtility.GUIPointToWorldRay and HandleUtility.WorldToGUIPoint to convert coordinates between 2D GUI and 3D world coordinates.</remarks>
        </member>
        <member name="C:UnityEditor.Handles">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.ArrowCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw an arrow like those used by the move tool.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.BeginGUI">
            <summary>Begin a 2D GUI block inside the 3D handle GUI.</summary>
            <remarks>Begin a 2D GUI block on top of the current handle camera. See Also: Handles.EndGUI.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.BeginGUI(UnityEngine.Rect)">
            <param name="position">To be added.</param>
            <summary>Begin a 2D GUI block inside the 3D handle GUI.</summary>
            <remarks>Begin a 2D GUI block on top of the current handle camera. See Also: Handles.EndGUI.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.Button(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEditor.Handles+DrawCapFunction)">
            <param name="position">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="size">To be added.</param>
            <param name="pickSize">To be added.</param>
            <param name="capFunc">To be added.</param>
            <summary>Make a 3D Button.</summary>
            <returns>To be added.</returns>
            <remarks>This works like a normal GUI.Button, but it has a 3D position and is drawn by a handle function Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.CircleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a camera-facing Circle. Pass this into handle functions.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.ClearCamera(UnityEngine.Rect,UnityEngine.Camera)">
            <param name="position">To be added.</param>
            <param name="camera">To be added.</param>
            <summary>Clears the camera.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Handles.color">
            <summary>Colors of the handles.</summary>
            <value>To be added.</value>
            <remarks>And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.ConeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a Cone. Pass this into handle functions.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.CubeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a cube. Pass this into handle functions.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="P:UnityEditor.Handles.currentCamera">
            <summary>Setup viewport and stuff for a current camera.</summary>
            <value>To be added.</value>
            <remarks>The camera used for deciding where 3D handles end up.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.CylinderCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a Cylinder. Pass this into handle functions.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.Disc(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Single)">
            <summary>Make a 3D disc that can be dragged with the mouse.</summary>
            <returns>To be added.</returns>
            <remarks>And the script attached to this Handle:</remarks>
            <param name="rotation">The rotation of the disc.</param>
            <param name="position">The center of the disc.</param>
            <param name="axis">The axis to rotate around.</param>
            <param name="size">The size of the disc in world space See Also:HandleUtility.GetHandleSize.</param>
            <param name="cutoffPlane">If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.</param>
            <param name="snap">The new value after the user has modified it.Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.DoPositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DoRotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)">
            <param name="rotation">To be added.</param>
            <param name="position">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DoScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="scale">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DotCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a camera-facing dot. Pass this into handle functions.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Vector3[])">
            <summary>Draw anti-aliased line specified with point array and width.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
            <param name="points">List of points to build the line from.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,UnityEngine.Vector3[])">
            <summary>Draw anti-aliased line specified with point array and width.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
            <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
            <param name="points">List of points to build the line from.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,UnityEngine.Vector3[])">
            <summary>Draw anti-aliased line specified with point array and width.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
            <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
            <param name="points">List of points to build the line from.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,System.Int32,UnityEngine.Vector3[])">
            <param name="actualNumberOfPoints">To be added.</param>
            <summary>Draw anti-aliased line specified with point array and width.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
            <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
            <param name="points">List of points to build the line from.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,System.Single,UnityEngine.Vector3[])">
            <summary>Draw anti-aliased line specified with point array and width.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
            <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
            <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
            <param name="points">List of points to build the line from.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawArrow(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
            <param name="startPosition">To be added.</param>
            <param name="endPosition">To be added.</param>
            <param name="startTangent">To be added.</param>
            <param name="endTangent">To be added.</param>
            <param name="color">To be added.</param>
            <param name="texture">To be added.</param>
            <param name="width">To be added.</param>
            <summary>Draw textured bezier line through start and end points with the given tangents. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel. The bezier curve will be swept using this texture.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera)">
            <summary>Draws a camera inside a rectangle.</summary>
            <remarks>This function alse sets Camera.current to camera. It sets the camera's pixelRect to position. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</remarks>
            <param name="position">The area to draw the camera within in GUI coordinates.</param>
            <param name="camera">The camera to draw.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera,UnityEditor.DrawCameraMode)">
            <summary>Draws a camera inside a rectangle.</summary>
            <remarks>This function alse sets Camera.current to camera. It sets the camera's pixelRect to position. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</remarks>
            <param name="position">The area to draw the camera within in GUI coordinates.</param>
            <param name="camera">The camera to draw.</param>
            <param name="drawMode">How the camera is drawn (textured, wireframe, etc.).</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawCone(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawCube(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawCylinder(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="p1">To be added.</param>
            <param name="p2">To be added.</param>
            <summary>Draw a line from p1 to p2.</summary>
            <remarks>And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawPolyLine(UnityEngine.Vector3[])">
            <param name="points">To be added.</param>
            <summary>Draw a line going through the list of all points.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawRectangle(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawSolidArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>Draw a circular sector (pie piece) in 3D space.</summary>
            <remarks>And the script attached to this Handle:</remarks>
            <param name="center">The center of the circle.</param>
            <param name="normal">The normal of the circle.</param>
            <param name="from">The direction of the point on the circumference, relative to the center, where the sector begins.</param>
            <param name="angle">The angle of the sector, in degrees.</param>
            <param name="radius">The radius of the circleNote: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawSolidDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>Draw a solid flat disc in 3D space.</summary>
            <remarks>And the script attached to this Handle:</remarks>
            <param name="center">The center of the dics.</param>
            <param name="normal">The normal of the disc.</param>
            <param name="radius">The radius of the dicsNote: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawSolidRectangleWithOutline(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Color)">
            <param name="faceColor">To be added.</param>
            <param name="outlineColor">To be added.</param>
            <summary>Draw a solid outlined rectangle in 3D space.</summary>
            <remarks>And the script attached to this Handle:</remarks>
            <param name="verts">The 4 vertices of the rectangle in world coordinates.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawSphere(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.DrawWireArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>Draw a circular arc in 3D space.</summary>
            <remarks>And the script attached to this Handle:</remarks>
            <param name="center">The center of the circle.</param>
            <param name="normal">The normal of the circle.</param>
            <param name="from">The direction of the point on the circle circumference, relative to the center, where the arc begins.</param>
            <param name="angle">The angle of the arc, in degrees.</param>
            <param name="radius">The radius of the circleNote: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.DrawWireDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>Draw the outline of a flat disc in 3D space.</summary>
            <remarks>And the script attached to this Handle:</remarks>
            <param name="center">The center of the dics.</param>
            <param name="normal">The normal of the disc.</param>
            <param name="radius">The radius of the dicsNote: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.EndGUI">
            <summary>End a 2D GUI block and get back to the 3D handle GUI.</summary>
            <remarks>See Also: Handles.BeginGUI.And the script attached to this Handle:</remarks>
        </member>
        <member name="M:UnityEditor.Handles.FreeMoveHandle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Vector3,UnityEditor.Handles+DrawCapFunction)">
            <param name="snap">To be added.</param>
            <summary>Make an unconstrained movement handle.</summary>
            <returns>To be added.</returns>
            <remarks>This can move freely in all directions. Hold down CMD to snap, CMD-SHIFT to raysnap agains colliders in the scene.And the script attached to this handle:</remarks>
            <param name="position">The position of the handle.</param>
            <param name="rotation">The rotation of the handle. this defines the space along.</param>
            <param name="size">The size of the handle.</param>
            <param name="capFunc">The function to use for drawing the handle, eg, Handles.RectangleCapNote: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.FreeRotateHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
            <summary>Make an unconstrained rotation handle.</summary>
            <returns>To be added.</returns>
            <remarks>The handle can rotate freely on all axes.And the script attached to this Handle:</remarks>
            <param name="rotation">Orientation of the handle.</param>
            <param name="position">Center of the handle in 3D space.</param>
            <param name="size">The size of the handle.Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String)">
            <summary>Make a text label positioned in 3D space.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.And the script attached to this Handle:</remarks>
            <param name="position">Position in 3D space as seen from the current handle camera.</param>
            <param name="text">Text to display on the label.</param>
        </member>
        <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent)">
            <summary>Make a text label positioned in 3D space.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.And the script attached to this Handle:</remarks>
            <param name="position">Position in 3D space as seen from the current handle camera.</param>
            <param name="content">Text, image and tooltip for this label.</param>
        </member>
        <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.Texture)">
            <summary>Make a text label positioned in 3D space.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.And the script attached to this Handle:</remarks>
            <param name="position">Position in 3D space as seen from the current handle camera.</param>
            <param name="image">Texture to display on the label.</param>
        </member>
        <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text label positioned in 3D space.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.And the script attached to this Handle:</remarks>
            <param name="position">Position in 3D space as seen from the current handle camera.</param>
            <param name="text">Text to display on the label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a text label positioned in 3D space.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.And the script attached to this Handle:</remarks>
            <param name="position">Position in 3D space as seen from the current handle camera.</param>
            <param name="content">Text, image and tooltip for this label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="P:UnityEditor.Handles.lighting">
            <summary>Are handles lit?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Handles.matrix">
            <summary>Matrix for all handle operations.</summary>
            <value>To be added.</value>
            <remarks>To make all Handle routines work in an Object's local coordinate space, set this to Transform.localToWorldMatrix.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.PositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <param name="rotation">To be added.</param>
            <summary>Make a 3D Scene view position handle.</summary>
            <returns>The new position. If the user has not performed any operation, it will return the same value as you passed it in postion. Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will behave like the built-in move tool in Unity.  If you have assigned something to Undo.SetSnapshotTarget, it will work fully with Undo.  If you have assigned a non-null value to ignoreRaycastObjects, the center handle will support full raycast placement. To control the orientation of the handle, set Handles.matrix prior to calling this function.And the Script attached to this handle:</remarks>
            <example>//Create a position handle that always looks at "lookAtPoint" in LookAtPoint.js     @CustomEditor (LookAtPoint)  class PositionHandleJS extends Editor {  function OnSceneGUI () {  target.lookAtPoint =   Handles.PositionHandle (target.lookAtPoint, Quaternion.identity);  if (GUI.changed)   EditorUtility.SetDirty (target);  }  }  // LookAtPoint.js  // This Script has to be outside of the editor folder.  //  // Usage: Just Place this script on the object you want to work the handle with.   @script ExecuteInEditMode()   var lookAtPoint = Vector3.zero;   function Update () {    transform.LookAt (lookAtPoint);  }</example>
            <param name="position">Center of the handle in 3D space.</param>
        </member>
        <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
            <summary>Make a Scene view radius handle.</summary>
            <returns>The modified radius Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>And the Script attached to this handle:</remarks>
            <example>// Simple script that draws and controls a float var on any GameObject that has the  // ColliderRadius.js script attached.   @CustomEditor (ColliderRadius)  class RadiusHandleJS extends Editor {  function OnSceneGUI () {      target.areaOfEffect = Handles.RadiusHandle (Quaternion.identity,         target.transform.position,         target.areaOfEffect);      if (GUI.changed)        EditorUtility.SetDirty (target);    }  }  // Place this script where you want to see the RadiusHandler working on.   var areaOfEffect : float = 1;</example>
            <param name="rotation">Orientation of the handle.</param>
            <param name="position">Center of the handle in 3D space.</param>
            <param name="radius">Radius to modify.</param>
        </member>
        <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single,System.Boolean)">
            <param name="handlesOnly">To be added.</param>
            <summary>Make a Scene view radius handle.</summary>
            <returns>The modified radius Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>And the Script attached to this handle:</remarks>
            <example>// Simple script that draws and controls a float var on any GameObject that has the  // ColliderRadius.js script attached.   @CustomEditor (ColliderRadius)  class RadiusHandleJS extends Editor {  function OnSceneGUI () {      target.areaOfEffect = Handles.RadiusHandle (Quaternion.identity,         target.transform.position,         target.areaOfEffect);      if (GUI.changed)        EditorUtility.SetDirty (target);    }  }  // Place this script where you want to see the RadiusHandler working on.   var areaOfEffect : float = 1;</example>
            <param name="rotation">Orientation of the handle.</param>
            <param name="position">Center of the handle in 3D space.</param>
            <param name="radius">Radius to modify.</param>
        </member>
        <member name="M:UnityEditor.Handles.RectangleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.RotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>Make a Scene view rotation handle.</summary>
            <returns>The modified rotation Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will behave like the built-in rotation tool in Unity. If you have assigned something to Undo.SetSnapshotTarget, it will work fully with Undo.And the script attached to this handle:</remarks>
            <example>//Create a rotation handle at (0,0,0) and rotate any object that has "RotateAtPoint.js"  // attached from 0,0,0.   @CustomEditor (RotateAtPoint)  class RotationHandleJS extends Editor {  function OnSceneGUI () {      target.rot = Handles.RotationHandle (target.rot, Vector3.zero);      if (GUI.changed)        EditorUtility.SetDirty (target);    }  }  // RotateAtPoint.js  // This Script has to be outside of the editor folder.  //  // Usage: Just Place this script on the object you want to work the handle with.  // And control the Object's rotation from the handle that appears at 0,0,0 when  // This object is selected.   @script ExecuteInEditMode()  var rot : Quaternion = Quaternion.identity;   function Update () {  transform.rotation = rot;  }</example>
            <param name="rotation">Orientation of the handle.</param>
            <param name="position">Center of the handle in 3D space.</param>
        </member>
        <member name="M:UnityEditor.Handles.ScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="size">To be added.</param>
            <summary>Make a Scene view scale handle.</summary>
            <returns>The new scale vector. Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will behave like the built-in scale toolAnd the script Attached to this Handle:</remarks>
            <example>// Creates a "Big" (5 times size) Scale handle that will be present whenever  // you select the target GameObject   @CustomEditor (ScaleAtPoint)  class ScaleHandleJS extends Editor {  function OnSceneGUI () {      target.sc = Handles.ScaleHandle (target.sc,       target.transform.position,      target.transform.rotation,      5.0);      Debug.Log(target.sc);      if (GUI.changed)        EditorUtility.SetDirty (target);    }  }  // ScaleAtPoint.js  // Usage: Place this script on the GameObject you want to use the  // editor-created scale handle.   @script ExecuteInEditMode()   var sc : Vector3 = Vector3(1,1,1);   function Update () {  transform.localScale = sc;  }</example>
            <param name="scale">Scale to modify.</param>
            <param name="position">The position of the handle.</param>
            <param name="rotation">The rotation of the handle.</param>
        </member>
        <member name="M:UnityEditor.Handles.ScaleSlider(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
            <summary>Make a directional scale slider.</summary>
            <returns>To be added.</returns>
            <remarks>And the script attached to this handle:</remarks>
            <param name="scale">The value the user can modify.</param>
            <param name="position">The position of the handle.</param>
            <param name="direction">The direction of the handle.</param>
            <param name="rotation">The rotation of whole object.</param>
            <param name="size">The size of the handle.</param>
            <param name="snap">The new value after the user has modified it. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.ScaleValueHandle(System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEditor.Handles+DrawCapFunction,System.Single)">
            <summary>Make a single-float draggable handle.</summary>
            <returns>To be added.</returns>
            <remarks>This is used to make the center scale handle. The user can click and drag to scale a single float up and down.And the script attached to this Handle:</remarks>
            <param name="value">The value the user can modify.</param>
            <param name="position">The position of the handle.</param>
            <param name="rotation">The rotation of the handle.</param>
            <param name="size">The size of the handle.</param>
            <param name="capFunc">The function to use for drawing the handle e.g. Handles.RectangleCap.</param>
            <param name="snap">The new value after the user has modified it. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.SelectionFrame(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a camera facing selection frame.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Camera)">
            <param name="camera">To be added.</param>
            <summary>Set the current camera so all Handles and Gizmos are draw with its settings.</summary>
            <remarks>Sets Camera.current to be camera and sets its pixelRect.. This does not draw the camera, only sets it to be "active". To draw it use DrawCamera.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Rect,UnityEngine.Camera)">
            <param name="position">To be added.</param>
            <param name="camera">To be added.</param>
            <summary>Set the current camera so all Handles and Gizmos are draw with its settings.</summary>
            <remarks>Sets Camera.current to be camera and sets its pixelRect.. This does not draw the camera, only sets it to be "active". To draw it use DrawCamera.</remarks>
        </member>
        <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Make a 3D slider.</summary>
            <returns>To be added.</returns>
            <remarks>This will draw a 3D-draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space.And the script attached to this Handle:</remarks>
            <param name="position">The position of the current point.</param>
            <param name="direction">The direction of the sliding.</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,System.Single)">
            <summary>Make a 3D slider.</summary>
            <returns>To be added.</returns>
            <remarks>This will draw a 3D-draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space.And the script attached to this Handle:</remarks>
            <param name="position">The position of the current point.</param>
            <param name="direction">The direction of the sliding.</param>
            <param name="size">3D size the size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">The snap value (see Handles.SnapValue).Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,System.Single)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="handlePos">The position of the current point.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,UnityEngine.Vector2)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="handlePos">The position of the current point.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,UnityEngine.Vector2)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
            <param name="handlePos">The position of the current point.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,System.Single,System.Boolean)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="handlePos">The position of the current point.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
            <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="handlePos">The position of the current point.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
            <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
            <param name="handlePos">The position of the current point.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
            <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,UnityEngine.Vector2)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
            <param name="handlePos">The position of the current point.</param>
            <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
        </member>
        <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles+DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
            <summary>Slide a handle in a 2D plane.</summary>
            <returns>The new handle position Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</returns>
            <remarks>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</remarks>
            <example />
            <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
            <param name="handlePos">The position of the current point.</param>
            <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
            <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
            <param name="slideDir1">The first direction of the sliding.</param>
            <param name="slideDir2">The second direction of the sliding.</param>
            <param name="handleSize">The size of the handle.</param>
            <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
            <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
            <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
        </member>
        <member name="M:UnityEditor.Handles.SnapValue(System.Single,System.Single)">
            <param name="val">To be added.</param>
            <param name="snap">To be added.</param>
            <summary>Rounds the value val to the closest multiple of snap (snap can only be posiive).</summary>
            <returns>The rounded value, if is positive, and otherwise.</returns>
            <remarks>To be added.</remarks>
            <example />
        </member>
        <member name="M:UnityEditor.Handles.SphereCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a Sphere. Pass this into handle functions.</summary>
            <remarks>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.And the script attached to this Handle:</remarks>
        </member>
        <member name="T:UnityEditor.Handles+DrawCapFunction">
            <param name="controlID">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>The function to use for drawing the handle e.g. Handles.RectangleCap.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.HandleUtility">
            <summary>Helper functions for Scene View style 3D GUI.</summary>
            <remarks>These are mainly mathematical functions that assist in converting between the 3D scene space and the 2D GUI. The functions are used in the construction of the Unity editor itself and so using them is a good way to make your own Handle GUIs consistent with Unity's.</remarks>
        </member>
        <member name="C:UnityEditor.HandleUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HandleUtility.acceleration">
            <summary>Get standard acceleration for dragging values (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Normal acceleration is 1.0. When Shift is pressed, it is 4.0; when Alt is pressed, acceleration is 0.25. See Also: niceMouseDelta.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.AddControl(System.Int32,System.Single)">
            <param name="controlId">To be added.</param>
            <param name="distance">To be added.</param>
            <summary>Record a distance measurement from a handle.</summary>
            <remarks>All handles call this with their controlID during layout, then use nearestControl to check if they got the mouseDown.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.AddDefaultControl(System.Int32)">
            <param name="controlId">To be added.</param>
            <summary>Add the ID for a default control. This will be picked if nothing else is.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.CalcLineTranslation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Map a mouse drag onto a movement along a line in 3D space.</summary>
            <returns>The distance travelled along constraintDir.</returns>
            <remarks>Certain types of Handles (such as arrows) involve movement along a line in 3D space. For example, the Transform's position arrows move the object along its local X, Y or Z axis as the mouse is dragged. The CalcLineTranslation function converts the movement of the mouse into constrained movement along a 3D line in the familiar way used by Unity's built-in tools.</remarks>
            <example />
            <param name="src">The source point of the drag.</param>
            <param name="dest">The destination point of the drag.</param>
            <param name="srcPosition">The 3D position the dragged object had at src ray.</param>
            <param name="constraintDir">3D direction of constrained movement.</param>
        </member>
        <member name="M:UnityEditor.HandleUtility.ClosestPointToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <param name="center">To be added.</param>
            <param name="normal">To be added.</param>
            <param name="from">To be added.</param>
            <param name="angle">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Get the point on an arc (in 3D space) which is closest to the current mouse position.</summary>
            <returns>To be added.</returns>
            <remarks>This function takes the arc defined by its parameters and "flattens" it into screen space. The closest point between the flattened arc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D arc. This is useful for Handle GUIs that involve rotation of an object around the center of the arc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.ClosestPointToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="center">To be added.</param>
            <param name="normal">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Get the point on an disc (in 3D space) which is closest to the current mouse position.</summary>
            <returns>To be added.</returns>
            <remarks>This function takes the disc defined by its parameters and "flattens" it into screen space. The closest point between the flattened disc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D disc. This is useful for Handle GUIs that involve rotation of an object around the center of the disc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.ClosestPointToPolyLine(UnityEngine.Vector3[])">
            <param name="vertices">To be added.</param>
            <summary>Get the point on a polyline (in 3D space) which is closest to the current mouse position.</summary>
            <returns>To be added.</returns>
            <remarks>A polyline is simply a zigzag line defined by a set of points connected in sequence. The ClosestPointToPolyLine function takes the polyline defined by a point array and "flattens" it into screen space. The closest point between the flattened line and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D polyline. This is useful for Handle GUIs that involve manipulating an arbitrary 3D shape using the mouse; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools. An example of where this might be used is a racetrack defined by a set of waypoints - a position along the track line could be selected via the mouse using ClosestPointToPolyLine.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistancePointBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <param name="startPosition">To be added.</param>
            <param name="endPosition">To be added.</param>
            <param name="startTangent">To be added.</param>
            <param name="endTangent">To be added.</param>
            <summary>Calculate distance between a point and a Bezier curve.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Handles.DrawBezier function.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistancePointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <param name="lineStart">To be added.</param>
            <param name="lineEnd">To be added.</param>
            <summary>Calculate distance between a point and a line.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: ProjectPointLine.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistancePointToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="p">To be added.</param>
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Distance from a point p in 2d to a line defined by two points a and b.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistancePointToLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="p">To be added.</param>
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Distance from a point p in 2d to a line segment defined by two points a and b.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistanceToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <param name="center">To be added.</param>
            <param name="normal">To be added.</param>
            <param name="from">To be added.</param>
            <param name="angle">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Pixel distance from mouse pointer to a 3D section of a disc.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates the screen space distance from the mouse pointer to the disc section at given world space position with the given radius and normal. The disc section is defined by from vector and the angle in degrees. Uses the current camera to determine the distance. See Also: DistanceToDisc, DistanceToCircle.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)">
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Pixel distance from mouse pointer to camera facing circle.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates the screen space distance from the mouse pointer to the circle at given world space position with the given radius. The circle is assumed to be facing the camera. Uses the current camera to determine the distance. See Also: DistanceToDisc.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="center">To be added.</param>
            <param name="normal">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Pixel distance from mouse pointer to a 3D disc.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates the screen space distance from the mouse pointer to the disc (circle) at given world space position with the given radius and normal. Uses the current camera to determine the distance. See Also: DistanceToCircle.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="p1">To be added.</param>
            <param name="p2">To be added.</param>
            <summary>Pixel distance from mouse pointer to line.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates the screen space distance from the mouse pointer to the line between p1 and p2 world space points. Uses the current camera to determine the distance.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistanceToPolyLine(UnityEngine.Vector3[])">
            <param name="points">To be added.</param>
            <summary>Pixel distance from mouse pointer to a polyline.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates the screen space distance from the mouse pointer to the multi segment line that goes through the given world space points. Uses the current camera to determine the distance. See Also: DistanceToLine.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.DistanceToRectangle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Pixel distance from mouse pointer to a rectangle on screen.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates the screen space distance from the mouse pointer to the rectangle. Uses the current camera to determine the distance.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.GetHandleSize(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Get world space size of a manipulator handle at given position.</summary>
            <returns>To be added.</returns>
            <remarks>Uses the current camera to calculate suitable size.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.GUIPointToWorldRay(UnityEngine.Vector2)">
            <param name="position">To be added.</param>
            <summary>Convert 2D GUI position to a world space ray.</summary>
            <returns>To be added.</returns>
            <remarks>Uses the current camera to calculate the ray. See Also: WorldToGUIPoint, RaySnap.</remarks>
        </member>
        <member name="P:UnityEditor.HandleUtility.handleMaterial">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HandleUtility.nearestControl">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HandleUtility.niceMouseDelta">
            <summary>Get nice mouse delta to use for dragging a float value (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This will autodetect the users preference for X / Y axis dragging and give you back a float that is measured accordingly. This also handles modifier keys correctly, i.e. the delta is already multiplied by acceleration. See Also: acceleration, niceMouseDeltaZoom.</remarks>
        </member>
        <member name="P:UnityEditor.HandleUtility.niceMouseDeltaZoom">
            <summary>Get nice mouse delta to use for zooming (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This will autodetect the users preference for X / Y axis dragging and give you back a float that is measured accordingly. This also handles modifier keys correctly, i.e. the delta is already multiplied by acceleration. See Also: acceleration, niceMouseDelta.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="selectPrefabRoot">To be added.</param>
            <summary>Pick GameObject closest to specified position.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect)">
            <summary>Pick GameObjects that lie within a specified screen rectangle.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for implementing multi-select tools that allow the user to drag a rectangle around the desired objects.</remarks>
            <param name="rect">An screen rectangle specified with pixel coordinates.</param>
        </member>
        <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect,System.Boolean)">
            <param name="selectPrefabRootsOnly">To be added.</param>
            <summary>Pick GameObjects that lie within a specified screen rectangle.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for implementing multi-select tools that allow the user to drag a rectangle around the desired objects.</remarks>
            <param name="rect">An screen rectangle specified with pixel coordinates.</param>
        </member>
        <member name="M:UnityEditor.HandleUtility.PointOnLineParameter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <param name="linePoint">To be added.</param>
            <param name="lineDirection">To be added.</param>
            <summary>Returns the parameter for the projection of the point on the given line.</summary>
            <returns>To be added.</returns>
            <remarks>The return value can be negative if the projected point is in negative lineDirection relative to the linePoint See Also: ProjectPointLine.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.PopCamera(UnityEngine.Camera)">
            <param name="camera">To be added.</param>
            <summary>Retrieve all camera settings.</summary>
            <remarks>A call to PopCamera will retrieve the most recently stored Camera settings added to a "stack" structure by PushCamera. This allows for easy saving and restoration of temporary camera changes.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <param name="lineStart">To be added.</param>
            <param name="lineEnd">To be added.</param>
            <summary>Project point onto a line.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: DistancePointLine. See Also: PointOnLineParameter.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.PushCamera(UnityEngine.Camera)">
            <param name="camera">To be added.</param>
            <summary>Store all camera settings.</summary>
            <remarks>The camera settings will be added to a so-called "stack" list, where they will stay until retrieved by a call to PopCamera. The settings will be stored in the reverse of the order in which they were added, so a call to PopCamera will retrieve the most recently stored Camera data and then remove it from the stack. A subsequent call to PopCamera will then retrieve the next most recently pushed data and so on.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)">
            <param name="ray">To be added.</param>
            <summary>Casts ray against the scene and report if an object lies in its path.</summary>
            <returns>A boxed RaycastHit, null if nothing hit it.</returns>
            <remarks>To be added.</remarks>
            <example />
        </member>
        <member name="M:UnityEditor.HandleUtility.Repaint">
            <summary>Repaint the current view.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HandleUtility.WorldPointToSizedRect(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is useful when 3D objects need labels or other 2D controls that follow them around in 3D space as the camera moves.</remarks>
            <param name="position">The world-space position to use.</param>
            <param name="content">The content to make room for.</param>
            <param name="style">The style to use. The style's alignment.</param>
        </member>
        <member name="M:UnityEditor.HandleUtility.WorldToGUIPoint(UnityEngine.Vector3)">
            <summary>Convert world space point to a 2D GUI position.</summary>
            <returns>To be added.</returns>
            <remarks>Uses the current camera to calculate the projection. See Also: GUIPointToWorldRay, RaySnap.</remarks>
            <param name="world">Point in world space.</param>
        </member>
        <member name="T:UnityEditor.Help">
            <summary>Helper class to access Unity documentation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Help">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Help.BrowseURL(System.String)">
            <param name="url">To be added.</param>
            <summary>Open url in the default web browser.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Help.HasHelpForObject(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Is there a help page for this object?</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Help.ShowHelpForObject.</remarks>
        </member>
        <member name="M:UnityEditor.Help.ShowHelpForObject(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Show help page for this object.</summary>
            <remarks>See Also: Help.HasHelpForObject.</remarks>
        </member>
        <member name="M:UnityEditor.Help.ShowHelpPage(System.String)">
            <param name="page">To be added.</param>
            <summary>Show a help page.</summary>
            <remarks>page should be the URL of the help page, usually beginning with file://. If page starts with @@file:// unity @@, then it points to Unity help.See Also: Help.ShowHelpForObject.</remarks>
        </member>
        <member name="T:UnityEditor.HierarchyProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.HierarchyProperty(UnityEditor.HierarchyType)">
            <param name="hierarchytType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.ancestors">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.colorCode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.CountRemaining(System.Int32[])">
            <param name="expanded">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.depth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.FilterSingleSceneObject(System.Int32,System.Boolean)">
            <param name="instanceID">To be added.</param>
            <param name="otherVisibilityState">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Find(System.Int32,System.Int32[])">
            <param name="instanceID">To be added.</param>
            <param name="expanded">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.FindAllAncestors(System.Int32[])">
            <param name="instanceIDs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.guid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.hasChildren">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.hasFullPreviewImage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.icon">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.iconDrawStyle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.instanceID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.IsExpanded(System.Int32[])">
            <param name="expanded">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.isFolder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.isMainRepresentation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.isValid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Next(System.Int32[])">
            <param name="expanded">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.NextWithDepthCheck(System.Int32[],System.Int32)">
            <param name="expanded">To be added.</param>
            <param name="minDepth">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Parent">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.pptrValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Previous(System.Int32[])">
            <param name="expanded">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Reset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.HierarchyProperty.row">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.SetSearchFilter(System.String,System.Int32)">
            <param name="searchString">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HierarchyProperty.Skip(System.Int32,System.Int32[])">
            <param name="count">To be added.</param>
            <param name="expanded">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.HierarchyType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.HierarchyType.Assets">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.HierarchyType.GameObjects">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.Highlighter">
            <summary>Use this class to highlight elements in the editor for use in in-editor tutorials and similar.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Highlighter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Highlighter.active">
            <summary>Is there currently an active highlight?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Highlighter.activeRect">
            <summary>The rect in screenspace of the current active highlight.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Highlighter.activeText">
            <summary>The text of the current active highlight.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Highlighter.activeVisible">
            <summary>Is the current active highlight visible yet?</summary>
            <value>To be added.</value>
            <remarks>If the element to be highlighted is inside a scrollview, the scrollview automatically scrolls to reveal the element. Once it is within view, activeViisble will be true.</remarks>
        </member>
        <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String)">
            <summary>Highlights an element in the editor.</summary>
            <returns>if the requested element was found; otherwise.</returns>
            <remarks>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it. Once the element is highlighted it will stay highlighted until either the Highlighter.Stop function is called, or the element disappears from view. The element could disappear from view if the user scrolls away from it, the window is closed, the section of the GUI with the element in it is collapsed or otherwise hidden, or when starting or stopping Play Mode. Most EditorGUI controls can be highlighted using their label as identifier.Any control that uses the SerializedProperty system can be highlighted using its SerializedProperty.propertyPath .Any element with text in it can be highlighted using that text as identifier, which is for example useful for buttons.See the HighlightSearchMode enum for more details on identifying elements. See Also: Highlighter.Stop, Highlighter.HighlightIdentifier.</remarks>
            <example />
            <param name="windowTitle">The title of the window the element is inside.</param>
            <param name="text">The text to identify the element with.</param>
        </member>
        <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String,UnityEditor.HighlightSearchMode)">
            <summary>Highlights an element in the editor.</summary>
            <returns>if the requested element was found; otherwise.</returns>
            <remarks>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it. Once the element is highlighted it will stay highlighted until either the Highlighter.Stop function is called, or the element disappears from view. The element could disappear from view if the user scrolls away from it, the window is closed, the section of the GUI with the element in it is collapsed or otherwise hidden, or when starting or stopping Play Mode. Most EditorGUI controls can be highlighted using their label as identifier.Any control that uses the SerializedProperty system can be highlighted using its SerializedProperty.propertyPath .Any element with text in it can be highlighted using that text as identifier, which is for example useful for buttons.See the HighlightSearchMode enum for more details on identifying elements. See Also: Highlighter.Stop, Highlighter.HighlightIdentifier.</remarks>
            <example />
            <param name="windowTitle">The title of the window the element is inside.</param>
            <param name="text">The text to identify the element with.</param>
            <param name="mode">Optional mode to specify how to search for the element.</param>
        </member>
        <member name="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)">
            <summary>Call this method to create an identifiable rect that the Highlighter can find.</summary>
            <remarks>If you want a custom rect in an EditorWindow or custom Editor to be highlightable, you can call this method to specify the rect and the identifier text for that rect. That will make it possible for the Highlighter to highlight the rect.</remarks>
            <param name="position">The position to make highlightable.</param>
            <param name="identifier">The identifier text of the rect.</param>
        </member>
        <member name="M:UnityEditor.Highlighter.Stop">
            <summary>Stops the active highlight.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.HighlightSearchMode">
            <summary>Used to specify how to find a given element in the editor to highlight.</summary>
            <remarks>Let's consider various approaches to highlighting the Scale control in the Transform component. Using the HighlightSearchMode.PrefixLabel mode you can specify the label text "Scale" as the identifier to highlight the entire Scale control with both label and all three number fields included. This mode can't be used if you want to only highlight the X component of the Scale control. Since the label text of the X component is simply "X", you would get the X component of the Position control instead if you attempted that. The HighlightSearchMode.PrefixLabel mode works for any control that uses EditorGUI.PrefixLabel or EditorGUI.HandlePrefixLabel. If you use the HighlightSearchMode.Content mode to seach for the text "Scale", only the label itself will be highlighted. This mode can highlight what corresponds to a single GUIStyle.Draw call and hence cannot highlight composite controls. It is particularly useful for highlighting buttons. The HighlightSearchMode.Identifier mode searches for rects explicitly marked to be highlightable using the Highlighter.HighlightIdentifier function. This is for example done for all controls that uses the SerializedProperty system, using the SerializedProperty.propertyPath as the identifier. This means you could use this mode to highlight the X component of the Scale control by searching for "m_LocalScale.x". The HighlightSearchMode.Auto mode searches using all the above modes and can be used in most cases. Searching for "Scale" using this mode will highlight the entire Scale control rather than just the label, since the PrefixLabel handling is hit before the GUIStyle.Draw call of the label. See Also: Highlighter.</remarks>
        </member>
        <member name="F:UnityEditor.HighlightSearchMode.Auto">
            <summary>Highlights the first element found using any of the search modes.</summary>
        </member>
        <member name="F:UnityEditor.HighlightSearchMode.Content">
            <summary>Highlights an element containing text using the text as identifier.</summary>
        </member>
        <member name="F:UnityEditor.HighlightSearchMode.Identifier">
            <summary>Highlights an element with a given identifier text.</summary>
        </member>
        <member name="F:UnityEditor.HighlightSearchMode.None">
            <summary>Highlights nothing.</summary>
        </member>
        <member name="F:UnityEditor.HighlightSearchMode.PrefixLabel">
            <summary>Highlights an entire editor control using its label text as identifier.</summary>
        </member>
        <member name="T:UnityEditor.HumanTemplate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.HumanTemplate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HumanTemplate.ClearTemplate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HumanTemplate.Find(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.HumanTemplate.Insert(System.String,System.String)">
            <param name="name">To be added.</param>
            <param name="templateName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.IconDrawStyle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.IconDrawStyle.NonTexture">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.IconDrawStyle.Texture">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.IHasCustomMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.IHasCustomMenu.AddItemsToMenu(UnityEditor.GenericMenu)">
            <param name="menu">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ImportAssetOptions">
            <summary>Asset importing options.</summary>
            <remarks>See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="F:UnityEditor.ImportAssetOptions.Default">
            <summary>Default import options.</summary>
            <remarks>See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="F:UnityEditor.ImportAssetOptions.DontDownloadFromCacheServer">
            <summary>Force a full reimport but don't download the assets from the cache server.</summary>
            <remarks>See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="F:UnityEditor.ImportAssetOptions.ForceSynchronousImport">
            <summary>Import all assets synchronously.</summary>
            <remarks>By default some assets can be imported asynchronously (e.g. scripts can be compiled in the background). In some cases all importing needs to be synchronous; use this flag then. For example, when importing a scripts + prefabs, scripts have to be fully compiled before prefab is serialized, otherwise it might get old variables. See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="F:UnityEditor.ImportAssetOptions.ForceUncompressedImport">
            <summary>Forces asset import as uncompressed for edition facilities.</summary>
            <remarks>See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="F:UnityEditor.ImportAssetOptions.ForceUpdate">
            <summary>User initiated asset import.</summary>
            <remarks>This should be passed when asset import is caused by the user (e.g. by clicking Reimport). Non-user initiated import happens when the asset modification time changes. See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="F:UnityEditor.ImportAssetOptions.ImportRecursive">
            <summary>When a folder is imported, import all its contents as well.</summary>
            <remarks>See Also: AssetDatabase.ImportAsset, AssetDatabase.Refresh.</remarks>
        </member>
        <member name="T:UnityEditor.InitializeOnLoadAttribute">
            <summary>Allow an editor class to be initialized when Unity loads without action from the user.</summary>
            <remarks>See Also: Running Editor Code on Launch.</remarks>
        </member>
        <member name="C:UnityEditor.InitializeOnLoadAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.InspectorMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.InspectorMode.Debug">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.InspectorMode.DebugInternal">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.InspectorMode.Normal">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.iOSSdkVersion">
            <summary>Supported iOS SDK versions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.iOSSdkVersion.DeviceSDK">
            <summary>Device SDK.</summary>
        </member>
        <member name="F:UnityEditor.iOSSdkVersion.SimulatorSDK">
            <summary>Simulator SDK.</summary>
        </member>
        <member name="T:UnityEditor.iOSShowActivityIndicatorOnLoading">
            <summary>Activity Indicator on loading.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.DontShow">
            <summary>Don't Show.</summary>
        </member>
        <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.Gray">
            <summary>Gray.</summary>
        </member>
        <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.White">
            <summary>White.</summary>
        </member>
        <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.WhiteLarge">
            <summary>White Large.</summary>
        </member>
        <member name="T:UnityEditor.iOSStatusBarStyle">
            <summary>iOS status bar style.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.iOSStatusBarStyle.BlackOpaque">
            <summary>Black opaque.</summary>
        </member>
        <member name="F:UnityEditor.iOSStatusBarStyle.BlackTranslucent">
            <summary>Black translucent.</summary>
        </member>
        <member name="F:UnityEditor.iOSStatusBarStyle.Default">
            <summary>Default.</summary>
        </member>
        <member name="T:UnityEditor.iOSTargetDevice">
            <summary>Target iOS device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.iOSTargetDevice.iPadOnly">
            <summary>iPad Only.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetDevice.iPhoneAndiPad">
            <summary>Universal : iPhone/iPod + iPad.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetDevice.iPhoneOnly">
            <summary>iPhone/iPod Only.</summary>
        </member>
        <member name="T:UnityEditor.iOSTargetOSVersion">
            <summary>Supported iOS deployment versions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_0">
            <summary>iOS 4.0.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_1">
            <summary>iOS 4.1.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_2">
            <summary>iOS 4.2.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_3">
            <summary>iOS 4.3.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_0">
            <summary>iOS 5.0.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_1">
            <summary>iOS 5.1.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.iOS_6_0">
            <summary>iOS 6.0.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetOSVersion.Unknown">
            <summary>Unknown iOS version, managed by user.</summary>
        </member>
        <member name="T:UnityEditor.iOSTargetResolution">
            <summary>Deployment target iOS device resolution.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.iOSTargetResolution.Native">
            <summary>Native device resolution.</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetResolution.Resolution320p">
            <summary>320p (iPhone).</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetResolution.Resolution640p">
            <summary>640p (iPhone Retina Display).</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetResolution.Resolution768p">
            <summary>768p (iPad).</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetResolution.ResolutionAutoPerformance">
            <summary>Auto (Best Performane).</summary>
        </member>
        <member name="F:UnityEditor.iOSTargetResolution.ResolutionAutoQuality">
            <summary>Auto (Best Quality).</summary>
        </member>
        <member name="T:UnityEditor.LightmapBakeQuality">
            <summary>Bake quality setting for LightmapEditorSettings.</summary>
            <remarks>See Also: LightmapEditorSettings.quality.</remarks>
        </member>
        <member name="F:UnityEditor.LightmapBakeQuality.High">
            <summary>High quality bake for final renderings.</summary>
            <remarks>See Also: LightmapEditorSettings.quality.</remarks>
        </member>
        <member name="F:UnityEditor.LightmapBakeQuality.Low">
            <summary>Low quality bake for preview renderings.</summary>
            <remarks>See Also: LightmapEditorSettings.quality.</remarks>
        </member>
        <member name="T:UnityEditor.LightmapEditorSettings">
            <summary>Various settings for the bake.</summary>
            <remarks>The bake can be started via Lightmapping class. See Also: Lightmapping.</remarks>
        </member>
        <member name="C:UnityEditor.LightmapEditorSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.aoAmount">
            <summary>Controls how much Ambient Occlusion to blend into the Final Gather solution.</summary>
            <value>To be added.</value>
            <remarks>Can be used to get more contrast in your lighting. Set to a value greater than 0 for AO to be calculated.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.aoContrast">
            <summary>Controls the look of the transition from black to white.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.aoMaxDistance">
            <summary>Beyond this distance a ray is considered to be unoccluded.</summary>
            <value>To be added.</value>
            <remarks>Can be used to avoid full occlusion in closed scenes.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.bounceBoost">
            <summary>Boosts indirect light (Beast's diffuseBoost property, pow(colorComponent, (1.0 / diffuseBoost))).</summary>
            <value>To be added.</value>
            <remarks>It can be used to increase the amount of bounced light within a scene and it's cheaper than setting the number of bounces to high values.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.bounceIntensity">
            <summary>Indirect light intensity multiplier.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.bounces">
            <summary>Number of light bounces in the global illumination computation (with 0 meaning direct light only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.finalGatherContrastThreshold">
            <summary>Contrast threshold between neighbouring surface points.</summary>
            <value>To be added.</value>
            <remarks>Above that value new final gather sample points will be created - it tells the algorithm to place points where they are really needed, so in areas where the light changes quickly. In other words, it adaptively controls the number of points.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.finalGatherGradientThreshold">
            <summary>Controls how the irradiance gradient is used in the interpolation.</summary>
            <value>To be added.</value>
            <remarks>Each point stores it�s irradiance gradient which can be used to improve the interpolation. However in some situations using the gradient can result in white �halos� and other artifacts. Setting the threshold to a lower value can be used to reduce those artifacts.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.finalGatherInterpolationPoints">
            <summary>The number of final gather points to interpolate between.</summary>
            <value>To be added.</value>
            <remarks>Higher values give smoother results, but can also smooth out details in the lighting.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.finalGatherRays">
            <summary>Number of rays used in the final gather integrator.</summary>
            <value>To be added.</value>
            <remarks>Since lower number of rays leads to creating points of higher variance (so a higher contrast difference), you will probably need a higher setting for finalGatherContrastThreshold to prevent points from clumping together.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.lastUsedResolution">
            <summary>Last used lightmap resolution (i.e. resolution of the lightmaps currently in the scene) in texels per world unit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.lockAtlas">
            <summary>If enabled, Beast atlasing won't be run and lightmap indices, tiling and offset won't be modified on Mesh Renderers.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasHeight">
            <summary>The maximum height of an individual lightmap texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasWidth">
            <summary>The maximum width of an individual lightmap texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.padding">
            <summary>Texel separation between shapes.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.quality">
            <summary>Quality of the bake.</summary>
            <value>To be added.</value>
            <remarks>Controls Beast's final gather and anti-aliasing settings (some of which are also exposed in Unity).</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.resolution">
            <summary>Lightmap resolution in texels per world unit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.skyLightColor">
            <summary>Sky light color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.skyLightIntensity">
            <summary>Sky light intensity.</summary>
            <value>To be added.</value>
            <remarks>Sky light can give very good results in outdoor scenes but also significantly increases bake time. Value of 0 disables sky light.</remarks>
        </member>
        <member name="P:UnityEditor.LightmapEditorSettings.textureCompression">
            <summary>Whether to use DXT1 compression on the generated lightmaps.</summary>
            <value>To be added.</value>
            <remarks>Compression is recommended to improve lightmap rendering performance and lower the memory footprint, but might introduce visible artifacts in scenes without high-detail texturing that would mask-out the issues.</remarks>
        </member>
        <member name="T:UnityEditor.Lightmapping">
            <summary>Allows to control the lightmapping job.</summary>
            <remarks>Before starting the job the bake settings can be set via LightmapEditorSettings. See Also: LightmapEditorSettings.</remarks>
        </member>
        <member name="C:UnityEditor.Lightmapping">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.Bake">
            <summary>Stars a synchronous bake job.</summary>
            <returns>To be added.</returns>
            <remarks>Returns when the lightmapping has finished.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.BakeAsync">
            <summary>Starts an asynchronous bake job.</summary>
            <returns>To be added.</returns>
            <remarks>The progress can be monitored via isRunning property.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnly">
            <summary>Starts a synchronous bake job, but only bakes light probes.</summary>
            <returns>To be added.</returns>
            <remarks>Returns when the lightmapping has finished.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnlyAsync">
            <summary>Starts an asynchronous bake job, but only bakes light probes.</summary>
            <returns>To be added.</returns>
            <remarks>The progress can be monitored via isRunning property.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.BakeSelected">
            <summary>Stars a synchronous bake job for the selected objects.</summary>
            <returns>To be added.</returns>
            <remarks>Returns when the lightmapping has finished.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.BakeSelectedAsync">
            <summary>Starts an asynchronous bake job for the selected objects.</summary>
            <returns>To be added.</returns>
            <remarks>The progress can be monitored via isRunning property.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.Cancel">
            <summary>Cancels the currently running asynchronous bake job.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.Clear">
            <summary>Deletes all lightmap assets and makes all lights behave as if they weren't baked yet.</summary>
            <remarks>Only those assets are deleted that are in the folder with the same name as the scene name AND their name follows the pattern LightmapFar-#.exr or LightmapNear-#.exr. If LightmapEditorSettings.lockAtlas is disabled, it will also clear the lightmaps array and clear lightmap indices on all objects. Baked light probes are cleared as well.</remarks>
        </member>
        <member name="P:UnityEditor.Lightmapping.isRunning">
            <summary>Returns true when the bake job is running, false otherwise (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Lightmapping.Tetrahedralize(UnityEngine.Vector3[],System.Int32[]@,UnityEngine.Vector3[]@)">
            <param name="positions">To be added.</param>
            <param name="outIndices">To be added.</param>
            <param name="outPositions">To be added.</param>
            <summary>Calculates a Delaunay Tetrahedralization of the 'positions' point set - the same way the lightmapper.</summary>
            <remarks>Tetrahedralizes the space for Light Probes. outIndices index into the array of outPositions and every four indices correspond to a tetrahedron. During the tetrahedralization any position duplicates withing some tolerance are removed (the first element is kept, subsequent are removed), so outPositions might have fewer elements than positions.</remarks>
        </member>
        <member name="T:UnityEditor.LODUtility">
            <summary>LOD Utility Helpers.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.LODUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.LODUtility.CalculateLODGroupBoundingBox(UnityEngine.LODGroup)">
            <param name="group">To be added.</param>
            <summary>Recalculate the bounding region for the given LODGroup.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MacFullscreenMode">
            <summary>Mac fullscreen mode.</summary>
            <remarks>This defines how fullscreen mode is handled on Mac OS X Standalones.</remarks>
        </member>
        <member name="F:UnityEditor.MacFullscreenMode.CaptureDisplay">
            <summary>Capture the display.</summary>
            <remarks>In this mode Unity will capture the display and change the hardware resolution to the requested mode. No other UI content can appear, and it is not possible to switch to other applications while in fullscreen mode.</remarks>
        </member>
        <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindow">
            <summary>Fullscreen window.</summary>
            <remarks>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows, GameCenter or Mac App Store UI, Battery warnings, etc). On OS X 10.7 and newer, it is possible to switch to other Applications using trackpad swipes or Cmd-Tab.</remarks>
        </member>
        <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindowWithDockAndMenuBar">
            <summary>Fullscreen window with Dock and Menu bar.</summary>
            <remarks>Same as Fullscreen window mode, but Unity will also show the Menu bar and Dock if the cursor moves to the  edges of the screen, like other OS X fullscreen Apps. It is possible to switch between fullscreen and windowed  modes using the fullscreen button in the window title bar (or in the menu bar in fullscreen mode).</remarks>
        </member>
        <member name="T:UnityEditor.MaterialEditor">
            <summary>The Unity Material Editor.</summary>
            <remarks>Extend this class to write your own custom material editor. For more detailed information see the Custom Material Editor section of the the ShaderLab reference.</remarks>
        </member>
        <member name="C:UnityEditor.MaterialEditor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Material)">
            <param name="material">To be added.</param>
            <summary>Apply initial MaterialPropertyDrawer values.</summary>
            <remarks>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Object[])">
            <param name="targets">To be added.</param>
            <summary>Apply initial MaterialPropertyDrawer values.</summary>
            <remarks>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.Awake">
            <summary>Called when the Editor is woken up.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ColorProperty(System.String,System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Draw a property field for a color shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a color shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a color shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <param name="label">To be added.</param>
            <summary>Handles UI for one shader property ignoring any custom drawers.</summary>
            <remarks>This is similar to ShaderProperty function, except it ignores any custom MaterialPropertyDrawer objects.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <param name="label">To be added.</param>
            <summary>Handles UI for one shader property ignoring any custom drawers.</summary>
            <remarks>This is similar to ShaderProperty function, except it ignores any custom MaterialPropertyDrawer objects.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.FloatProperty(System.String,System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Draw a property field for a float shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a float shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a float shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetColor(System.String,System.Boolean@)">
            <param name="propertyName">To be added.</param>
            <param name="hasMixedValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetDefaultPropertyHeight(UnityEditor.MaterialProperty)">
            <param name="prop">To be added.</param>
            <summary>Calculate height needed for the property, ignoring custom drawers.</summary>
            <returns>To be added.</returns>
            <remarks>This is similar to GetPropertyHeight, except it ignores any custom MaterialPropertyDrawer objects.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetFloat(System.String,System.Boolean@)">
            <param name="propertyName">To be added.</param>
            <param name="hasMixedValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])">
            <param name="mats">To be added.</param>
            <summary>Get shader property information of the passed materials.</summary>
            <returns>To be added.</returns>
            <remarks>When implementing custom MaterialEditors, you'd usually pass this.targets array to this function, i.e. all the selected materials. See Also: MaterialProperty.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.Int32)">
            <summary>Get information about a single shader property.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: GetMaterialProperties, MaterialProperty.</remarks>
            <param name="mats">Selected materials.</param>
            <param name="propertyIndex">Property index.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.String)">
            <summary>Get information about a single shader property.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: GetMaterialProperties, MaterialProperty.</remarks>
            <param name="mats">Selected materials.</param>
            <param name="name">Property name.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty)">
            <param name="prop">To be added.</param>
            <summary>Calculate height needed for the property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <param name="label">To be added.</param>
            <summary>Calculate height needed for the property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetTexture(System.String,System.Boolean@)">
            <param name="propertyName">To be added.</param>
            <param name="hasMixedValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetTextureOffset(System.String,System.Boolean@,System.Boolean@)">
            <param name="propertyName">To be added.</param>
            <param name="hasMixedValueX">To be added.</param>
            <param name="hasMixedValueY">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetTextureScale(System.String,System.Boolean@,System.Boolean@)">
            <param name="propertyName">To be added.</param>
            <param name="hasMixedValueX">To be added.</param>
            <param name="hasMixedValueY">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.GetVector(System.String,System.Boolean@)">
            <param name="propertyName">To be added.</param>
            <param name="hasMixedValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.HasPreviewGUI">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialEditor.isVisible">
            <summary>Is the current material expanded.</summary>
            <value>To be added.</value>
            <remarks>Use this to check if custom material fields should be rendered.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.OnDisable">
            <summary>Called when the editor is disabled, if overridden please call the base OnDisable() to ensure that the material inspector is set up properly.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.OnEnable">
            <summary>Called when the editor is enabled, if overridden please call the base OnEnable() to ensure that the material inspector is set up properly.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.OnHeaderGUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.OnInspectorGUI">
            <summary>Implement specific MaterialEditor GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <param name="r">To be added.</param>
            <param name="background">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.OnPreviewSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.PropertiesChanged">
            <summary>Whenever a material property is changed call this function. This will rebuild the inspector and validate the properties.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.PropertiesGUI">
            <summary>Render the standard material properties.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <summary>Draw a range slider for a range shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <summary>Draw a range slider for a range shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.RangeProperty(System.String,System.String,System.Single,System.Single)">
            <param name="propertyName">To be added.</param>
            <param name="v2">To be added.</param>
            <param name="v3">To be added.</param>
            <summary>Draw a range slider for a range shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the property.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.RegisterPropertyChangeUndo(System.String)">
            <summary>Call this when you change a material property. It will add an undo for the action.</summary>
            <remarks>To be added.</remarks>
            <param name="label">Undo Label.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)">
            <param name="assetPath">To be added.</param>
            <param name="subAssets">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.RequiresConstantRepaint">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetColor(System.String,UnityEngine.Color)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetFloat(System.String,System.Single)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader)">
            <summary>Set the shader of the material.</summary>
            <remarks>Automatically handles internal inspector rebuilding.</remarks>
            <param name="shader">Shader to set.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader,System.Boolean)">
            <summary>Set the shader of the material.</summary>
            <remarks>Automatically handles internal inspector rebuilding.</remarks>
            <param name="shader">Shader to set.</param>
            <param name="registerUndo">Should undo be registered.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetTexture(System.String,UnityEngine.Texture)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetTextureOffset(System.String,UnityEngine.Vector2,System.Int32)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <param name="coord">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetTextureScale(System.String,UnityEngine.Vector2,System.Int32)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <param name="coord">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.SetVector(System.String,UnityEngine.Vector4)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <param name="label">To be added.</param>
            <summary>Handes UI for one shader property.</summary>
            <remarks>This function will draw appropriate UI for the given shader property, depending on its type. Any custom MaterialPropertyDrawer objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use DefaultShaderProperty function. See Also: MaterialProperty, MaterialPropertyDrawer.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEngine.Shader,System.Int32)">
            <param name="shader">To be added.</param>
            <param name="propertyIndex">To be added.</param>
            <summary>Handes UI for one shader property.</summary>
            <remarks>This function will draw appropriate UI for the given shader property, depending on its type. Any custom MaterialPropertyDrawer objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use DefaultShaderProperty function. See Also: MaterialProperty, MaterialPropertyDrawer.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <param name="label">To be added.</param>
            <summary>Handes UI for one shader property.</summary>
            <remarks>This function will draw appropriate UI for the given shader property, depending on its type. Any custom MaterialPropertyDrawer objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use DefaultShaderProperty function. See Also: MaterialProperty, MaterialPropertyDrawer.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a texture shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.TextureProperty(System.String,System.String,UnityEditor.ShaderUtil+ShaderPropertyTexDim)">
            <param name="propertyName">To be added.</param>
            <param name="texDim">To be added.</param>
            <summary>Draw a property field for a texture shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String,System.Boolean)">
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a texture shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
            <param name="scaleOffset">Draw scale / offset.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.TextureProperty(System.String,System.String,UnityEditor.ShaderUtil+ShaderPropertyTexDim,System.Boolean)">
            <param name="propertyName">To be added.</param>
            <param name="texDim">To be added.</param>
            <summary>Draw a property field for a texture shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
            <param name="scaleOffset">Draw scale / offset.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a texture shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
            <param name="scaleOffset">Draw scale / offset.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.UndoRedoPerformed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialEditor.VectorProperty(System.String,System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Draw a property field for a vector shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEditor.MaterialProperty,System.String)">
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a vector shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
        </member>
        <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
            <param name="position">To be added.</param>
            <param name="prop">To be added.</param>
            <summary>Draw a property field for a vector shader property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="label">Label for the field.</param>
        </member>
        <member name="T:UnityEditor.MaterialProperty">
            <summary>Describes information and value of a single shader property.</summary>
            <remarks>MaterialProperty is used with MaterialEditor when writing custom material editors, or implementing custom MaterialPropertyDrawer classes. See Also: MaterialEditor, MaterialPropertyDrawer.</remarks>
        </member>
        <member name="C:UnityEditor.MaterialProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.applyPropertyCallback">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.colorValue">
            <summary>Color value of the property.</summary>
            <value>To be added.</value>
            <remarks>Setting a new value will apply it to all material targets, and will automatically record an undo operation. See Also: type, MaterialEditor.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.displayName">
            <summary>Display name of the property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the user-visible property name, for example "Main Texture" that is declared in the shader's Properties block. See Also: name.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.flags">
            <summary>Flags that control how property is displayed (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.floatValue">
            <summary>Float vaue of the property.</summary>
            <value>To be added.</value>
            <remarks>Setting a new value will apply it to all material targets, and will automatically record an undo operation. See Also: type, MaterialEditor.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.hasMixedValue">
            <summary>Does this property have multiple different values? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>When multiple materials are selected at once, some of their properties can have different values.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.name">
            <summary>Name of the property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the variable name that is used in the shader, for example _MainTex. See Also: displayName.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.rangeLimits">
            <summary>Min/max limits of a ranged float property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is only relevant for MaterialProperty.PropType.Range properties.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialProperty.ReadFromMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock)">
            <param name="block">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.targets">
            <summary>Material objects being edited by this property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Changes done to property values via floatValue, colorValue, vectorValue, textureValue will be applied to these objects.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.textureDimension">
            <summary>Texture dimension (2D, Cubemap etc.) of the property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: type, textureValue.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.textureScaleAndOffset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.textureValue">
            <summary>Texture value of the property.</summary>
            <value>To be added.</value>
            <remarks>Setting a new value will apply it to all material targets, and will automatically record an undo operation. See Also: type, textureDimension, MaterialEditor.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.type">
            <summary>Type of the property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Material properties can be textures, colors, floats and so on. Depending on the type, you should use textureValue, colorValue, vectorValue or floatValue to access the property value.</remarks>
        </member>
        <member name="P:UnityEditor.MaterialProperty.vectorValue">
            <summary>Vector value of the property.</summary>
            <value>To be added.</value>
            <remarks>Setting a new value will apply it to all material targets, and will automatically record an undo operation. See Also: type, MaterialEditor.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialProperty.WriteToMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock,System.Int32)">
            <param name="materialblock">To be added.</param>
            <param name="changedPropertyMask">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MaterialProperty+ApplyPropertyCallback">
            <param name="prop">To be added.</param>
            <param name="changeMask">To be added.</param>
            <param name="previousValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MaterialProperty+PropFlags">
            <summary>Flags that control how a MaterialProperty is displayed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropFlags.HideInInspector">
            <summary>Do not show the property in inspector.</summary>
            <remarks>MaterialEditor will not show this property. This corresponds to "[HideInInspector]" attribute in front of property in the shader code.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropFlags.None">
            <summary>No flags are set.</summary>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropFlags.PerRendererData">
            <summary>Texture value for this property will be queried from renderer's MaterialPropertyBlock, instead of from the material. This corresponds to "[PerRendererData]" attribute in front of property in the shader code.</summary>
        </member>
        <member name="T:UnityEditor.MaterialProperty+PropType">
            <summary>Material property type.</summary>
            <remarks>Material properties can be textures, colors, floats and so on. See Also: MaterialProperty.type.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropType.Color">
            <summary>Color property.</summary>
            <remarks>See Also: MaterialProperty.type.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropType.Float">
            <summary>Float property.</summary>
            <remarks>See Also: MaterialProperty.type.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropType.Range">
            <summary>Ranged float (with min/max values) property.</summary>
            <remarks>See Also: MaterialProperty.type.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropType.Texture">
            <summary>Texture property.</summary>
            <remarks>See Also: MaterialProperty.type.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+PropType.Vector">
            <summary>Vector property.</summary>
            <remarks>See Also: MaterialProperty.type.</remarks>
        </member>
        <member name="T:UnityEditor.MaterialProperty+TexDim">
            <summary>Texture dimension of a property.</summary>
            <remarks>Texture properties can accept regular (2D) textures, Cubemaps etc. See Also: MaterialProperty.textureDimension.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+TexDim.Any">
            <summary>Texture property accepts any texture type.</summary>
            <remarks>See Also: MaterialProperty.textureDimension.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+TexDim.Cube">
            <summary>Cubemap property.</summary>
            <remarks>See Also: MaterialProperty.textureDimension.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+TexDim.None">
            <summary>No texture type is set.</summary>
            <remarks>See Also: MaterialProperty.textureDimension.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+TexDim.Tex2D">
            <summary>Texture2D property.</summary>
            <remarks>See Also: MaterialProperty.textureDimension.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+TexDim.Tex3D">
            <summary>Texture3D property.</summary>
            <remarks>See Also: MaterialProperty.textureDimension.</remarks>
        </member>
        <member name="F:UnityEditor.MaterialProperty+TexDim.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.MaterialPropertyDrawer">
            <summary>Base class to derive custom material property drawers from.</summary>
            <remarks>Use this to create custom UI drawers for your material properties, without having to write custom MaterialEditor classes. This is similar to how PropertyDrawer enables custom UI without writing custom inspectors. In shader code, C#-like attribute syntax can be used in front of shader properties to add drawers to them. Unity has several built-in drawers, and you can write your own. Here's a shader code snippet demonstrating the syntax:The built-in MaterialPropertyDrawers are: ToggleDrawer, EnumDrawer, KeywordEnumDrawer, PowerSliderDrawer. In shader code, the "Drawer" suffix of the class name is not written; when Unity searches for the drawer class it adds "Drawer" automatically.  Toggle displays a float as a toggle. The property value will be 0 or 1, depending on the toggle state. When it is on, a shader keyword with the uppercase property name +"_ON" will be set, or an explicitly specified shader keyword.Enum displays a popup menu for a float property. You can supply either an enum type name (preferably fully qualified with namespaces, in case there are multiple types), or explicit name/value pairs to display. Up to 7 name/value pairs can be specified.KeywordEnum displays a popup menu for a float property, and enables corresponding shader keyword. This is used with "#pragma multi_compile" in shaders, to enable or disable parts of shader code. Each name will enable "property name" + underscore + "enum name", uppercased, shader keyword. Up to 9 names can be provided.PowerSlider displays a slider with a non-linear response for a Range shader property.Note that for performance reasons, EditorGUILayout functions are not usable with MaterialPropertyDrawers. See Also: MaterialProperty class, MaterialHelper class.</remarks>
        </member>
        <member name="C:UnityEditor.MaterialPropertyDrawer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MaterialPropertyDrawer.Apply(UnityEditor.MaterialProperty)">
            <summary>Apply extra initial values to the material.</summary>
            <remarks>This function is called in all property drawers when a new material is created, or a shader is changed on an existing material. This lets the property drawers apply any extra values to the materials, for example to setup shader keywords. Note that if you change a property by assigning a value to it, Apply() is not called automatically. If you have any extra setup you need it to do, you should call it yourself.</remarks>
            <param name="prop">The MaterialProperty to apply values for.</param>
        </member>
        <member name="M:UnityEditor.MaterialPropertyDrawer.GetPropertyHeight(UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
            <summary>Override this method to specify how tall the GUI for this property is in pixels.</summary>
            <returns>To be added.</returns>
            <remarks>The default is one line high.</remarks>
            <param name="prop">The MaterialProperty to make the custom GUI for.</param>
            <param name="label">The label of this property.</param>
            <param name="editor">Current material editor.</param>
        </member>
        <member name="M:UnityEditor.MaterialPropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
            <summary>Override this method to make your own GUI for the property.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the property GUI.</param>
            <param name="prop">The MaterialProperty to make the custom GUI for.</param>
            <param name="label">The label of this property.</param>
            <param name="editor">Current material editor.</param>
        </member>
        <member name="T:UnityEditor.MathUtils">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MathUtils">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.ClosestPtRaySphere(UnityEngine.Ray,UnityEngine.Vector3,System.Single,System.Single@,UnityEngine.Vector3@)">
            <param name="ray">To be added.</param>
            <param name="sphereOrigin">To be added.</param>
            <param name="sphereRadius">To be added.</param>
            <param name="t">To be added.</param>
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.ClosestPtSegmentRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Ray,System.Single@,System.Single@,UnityEngine.Vector3@)">
            <param name="p1">To be added.</param>
            <param name="q1">To be added.</param>
            <param name="ray">To be added.</param>
            <param name="squaredDist">To be added.</param>
            <param name="s">To be added.</param>
            <param name="closestRay">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.Ease(System.Single,System.Single,System.Single)">
            <param name="t">To be added.</param>
            <param name="k1">To be added.</param>
            <param name="k2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.GetQuatConjugate(UnityEngine.Quaternion)">
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.GetQuatExp(UnityEngine.Quaternion)">
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.GetQuatLength(UnityEngine.Quaternion)">
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.GetQuatLog(UnityEngine.Quaternion)">
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.GetQuatSquad(System.Single,UnityEngine.Quaternion,UnityEngine.Quaternion,UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="t">To be added.</param>
            <param name="q0">To be added.</param>
            <param name="q1">To be added.</param>
            <param name="a0">To be added.</param>
            <param name="a1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.GetSquadIntermediate(UnityEngine.Quaternion,UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="q0">To be added.</param>
            <param name="q1">To be added.</param>
            <param name="q2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.IntersectRaySphere(UnityEngine.Ray,UnityEngine.Vector3,System.Single,System.Single@,UnityEngine.Vector3@)">
            <param name="ray">To be added.</param>
            <param name="sphereOrigin">To be added.</param>
            <param name="sphereRadius">To be added.</param>
            <param name="t">To be added.</param>
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.IntersectRayTriangle(UnityEngine.Ray,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <param name="ray">To be added.</param>
            <param name="v0">To be added.</param>
            <param name="v1">To be added.</param>
            <param name="v2">To be added.</param>
            <param name="bidirectional">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.OrthogonalizeMatrix(UnityEngine.Matrix4x4)">
            <param name="m">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.QuaternionFromMatrix(UnityEngine.Matrix4x4)">
            <param name="m">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.QuaternionNormalize(UnityEngine.Quaternion@)">
            <param name="q">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MathUtils.Slerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <param name="p">To be added.</param>
            <param name="q">To be added.</param>
            <param name="t">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MenuCommand">
            <summary>Used to extract the context for a MenuItem. MenuCommand objects are passed to custom menu item functions defined using the MenuItem attribute.</summary>
            <remarks>See Also: MenuItem.</remarks>
        </member>
        <member name="C:UnityEditor.MenuCommand(UnityEngine.Object)">
            <param name="inContext">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MenuCommand(UnityEngine.Object,System.Int32)">
            <param name="inContext">To be added.</param>
            <param name="inUserData">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MenuCommand.context">
            <summary>Context is the object that is the target of a menu command.</summary>
            <remarks>Usually the context is the current selection or the item under the mouse when invoking a context menu.</remarks>
        </member>
        <member name="F:UnityEditor.MenuCommand.userData">
            <summary>An integer for passing custom information to a menu item.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MenuItem">
            <summary>The MenuItem attribute allows you to add menu items to the main menu and inspector context menus.</summary>
            <remarks>The MenuItem attribute turns any static function into a menu command. Only static functions can use the MenuItem attribute. To create a hotkey you can use the following special characters: % (ctrl on Windows, cmd on OS X), # (shift), &amp; (alt), _ (no key modifiers). For example to create a menu with hotkey shift-alt-g use "MyMenu/Do Something #&amp;g". To create a menu with hotkey g and no key modifiers pressed use "MyMenu/Do Something _g". Some special keyboard keys are supported as hotkeys, for example "#LEFT" would map to shift-left. The keys supported like this are: LEFT, RIGHT, UP, DOWN, F1 .. F12, HOME, END, PGUP, PGDN. A hotkey text must be preceded with a space character ( "MyMenu/Do_g" won't be interpreted as hotkey, while "MyMenu/Do _g" will).</remarks>
        </member>
        <member name="C:UnityEditor.MenuItem(System.String)">
            <param name="itemName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MenuItem(System.String,System.Boolean)">
            <param name="itemName">To be added.</param>
            <param name="isValidateFunction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MenuItem(System.String,System.Boolean,System.Int32)">
            <param name="itemName">To be added.</param>
            <param name="isValidateFunction">To be added.</param>
            <param name="priority">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MenuItem.menuItem">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MenuItem.priority">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MenuItem.validate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MeshUtility">
            <summary>Various utilities for mesh manipulation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MeshUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MeshUtility.Optimize(UnityEngine.Mesh)">
            <param name="mesh">To be added.</param>
            <summary>Optimizes the mesh for GPU access.</summary>
            <remarks>This operation might take a while but will make the geometry displayed be faster. You should use it if you generate a mesh from scratch procedurally and you want to trade better runtime performance against higher load time.  Internally it converts the mesh to triangle list and optimizes the triangles and vertices for both pre and post transform cache locality. For imported models you should never call this as the import pipeline already does it for you.</remarks>
        </member>
        <member name="M:UnityEditor.MeshUtility.SetPerTriangleUV2(UnityEngine.Mesh,UnityEngine.Vector2[])">
            <param name="src">To be added.</param>
            <param name="triUV">To be added.</param>
            <summary>Will insert per-triangle uv2 in mesh and handle vertex splitting etc.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MessageType">
            <summary>User message types.</summary>
            <remarks>See Also: EditorGUI.HelpBox, EditorGUILayout.HelpBox.</remarks>
        </member>
        <member name="F:UnityEditor.MessageType.Error">
            <summary>Error message.</summary>
        </member>
        <member name="F:UnityEditor.MessageType.Info">
            <summary>Info message.</summary>
        </member>
        <member name="F:UnityEditor.MessageType.None">
            <summary>Neutral message.</summary>
        </member>
        <member name="F:UnityEditor.MessageType.Warning">
            <summary>Warning message.</summary>
        </member>
        <member name="T:UnityEditor.MetroBuildType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MetroBuildType.AppX">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.MetroBuildType.VisualStudioCpp">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.MetroBuildType.VisualStudioCppDX">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.MetroBuildType.VisualStudioCSharp">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.MetroBuildType.VisualStudioCSharpDX">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.MetroSDK">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MetroSDK.SDK80">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.MetroSDK.SDK81">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.ModelImporter">
            <summary>Model importer lets you modify model import settings from editor scripts.</summary>
            <remarks>Settings of this class match the ones exposed in Mesh Import Settings.</remarks>
        </member>
        <member name="C:UnityEditor.ModelImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.addCollider">
            <summary>Add mesh colliders to imported meshes.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.animationCompression">
            <summary>Animation compression setting.</summary>
            <value>To be added.</value>
            <remarks>Compressing animations saves space in the built game, but more compression introduces more artifacts in the animation data. See Also: ModelImporterAnimationCompression.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.animationPositionError">
            <summary>Allowed error of animation position compression.</summary>
            <value>To be added.</value>
            <remarks>Allowed error is defined in distance (in percents) between compressed and original positions on a curve. This settings used only when animation keyframe reduction is enabled. See Also: animationCompression, ModelImporterAnimationCompression.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.animationRotationError">
            <summary>Allowed error of animation rotation compression.</summary>
            <value>To be added.</value>
            <remarks>Allowed error is defined in angle (in degrees) between compressed and original quaternions on a curve. This settings used only when animation keyframe reduction is enabled. See Also: animationCompression, ModelImporterAnimationCompression.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.animationScaleError">
            <summary>Allowed error of animation scale compression.</summary>
            <value>To be added.</value>
            <remarks>Allowed error is defined in distance (in percents) between compressed and original scale on a curve. This settings used only when animation keyframe reduction is enabled. See Also: animationCompression, ModelImporterAnimationCompression.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.animationType">
            <summary>Animator generation mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: ModelImporterAnimationType.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.animationWrapMode">
            <summary>The default wrap mode for the generated animation clips.</summary>
            <value>To be added.</value>
            <remarks>See Also: WrapMode, AnimationClip.wrapMode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.bakeIK">
            <summary>Bake Inverse Kinematics (IK) when importing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.clipAnimations">
            <summary>Animation clips to split animation into.</summary>
            <value>To be added.</value>
            <remarks>See Also: ModelImporterClipAnimation.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.generateAnimations">
            <summary>Animation generation options.</summary>
            <value>To be added.</value>
            <remarks>See Also: ModelImporterGenerateAnimations.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.generateMaterials">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.generateSecondaryUV">
            <summary>Generate secondary UV set for lightmapping.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.globalScale">
            <summary>Global scale factor for importing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.importAnimation">
            <summary>Import animation from file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.importBlendShapes">
            <summary>Controlls import of BlendShapes.</summary>
            <value>To be added.</value>
            <remarks>See Also: Mesh.blendShapes, MeshBlendShape.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.importMaterials">
            <summary>Import materials from file.</summary>
            <value>To be added.</value>
            <remarks>When set to false ModelImporter will use default material (Default-Diffuse.mat) instead of imported materials, otherwise it will find existing or create new materials based on materialName and materialSearch options. See Also: materialName, materialSearch options.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.isBakeIKSupported">
            <summary>Is Bake Inverse Kinematics (IK) supported by this importer.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.isReadable">
            <summary>Are mesh vertices and indices accessible from script?</summary>
            <value>To be added.</value>
            <remarks>Making a mesh readable will keep two copies of it in memory, one for rendering and one in system memory for script access. Setting isReadable to false therefore saves memory. Scaling a mesh with different amounts along the three axes (i.e. non-uniform scaling) requires the mesh to be readable for correct lighting. In the Unity editor access is always permitted when not in play mode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.isTangentImportSupported">
            <summary>Is import of tangents supported by this importer.</summary>
            <value>To be added.</value>
            <remarks>See Also: tangentImportMode, ModelImporterTangentSpaceMode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.isUseFileUnitsSupported">
            <summary>Is useFileUnits supported for this asset.</summary>
            <value>To be added.</value>
            <remarks>UseFileUnits is supported only on .max files. See Also: useFileUnits.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.materialName">
            <summary>Material naming setting.</summary>
            <value>To be added.</value>
            <remarks>When importing new model Unity will generate material name based on this setting and then it will try to locate existing material with such name, if no such material exists Unity will create a new material by that name. See Also: ModelImporterMaterialName, materialSearch, importMaterials.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.materialSearch">
            <summary>Existing material search setting.</summary>
            <value>To be added.</value>
            <remarks>When importing new model Unity will try to find existing materials in a set of folders based on this setting. See Also: ModelImporterMaterialSearch, materialName, importMaterials.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.meshCompression">
            <summary>Mesh compression setting.</summary>
            <value>To be added.</value>
            <remarks>Compressing meshes saves space in the built game, but more compression introduces more artifacts in vertex data. See Also: ModelImporterMeshCompression.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.normalImportMode">
            <summary>Normals import mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: ModelImporterTangentSpaceMode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.normalSmoothingAngle">
            <summary>Smoothing angle for calculating normals.</summary>
            <value>To be added.</value>
            <remarks>How sharp the edge has to be to be turned into a hard edge when calculating normals. This setting is only used when normalImportMode is set to Calculate. See Also: normalImportMode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.optimizeMesh">
            <summary>Vertex optimization setting.</summary>
            <value>To be added.</value>
            <remarks>The vertices and indices will be reordered for better GPU performance. Techniques that require strict vertex ordering like mesh morphing or special particle mesh emitter effects should have this option disabled.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.referencedClips">
            <summary>Generates the list of all imported Animations.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.secondaryUVAngleDistortion">
            <summary>Threshold for angle distortion when generating secondary UV.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.secondaryUVAreaDistortion">
            <summary>Threshold for area distortion when generating secondary UV.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.secondaryUVHardAngle">
            <summary>Hard angle for generating secondary UV.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.secondaryUVPackMargin">
            <summary>Margin to be left between charts when packing secondary UV.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.splitAnimations">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.splitTangentsAcrossSeams">
            <summary>Should tangents be split across UV seams.</summary>
            <value>To be added.</value>
            <remarks>This setting is only used when tangentImportMode is set to Calculate. See Also: tangentImportMode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.swapUVChannels">
            <summary>Swap primary and secondary UV channels when importing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.tangentImportMode">
            <summary>Tangents import mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: ModelImporterTangentSpaceMode.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.transformPaths">
            <summary>Generates the list of all imported Transforms.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporter.useFileUnits">
            <summary>Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.</summary>
            <value>To be added.</value>
            <remarks>This setting is used only for .max files. It was introduced for backwards compatibility: there is a bug in some FBX 2011 plugins - they fail to pick up file units and export everything as 1unit=1cm. We fixed that problem by setting the units manually, but that breaks projects which were built with FBX 2011 plugins already, so useFileUnits was introduced as a solution. Set it to false if you want to default to centimeters in FBX exporter. See Also: isUseFileUnitsSupported.</remarks>
        </member>
        <member name="T:UnityEditor.ModelImporterAnimationCompression">
            <summary>Animation compression options for ModelImporter.</summary>
            <remarks>Compressing animations saves space in the built game, but more compression introduces more artifacts in the animations. See Also: ModelImporter.animationCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReduction">
            <summary>Perform keyframe reduction (default).</summary>
            <remarks>See Also: ModelImporter.animationCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReductionAndCompression">
            <summary>Perform keyframe reduction and compression.</summary>
            <remarks>See Also: ModelImporter.animationCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationCompression.Off">
            <summary>No animation compression.</summary>
            <remarks>See Also: ModelImporter.animationCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationCompression.Optimal">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.ModelImporterAnimationType">
            <summary>Animation mode for ModelImporter.</summary>
            <remarks>See Also: ModelImporter.animationType.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationType.Generic">
            <summary>Generate a generic animator.</summary>
            <remarks>See Also: ModelImporter.animationType.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationType.Human">
            <summary>Generate a human animator.</summary>
            <remarks>See Also: ModelImporter.animationType.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationType.Legacy">
            <summary>Generate a legacy animation type.</summary>
            <remarks>See Also: ModelImporter.animationType.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterAnimationType.None">
            <summary>Generate no animation data.</summary>
            <remarks>See Also: ModelImporter.animationType.</remarks>
        </member>
        <member name="T:UnityEditor.ModelImporterClipAnimation">
            <summary>Animation clips to split animation into.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ModelImporterClipAnimation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.cycleOffset">
            <summary>Offset to the cycle of a looping animation, if a different time in it is desired to be the start.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ModelImporterClipAnimation.Equals(System.Object)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.firstFrame">
            <summary>First frame of the clip.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ModelImporterClipAnimation.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.heightFromFeet">
            <summary>Keeps the feet aligned with the root transform position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.heightOffset">
            <summary>Offset to the vertical root position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalOrientation">
            <summary>Keeps the vertical position as it is authored in the source file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionXZ">
            <summary>Keeps the vertical position as it is authored in the source file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionY">
            <summary>Keeps the vertical position as it is authored in the source file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.lastFrame">
            <summary>Last frame of the clip.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootHeightY">
            <summary>Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootPositionXZ">
            <summary>Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootRotation">
            <summary>Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.loop">
            <summary>Is the clip a looping animation?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.loopPose">
            <summary>Enable to make the motion loop seamlessly.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.loopTime">
            <summary>Enable to make the clip loop.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.maskSource">
            <summary>The AvatarMask used to mask transforms during the import process.</summary>
            <value>To be added.</value>
            <remarks>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip. A source mask is only needed if ModelImporterClipAnimation.maskType is set to ClipAnimationMaskType.CopyFromOther See Also: ClipAnimationMaskType.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.maskType">
            <summary>Define mask type.</summary>
            <value>To be added.</value>
            <remarks>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.mirror">
            <summary>Mirror left and right in this clip.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.name">
            <summary>Clip name.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.rotationOffset">
            <summary>Offset in degrees to the root rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.takeName">
            <summary>Take name.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ModelImporterClipAnimation.wrapMode">
            <summary>The wrap mode of the animation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ModelImporterGenerateAnimations">
            <summary>Animation generation options for ModelImporter. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.</summary>
            <remarks>See Also: ModelImporter.generateAnimations.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateAnimations.GenerateAnimations">
            <summary>Default animation import mode (All animations are stored in the root object).</summary>
            <remarks>See Also: ModelImporter.generateAnimations.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateAnimations.InNodes">
            <summary>Generate animations in the objects that animate.</summary>
            <remarks>See Also: ModelImporter.generateAnimations.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateAnimations.InOriginalRoots">
            <summary>Generate animations in the root objects of the animation package.</summary>
            <remarks>See Also: ModelImporter.generateAnimations.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateAnimations.InRoot">
            <summary>Generate animations in the transform root objects.</summary>
            <remarks>See Also: ModelImporter.generateAnimations.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateAnimations.None">
            <summary>Do not generate animations.</summary>
            <remarks>See Also: ModelImporter.generateAnimations.</remarks>
        </member>
        <member name="T:UnityEditor.ModelImporterGenerateMaterials">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateMaterials.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateMaterials.PerSourceMaterial">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.ModelImporterGenerateMaterials.PerTexture">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.ModelImporterMaterialName">
            <summary>Material naming options for ModelImporter.</summary>
            <remarks>See Also: ModelImporter.materialName.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnMaterialName">
            <summary>Use a material name of the form &amp;lt;materialName&amp;gt;.mat.</summary>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnModelNameAndMaterialName">
            <summary>Use material names in the form &amp;lt;modelFileName&amp;gt;-&amp;lt;materialName&amp;gt;.mat.</summary>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName">
            <summary>Use material names in the form &amp;lt;textureName&amp;gt;.mat.</summary>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName_Or_ModelNameAndMaterialName">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.ModelImporterMaterialSearch">
            <summary>Material search options for ModelImporter.</summary>
            <remarks>See Also: ModelImporter.materialSearch.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialSearch.Everywhere">
            <summary>Searh in all project.</summary>
            <remarks>Unity will search for the material in all folders of Unity project. See Also: ModelImporter.materialSearch.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialSearch.Local">
            <summary>Searh in local Materials forlder.</summary>
            <remarks>Unity will try to locate the material in local Materials folder, i.e. in path modelFilePath/Materials. For example: if model is Assets Model MyModel.fbx, then it will try to locate the material in Assets Model Materials folder. See Also: ModelImporter.materialSearch.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMaterialSearch.RecursiveUp">
            <summary>Recursive-up search in Materials forlders.</summary>
            <remarks>Unity will perform a recursive-up search for the material in all Materials folders up to the Assets folder. For example: if model is Assets Model MyModel.fbx, then it will try to locate the material in these folders in this order: Assets Model Materials, Assets/Materials. See Also: ModelImporter.materialSearch.</remarks>
        </member>
        <member name="T:UnityEditor.ModelImporterMeshCompression">
            <summary>Mesh compression options for ModelImporter.</summary>
            <remarks>Compressing meshes saves space in the built game, but more compression introduces more artifacts in vertex data. See Also: ModelImporter.meshCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMeshCompression.High">
            <summary>High amount of mesh compression.</summary>
            <remarks>Vertex positions, normals/tangents and UVs will be quantized to respectively 10, 6, 8 bits per component. Skinning information will be compressed. See Also: ModelImporter.meshCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMeshCompression.Low">
            <summary>Low amount of mesh compression.</summary>
            <remarks>Vertex positions, normals/tangents and UVs will be quantized to respectively 20, 8, 16 bits per component. Skinning information will be compressed. See Also: ModelImporter.meshCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMeshCompression.Medium">
            <summary>Medium amount of mesh compression.</summary>
            <remarks>Vertex positions, normals/tangents and UVs will be quantized to respectively 16, 8, 10 bits per component. Skinning information will be compressed. See Also: ModelImporter.meshCompression.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterMeshCompression.Off">
            <summary>No mesh compression (default).</summary>
            <remarks>See Also: ModelImporter.meshCompression.</remarks>
        </member>
        <member name="T:UnityEditor.ModelImporterTangentSpaceMode">
            <summary>Animation generation options for ModelImporter.</summary>
            <remarks>See Also: ModelImporter.normalImportMode, ModelImporter.tangentImportMode.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Calculate">
            <summary>Calculate normals/tangents.</summary>
            <remarks>It is recommended to use Import mode as long as you can - use Calculate only if you don't have normals/tangents in your file. See Also: ModelImporter.normalImportMode, ModelImporter.tangentImportMode.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Import">
            <summary>Import normals/tangents from file.</summary>
            <remarks>See Also: ModelImporter.normalImportMode, ModelImporter.tangentImportMode.</remarks>
        </member>
        <member name="F:UnityEditor.ModelImporterTangentSpaceMode.None">
            <summary>Strip normals/tangents.</summary>
            <remarks>If normals/tangents are not needed by all shaders, this can be a simple way to reduce build size a little. See Also: ModelImporter.normalImportMode, ModelImporter.tangentImportMode.</remarks>
        </member>
        <member name="T:UnityEditor.MonoImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MonoImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoImporter.GetAllRuntimeMonoScripts">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoImporter.GetDefaultReference(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoImporter.GetExecutionOrder(UnityEditor.MonoScript)">
            <param name="script">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoImporter.GetScript">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoImporter.SetDefaultReferences(System.String[],UnityEngine.Object[])">
            <param name="name">To be added.</param>
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoImporter.SetExecutionOrder(UnityEditor.MonoScript,System.Int32)">
            <param name="script">To be added.</param>
            <param name="order">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MonoScript">
            <summary>Representation of Script assets.</summary>
            <remarks>This class represents C#, JavaScript and Boo files stored in the project.</remarks>
        </member>
        <member name="C:UnityEditor.MonoScript">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.MonoScript.FromMonoBehaviour(UnityEngine.MonoBehaviour)">
            <summary>Returns the MonoScript object containing specified MonoBehaviour.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="behaviour">The MonoBehaviour whose MonoScript should be returned.</param>
        </member>
        <member name="M:UnityEditor.MonoScript.FromScriptableObject(UnityEngine.ScriptableObject)">
            <summary>Returns the MonoScript object containing specified ScriptableObject.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="scriptableObject">The ScriptableObject whose MonoScript should be returned.</param>
        </member>
        <member name="M:UnityEditor.MonoScript.GetClass">
            <summary>Returns the System.Type object of the class implemented by this script.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.MouseCursor">
            <summary>Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.MouseCursor.Arrow">
            <summary>Normal pointer arrow.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ArrowMinus">
            <summary>Arrow with the minus symbol next to it.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ArrowPlus">
            <summary>Arrow with the plus symbol next to it.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.CustomCursor">
            <summary>The current user defined cursor.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.FPS">
            <summary>Cursor with an eye and stylized arrow keys for FPS navigation.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.Link">
            <summary>Arrow with a Link badge (for assigning pointers).</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.MoveArrow">
            <summary>Arrow with the move symbol next to it for the sceneview.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.Orbit">
            <summary>Cursor with an eye for orbit.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.Pan">
            <summary>Cursor with a dragging hand for pan.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ResizeHorizontal">
            <summary>Horizontal resize arrows.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ResizeUpLeft">
            <summary>Resize up-Left for window edges.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ResizeUpRight">
            <summary>Resize up-right for window edges.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ResizeVertical">
            <summary>Vertical resize arrows.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.RotateArrow">
            <summary>Arrow with the rotate symbol next to it for the sceneview.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.ScaleArrow">
            <summary>Arrow with the scale symbol next to it for the sceneview.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.SlideArrow">
            <summary>Arrow with small arrows for indicating sliding at number fields.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.SplitResizeLeftRight">
            <summary>Left-Right resize arrows for window splitters.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.SplitResizeUpDown">
            <summary>Up-Down resize arrows for window splitters.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.Text">
            <summary>Text cursor.</summary>
        </member>
        <member name="F:UnityEditor.MouseCursor.Zoom">
            <summary>Cursor with a magnifying glass for zoom.</summary>
        </member>
        <member name="T:UnityEditor.MovieImporter">
            <summary>AssetImporter for importing MovieTextures.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.MovieImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MovieImporter.duration">
            <summary>Duration of the Movie to be imported in seconds.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.MovieImporter.linearTexture">
            <summary>Is this a linear texture or an sRGB texture (Only used when performing linear rendering).</summary>
            <value>To be added.</value>
            <remarks>The default value is sRGB.</remarks>
        </member>
        <member name="P:UnityEditor.MovieImporter.quality">
            <summary>Quality setting to use when importing the movie. This is a float value from 0 to 1.</summary>
            <value>To be added.</value>
            <remarks>0 uses strongest compression for small download sizes. 1 uses best quality resulting in larger files. This corresponds directly to the slider in the MovieImporter inspector. The default value is 0.5.</remarks>
        </member>
        <member name="T:UnityEditor.NavMeshBuilder">
            <summary>Navigation mesh builder interface.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.NavMeshBuilder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.NavMeshBuilder.BuildNavMesh">
            <summary>Build the Navmesh.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.NavMeshBuilder.BuildNavMeshAsync">
            <summary>Build the Navmesh Asyncronously.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.NavMeshBuilder.Cancel">
            <summary>Cancel Navmesh construction.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.NavMeshBuilder.ClearAllNavMeshes">
            <summary>Clear all Navmeshes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.NavMeshBuilder.isRunning">
            <summary>Returns true if an asynchronous build is still running.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.NavMeshBuilder.navMeshSettingsObject">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.NETVersion">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.NETVersion.NET_1_1">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.NETVersion.NET_2_1">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.ObjectNames">
            <summary>Helper class for constructing displayable names for objects.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ObjectNames">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Class name of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: ObjectNames.GetInspectorTitle.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.GetDragAndDropTitle(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Drag and drop title for an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: ObjectNames.GetInspectorTitle, ObjectNames.GetClassName.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.GetInspectorTitle(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Inspector title for an object.</summary>
            <returns>To be added.</returns>
            <remarks>If an object is a script, this will return " scriptname (Script)", for example. See Also: ObjectNames.GetClassName, ObjectNames.NicifyVariableName.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.GetPropertyEditorTitle(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.MangleVariableName(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)">
            <param name="name">To be added.</param>
            <summary>Make a displayable name for a variable.</summary>
            <returns>To be added.</returns>
            <remarks>This function will insert spaces before capital letters and remove optional m_, _ or k followed by uppercase letter in front of the name.</remarks>
        </member>
        <member name="M:UnityEditor.ObjectNames.SetNameSmart(UnityEngine.Object,System.String)">
            <param name="obj">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Sets the name of an Object.</summary>
            <remarks>If the object is an Asset, renames the asset and file names to match the object.</remarks>
        </member>
        <member name="T:UnityEditor.ObjectReferenceKeyframe">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ObjectReferenceKeyframe.time">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ObjectReferenceKeyframe.value">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PackageInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PackageInfo.iconURL">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PackageInfo.jsonInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PackageInfo.packagePath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PivotMode">
            <summary>Where is the tool handle placed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PivotMode.Center">
            <summary>The tool handle is at the graphical center of the selection.</summary>
        </member>
        <member name="F:UnityEditor.PivotMode.Pivot">
            <summary>The tool handle is on the pivot point of the active object.</summary>
        </member>
        <member name="T:UnityEditor.PivotRotation">
            <summary>How is the tool handle oriented.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PivotRotation.Global">
            <summary>The tool handle is aligned along the global axes.</summary>
        </member>
        <member name="F:UnityEditor.PivotRotation.Local">
            <summary>The tool handle is oriented from the active object.</summary>
        </member>
        <member name="T:UnityEditor.PlayerSettings">
            <summary>Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.accelerometerFrequency">
            <summary>Accelerometer update frequency.</summary>
            <value>To be added.</value>
            <remarks>Note: build-time option. Has no effect if changed when application is already running.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.advancedLicense">
            <summary>Is the advanced version being used?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeLeft">
            <summary>Is auto-rotation to landscape left supported?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeRight">
            <summary>Is auto-rotation to landscape right supported?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortrait">
            <summary>Is auto-rotation to portrait supported?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortraitUpsideDown">
            <summary>Is auto-rotation to portrait upside-down supported?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.alwaysDisplayWatermark">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.aotOptions">
            <summary>Additional AOT compilation options. Shared by AOT platforms.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.apiCompatibilityLevel">
            <summary>.NET API compatibility level.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.bundleIdentifier">
            <summary>Application bundle identifier shared between iOS &amp;amp; Android platforms.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.bundleVersion">
            <summary>Application bundle version shared between iOS &amp;amp; Android platforms.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.captureSingleScreen">
            <summary>Defines if fullscreen games should darken secondary displays.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.colorSpace">
            <summary>Set the color space for the current project.</summary>
            <value>To be added.</value>
            <remarks>This is a slow process and may cause a reimport of some assets.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.companyName">
            <summary>The name of your company.</summary>
            <value>To be added.</value>
            <remarks>This is used to locate the preferences file.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultInterfaceOrientation">
            <summary>Default screen orientation for mobiles.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultIsFullScreen">
            <summary>If enabled, the game will default to fullscreen mode.</summary>
            <value>To be added.</value>
            <remarks>The Windowed checkbox on the Resolution Dialog will be disabled by default when this setting is enabled.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultIsNativeResolution">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultScreenHeight">
            <summary>Default vertical dimension of stand-alone player window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultScreenWidth">
            <summary>Default horizontal dimension of stand-alone player window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultWebScreenHeight">
            <summary>Default vertical dimension of web player window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.defaultWebScreenWidth">
            <summary>Default horizontal dimension of web player window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.displayResolutionDialog">
            <summary>Defines the behaviour of the Resolution Dialog on product launch.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.firstStreamedLevelWithResources">
            <summary>First level to have access to all Resources.Load assets in Streamed Web Players.</summary>
            <value>To be added.</value>
            <remarks>Use this variable to specify the index of the first level that will have access to all Resources.Load assets.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.forceSingleInstance">
            <summary>Restrict standalone players to a single concurrent running instance.</summary>
            <value>To be added.</value>
            <remarks>This detects at startup whether another instance of the same player is already running, and aborts with an error message if so.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.GetIconsForTargetGroup(UnityEditor.BuildTargetGroup)">
            <param name="platform">To be added.</param>
            <summary>Returns the list of assigned icons for the specified platform.</summary>
            <returns>To be added.</returns>
            <remarks>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform. Each texture in the returned array correspond to the corresponding entry in the list of icon sizes returned by GetIconSizesForTargetGroup.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.GetIconSizesForTargetGroup(UnityEditor.BuildTargetGroup)">
            <param name="platform">To be added.</param>
            <summary>Returns a list of icon sizes for the specified platform.</summary>
            <returns>To be added.</returns>
            <remarks>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform. Use this function to get the sizes to use for the specified platform, where each size specifies both the width and height in pixels.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.GetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup)">
            <param name="targetGroup">To be added.</param>
            <summary>Get user-specified symbols for script compilation for the given build target group.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.gpuSkinning">
            <summary>Enable GPU skinning on capable platforms.</summary>
            <value>To be added.</value>
            <remarks>DX11, OpenGL ES 3.0 and Xbox 360 can do mesh skinning on the GPU.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.HasAspectRatio(UnityEditor.AspectRatio)">
            <param name="aspectRatio">To be added.</param>
            <summary>Returns whether or not the specified aspect ratio is enabled.</summary>
            <returns>To be added.</returns>
            <remarks>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.iPhoneBundleIdentifier">
            <summary>The bundle identifier of the iPhone application.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.keyaliasPass">
            <summary>Password for the key used for signing an Android application.</summary>
            <value>To be added.</value>
            <remarks>This is the password for signing an application with a particular key (known as [-keypass ] on the keytool/jarsigner command line).</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.keystorePass">
            <summary>Password used for interacting with the Android Keystore.</summary>
            <value>To be added.</value>
            <remarks>This is the password for retrieving and updating the keys inside a particular keystore (known as [-storepass ] on the keytool/jarsigner command line).</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.macFullscreenMode">
            <summary>Define how to handle fullscreen mode in Mac OS X standalones.</summary>
            <value>To be added.</value>
            <remarks>Set this to change how fullscreen mode is handled in Mac OS X standalone games. See MacFullscreenMode for description on the possible modes.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.mobileMTRendering">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.mobileRenderingPath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.MTRendering">
            <summary>Is multi-threaded rendering enabled?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.productGUID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.productName">
            <summary>The name of your product.</summary>
            <value>To be added.</value>
            <remarks>This will appear on the menu bar when your game is running and is used to locate the preferences file.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3BackgroundPath">
            <summary>PS3 Background Image.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3BootCheckMaxSaveGameSizeKB">
            <summary>PS3 Bootcheck maximum savegame size ( as per TRC R224 ). This should include the total estimated size for the savegames (including icon sizes).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3DLCConfigPath">
            <summary>PS3 DLC Config file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3NpCommunicationPassphrase">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3SaveGameSlots">
            <summary>PS3 Save Game slots.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3SoundPath">
            <summary>PS3 Background Sound.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3ThumbnailPath">
            <summary>PS3 Thumbnail Image.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3TitleConfigPath">
            <summary>PS3 Title Config file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3TrialMode">
            <summary>PS3 Title is Trial.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3TrophyCommId">
            <summary>PS3 Trophy Communication ID.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3TrophyCommSig">
            <summary>PS3 Trophy Communication Signature.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.ps3TrophyPackagePath">
            <summary>PS3 Trophy Package.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.renderingPath">
            <summary>Which rendering path is enabled?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.resizableWindow">
            <summary>Use resizable window in standalone player builds.</summary>
            <value>To be added.</value>
            <remarks>By default standalone Windows, Mac and Linux builds use a non-resizable game window. Enabling this makes the window resizable.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.resolutionDialogBanner">
            <summary>The image to display in the Resolution Dialog window.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.runInBackground">
            <summary>If enabled, your game will continue to run after lost focus.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.SetAspectRatio(UnityEditor.AspectRatio,System.Boolean)">
            <param name="aspectRatio">To be added.</param>
            <param name="enable">To be added.</param>
            <summary>Enables the specified aspect ratio.</summary>
            <remarks>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.SetIconsForTargetGroup(UnityEditor.BuildTargetGroup,UnityEngine.Texture2D[])">
            <param name="platform">To be added.</param>
            <param name="icons">To be added.</param>
            <summary>Assign a list of icons for the specified platform.</summary>
            <remarks>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform. The list will only be assigned if it has the same length as the list of icon sizes returned by GetIconSizesForTargetGroup and if the specified platform is supported in this editor.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup,System.String)">
            <param name="targetGroup">To be added.</param>
            <param name="defines">To be added.</param>
            <summary>Set user-specified symbols for script compilation for the given build target group.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.statusBarHidden">
            <summary>Should status bar be hidden. Shared between iOS &amp;amp; Android platforms.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.stripPhysics">
            <summary>Remove Physics code from player to save build size (Flash and NaCl only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.strippingLevel">
            <summary>Managed code stripping level.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.stripUnusedMeshComponents">
            <summary>Should unused Mesh components be excluded from game build?</summary>
            <value>To be added.</value>
            <remarks>When this setting is on, Mesh components (e.g. tangent vectors, vertex colors etc.) that are not in use will be removed. This is good for game data size and runtime performance. However, be aware of this flag if you're switching shaders on some objects at runtime. For example, if a mesh uses a simple Diffuse shader when building the game, Unity will remove tangent vectors since they are not needed. If you'd want to switch to a bumpmapped shader on this mesh at runtime, you will not get proper tangent data since it was removed!</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.targetGlesGraphics">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.use32BitDisplayBuffer">
            <summary>32-bit Display Buffer is used.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.useAnimatedAutorotation">
            <summary>Let the OS autorotate the screen as the device orientation changes.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.useDirect3D11">
            <summary>Should Direct3D 11 be used when available?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.useMacAppStoreValidation">
            <summary>Enable receipt validation for the Mac App Store.</summary>
            <value>To be added.</value>
            <remarks>This enables receipt validation for the Mac App Store. If this is enabled, your game will only run when it contains a valid receipt from the Mac App Store. Use this when submitting games to Apple for publishing on the App Store. This prevents people from running the game on any computer then the one it was purchased on. Note that this feature does not implement any strong copy protection. In particular, any potential crack against one Unity game would work against any other Unity content. For this reason, it is recommended that you implement your own receipt validation code on top of this using Unity's plugin feature. However, since Apple requires plugin validation to initially happen before showing the screen setup dialog, you should still enable this check, or Apple might reject your submission.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.usePlayerLog">
            <summary>Write a log file with debugging information.</summary>
            <value>To be added.</value>
            <remarks>This is useful to find out what happened if there are problems with your game. When publishing games for Apple's Mac App Store, it is recommended to turn this off, because Apple may reject your submission otherwise.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxAdditionalTitleMemorySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadOrientation">
            <summary>Xbox 360 Kinect Head Orientation file deployment.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadPosition">
            <summary>Xbox 360 Kinect Head Position file deployment.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectResources">
            <summary>Xbox 360 Kinect resource file deployment.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxEnableAvatar">
            <summary>Xbox 360 Avatars.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxEnableGuest">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxEnableKinect">
            <summary>Xbox 360 Kinect title flag - if false, the Kinect APIs are inactive.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxEnableKinectAutoTracking">
            <summary>Xbox 360 Kinect automatic skeleton tracking.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxEnableSpeech">
            <summary>Xbox 360 Kinect Enable Speech Engine.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxGenerateSpa">
            <summary>Xbox 360 auto-generation of _SPAConfig.cs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxImageXexFilePath">
            <summary>Xbox 360 ImageXex override configuration file path.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxPIXTextureCapture">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxSpaFilePath">
            <summary>Xbox 360 SPA file path.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxSpeechDB">
            <summary>Xbox 360 Kinect Speech DB.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxSplashScreen">
            <summary>Xbox 360 splash screen.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings.xboxTitleId">
            <summary>Xbox 360 title id.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PlayerSettings+Android">
            <summary>Android specific player settings.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings+Android">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.bundleVersionCode">
            <summary>Android bundle version code.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.forceInternetPermission">
            <summary>Force internet permission flag.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.forceSDCardPermission">
            <summary>Force SD card permission.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.keyaliasName">
            <summary>Android key alias name.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.keyaliasPass">
            <summary>Android key alias password.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.keystoreName">
            <summary>Android keystore name.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.keystorePass">
            <summary>Android keystore password.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.licenseVerification">
            <summary>License verification flag.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.minSdkVersion">
            <summary>Minimal Android SDK version.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.preferredInstallLocation">
            <summary>Preferred application install location.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.showActivityIndicatorOnLoading">
            <summary>Application should show ActivityIndicator when loading.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.splashScreenScale">
            <summary>Android splash screen scale mode.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.targetDevice">
            <summary>Android target device.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.use24BitDepthBuffer">
            <summary>24-bit Depth Buffer is used.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Android.useAPKExpansionFiles">
            <summary>Use APK Expansion Files.</summary>
            <value>To be added.</value>
            <remarks>When enabled the player executable and data will be split up, with a generated .apk consisting only of the executable (Java and Native) code (~10MB), and the data for the first scene. The application data will be serialized separately to an APK Expansion File (.obb).</remarks>
        </member>
        <member name="T:UnityEditor.PlayerSettings+BlackBerry">
            <summary>BlackBerry specific player settings.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings+BlackBerry">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.authorId">
            <summary>Unique developer identification assigned by BlackBerry.</summary>
            <value>To be added.</value>
            <remarks>The AuthorID is a unique identifier used whenever creating debug tokens or submission bar files. This ID is unique to each vendor using AppWorld.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.cskPassword">
            <summary>The keystore password used when communicating with BlackBerry.</summary>
            <value>To be added.</value>
            <remarks>This is used for encrypting communications with the RIM Signing Authority. It is required only when signing applications or when creating debug tokens.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.deviceAddress">
            <summary>The address used when accessing the device.</summary>
            <value>To be added.</value>
            <remarks>The device address can be found on the device by accessing: Settings About Network Either the USB or WiFi address can be used (USB recommended).</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.devicePassword">
            <summary>The password used when accessing the device.</summary>
            <value>To be added.</value>
            <remarks>The device password is needed when performing following actions: -Uploading a Debug Token -Deploying an application to the device -Retrieving a log from the device. The device address is required when Development Mode is enabled on the device.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.HasCameraPermissions">
            <summary>Returns true when camera access has been requested in the player settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.HasGamepadSupport">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.HasGPSPermissions">
            <summary>Returns true when GPS permission has been requested in the player settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.HasIdentificationPermissions">
            <summary>Returns true when access the device's Unique identifier has been requested.</summary>
            <returns>To be added.</returns>
            <remarks>If this option is enabled the user will be prompted with a dialog box asking for permission to access the device's unique identifier. If the user declines SystemInfo.deviceUniqueIdentifier will always return as 0.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.HasMicrophonePermissions">
            <summary>Returns true if microphone access has been requested in player settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.HasSharedPermissions">
            <summary>Returns true if shared permissions are requested in player settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.IsAuthorIDOverride">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.saveLogPath">
            <summary>The file system path that the device log will be saved to when it is downloaded.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetAuthorIDOverride(System.Boolean)">
            <param name="enable">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetCameraPermissions(System.Boolean)">
            <summary>Enable or disable camera permissions. (Will prompt user for access).</summary>
            <remarks>To be added.</remarks>
            <param name="enable">New permission value.</param>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetGamepadSupport(System.Boolean)">
            <param name="enable">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetGPSPermissions(System.Boolean)">
            <summary>Enable / Disable access to the device GPS. (Will prompt for user for access).</summary>
            <remarks>To be added.</remarks>
            <param name="enable">New permission value.</param>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetIdentificationPermissions(System.Boolean)">
            <summary>Enable / Disable device identification permission. (Will prompt user for access).</summary>
            <remarks>To be added.</remarks>
            <param name="enable">New permission value.</param>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetMicrophonePermissions(System.Boolean)">
            <summary>Enable / Disable microphone permission level. (Will prompt user for access).</summary>
            <remarks>To be added.</remarks>
            <param name="enable">New permission value.</param>
        </member>
        <member name="M:UnityEditor.PlayerSettings+BlackBerry.SetSharedPermissions(System.Boolean)">
            <summary>Enable / Disable access to QNX shared folders (accesible via the rst://drive).</summary>
            <remarks>To be added.</remarks>
            <param name="enable">New permission value.</param>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenAuthor">
            <summary>The plaintext name of the author that is associated with the application.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenAuthorId">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenExpires">
            <summary>The date in which the debug token is set to expire.</summary>
            <value>To be added.</value>
            <remarks>The debug token can be renewed by pressing 'Renew' in the Publishing Section.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenPath">
            <summary>File system path to the debug token that the editor is currently sourcing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PlayerSettings+iOS">
            <summary>iOS specific player settings.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings+iOS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.applicationDisplayName">
            <summary>iOS application display name.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.exitOnSuspend">
            <summary>Application should exit when suspended to background.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.prerenderedIcon">
            <summary>Icon is prerendered.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.requiresPersistentWiFi">
            <summary>Application requires persistent WiFi.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.scriptCallOptimization">
            <summary>Script calling optimization.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.sdkVersion">
            <summary>Active iOS SDK version used for build.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.showActivityIndicatorOnLoading">
            <summary>Application should show ActivityIndicator when loading.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.statusBarStyle">
            <summary>Status bar style.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.targetDevice">
            <summary>Targeted device.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.targetOSVersion">
            <summary>Deployment minimal version of iOS.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+iOS.targetResolution">
            <summary>Targeted resolution.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PlayerSettings+Metro">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings+Metro">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.applicationDescription">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.certificateIssuer">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.certificateNotAfter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.certificatePath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.certificateSubject">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.commandLineArgsFile">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.compilationOverrides">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+Metro.GetCapability(UnityEditor.PlayerSettings+MetroCapability)">
            <param name="capability">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.packageLogo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.packageName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.packageVersion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+Metro.SetCapability(UnityEditor.PlayerSettings+MetroCapability,System.Boolean)">
            <param name="capability">To be added.</param>
            <param name="enabled">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PlayerSettings+Metro.SetCertificate(System.String,System.String)">
            <param name="path">To be added.</param>
            <param name="password">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.splashScreenBackgroundColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.splashScreenImage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileBackgroundColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileForegroundText">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileLogo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileShortName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileShowName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileSmallLogo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Metro.tileWideLogo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PlayerSettings+MetroApplicationForegroundText">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationForegroundText.Dark">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationForegroundText.Light">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.PlayerSettings+MetroApplicationShowName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationShowName.AllLogos">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationShowName.NoLogos">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationShowName.NotSet">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationShowName.StandardLogoOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroApplicationShowName.WideLogoOnly">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.PlayerSettings+MetroCapability">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.EnterpriseAuthentication">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.InternetClient">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.InternetClientServer">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.Location">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.Microphone">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.MusicLibrary">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.PicturesLibrary">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.PrivateNetworkClientServer">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.Proximity">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.RemovableStorage">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.SharedUserCertificates">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.VideosLibrary">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCapability.WebCam">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.PlayerSettings+MetroCompilationOverrides">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCompilationOverrides.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.PlayerSettings+MetroCompilationOverrides.UseNetCore">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.PlayerSettings+Tizen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings+Tizen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Tizen.certificatePassword">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Tizen.certificatePath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Tizen.productDescription">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Tizen.productURL">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Tizen.saveLogPath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PlayerSettings+Wii">
            <summary>Wii specific player settings.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PlayerSettings+Wii">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.companyCode">
            <summary>Wii company code.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.controllerCount">
            <summary>The number of controllers supported by the game.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.floatingPointExceptions">
            <summary>Are floating point exceptions enabled on Wii?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.gameCode">
            <summary>Wii game code.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.gameVersion">
            <summary>Wii game version.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.hio2Usage">
            <summary>Wii Hio2 Usage.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.region">
            <summary>Wii region.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.screenCrashDumps">
            <summary>Are screen crash dumps enabled on Wii?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.supportsBalanceBoard">
            <summary>Does Wii support Balance Board?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.supportsClassicController">
            <summary>Does Wii support Classic Controller?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.supportsMotionPlus">
            <summary>Does Wii support Motion Plus?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PlayerSettings+Wii.supportsNunchuk">
            <summary>Does Wii support Nunchuk?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PostProcessAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PostProcessAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PostProcessAttribute.m_PostprocessOrder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PrefabType">
            <summary>The type of a prefab object as returned by EditorUtility.GetPrefabType.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.DisconnectedModelPrefabInstance">
            <summary>The object is an instance of an imported 3D model, but the connection is broken.</summary>
            <remarks>For example, adding or removing a component from the instance breaks connection between the instance and the prefab. See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.DisconnectedPrefabInstance">
            <summary>The object is an instance of a user created prefab, but the connection is broken.</summary>
            <remarks>For example, adding or removing a component from the instance breaks connection between the instance and the prefab. See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.MissingPrefabInstance">
            <summary>The object was an instance of a prefab, but the original prefab could not be found.</summary>
            <remarks>See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.ModelPrefab">
            <summary>The object is an imported 3D model asset.</summary>
            <remarks>See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.ModelPrefabInstance">
            <summary>The object is an instance of an imported 3D model.</summary>
            <remarks>See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.None">
            <summary>The object is not a prefab nor an instance of a prefab.</summary>
            <remarks>See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.Prefab">
            <summary>The object is a user created prefab asset.</summary>
            <remarks>See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="F:UnityEditor.PrefabType.PrefabInstance">
            <summary>The object is an instance of a user created prefab.</summary>
            <remarks>See Also: EditorUtility.GetPrefabType.</remarks>
        </member>
        <member name="T:UnityEditor.PrefabUtility">
            <summary>Utility class for any prefab related operations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PrefabUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.CreateEmptyPrefab(System.String)">
            <param name="path">To be added.</param>
            <summary>Creates an empty prefab at given path.</summary>
            <returns>To be added.</returns>
            <remarks>If a prefab at the path already exists it will be deleted and replaced with an empty prefab. Returns a reference to the prefab.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject)">
            <param name="path">To be added.</param>
            <param name="go">To be added.</param>
            <summary>Creates a prefab from a GameObject hierarchy.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject,UnityEditor.ReplacePrefabOptions)">
            <param name="path">To be added.</param>
            <param name="go">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Creates a prefab from a GameObject hierarchy.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.DisconnectPrefabInstance(UnityEngine.Object)">
            <param name="targetObject">To be added.</param>
            <summary>Disconnects the prefab instance from its parent prefab.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.FindPrefabRoot(UnityEngine.GameObject)">
            <param name="source">To be added.</param>
            <summary>Helper function to find the prefab root of an object (used for picking niceness).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.FindRootGameObjectWithSameParentPrefab(UnityEngine.GameObject)">
            <param name="target">To be added.</param>
            <summary>Returns the topmost GameObject that has the same prefab parent as target.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.FindValidUploadPrefabInstanceRoot(UnityEngine.GameObject)">
            <param name="target">To be added.</param>
            <summary>Returns root GameObject of the prefab instance if that root prefab instance is a parent of the prefab.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.GetPrefabObject(UnityEngine.Object)">
            <summary>Retrieves the enclosing prefab for any object contained within.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="targetObject">An object contained within a prefab object.</param>
        </member>
        <member name="M:UnityEditor.PrefabUtility.GetPrefabParent(UnityEngine.Object)">
            <param name="source">To be added.</param>
            <summary>Returns the GameObject parent of source, or null if it can't be found.</summary>
            <returns>To be added.</returns>
            <remarks>This also returns the prefab parent if the prefab has become disconnected, which can then be used to reconnect the prefab.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.GetPrefabType(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Given an object, returns its prefab type (None, if it's not a prefab).</summary>
            <returns>To be added.</returns>
            <remarks>See Also: The PrefabType enumeration for information on the possible return values.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.GetPropertyModifications(UnityEngine.Object)">
            <param name="targetPrefab">To be added.</param>
            <summary>Extract all modifications that are applied to the prefab instance compared to the parent prefab.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.InstantiateAttachedAsset(UnityEngine.Object)">
            <param name="targetObject">To be added.</param>
            <summary>Instantiate an asset that is referenced by a prefab and use it on the prefab instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Instantiates the given prefab.</summary>
            <returns>To be added.</returns>
            <remarks>This is similar to Instantiate but creates a prefab connection to the prefab.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.IsComponentAddedToPrefabInstance(UnityEngine.Object)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.MergeAllPrefabInstances(UnityEngine.Object)">
            <param name="targetObject">To be added.</param>
            <summary>Force re-merging all prefab instances of this prefab.</summary>
            <remarks>This is done automatically and you will not have to call this function manually.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.ReconnectToLastPrefab(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>Connects the GameObject to the prefab that it was last connected to.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if the GameObject has never been a prefab instance.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.RecordPrefabInstancePropertyModifications(UnityEngine.Object)">
            <param name="targetObject">To be added.</param>
            <summary>Force record property modifications by comparing against the parent prefab.</summary>
            <remarks>This is done automatically and you will not have to call this function manually.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object)">
            <param name="go">To be added.</param>
            <param name="targetPrefab">To be added.</param>
            <summary>Replaces the targetPrefab with a copy of the GameObject hierarchy go.</summary>
            <returns>To be added.</returns>
            <remarks>Returns the prefab GameObject after it has been created. If connectToPrefab is enabled go will be made an instance of the created prefab.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object,UnityEditor.ReplacePrefabOptions)">
            <param name="go">To be added.</param>
            <param name="targetPrefab">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Replaces the targetPrefab with a copy of the GameObject hierarchy go.</summary>
            <returns>To be added.</returns>
            <remarks>Returns the prefab GameObject after it has been created. If connectToPrefab is enabled go will be made an instance of the created prefab.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.ResetToPrefabState(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Resets the properties of the component or GameObject to the parent prefab state.</summary>
            <returns>To be added.</returns>
            <remarks>All overrides will be cleared. However the transform.position and rotation of a root GameObject in a prefab instance  will never be cleared.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.RevertPrefabInstance(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>Resets the properties of all objects in the prefab, including child GameObjects and components that were added to the prefab instance.</summary>
            <returns>To be added.</returns>
            <remarks>All overrides will be cleared. However the transform.position and rotation of a root GameObject in a prefab instance  will never be cleared.</remarks>
        </member>
        <member name="M:UnityEditor.PrefabUtility.SetPropertyModifications(UnityEngine.Object,UnityEditor.PropertyModification[])">
            <param name="targetPrefab">To be added.</param>
            <param name="modifications">To be added.</param>
            <summary>Assigns all modifications that are applied to the prefab instance compared to the parent prefab.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PreferenceItem">
            <summary>The PreferenceItem attribute allows you to add preferences sections to the Preferences Window.</summary>
            <remarks>The PreferenceItem attribute turns any static function into an OnGUI callback. Only static functions can use the PreferenceItem attribute.</remarks>
        </member>
        <member name="C:UnityEditor.PreferenceItem(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PreferenceItem.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PreviewRenderUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PreviewRenderUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.PreviewRenderUtility(System.Boolean)">
            <param name="renderFullScene">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.BeginPreview(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <param name="r">To be added.</param>
            <param name="previewBackground">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.BeginStaticPreview(UnityEngine.Rect)">
            <param name="r">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.Cleanup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32)">
            <param name="mesh">To be added.</param>
            <param name="matrix">To be added.</param>
            <param name="mat">To be added.</param>
            <param name="subMeshIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32)">
            <param name="mesh">To be added.</param>
            <param name="pos">To be added.</param>
            <param name="rot">To be added.</param>
            <param name="mat">To be added.</param>
            <param name="subMeshIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.DrawSprite(UnityEngine.Sprite,UnityEngine.Matrix4x4,UnityEngine.Material,UnityEngine.Color)">
            <param name="frame">To be added.</param>
            <param name="matrix">To be added.</param>
            <param name="mat">To be added.</param>
            <param name="color">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.EndPreview">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.PreviewRenderUtility.EndStaticPreview">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PreviewRenderUtility.m_Camera">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PreviewRenderUtility.m_CameraFieldOfView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PreviewRenderUtility.m_Light">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ProjectWindowUtil">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ProjectWindowUtil">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.CreateAsset(UnityEngine.Object,System.String)">
            <param name="asset">To be added.</param>
            <param name="pathName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.CreateFolder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.CreateNewGUISkin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.CreatePrefab">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.GetBaseFolders(System.String[])">
            <param name="folders">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.ShowCreatedAsset(UnityEngine.Object)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowUtil.StartNameEditingIfProjectWindowExists(System.Int32,UnityEditor.ProjectWindowCallback.EndNameEditAction,System.String,UnityEngine.Texture2D,System.String)">
            <param name="instanceID">To be added.</param>
            <param name="endAction">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="icon">To be added.</param>
            <param name="resourceFile">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PropertyDrawer">
            <summary>Base class to derive custom property drawers from. Use this to create custom drawers for your own Serializable classes or for script variables with custom PropertyAttributes.</summary>
            <remarks>PropertyDrawers have two uses: - Customize the GUI of every instance of a Serializable class. - Customize the GUI of script members with custom PropertyAttribute s. If you have a custom Serializable class, you can use a PropertyDrawer to control how it looks in the Inspector. Consider the Serializable class Ingredient in the script below:Using a custom PropertyDrawer, every appearance of the Ingredient class in the Inspector can be changed. Compare the look of the Ingredient properties in the Inspector without and with a custom PropertyDrawer:The other use of PropertyDrawer is to alter the appearance of members in a script that have custom PropertyAttribute s. Say you want to limit floats or integers in your script to a certain range and show them as sliders in the Inspector. Using the built-in PropertyAttribute called RangeAttribute you can do just that:You can make your own PropertyAttribute as well. We'll use the code for the RangeAttribute as an example. The attribute must extend the PropertyAttribute class. If you want, your property can take parameters and store them as public member variables.Now that you have the attribute, you need to make a PropertyDrawer that draws properties that have that attribute. The drawer must extend the PropertyDrawer class, and it must have a CustomPropertyDrawer attribute to tell it which attribute it's a drawer for.Note that for performance reasons, EditorGUILayout functions are not usable with PropertyDrawers. See Also: PropertyAttribute class, CustomPropertyDrawer class.</remarks>
        </member>
        <member name="C:UnityEditor.PropertyDrawer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PropertyDrawer.attribute">
            <summary>The PropertyAttribute for the property. Not applicable for custom class drawers. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.PropertyDrawer.fieldInfo">
            <summary>The reflection FieldInfo for the member this property represents. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>For advanced uses, this allows you to get information about the member the property represents using reflection, such as the type of the property and which attributes it might have. Most PropertyDrawers will not need to make use of the FieldInfo.</remarks>
        </member>
        <member name="M:UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>Override this method to specify how tall the GUI for this field is in pixels.</summary>
            <returns>The height in pixels.</returns>
            <remarks>The default is one line high.</remarks>
            <example />
            <param name="property">The SerializedProperty to make the custom GUI for.</param>
            <param name="label">The label of this property.</param>
        </member>
        <member name="M:UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>Override this method to make your own GUI for the property.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the property GUI.</param>
            <param name="property">The SerializedProperty to make the custom GUI for.</param>
            <param name="label">The label of this property.</param>
        </member>
        <member name="T:UnityEditor.PropertyModification">
            <summary>Defines a single modified property.</summary>
            <remarks>Used by the prefab system to track any changes applied to an instance.</remarks>
        </member>
        <member name="C:UnityEditor.PropertyModification">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PropertyModification.objectReference">
            <summary>The value being applied when it is a object reference (which can not be represented as a string).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PropertyModification.propertyPath">
            <summary>Property path of the property being modified (Matches as SerializedProperty.propertyPath).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PropertyModification.target">
            <summary>Object that will be modified.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.PropertyModification.value">
            <summary>The value being applied.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.PS3BuildSubtarget">
            <summary>Target PS3 build platform.</summary>
            <remarks>See Also: EditorUserBuildSettings.ps3BuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.PS3BuildSubtarget.BluRayTitle">
            <summary>Build a package suited for BluRay Submission.</summary>
            <remarks>See Also: EditorUserBuildSettings.ps3BuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.PS3BuildSubtarget.HddTitle">
            <summary>Build a package suited for DLC Submission.</summary>
            <remarks>See Also: EditorUserBuildSettings.ps3BuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.PS3BuildSubtarget.PCHosted">
            <summary>Build package that it's hosted on the PC.</summary>
            <remarks>See Also: EditorUserBuildSettings.ps3BuildSubtarget.</remarks>
        </member>
        <member name="T:UnityEditor.RemoveAssetOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.RemoveAssetOptions.DeleteAssets">
            <summary>Delete the asset without moving it to the trash.</summary>
        </member>
        <member name="F:UnityEditor.RemoveAssetOptions.MoveAssetToTrash">
            <summary>The asset should be moved to trash.</summary>
        </member>
        <member name="T:UnityEditor.ReplacePrefabOptions">
            <summary>Flags for the PrefabUtility.ReplacePrefab function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ReplacePrefabOptions.ConnectToPrefab">
            <summary>Connects the passed objects to the prefab after uploading the prefab.</summary>
        </member>
        <member name="F:UnityEditor.ReplacePrefabOptions.Default">
            <summary>Replaces prefabs by matching pre-existing connections to the prefab.</summary>
            <remarks>If the GameObject hierarchy was not connected to the prefab before all GameObjects / components will be new and thus overrides in prefab instances will be lost.</remarks>
        </member>
        <member name="F:UnityEditor.ReplacePrefabOptions.ReplaceNameBased">
            <summary>Replaces the prefab using name based lookup in the transform hierarchy.</summary>
            <remarks>This is internally used by the model importer and is useful for relating GameObject hierarchy built  from scratch to an existing prefab without breaking connections.</remarks>
        </member>
        <member name="T:UnityEditor.ResolutionDialogSetting">
            <summary>Resolution dialog setting.</summary>
            <remarks>This enum is used when setting the behaviour of the resolution dialog in PlayerSettings. See Also: PlayerSettings.displayResolutionDialog, PlayerSettings.</remarks>
        </member>
        <member name="F:UnityEditor.ResolutionDialogSetting.Disabled">
            <summary>Never show the resolutions dialog.</summary>
        </member>
        <member name="F:UnityEditor.ResolutionDialogSetting.Enabled">
            <summary>Show the resolutions dialog on first launch.</summary>
            <remarks>A setting in the dialog lets the user enable hiding of it. The user is able to have it show again by holding the option/alt key when on application launch.</remarks>
        </member>
        <member name="F:UnityEditor.ResolutionDialogSetting.HiddenByDefault">
            <summary>Hide the resolutions dialog on first launch.</summary>
            <remarks>The user is able to have it show again by holding the option/alt key when on application launch.</remarks>
        </member>
        <member name="T:UnityEditor.SaveAssetsProcessor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SaveAssetsProcessor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SaveType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SaveType.Binary">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SaveType.Text">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.SceneModeUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneModeUtility.GetObjects(UnityEngine.Object[],System.Boolean)">
            <param name="gameObjects">To be added.</param>
            <param name="includeChildren">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneModeUtility.GetSelectedObjectsOfType``1(UnityEngine.GameObject[]@,System.Type[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="gameObjects">To be added.</param>
            <param name="types">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneModeUtility.SearchBar(System.Type[])">
            <param name="types">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneModeUtility.SearchForType(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneModeUtility.SetStaticFlags(UnityEngine.Object[],System.Int32,System.Boolean)">
            <param name="targetObjects">To be added.</param>
            <param name="changedFlags">To be added.</param>
            <param name="flagValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneModeUtility.StaticFlagField(System.String,UnityEditor.SerializedProperty,System.Int32)">
            <param name="label">To be added.</param>
            <param name="property">To be added.</param>
            <param name="flag">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SceneView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SceneView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.AlignViewToObject(UnityEngine.Transform)">
            <param name="t">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.AlignWithView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.camera">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.currentDrawingSceneView">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.FixNegativeSize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.FrameLastActiveSceneView">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.FrameLastActiveSceneViewWithLock">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.FrameSelected">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.FrameSelected(System.Boolean)">
            <param name="lockView">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.GetAllSceneCameras">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.in2DMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.kToolbarHeight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.lastActiveSceneView">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.lastFramingTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.lastSceneViewRotation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAt(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAt(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAt(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAt(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <param name="orthographic">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAt(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Boolean,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <param name="orthographic">To be added.</param>
            <param name="instant">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAtDirect(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.LookAtDirect(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.m_AudioPlay">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.m_OverlayMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.m_RenderMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.m_SceneLighting">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.MoveToView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.MoveToView(UnityEngine.Transform)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.OnDestroy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.OnDisable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.OnEnable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView.onSceneGUIDelegate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.OnSelectionChange">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.orthographic">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.pivot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.renderMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.RepaintAll">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.rotation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.sceneViews">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.SetSceneViewFiltering(System.Boolean)">
            <param name="enable">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.SetSceneViewShaderReplace(UnityEngine.Shader,System.String)">
            <param name="shader">To be added.</param>
            <param name="replaceString">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.ShowCompileErrorNotification">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SceneView.size">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView.Update">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SceneView+OnSceneFunc">
            <param name="sceneView">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SceneView+SceneViewState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SceneView+SceneViewState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SceneView+SceneViewState(UnityEditor.SceneView+SceneViewState)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView+SceneViewState.IsAllOn">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView+SceneViewState.showFlares">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView+SceneViewState.showFog">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView+SceneViewState.showMaterialUpdate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SceneView+SceneViewState.showSkybox">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SceneView+SceneViewState.Toggle(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ScriptableWizard">
            <summary>Derive from this class to create an editor wizard.</summary>
            <remarks>Editor wizards are typically opened using a menu item.</remarks>
        </member>
        <member name="C:UnityEditor.ScriptableWizard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type)">
            <param name="klass">To be added.</param>
            <summary>Creates a wizard.Creates a wizard.TODO.</summary>
            <returns>The wizard. The wizard.</returns>
            <remarks>To be added.</remarks>
            <example>// C#  // Simple Wizard that clones an object.   using UnityEngine;  using UnityEditor;  using System.Collections;   public class ScriptableWizardDisplayWizard : ScriptableWizard {    public GameObject ObjectToCopy = null;  public int numberOfCopies = 2;  [MenuItem ("Example/Show DisplayWizard usage")]  static void CreateWindow() {   // Creates the wizard for display   ScriptableWizard.DisplayWizard("Copy an object.",    typeof(ScriptableWizardDisplayWizard),    "Copy!");  }  void OnWizardUpdate() {   helpString = "Clones an object a number of times";   if(!ObjectToCopy) {   errorString = "Please assign an object";   isValid = false;   } else {   errorString = "";   isValid = true;   }  }  void OnWizardCreate () {   for(int i = 0; i &amp;lt; numberOfCopies; i++)   Instantiate(ObjectToCopy, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="title">The title shown at the top of the wizard window.</param>
        </member>
        <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String)">
            <param name="klass">To be added.</param>
            <summary>Creates a wizard.Creates a wizard.TODO.</summary>
            <returns>The wizard. The wizard.</returns>
            <remarks>To be added.</remarks>
            <example>// C#  // Simple Wizard that clones an object.   using UnityEngine;  using UnityEditor;  using System.Collections;   public class ScriptableWizardDisplayWizard : ScriptableWizard {    public GameObject ObjectToCopy = null;  public int numberOfCopies = 2;  [MenuItem ("Example/Show DisplayWizard usage")]  static void CreateWindow() {   // Creates the wizard for display   ScriptableWizard.DisplayWizard("Copy an object.",    typeof(ScriptableWizardDisplayWizard),    "Copy!");  }  void OnWizardUpdate() {   helpString = "Clones an object a number of times";   if(!ObjectToCopy) {   errorString = "Please assign an object";   isValid = false;   } else {   errorString = "";   isValid = true;   }  }  void OnWizardCreate () {   for(int i = 0; i &amp;lt; numberOfCopies; i++)   Instantiate(ObjectToCopy, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="title">The title shown at the top of the wizard window.</param>
            <param name="createButtonName">The text shown on the create button.</param>
        </member>
        <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String,System.String)">
            <param name="klass">To be added.</param>
            <summary>Creates a wizard.Creates a wizard.TODO.</summary>
            <returns>The wizard. The wizard.</returns>
            <remarks>To be added.</remarks>
            <example>// C#  // Simple Wizard that clones an object.   using UnityEngine;  using UnityEditor;  using System.Collections;   public class ScriptableWizardDisplayWizard : ScriptableWizard {    public GameObject ObjectToCopy = null;  public int numberOfCopies = 2;  [MenuItem ("Example/Show DisplayWizard usage")]  static void CreateWindow() {   // Creates the wizard for display   ScriptableWizard.DisplayWizard("Copy an object.",    typeof(ScriptableWizardDisplayWizard),    "Copy!");  }  void OnWizardUpdate() {   helpString = "Clones an object a number of times";   if(!ObjectToCopy) {   errorString = "Please assign an object";   isValid = false;   } else {   errorString = "";   isValid = true;   }  }  void OnWizardCreate () {   for(int i = 0; i &amp;lt; numberOfCopies; i++)   Instantiate(ObjectToCopy, Vector3.zero, Quaternion.identity);  }  }</example>
            <param name="title">The title shown at the top of the wizard window.</param>
            <param name="createButtonName">The text shown on the create button.</param>
            <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
        </member>
        <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <param name="createButtonName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="title">To be added.</param>
            <param name="createButtonName">To be added.</param>
            <param name="otherButtonName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.ScriptableWizard.errorString">
            <summary>Allows you to set the error text of the wizard.</summary>
            <value>To be added.</value>
            <remarks>See Also: ScriptableWizard.OnWizardUpdate</remarks>
        </member>
        <member name="P:UnityEditor.ScriptableWizard.helpString">
            <summary>Allows you to set the help text of the wizard.</summary>
            <value>To be added.</value>
            <remarks>See Also: ScriptableWizard.OnWizardUpdate</remarks>
        </member>
        <member name="P:UnityEditor.ScriptableWizard.isValid">
            <summary>Allows you to enable and disable the wizard create button, so that the user can not click it.</summary>
            <value>To be added.</value>
            <remarks>See Also: ScriptableWizard.OnWizardUpdate</remarks>
        </member>
        <member name="T:UnityEditor.ScriptCallOptimizationLevel">
            <summary>Script call optimization level.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ScriptCallOptimizationLevel.FastButNoExceptions">
            <summary>Script method call overhead decreased at the expense of limited compatibility.</summary>
        </member>
        <member name="F:UnityEditor.ScriptCallOptimizationLevel.SlowAndSafe">
            <summary>Default setting.</summary>
        </member>
        <member name="T:UnityEditor.SearchableEditorWindow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SearchableEditorWindow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchableEditorWindow.OnDisable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchableEditorWindow.OnEnable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SearchableEditorWindow+SearchMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.All">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.Label">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.Name">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.Type">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow.All">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow.Name">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow.Type">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.SearchFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SearchFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.assetLabels">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.classNames">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchFilter.ClearSearch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.folders">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchFilter.GetState">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchFilter.IsSearching">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.nameFilter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.referencingInstanceIDs">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.searchArea">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchFilter.SetNewFilter(UnityEditor.SearchFilter)">
            <param name="newFilter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SearchFilter.showAllHits">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchFilter.SplitNameFilter">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SearchFilter.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SearchFilter+SearchArea">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SearchFilter+SearchArea.AllAssets">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchFilter+SearchArea.AssetStore">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchFilter+SearchArea.SelectedFolders">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.SearchFilter+State">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SearchFilter+State.EmptySearchFilter">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchFilter+State.FolderBrowsing">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchFilter+State.SearchingInAllAssets">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchFilter+State.SearchingInAssetStore">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SearchFilter+State.SearchingInFolders">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.Selection">
            <summary>Access to the selection in the editor.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Selection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.activeGameObject">
            <summary>Returns the active GameObject. (The one shown in the inspector).</summary>
            <value>To be added.</value>
            <remarks>It will also return GameObjects that might be prefabs or non-modifyable objects.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.activeInstanceID">
            <summary>Returns the instanceID of the actual object selection. Includes prefabs, non-modifyable objects.</summary>
            <value>To be added.</value>
            <remarks>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.activeObject">
            <summary>Returns the actual object selection. Includes prefabs, non-modifyable objects.</summary>
            <value>To be added.</value>
            <remarks>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.activeTransform">
            <summary>Returns the active transform. (The one shown in the inspector).</summary>
            <value>To be added.</value>
            <remarks>This will never return prefabs or non-modifyable objects.</remarks>
        </member>
        <member name="M:UnityEditor.Selection.Contains(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>Returns whether an object is contained in the current selection.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Selection.Contains(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Returns whether an object is contained in the current selection.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.gameObjects">
            <summary>Returns the actual GameObject selection. Includes prefabs, non-modifyable objects.</summary>
            <value>To be added.</value>
            <remarks>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.transforms instead.</remarks>
        </member>
        <member name="M:UnityEditor.Selection.GetFiltered(System.Type,UnityEditor.SelectionMode)">
            <summary>Returns the current selection filtered by type and mode.</summary>
            <returns>To be added.</returns>
            <remarks>For a selected GameObject that has multiple Components of type, only the first one will be included in the results. if type is a subclass of Component or GameObject the full SelectionMode is supported. if type does not subclass from Component or GameObject (eg. Mesh or ScriptableObject ) only SelectionMode.ExcludePrefab and SelectionMode.Editable are supported.</remarks>
            <param name="type">Only objects of this type will be retrieved.</param>
            <param name="mode">Further options to refine the selection.</param>
        </member>
        <member name="M:UnityEditor.Selection.GetTransforms(UnityEditor.SelectionMode)">
            <summary>Allows for fine grained control of the selection type using the SelectionMode bitmask.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="mode">Options for refining the selection.</param>
        </member>
        <member name="P:UnityEditor.Selection.instanceIDs">
            <summary>The actual unfiltered selection from the Scene returned as instance ids instead of objects.</summary>
            <value>To be added.</value>
            <remarks>Only objects from the Scene or Hierarchy will be returned, not from the Project View. You can also assign objects to the selection. The instance ID of an object is always guaranteed to be unique. See Also: Selection.objects, Object.GetInstanceID.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.objects">
            <summary>The actual unfiltered selection from the Scene.</summary>
            <value>To be added.</value>
            <remarks>Only objects from the Scene or Hierarchy will be returned, not from the Project View. You can also assign objects to the selection. See Also: Selection.instanceIDs.</remarks>
        </member>
        <member name="P:UnityEditor.Selection.transforms">
            <summary>Returns the top level selection, excluding prefabs.</summary>
            <value>To be added.</value>
            <remarks>This is the most common selection type when working with scene objects.</remarks>
        </member>
        <member name="T:UnityEditor.SelectionMode">
            <summary>SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.</summary>
            <remarks>The default transform selection mode is: SelectionMode.TopLevel | SelectionMode.ExcludePrefab | SelectionMode.Editable.</remarks>
        </member>
        <member name="F:UnityEditor.SelectionMode.Assets">
            <summary>Only return objects that are assets in the Asset directory.</summary>
        </member>
        <member name="F:UnityEditor.SelectionMode.Deep">
            <summary>Return the selection and all child transforms of the selection.</summary>
        </member>
        <member name="F:UnityEditor.SelectionMode.DeepAssets">
            <summary>If the selection contains folders, also include all assets and subfolders within that folder in the file hierarchy.</summary>
        </member>
        <member name="F:UnityEditor.SelectionMode.Editable">
            <summary>Excludes any objects which shall not be modified.</summary>
            <remarks>This will filter generated prefabs from an imported fbx file but not user created prefabs.</remarks>
        </member>
        <member name="F:UnityEditor.SelectionMode.ExcludePrefab">
            <summary>Excludes any prefabs from the selection.</summary>
        </member>
        <member name="F:UnityEditor.SelectionMode.OnlyUserModifiable">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SelectionMode.TopLevel">
            <summary>Only return the topmost selected transform. A selected child of another selected transform will be filtered out.</summary>
        </member>
        <member name="F:UnityEditor.SelectionMode.Unfiltered">
            <summary>Return the whole selection.</summary>
        </member>
        <member name="T:UnityEditor.SerializationMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SerializationMode.ForceBinary">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SerializationMode.ForceText">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SerializationMode.Mixed">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.SerializedObject">
            <summary>SerializedObject and SerializedProperty are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</summary>
            <remarks>SerializedObject is used in conjunction with SerializedProperty and Editor classes. See Also: SerializedProperty class, Editor class.</remarks>
        </member>
        <member name="C:UnityEditor.SerializedObject(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SerializedObject(UnityEngine.Object[])">
            <param name="objs">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.ApplyModifiedProperties">
            <summary>Apply property modifications.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.CopyFromSerializedProperty(UnityEditor.SerializedProperty)">
            <param name="prop">To be added.</param>
            <summary>Copies a value from a SerializedProperty to the same serialized property on this serialized object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.FindProperty(System.String)">
            <param name="propertyPath">To be added.</param>
            <summary>Find serialized property by name.</summary>
            <returns>To be added.</returns>
            <remarks>You can use this to find a specific property in the target object. See Also: GetIterator, SerializedProperty.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.GetIterator">
            <summary>Get the first serialized property.</summary>
            <returns>To be added.</returns>
            <remarks>You can use this to go over all properties of the target object. See Also: FindProperty, SerializedProperty.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedObject.isEditingMultipleObjects">
            <summary>Does the serialized object represents multiple objects due to multi-object editing? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.SetIsDifferentCacheDirty">
            <summary>Update hasMultipleDifferentValues cache on the next /Update()/ call.</summary>
            <remarks>Normally, you should not need to call this, as the SerializedProperty setters take care of this. However, when you change an object bypassing the SerializedProperty class, you will need to manually call this to force the difference cache to be updated.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedObject.targetObject">
            <summary>The inspected object (Read Only).</summary>
            <value>To be added.</value>
            <remarks>When multi-object editing, the targetObject property will just return the first of the edited objects. To get all the objects, use the targetObjects property instead.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedObject.targetObjects">
            <summary>The inspected objects (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The serialized object can represent multiple objects simultaneously when multi-object editing.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.Update">
            <summary>Update serialized object's representation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedObject.UpdateIfDirtyOrScript">
            <summary>Update serialized object's representation, only if the object has been modified since the last call to Update or if it is a script.</summary>
            <remarks>In which case it is not safe to assume that SetDirty has been called.</remarks>
        </member>
        <member name="T:UnityEditor.SerializedProperty">
            <summary>SerializedProperty and SerializedObject are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</summary>
            <remarks>SerializedProperty is used in conjunction with SerializedObject and Editor classes. See Also: SerializedObject class, Editor class.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.animationCurveValue">
            <summary>Value of a animation curve property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.AnimationCurve, AnimationCurve.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.arraySize">
            <summary>The number of elements in the array.</summary>
            <value>To be added.</value>
            <remarks>See Also: isArray.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.boolValue">
            <summary>Value of a boolean property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Boolean.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.boundsValue">
            <summary>Value of bounds property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Bounds, Bounds.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.ClearArray">
            <summary>Remove all elements from the array.</summary>
            <remarks>See Also: isArray.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.colorValue">
            <summary>Value of a color property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Color, Color.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.Copy">
            <summary>Returns a copy of the SerializedProperty iterator in its current state. This is useful if you want to keep a reference to the current property but continue with the iteration.</summary>
            <returns>To be added.</returns>
            <remarks>Note that if you keep a reference to an array property and that array is subsequently resized then the stored reference is no longer reliable and should not be used.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.CountInProperty">
            <summary>Count visible children of this property, including this property itself.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for allocating height for drawing this property including its children.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.CountRemaining">
            <summary>Count remaining visible properties.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for allocating height for drawing this property and all the following ones.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.DeleteArrayElementAtIndex(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Delete the element at the specified index in the array.</summary>
            <remarks>See Also: isArray.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.DeleteCommand">
            <summary>Deletes the serialized property.</summary>
            <returns>To be added.</returns>
            <remarks>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.depth">
            <summary>Nesting depth of the property. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyPath.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.DuplicateCommand">
            <summary>Duplicates the serialized property.</summary>
            <returns>To be added.</returns>
            <remarks>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.editable">
            <summary>Is this property editable? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.enumNames">
            <summary>Names of enumeration of an enum property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Enum, enumValueIndex.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.enumValueIndex">
            <summary>Enum index of an enum property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Enum, enumNames.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.EqualContents(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>See if contained serialized properties are equal.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.FindPropertyRelative(System.String)">
            <param name="relativePropertyPath">To be added.</param>
            <summary>Retrieves the SerializedProperty at a relative path to the current property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.floatValue">
            <summary>Value of a float property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Float.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.GetArrayElementAtIndex(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns the element at the specified index in the array.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: isArray.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.GetEndProperty">
            <summary>Retrieves the SerializedProperty that defines the end range of this property.</summary>
            <returns>To be added.</returns>
            <remarks>It's the first property that's not a child or grandchild of this property. The end property can be used to iterate over all children of a property by using EqualContents.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.GetEndProperty(System.Boolean)">
            <param name="includeInvisible">To be added.</param>
            <summary>Retrieves the SerializedProperty that defines the end range of this property.</summary>
            <returns>To be added.</returns>
            <remarks>It's the first property that's not a child or grandchild of this property. The end property can be used to iterate over all children of a property by using EqualContents.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.GetEnumerator">
            <summary>Retrieves an iterator that allows you to iterator over the current nexting of a serialized property.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.hasChildren">
            <summary>Does it have child properties? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: hasVisibleChildren.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.hasMultipleDifferentValues">
            <summary>Does this property represent multiple different values due to multi-object editing? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: SerializedObject.SetIsDifferentCacheDirty.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.hasVisibleChildren">
            <summary>Does it have visible child properties? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: hasChildren.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.InsertArrayElementAtIndex(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Insert an empty element at the specified index in the array.</summary>
            <remarks>The value of the inserted element is undefined and should be explicitly set after calling this function. See Also: isArray.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.intValue">
            <summary>Value of an integer property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Integer.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.isAnimated">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.isArray">
            <summary>Is this property an array? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: arraySize.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.isExpanded">
            <summary>Is this property expanded in the inspector?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.isInstantiatedPrefab">
            <summary>Is property part of a prefab instance? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: prefabOverride.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.MoveArrayElement(System.Int32,System.Int32)">
            <param name="srcIndex">To be added.</param>
            <param name="dstIndex">To be added.</param>
            <summary>Move an array element from srcIndex to dstIndex.</summary>
            <returns>To be added.</returns>
            <remarks>The SerializedProperty must be pointed to an array.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.name">
            <summary>Name of the property. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.Next(System.Boolean)">
            <param name="enterChildren">To be added.</param>
            <summary>Move to next property.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: NextVisible, Reset.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)">
            <param name="enterChildren">To be added.</param>
            <summary>Move to next visible property.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Next, Reset.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.objectReferenceInstanceIDValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.objectReferenceValue">
            <summary>Value of an object reference property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.ObjectReference.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.prefabOverride">
            <summary>Is property's value different from the prefab it belongs to?</summary>
            <value>To be added.</value>
            <remarks>See Also: isInstantiatedPrefab.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.propertyPath">
            <summary>Full path of the property. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: name, depth.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.propertyType">
            <summary>Type of this property (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Property type determines which of the "value" variable accessors are valid. For example, only intValue is valid for properties of SerializedPropertyType.Integer type. See Also: SerializedPropertyType.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.quaternionValue">
            <summary>Value of a quaternion property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Quaternion, Quaternion.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.rectValue">
            <summary>Value of a rectangle property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Rect, Rect.</remarks>
        </member>
        <member name="M:UnityEditor.SerializedProperty.Reset">
            <summary>Move to first property of the object.</summary>
            <remarks>See Also: Next, NextVisible.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.serializedObject">
            <summary>SerializedObject this property belongs to (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.stringValue">
            <summary>Value of a string property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.String.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.tooltip">
            <summary>Tooltip of the property. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.type">
            <summary>Type name of the property. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.vector2Value">
            <summary>Value of a 2D vector property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Vector2, Vector2.</remarks>
        </member>
        <member name="P:UnityEditor.SerializedProperty.vector3Value">
            <summary>Value of a 3D vector property.</summary>
            <value>To be added.</value>
            <remarks>See Also: propertyType, SerializedPropertyType.Vector3, Vector3.</remarks>
        </member>
        <member name="T:UnityEditor.SerializedPropertyType">
            <summary>Type of a SerializedProperty.</summary>
            <remarks>See Also: SerializedProperty.propertyType.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.AnimationCurve">
            <summary>AnimationCurve property.</summary>
            <remarks>See Also: SerializedProperty.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.ArraySize">
            <summary>Array size property.</summary>
            <remarks>See Also: SerializedProperty.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Boolean">
            <summary>Boolean property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.boolValue.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Bounds">
            <summary>Bounds property.</summary>
            <remarks>See Also: SerializedProperty, Bounds.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Character">
            <summary>Character property.</summary>
            <remarks>See Also: SerializedProperty.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Color">
            <summary>Color property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.colorValue.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Enum">
            <summary>Enumeration property.</summary>
            <remarks>See Also: SerializedProperty.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Float">
            <summary>Float property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.floatValue.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Generic">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Gradient">
            <summary>Gradient property.</summary>
            <remarks>See Also: SerializedProperty, Gradient.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Integer">
            <summary>Integer property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.intValue.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.LayerMask">
            <summary>LayerMask property.</summary>
            <remarks>See Also: SerializedProperty.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.ObjectReference">
            <summary>Reference to another object.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.objectReferenceValue.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Quaternion">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Rect">
            <summary>Rectangle property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.rectValue, Rect.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.String">
            <summary>String property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.stringValue.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Vector2">
            <summary>2D vector property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.vector2Value, Vector2.</remarks>
        </member>
        <member name="F:UnityEditor.SerializedPropertyType.Vector3">
            <summary>3D vector property.</summary>
            <remarks>See Also: SerializedProperty, SerializedProperty.vector3Value, Vector3.</remarks>
        </member>
        <member name="T:UnityEditor.ShaderImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ShaderImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ShaderImporter.GetDefaultTexture(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ShaderImporter.GetShader">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ShaderImporter.SetDefaultTextures(System.String[],UnityEngine.Texture[])">
            <param name="name">To be added.</param>
            <param name="textures">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ShaderUtil">
            <summary>Utility functions to assist with working with shaders from the editor.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ShaderUtil">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ShaderUtil.CreateShaderAsset(System.String)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ShaderUtil.GetPropertyCount(UnityEngine.Shader)">
            <summary>Get the number of properties in Shader s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
        </member>
        <member name="M:UnityEditor.ShaderUtil.GetPropertyDescription(UnityEngine.Shader,System.Int32)">
            <summary>Get the description of the shader propery at index propertyIdx of Shader s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
            <param name="propertyIdx">The property index to use.</param>
        </member>
        <member name="M:UnityEditor.ShaderUtil.GetPropertyName(UnityEngine.Shader,System.Int32)">
            <summary>Get the name of the shader propery at index propertyIdx of Shader s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
            <param name="propertyIdx">The property index to use.</param>
        </member>
        <member name="M:UnityEditor.ShaderUtil.GetPropertyType(UnityEngine.Shader,System.Int32)">
            <summary>Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
            <param name="propertyIdx">The property index to use.</param>
        </member>
        <member name="M:UnityEditor.ShaderUtil.GetRangeLimits(UnityEngine.Shader,System.Int32,System.Int32)">
            <summary>Get Limits for a range property at index propertyIdx of Shader s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
            <param name="propertyIdx">The property index to use.</param>
            <param name="defminmax">Which value to get: 0 = default, 1 = min, 2 = max.</param>
        </member>
        <member name="M:UnityEditor.ShaderUtil.GetTexDim(UnityEngine.Shader,System.Int32)">
            <summary>Gets the ShaderPropertyTexDim of the texture at property index propertyIdx of Shader s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
            <param name="propertyIdx">The property index to use.</param>
        </member>
        <member name="P:UnityEditor.ShaderUtil.hardwareSupportsRectRenderTexture">
            <summary>Does the current hardware support render textues.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ShaderUtil.IsShaderPropertyHidden(UnityEngine.Shader,System.Int32)">
            <summary>Is the shader propery at index propertyIdx of Shader s hidden?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="s">The shader to check against.</param>
            <param name="propertyIdx">The property index to use.</param>
        </member>
        <member name="M:UnityEditor.ShaderUtil.UpdateShaderAsset(UnityEngine.Shader,System.String)">
            <param name="shader">To be added.</param>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ShaderUtil+ShaderPropertyTexDim">
            <summary>Representation of the texture dimensions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDim2D">
            <summary>2D Texture.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDim3D">
            <summary>3D Texture.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimAny">
            <summary>Any texture dimension (catch all).</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimCUBE">
            <summary>Texure Cube (Cubemap).</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimDeprecated1D">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimNone">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimRECT">
            <summary>Texture Rect.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimUnknown">
            <summary>Unknown Texture dimension.</summary>
        </member>
        <member name="T:UnityEditor.ShaderUtil+ShaderPropertyType">
            <summary>Type of a given texture property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Color">
            <summary>Color Property.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Float">
            <summary>Float Property.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Range">
            <summary>Range Property.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.TexEnv">
            <summary>Texture Property.</summary>
        </member>
        <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Vector">
            <summary>Vector Property.</summary>
        </member>
        <member name="T:UnityEditor.SpriteImportMode">
            <summary>Texture importer modes for Sprite import.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SpriteImportMode.Multiple">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SpriteImportMode.None">
            <summary>Graphic is not a Sprite.</summary>
        </member>
        <member name="F:UnityEditor.SpriteImportMode.Single">
            <summary>Sprite is a single image section extracted automatically from the texture.</summary>
        </member>
        <member name="T:UnityEditor.SpriteMetaData">
            <summary>Editor data used in producing a Sprite.</summary>
            <remarks>See Also: TextureImporter.spritesheet.</remarks>
        </member>
        <member name="F:UnityEditor.SpriteMetaData.alignment">
            <summary>Edge-relative alignment of the sprite graphic.</summary>
            <remarks>The possible values relate to the SpriteAlignment enum as follows: Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9. See Also: SpriteAlignment enum.</remarks>
        </member>
        <member name="F:UnityEditor.SpriteMetaData.name">
            <summary>Name of the Sprite.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SpriteMetaData.pivot">
            <summary>Pivot point of the Sprite relative to its bounding rectangle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SpriteMetaData.rect">
            <summary>Bounding rectangle of the sprite's graphic within the atlas image.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SpritePackerMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.SpritePackerMode.AlwaysOn">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SpritePackerMode.BuildTimeOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.SpritePackerMode.Disabled">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.StaticEditorFlags">
            <summary>Static Editor Flags.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.StaticEditorFlags.BatchingStatic">
            <summary>Consider for static batching.</summary>
        </member>
        <member name="F:UnityEditor.StaticEditorFlags.LightmapStatic">
            <summary>Considered static for lightmapping.</summary>
        </member>
        <member name="F:UnityEditor.StaticEditorFlags.NavigationStatic">
            <summary>Considered static for navigation.</summary>
        </member>
        <member name="F:UnityEditor.StaticEditorFlags.OccludeeStatic">
            <summary>Considered static for occlusion.</summary>
        </member>
        <member name="F:UnityEditor.StaticEditorFlags.OccluderStatic">
            <summary>Considered static for occlusion.</summary>
        </member>
        <member name="F:UnityEditor.StaticEditorFlags.OffMeshLinkGeneration">
            <summary>Auto-generate OffMeshLink.</summary>
        </member>
        <member name="T:UnityEditor.StaticOcclusionCulling">
            <summary>StaticOcclusionCulling lets you perform static occlusion culling operations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.StaticOcclusionCulling">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCulling.backfaceThreshold">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.StaticOcclusionCulling.Cancel">
            <summary>Used to cancel asynchronous generation of static occlusion culling data.</summary>
            <remarks>See Also: StaticOcclusionCulling.GenerateInBackground, isRunning.</remarks>
        </member>
        <member name="M:UnityEditor.StaticOcclusionCulling.Clear">
            <summary>Clears the PVS of the opened scene.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.StaticOcclusionCulling.Compute">
            <summary>Used to generate static occlusion culling data. This function will not return until occlusion data is generated.</summary>
            <returns>To be added.</returns>
            <remarks>The memory limit (specified in bytes) is a hint to the PVS baking system about the likely memory requirements. See Also: StaticOcclusionCulling.GenerateInBackground.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCulling.doesSceneHaveManualPortals">
            <summary>Does the scene contain any occlusion portals that were added manually rather than automatically?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground">
            <summary>Used to compute static occlusion culling data asynchronously.</summary>
            <returns>To be added.</returns>
            <remarks>The memory limit (specified in bytes) is a hint to the PVS baking system about the likely memory requirements. See Also: Compute, Cancel, isRunning.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCulling.isRunning">
            <summary>Used to check if asynchronous generation of static occlusion culling data is still running.</summary>
            <value>To be added.</value>
            <remarks>See Also: StaticOcclusionCulling.GenerateInBackground, StaticOcclusionCulling.Cancel.</remarks>
        </member>
        <member name="M:UnityEditor.StaticOcclusionCulling.SetDefaultOcclusionBakeSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCulling.smallestHole">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCulling.smallestOccluder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCulling.umbraDataSize">
            <summary>Returns the size in bytes that the PVS data is currently taking up in this scene on disk.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.StaticOcclusionCullingVisualization">
            <summary>Used to visualize static occlusion culling at development time in scene view.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.StaticOcclusionCullingVisualization">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.isPreviewOcclusionCullingCameraInPVS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.previewOcclucionCamera">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.previewOcclusionCamera">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showDynamicObjectBounds">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showGeometryCulling">
            <summary>If set to true, culling of geometry is enabled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showOcclusionCulling">
            <summary>If set to true, visualization of target volumes is enabled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPortals">
            <summary>If set to true, visualization of portals is enabled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPreVisualization">
            <summary>If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showViewVolumes">
            <summary>If set to true, visualization of view volumes is enabled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showVisibilityLines">
            <summary>If set to true, visualization of portals is enabled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.StrippingLevel">
            <summary>Managed code stripping level.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.StrippingLevel.Disabled">
            <summary>Managed code stripping is disabled.</summary>
        </member>
        <member name="F:UnityEditor.StrippingLevel.StripAssemblies">
            <summary>Unused parts of managed code are stripped away.</summary>
        </member>
        <member name="F:UnityEditor.StrippingLevel.StripByteCode">
            <summary>Managed method bodies are stripped away. AOT platforms only.</summary>
        </member>
        <member name="F:UnityEditor.StrippingLevel.UseMicroMSCorlib">
            <summary>Lightweight mscorlib version will be used at expense of limited compatibility.</summary>
        </member>
        <member name="T:UnityEditor.SubstanceArchive">
            <summary>Class for Substance Archive handling.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SubstanceArchive">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.SubstanceImporter">
            <summary>The SubstanceImporter class lets you access the imported ProceduralMaterial instances.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.SubstanceImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.CloneMaterial(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Clone an existing ProceduralMaterial instance.</summary>
            <returns>To be added.</returns>
            <remarks>NOTE: This requires a re-import to actually create the new instance !</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.DestroyMaterial(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Destroy an existing ProceduralMaterial instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetAnimationUpdateRate(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Get the ProceduralMaterial animation update rate in millisecond.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetGenerateAllOutputs(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Check if the ProceduralMaterial needs to force generation of all its outputs.</summary>
            <returns>To be added.</returns>
            <remarks>If enabled, the ProceduralMaterial will generate all its outputs. If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetMaterialCount">
            <summary>Get the number of ProceduralMaterial instances.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetMaterialOffset(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Get the material offset, which is used for all the textures that are part of this ProceduralMaterial.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetMaterials">
            <summary>Get an array with the ProceduralMaterial instances.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetMaterialScale(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Get the material scale, which is used for all the textures that are part of this ProceduralMaterial.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetPlatformTextureSettings(System.String,System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Get the import settings for a given ProceduralMaterial for a given platform (width and height, RAW/Compressed format, loading behavior).</summary>
            <returns>To be added.</returns>
            <remarks>Returns a default set of settings (512x512, compressed outputs, "Generate at load" behavior) if no settings are found for the input materialName or for the input platform.</remarks>
            <param name="materialName">The name of the ProceduralMaterial.</param>
            <param name="platform">The name of the platform (can be empty).</param>
            <param name="maxTextureWidth">The maximum texture width for this ProceduralMaterial (output value).</param>
            <param name="maxTextureHeight">The maximum texture height for this ProceduralMaterial (output value).</param>
            <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this ProceduralMaterial (output value).</param>
            <param name="loadBehavior">The load behavior for this ProceduralMaterial (output value). Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetPrototypeNames">
            <summary>Get a list of the names of the ProceduralMaterial prototypes in the package.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.GetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String)">
            <param name="material">To be added.</param>
            <param name="textureName">To be added.</param>
            <summary>Get the alpha source of the given texture in the ProceduralMaterial.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.InstantiateMaterial(System.String)">
            <param name="prototypeName">To be added.</param>
            <summary>Instantiate a new ProceduralMaterial instance from a prototype.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.OnShaderModified(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>After modifying the shader of a ProceduralMaterial, call this function to apply the changes to the importer.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.RenameMaterial(UnityEngine.ProceduralMaterial,System.String)">
            <param name="material">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Rename an existing ProceduralMaterial instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.ResetMaterial(UnityEngine.ProceduralMaterial)">
            <param name="material">To be added.</param>
            <summary>Reset the ProceduralMaterial to its default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.SetAnimationUpdateRate(UnityEngine.ProceduralMaterial,System.Int32)">
            <param name="material">To be added.</param>
            <param name="animation_update_rate">To be added.</param>
            <summary>Set the ProceduralMaterial animation update rate in millisecond.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.SetGenerateAllOutputs(UnityEngine.ProceduralMaterial,System.Boolean)">
            <param name="material">To be added.</param>
            <param name="generated">To be added.</param>
            <summary>Specify if the ProceduralMaterial needs to force generation of all its outputs.</summary>
            <remarks>If enabled, the ProceduralMaterial will generate all its outputs. If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.SetMaterialOffset(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
            <param name="material">To be added.</param>
            <param name="offset">To be added.</param>
            <summary>Set the material offset, which is used for all the textures that are part of this ProceduralMaterial.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.SetMaterialScale(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
            <param name="material">To be added.</param>
            <param name="scale">To be added.</param>
            <summary>Set the material scale, which is used for all the textures that are part of this ProceduralMaterial.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.SetPlatformTextureSettings(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Set the import settings for the input ProceduralMaterial for the input platform (width and height, RAW/Compressed format, loading behavior).</summary>
            <remarks>To be added.</remarks>
            <param name="materialName">The name of the Procedural Material.</param>
            <param name="platform">The name of the platform (can be empty).</param>
            <param name="maxTextureWidth">The maximum texture width for this Procedural Material.</param>
            <param name="maxTextureHeight">The maximum texture height for this Procedural Material.</param>
            <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this Procedural Material.</param>
            <param name="loadBehavior">The load behavior for this Procedural Material. Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
        </member>
        <member name="M:UnityEditor.SubstanceImporter.SetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String,UnityEngine.ProceduralOutputType)">
            <param name="material">To be added.</param>
            <param name="textureName">To be added.</param>
            <param name="alphaSource">To be added.</param>
            <summary>Set the alpha source of the given texture in the ProceduralMaterial.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.TakeInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.bakeStartTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.bakeStopTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.defaultClipName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.sampleRate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.startTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TakeInfo.stopTime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.TargetGlesGraphics">
            <summary>Target GLES graphics.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TargetGlesGraphics.OpenGLES_1_x">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TargetGlesGraphics.OpenGLES_2_0">
            <summary>Open GLES 2.0.</summary>
        </member>
        <member name="F:UnityEditor.TargetGlesGraphics.OpenGLES_3_0">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.TextureImporter">
            <summary>Texture importer lets you modify Texture2D import settings from editor scripts.</summary>
            <remarks>Settings of this class match the ones exposed in Texture Import Settings.</remarks>
        </member>
        <member name="C:UnityEditor.TextureImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.alphaIsTransparency">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.anisoLevel">
            <summary>Anisotropic filtering level of the texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: Texture.anisoLevel, texture assets.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.borderMipmap">
            <summary>Keep texture borders the same when generating mipmaps?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.ClearPlatformTextureSettings(System.String)">
            <summary>Clear specific target platform settings.</summary>
            <remarks>The options for the platform string are "Web", "Standalone", "iPhone", "Android" and "FlashPlayer".</remarks>
            <param name="platform">The platform whose settings are to be cleared (see below).</param>
        </member>
        <member name="P:UnityEditor.TextureImporter.compressionQuality">
            <summary>Quality of Texture Compression in the range [0..100].</summary>
            <value>To be added.</value>
            <remarks>See Also: TextureCompressionQuality.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.convertToNormalmap">
            <summary>Convert heightmap to normal map?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.correctGamma">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveAlpha">
            <summary>Does textures source image have alpha channel.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveColor">
            <summary>Does textures source image have RGB channels.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.fadeout">
            <summary>Fade out mip levels to gray color?</summary>
            <value>To be added.</value>
            <remarks>See Also: mipmapEnabled.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.filterMode">
            <summary>Filtering mode of the texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: Texture.filterMode, texture assets.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.generateCubemap">
            <summary>Cubemap generation mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: TextureImporterGenerateCubemap.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.generateMipsInLinearSpace">
            <summary>Should mip maps be generated with gamma correction?</summary>
            <value>To be added.</value>
            <remarks>See Also: mipmapEnabled.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@)">
            <summary>Get platform specific texture settings.Get platform specific texture settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="platform">The platform whose settings are required (see below).</param>
            <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
            <param name="textureFormat">Data format of the texture.</param>
        </member>
        <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@,System.Int32@)">
            <summary>Get platform specific texture settings.Get platform specific texture settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="platform">The platform whose settings are required (see below).</param>
            <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
            <param name="textureFormat">Data format of the texture.</param>
            <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
        </member>
        <member name="P:UnityEditor.TextureImporter.grayscaleToAlpha">
            <summary>Generate alpha channel from intensity?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.heightmapScale">
            <summary>Amount of bumpyness in the heightmap.</summary>
            <value>To be added.</value>
            <remarks>See Also: convertToNormalmap.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.isReadable">
            <summary>Is texture data readable from scripts.</summary>
            <value>To be added.</value>
            <remarks>Texture has to be set as "readable" in order for Texture2D.GetPixel, Texture2D.GetPixels and similar functions to work. Textures are not set as readable by default. When texture is not readable, it consumes much less memory, because a system-memory copy does not have to be kept around after texture is uploaded to the graphics API.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.lightmap">
            <summary>Is this texture a lightmap?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.linearTexture">
            <summary>When in linear rendering should this texture be sampled with hardware gamma correction (sRGB) or without (linear)?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.maxTextureSize">
            <summary>Maximum texture size.</summary>
            <value>To be added.</value>
            <remarks>Larger textures will be scaled down to this size at import time.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.mipMapBias">
            <summary>Mip map bias of the texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: Texture.mipMapBias, texture assets.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.mipmapEnabled">
            <summary>Generate mip maps for the texture?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceEnd">
            <summary>Mip level where texture is faded out completely.</summary>
            <value>To be added.</value>
            <remarks>See Also: mipmapEnabled, fadeout, mipmapFadeDistanceStart.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceStart">
            <summary>Mip level where texture begins to fade out.</summary>
            <value>To be added.</value>
            <remarks>See Also: mipmapEnabled, fadeout, mipmapFadeDistanceEnd.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.mipmapFilter">
            <summary>Mipmap filtering mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: TextureImporterMipFilter, mipmapEnabled.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.normalmap">
            <summary>Is this texture a normal map?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.normalmapFilter">
            <summary>Normal map filtering mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: TextureImporterNormalFilter, convertToNormalmap.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.npotScale">
            <summary>Scaling mode for non power of two textures.</summary>
            <value>To be added.</value>
            <remarks>See Also: TextureImporterNPOTScale.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.qualifiesForSpritePacking">
            <summary>Returns true if this TextureImporter is setup for Sprite packing.</summary>
            <value>To be added.</value>
            <remarks>If it returns true, texture is imported uncompressed for Sprite packing.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.ReadTextureImportInstructions(UnityEditor.TextureImportInstructions,UnityEditor.BuildTarget)">
            <param name="dest">To be added.</param>
            <param name="target">To be added.</param>
            <summary>Reads the active texture output instructions of this TextureImporter.</summary>
            <remarks>This can be used for ISpritePackerPolicy grouping.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.ReadTextureSettings(UnityEditor.TextureImporterSettings)">
            <param name="dest">To be added.</param>
            <summary>Read texture settings into TextureImporterSettings class.</summary>
            <remarks>See Also: TextureImporterSettings.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat)">
            <summary>Set specific target platform settings.Set specific target platform settings.</summary>
            <remarks>To be added.</remarks>
            <param name="platform">The platforms whose settings are to be changed (see below).</param>
            <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
            <param name="textureFormat">Data format for the texture.</param>
        </member>
        <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Int32)">
            <summary>Set specific target platform settings.Set specific target platform settings.</summary>
            <remarks>To be added.</remarks>
            <param name="platform">The platforms whose settings are to be changed (see below).</param>
            <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
            <param name="textureFormat">Data format for the texture.</param>
            <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
        </member>
        <member name="M:UnityEditor.TextureImporter.SetTextureSettings(UnityEditor.TextureImporterSettings)">
            <param name="src">To be added.</param>
            <summary>Set texture importers settings from TextureImporterSettings class.</summary>
            <remarks>See Also: TextureImporterSettings.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.spriteImportMode">
            <summary>Selects Single or Manual import mode for Sprite textures.</summary>
            <value>To be added.</value>
            <remarks>See Also: SpriteImportMode enum.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.spritePackingTag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.spritePivot">
            <summary>The point in the Sprite object's coordinate space where the graphic is located.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.spritePixelsToUnits">
            <summary>Scale factor for mapping pixels in the graphic to units in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.spritesheet">
            <summary>Array representing the sections of the atlas corresponding to individual sprite graphics.</summary>
            <value>To be added.</value>
            <remarks>See Also: SpriteMetaData class.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.textureFormat">
            <summary>Format of imported texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: TextureImporterFormat.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.textureType">
            <summary>Which type of texture are we dealing with here.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporter.wrapMode">
            <summary>Wrap mode (Repeat or Clamp) of the texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: Texture.wrapMode, texture assets.</remarks>
        </member>
        <member name="T:UnityEditor.TextureImporterFormat">
            <summary>Imported texture format for TextureImporter.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.Alpha8">
            <summary>Alpha 8 bit texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ARGB16">
            <summary>RGBA 16 bit texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ARGB32">
            <summary>ARGB 32 bit texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_10x10">
            <summary>ASTC compressed RGB texture format, 10x10 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_12x12">
            <summary>ASTC compressed RGB texture format, 12x12 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_4x4">
            <summary>ASTC compressed RGB texture format, 4x4 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_5x5">
            <summary>ASTC compressed RGB texture format, 5x5 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_6x6">
            <summary>ASTC compressed RGB texture format, 6x6 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_8x8">
            <summary>ASTC compressed RGB texture format, 8x8 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_10x10">
            <summary>ASTC compressed RGBA texture format, 10x10 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_12x12">
            <summary>ASTC compressed RGBA texture format, 12x12 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_4x4">
            <summary>ASTC compressed RGBA texture format, 4x4 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_5x5">
            <summary>ASTC compressed RGBA texture format, 5x5 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_6x6">
            <summary>ASTC compressed RGBA texture format, 6x6 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_8x8">
            <summary>ASTC compressed RGBA texture format, 8x8 block size.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ATC_RGB4">
            <summary>ATC (Android) 4 bits/pixel compressed RGB texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ATC_RGBA8">
            <summary>ATC (Android) 8 bits/pixel compressed RGBA texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ATF_RGB_DXT1">
            <summary>Flash-specific RGB DXT1 compressed color texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ATF_RGB_JPG">
            <summary>Flash-specific RGB JPG-compressed color texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ATF_RGBA_JPG">
            <summary>Flash-specific RGBA JPG-compressed color texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.Automatic16bit">
            <summary>Choose a 16 bit format automatically.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.AutomaticCompressed">
            <summary>Choose a compressed format automatically.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.AutomaticTruecolor">
            <summary>Choose a Truecolor format automatically.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.DXT1">
            <summary>DXT1 compresed texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.DXT5">
            <summary>DXT5 compresed texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.EAC_R">
            <summary>ETC2/EAC compressed 4 bits / pixel unsigned R texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.EAC_R_SIGNED">
            <summary>ETC2/EAC compressed 4 bits / pixel signed R texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.EAC_RG">
            <summary>ETC2/EAC compressed 8 bits / pixel unsigned RG texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.EAC_RG_SIGNED">
            <summary>ETC2/EAC compressed 4 bits / pixel signed RG texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ETC_RGB4">
            <summary>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4">
            <summary>ETC2 compressed 4 bits / pixel RGB texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA">
            <summary>ETC2 compressed 4 bits / pixel RGB + 1-bit alpha texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGBA8">
            <summary>ETC2 compressed 8 bits / pixel RGBA texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB2">
            <summary>PowerVR (iPhone) 2 bits/pixel compressed color texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB4">
            <summary>PowerVR (iPhone) 4 bits/pixel compressed color texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA2">
            <summary>PowerVR (iPhone) 2 bits/pixel compressed with alpha channel texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA4">
            <summary>PowerVR (iPhone) 4 bits/pixel compressed with alpha channel texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.RGB16">
            <summary>RGB 16 bit texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.RGB24">
            <summary>RGB 24 bit texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.RGBA16">
            <summary>RGBA 16 bit (4444) texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.RGBA32">
            <summary>RGBA 32 bit texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiCMPR">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiI4">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiI8">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiIA4">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiIA8">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiRGB565">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiRGB5A3">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterFormat.WiiRGBA8">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.TextureImporterGenerateCubemap">
            <summary>Cubemap generation mode for TextureImporter.</summary>
            <remarks>Cubemap textures can be generated from square textures using one of these modes. See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterGenerateCubemap.Cylindrical">
            <summary>Generate cubemap from cylindrical texture.</summary>
            <remarks>See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterGenerateCubemap.FullCubemap">
            <summary>Generate cubemap from vertical or horizontal cross texture.</summary>
            <remarks>See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterGenerateCubemap.NiceSpheremap">
            <summary>Generate cubemap from spheremap texture.</summary>
            <remarks>See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterGenerateCubemap.None">
            <summary>Do not generate cubemap (default).</summary>
            <remarks>See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterGenerateCubemap.SimpleSpheremap">
            <summary>Generate cubemap from spheremap texture.</summary>
            <remarks>See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterGenerateCubemap.Spheremap">
            <summary>Generate cubemap from spheremap texture.</summary>
            <remarks>See Also: TextureImporter.generateCubemap.</remarks>
        </member>
        <member name="T:UnityEditor.TextureImporterMipFilter">
            <summary>Mip map filter for TextureImporter.</summary>
            <remarks>See Also: TextureImporter.mipmapFilter.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterMipFilter.BoxFilter">
            <summary>Box mipmap filter.</summary>
            <remarks>See Also: TextureImporter.mipmapFilter.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterMipFilter.KaiserFilter">
            <summary>Kaiser mipmap filter.</summary>
            <remarks>See Also: TextureImporter.mipmapFilter.</remarks>
        </member>
        <member name="T:UnityEditor.TextureImporterNormalFilter">
            <summary>Normal map filtering mode for TextureImporter.</summary>
            <remarks>See Also: TextureImporter.normalmapFilter.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterNormalFilter.Sobel">
            <summary>Sobel normal map filter.</summary>
            <remarks>See Also: TextureImporter.normalmapFilter.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterNormalFilter.Standard">
            <summary>Standard normal map filter.</summary>
            <remarks>See Also: TextureImporter.normalmapFilter.</remarks>
        </member>
        <member name="T:UnityEditor.TextureImporterNPOTScale">
            <summary>Scaling mode for non power of two textures in TextureImporter.</summary>
            <remarks>See Also: TextureImporter.npotScale.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterNPOTScale.None">
            <summary>Keep non power of two textures as is.</summary>
            <remarks>See Also: TextureImporter.npotScale.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterNPOTScale.ToLarger">
            <summary>Scale to larger power of two.</summary>
            <remarks>See Also: TextureImporter.npotScale.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterNPOTScale.ToNearest">
            <summary>Scale to nearest power of two.</summary>
            <remarks>See Also: TextureImporter.npotScale.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterNPOTScale.ToSmaller">
            <summary>Scale to smaller power of two.</summary>
            <remarks>See Also: TextureImporter.npotScale.</remarks>
        </member>
        <member name="T:UnityEditor.TextureImporterSettings">
            <summary>Stores settings of a TextureImporter.</summary>
            <remarks>See Also: TextureImporter.</remarks>
        </member>
        <member name="C:UnityEditor.TextureImporterSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.alphaIsTransparency">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.aniso">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporterSettings.ApplyTextureType(UnityEditor.TextureImporterType,System.Boolean)">
            <summary>Configure parameters to import a texture for a purpose of type, as described here.</summary>
            <remarks>To be added.</remarks>
            <param name="type">Texture type. See TextureImporterType.</param>
            <param name="applyAll">If false, change only specific properties. Exactly which, depends on type.</param>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.borderMipmap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.compressionQuality">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.convertToNormalMap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.TextureImporterSettings.CopyTo(UnityEditor.TextureImporterSettings)">
            <summary>Copy parameters into another TextureImporterSettings object.</summary>
            <remarks>To be added.</remarks>
            <param name="target">TextureImporterSettings object to copy settings to.</param>
        </member>
        <member name="M:UnityEditor.TextureImporterSettings.Equal(UnityEditor.TextureImporterSettings,UnityEditor.TextureImporterSettings)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Test texture importer settings for equality.</summary>
            <returns>To be added.</returns>
            <remarks>Objects are reported equal if either the references or the values are equal.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.fadeOut">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.filterMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.generateCubemap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.generateMipsInLinearSpace">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.grayscaleToAlpha">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.heightmapScale">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.lightmap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.linearTexture">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.maxTextureSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.mipmapBias">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.mipmapEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceEnd">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceStart">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.mipmapFilter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.normalMap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.normalMapFilter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.npotScale">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.readable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.seamlessCubemap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.spriteAlignment">
            <summary>Edge-relative alignment of the sprite graphic.</summary>
            <value>To be added.</value>
            <remarks>The possible values relate to the SpriteAlignment enum as follows: Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9. See Also: SpriteAlignment enum.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.spriteExtrude">
            <summary>The number of blank pixels to leave between the edge of the graphic and the mesh.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.spriteMeshType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.spriteMode">
            <summary>Sprite texture import mode.</summary>
            <value>To be added.</value>
            <remarks>This value corresponds to the SpriteImportMode enum as follows: None = 0, Single = 1, Manual = 2. See Also: SpriteImportMode enum.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.spritePivot">
            <summary>Pivot point of the Sprite relative to its graphic's rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.spritePixelsToUnits">
            <summary>Scale factor between pixels in the sprite graphic and world space units.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.textureFormat">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TextureImporterSettings.wrapMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.TextureImporterType">
            <summary>Select this to set basic parameters depending on the purpose of your texture.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Advanced">
            <summary>Select this when you want to have specific parameters on your texture and you want to have total control over your texture.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Bump">
            <summary>Select this to turn the color channels into a format suitable for real-time normal mapping.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Cookie">
            <summary>This sets up your texture with the basic parameters used for the Cookies of your lights.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Cursor">
            <summary>Use this if your texture is going to be used as a cursor.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.GUI">
            <summary>Use this if your texture is going to be used on any HUD/GUI Controls.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Image">
            <summary>This is the most common setting used for all the textures in general.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Lightmap">
            <summary>This sets up your texture with the parameters used by the lightmap.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Reflection">
            <summary>Also known as Cube Maps, used to create reflections on textures.</summary>
        </member>
        <member name="F:UnityEditor.TextureImporterType.Sprite">
            <summary>Select this if you will be using your texture for Sprite graphics.</summary>
        </member>
        <member name="T:UnityEditor.TextureImportInstructions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.TextureImportInstructions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.colorSpace">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.compressedFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.compressionQuality">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.desiredFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.height">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.recommendedFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.uncompressedFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.usageMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureImportInstructions.width">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.TextureUsageMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.TextureUsageMode.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureUsageMode.LightmapDoubleLDR">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureUsageMode.LightmapRGBM">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureUsageMode.NormalmapDXT5nm">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.TextureUsageMode.NormalmapPlain">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.Tool">
            <summary>Which tool is active in the editor.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Tool.Move">
            <summary>The move tool is active.</summary>
        </member>
        <member name="F:UnityEditor.Tool.None">
            <summary>No tool is active. Set this to implement your own in-inspector toolbar (like the terrain editor does).</summary>
        </member>
        <member name="F:UnityEditor.Tool.Rotate">
            <summary>The rotate tool is active.</summary>
        </member>
        <member name="F:UnityEditor.Tool.Scale">
            <summary>The scale tool is active.</summary>
        </member>
        <member name="F:UnityEditor.Tool.View">
            <summary>The view tool is active - Use Tools.viewTool to find out which view tool we're talking about.</summary>
        </member>
        <member name="T:UnityEditor.Tools">
            <summary>Class used to manipulate the tools used in Unity's Scene View.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Tools">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.current">
            <summary>The tool that is currently selected for the Scene View.</summary>
            <value>To be added.</value>
            <remarks>This refers to the View, Move, Rotate and Scale tools available in the toolbar for the main editor window. See Also: viewTool.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.handlePosition">
            <summary>The position of the tool handle in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.handleRotation">
            <summary>The rotation of the tool handle in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.lockedLayers">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.pivotMode">
            <summary>Are we in Center or Pivot mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: handlePosition.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.pivotRotation">
            <summary>What's the rotation of the tool handle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.viewTool">
            <summary>The option that is currently active for the View tool in the Scene view.</summary>
            <value>To be added.</value>
            <remarks>The View tool has options for Orbit, Pan, Zoom and FPS, depending on which combination mouse buttons and modifier keys is used. This property reports which option is currently active. See Also: current.</remarks>
        </member>
        <member name="P:UnityEditor.Tools.visibleLayers">
            <summary>Which layers are visible in the scene view.</summary>
            <value>To be added.</value>
            <remarks>This is a bitfield.</remarks>
        </member>
        <member name="T:UnityEditor.TrueTypeFontImporter">
            <summary>AssetImporter for importing Fonts.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.TrueTypeFontImporter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.characterPadding">
            <summary>Border pixels added to character images for padding. This is useful if you want to render text using a shader which needs to render outside of the character area (like an outline shader).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.characterSpacing">
            <summary>Spacing between character images in the generated texture in pixels. This is useful if you want to render text using a shader which samples pixels outside of the character area (like an outline shader).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.customCharacters">
            <summary>A custom set of characters to be included in the Font Texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.fontNames">
            <summary>An array of font names, to be used when includeFontData is set to false.</summary>
            <value>To be added.</value>
            <remarks>The first font in the array available on the OS will be used.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.fontRenderingMode">
            <summary>Font rendering mode to use for this font.</summary>
            <value>To be added.</value>
            <remarks>S.A. FontRenderingMode.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.fontSize">
            <summary>Font size to use for importing the characters.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.fontTextureCase">
            <summary>Use this to adjust which characters should be imported.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.fontTTFName">
            <summary>The internal font name of the TTF file.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.TrueTypeFontImporter.GenerateEditableFont(System.String)">
            <param name="path">To be added.</param>
            <summary>Create an editable copy of the font asset at path.</summary>
            <returns>To be added.</returns>
            <remarks>Use this function if you want to modify the font generated by the TrueTypeFontImporter, with a custom texture or otherwise. It will create a copy of the font asset at path with an accompanying png Texture file and a Material, which you can all modify to meet your needs. A reference to the newly created editable Font is returned.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.includeFontData">
            <summary>If this is enabled, the actual font will be embedded into the asset for Dynamic fonts.</summary>
            <value>To be added.</value>
            <remarks>When you disable this, the user must have the font installed in his system to use it.</remarks>
        </member>
        <member name="P:UnityEditor.TrueTypeFontImporter.use2xBehaviour">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.UIOrientation">
            <summary>Default mobile device orientation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.UIOrientation.AutoRotation">
            <summary>Auto Rotation Enabled.</summary>
        </member>
        <member name="F:UnityEditor.UIOrientation.LandscapeLeft">
            <summary>Landscape : counter-clockwise from Portrait.</summary>
        </member>
        <member name="F:UnityEditor.UIOrientation.LandscapeRight">
            <summary>Landscape: clockwise from Portrait.</summary>
        </member>
        <member name="F:UnityEditor.UIOrientation.Portrait">
            <summary>Portrait.</summary>
        </member>
        <member name="F:UnityEditor.UIOrientation.PortraitUpsideDown">
            <summary>Portrait upside down.</summary>
        </member>
        <member name="T:UnityEditor.Undo">
            <summary>Lets you register undo operations on specific objects you are about to perform changes on.</summary>
            <remarks>The Undo system stores delta changes in the undo stack. Undo operations are automatically combined together based on events Eg. mouse down events will split undo groups. Undo operations store either per property or per object state. This way they scale well with any scene size. The most important operations are outlined below. Modifying a single property:Adding a component :Creating a new GameObject:Destroying a GameObject or component:Changing transform parenting:</remarks>
        </member>
        <member name="C:UnityEditor.Undo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.AddComponent(UnityEngine.GameObject,System.Type)">
            <param name="gameObject">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.AddComponent``1(UnityEngine.GameObject)">
            <typeparam name="T">To be added.</typeparam>
            <param name="gameObject">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.ClearSnapshotTarget">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.ClearUndo(UnityEngine.Object)">
            <param name="identifier">To be added.</param>
            <summary>Removes aall Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.CollapseUndoOperations(System.Int32)">
            <param name="groupIndex">To be added.</param>
            <summary>Collapses all undo operation up to group index together into one step.</summary>
            <remarks>This is used by the color picked to combine all color modifications into a single step once the color picker is closed, while they are seperate operations when the color picker is still open.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.CreateSnapshot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.DestroyObjectImmediate(UnityEngine.Object)">
            <summary>Destroys the object and records an undo operation so that it can be recreated.</summary>
            <remarks>Destroys the object with the same behaviour as DestroyImmediate (objectToUndo, true); Also stores all destroyed objects in the undo buffer so that they can be fully recreated.</remarks>
            <param name="objectToUndo">The object that will be destroyed.</param>
        </member>
        <member name="M:UnityEditor.Undo.FlushUndoRecordObjects">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.GetCurrentGroup">
            <summary>Unity automatically groups undo operations by the current group index.</summary>
            <returns>To be added.</returns>
            <remarks>The current group index is automatically increased on mouse down, clicking on menu items and other operations. See Also: Undo.RevertAllDownToGroup.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.IncrementCurrentGroup">
            <summary>Unity automatically groups undo operations by the current group index.</summary>
            <remarks>The current group is automatically incremented based on events eg. mouse down events, executing a menu item increments the current group. But sometimes it is necessary to manually group undo operations.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.PerformRedo">
            <summary>Perform an Redo operation.</summary>
            <remarks>This performs a redo operation. It is the same as clicking on the Edit-&gt;Redo menu. See Also: PerformUndo.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.PerformUndo">
            <summary>Perform an Redo operation.</summary>
            <remarks>This performs a undo operation. It is the same as clicking on the Edit-&gt;Undo menu. See Also: PerformRedo.</remarks>
        </member>
        <member name="F:UnityEditor.Undo.postprocessModifications">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RecordObject(UnityEngine.Object,System.String)">
            <param name="objectToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Records any changes done on the object after the RecordObject function.</summary>
            <remarks>Almost all property changes can be recorded with this function. The transform parent, AddComponent, object destruction can not be recorded with this function, for that you should use the dedicated functions. Internally this will create a temporary copy of the objects state and at the end of the frame Unity will diff the state and thus detect what exactly has changed. The changed properties are then recorded on the undo stack. If nothing has actually changed (Binary exact comparison is used for all properties), no undo operation will be stored on the stack.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RecordObjects(UnityEngine.Object[],System.String)">
            <param name="objectsToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.</summary>
            <remarks>See Also: Undo.RecordObject.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object,System.String)">
            <param name="objectToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object[],System.String)">
            <param name="objectsToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterCreatedObjectUndo(UnityEngine.Object,System.String)">
            <summary>Register an undo operations for a newly created object.</summary>
            <remarks>When the undo is performed the object will be destroyed. All newly created objects that are part of undoable state should be registered with this function.</remarks>
            <param name="objectToUndo">The object that was created.</param>
            <param name="name">The name of the action to undo. Think "Undo ...." in the main menu.</param>
        </member>
        <member name="M:UnityEditor.Undo.RegisterFullObjectHierarchyUndo(UnityEngine.Object)">
            <param name="objectToUndo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterSceneUndo(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterSnapshot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterUndo(UnityEngine.Object,System.String)">
            <param name="objectToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RegisterUndo(UnityEngine.Object[],System.String)">
            <param name="objectsToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RestoreSnapshot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RevertAllDownToGroup(System.Int32)">
            <param name="group">To be added.</param>
            <summary>Performs all undo operations up to the group index without storing a redo operation in the process.</summary>
            <remarks>See Also: Undo.GetCurrentGroup.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.RevertAllInCurrentGroup">
            <summary>Performs the last undo operation but does not record a redo operation.</summary>
            <remarks>This is useful when you want to simply revert the last performed action. In Unity the escape is commonly used to execute this function.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.SetSnapshotTarget(UnityEngine.Object,System.String)">
            <param name="objectToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.SetSnapshotTarget(UnityEngine.Object[],System.String)">
            <param name="objectsToUndo">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Undo.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform,System.String)">
            <param name="transform">To be added.</param>
            <param name="newParent">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Sets the parent of transform to the new parent and records an undo operation.</summary>
            <remarks>This is equivalent to calling transform.parent = newParent, but it additionally records the undo operation.</remarks>
        </member>
        <member name="F:UnityEditor.Undo.undoRedoPerformed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Undo+PostprocessModifications">
            <param name="modifications">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Undo+UndoRedoCallback">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.UndoPropertyModification">
            <summary>See Also: Undo.postprocessModifications.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UndoPropertyModification.keepPrefabOverride">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.UndoPropertyModification.propertyModification">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.UndoSnapshot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.UndoSnapshot(UnityEngine.Object[])">
            <param name="objectsToUndo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.UndoSnapshot.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.UndoSnapshot.Restore">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.UnityStats">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.UnityStats">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.batchedDrawCalls">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.batches">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.drawCalls">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.frameTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.UnityStats.GetNetworkStats(System.Int32)">
            <param name="i">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.ibUploadBytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.ibUploads">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.renderTextureBytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.renderTextureChanges">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.renderTextureCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.renderTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.screenBytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.screenRes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.shadowCasters">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.triangles">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.usedTextureCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.usedTextureMemorySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.vboTotal">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.vboTotalBytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.vboUploadBytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.vboUploads">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.vertices">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.visibleAnimations">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.UnityStats.visibleSkinnedMeshes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Unsupported">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Unsupported">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CaptureScreenshotImmediate(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="filePath">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CheckIPhoneXCode4Installed">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CheckIPhoneXCodeInstalled">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CopyComponentToPasteboard(UnityEngine.Component)">
            <param name="component">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CopyGameObjectsToPasteboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CopyStateMachineToPasteboard(UnityEditorInternal.StateMachine,UnityEditorInternal.AnimatorController)">
            <param name="stateMachine">To be added.</param>
            <param name="controller">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.CopyStateToPasteboard(UnityEditorInternal.State,UnityEditorInternal.AnimatorController)">
            <param name="state">To be added.</param>
            <param name="controller">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.DeleteGameObjectSelection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.DuplicateGameObjectsUsingPasteboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetApplicationSettingCompressAssetsOnImport">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetBaseUnityDeveloperFolder">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetLocalIdentifierInFile(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetSerializedAssetInterfaceSingleton(System.String)">
            <param name="className">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetSubmenus(System.String)">
            <param name="menuPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetSubmenusCommands(System.String)">
            <param name="menuPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.GetTypeFromFullName(System.String)">
            <param name="fullName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.HasStateMachineDataInPasteboard">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.IsBleedingEdgeBuild">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.IsDestroyScriptableObject(UnityEngine.ScriptableObject)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.IsDeveloperBuild">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.IsHiddenFile(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.IsNativeCodeBuiltInReleaseMode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.LaunchIPhoneXCode4">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.PasteComponentFromPasteboard(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.PasteComponentValuesFromPasteboard(UnityEngine.Component)">
            <param name="component">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.PasteGameObjectsFromPasteboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.PasteToStateMachineFromPasteboard(UnityEditorInternal.StateMachine,UnityEditorInternal.AnimatorController)">
            <param name="sm">To be added.</param>
            <param name="controller">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.PrepareObjectContextMenu(UnityEngine.Object,System.Int32)">
            <param name="c">To be added.</param>
            <param name="contextUserData">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.ResolveSymlinks(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SceneTrackerFlushDirty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SetAllowCursorHide(System.Boolean)">
            <param name="allow">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SetAllowCursorLock(System.Boolean)">
            <param name="allow">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SetApplicationSettingCompressAssetsOnImport(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SetQualitySettingsShadowDistanceTemporarily(System.Single)">
            <param name="distance">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SetRenderSettingsUseFogNoDirty(System.Boolean)">
            <param name="fog">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.SmartReset(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.StopPlayingImmediately">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.StripFatMacho(System.String,System.Boolean)">
            <param name="path">To be added.</param>
            <param name="generate_x86_64">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported.TerminateIPhoneXCode4">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Unsupported+ProgressiveMesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported+ProgressiveMesh.Create(UnityEngine.Mesh,UnityEditor.Unsupported+ProgressiveMesh@)">
            <param name="src">To be added.</param>
            <param name="pm">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported+ProgressiveMesh.CreateInitialGeometry(UnityEditor.Unsupported+ProgressiveMesh,UnityEngine.Mesh)">
            <param name="pm">To be added.</param>
            <param name="mesh">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported+ProgressiveMesh.Destroy(UnityEditor.Unsupported+ProgressiveMesh@)">
            <param name="pm">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unsupported+ProgressiveMesh.UpdateMesh(UnityEditor.Unsupported+ProgressiveMesh,System.Int32,UnityEngine.Mesh)">
            <param name="pm">To be added.</param>
            <param name="targetTriCount">To be added.</param>
            <param name="mesh">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.UnwrapParam">
            <summary>Unwrapping settings.</summary>
            <remarks>Use them only if you fully understand what they mean.</remarks>
        </member>
        <member name="F:UnityEditor.UnwrapParam.angleError">
            <summary>Maximum allowed angle distortion (0..1).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.UnwrapParam.areaError">
            <summary>Maximum allowed area distortion (0..1).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.UnwrapParam.hardAngle">
            <summary>This angle (or greater) between triangles will cause seam to be created.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.UnwrapParam.packMargin">
            <summary>How much uv-islands will be padded.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.UnwrapParam.SetDefaults(UnityEditor.UnwrapParam@)">
            <param name="param">To be added.</param>
            <summary>Will set default values for params.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Unwrapping">
            <summary>This class holds everything you may need in regard to uv-unwrapping.</summary>
            <remarks>WARNING: preliminary interface, will be changed in future versions e.g. in future it will contain possibility to pack your uvs optimally etc.</remarks>
        </member>
        <member name="C:UnityEditor.Unwrapping">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh)">
            <param name="src">To be added.</param>
            <summary>Will generate per-triangle uv (3 uv pairs for each triangle) with default settings.Will generate per-triangle uv (3 uv pairs for each triangle) with provided settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
            <param name="src">To be added.</param>
            <param name="settings">To be added.</param>
            <summary>Will generate per-triangle uv (3 uv pairs for each triangle) with default settings.Will generate per-triangle uv (3 uv pairs for each triangle) with provided settings.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh)">
            <param name="src">To be added.</param>
            <summary>Will auto generate uv2 with default settings for provided mesh, and fill them in.Will auto generate uv2 with provided settings for provided mesh, and fill them in.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
            <param name="src">To be added.</param>
            <param name="settings">To be added.</param>
            <summary>Will auto generate uv2 with default settings for provided mesh, and fill them in.Will auto generate uv2 with provided settings for provided mesh, and fill them in.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ViewTool">
            <summary>Enum for Tools.viewTool.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.ViewTool.FPS">
            <summary>The FPS tool is selected.</summary>
        </member>
        <member name="F:UnityEditor.ViewTool.None">
            <summary>View tool is not selected.</summary>
        </member>
        <member name="F:UnityEditor.ViewTool.Orbit">
            <summary>The orbit tool is selected.</summary>
        </member>
        <member name="F:UnityEditor.ViewTool.Pan">
            <summary>The pan tool is selected.</summary>
        </member>
        <member name="F:UnityEditor.ViewTool.Zoom">
            <summary>The zoom tool is selected.</summary>
        </member>
        <member name="T:UnityEditor.WiiBuildDebugLevel">
            <summary>Target Wii debugging level.</summary>
            <remarks>See Also: EditorUserBuildSettings.wiiBuildDebugLevel.</remarks>
        </member>
        <member name="F:UnityEditor.WiiBuildDebugLevel.Full">
            <summary>Asserts enabled, memory profiling enabled, Nintendo Wii profiler linked, hio2 library linked, no optimizations.</summary>
        </member>
        <member name="F:UnityEditor.WiiBuildDebugLevel.Minimal">
            <summary>Memory profiling enabled, Nintendo Wii profiler linked, hio2 library linked, optimizations enabled.</summary>
        </member>
        <member name="F:UnityEditor.WiiBuildDebugLevel.None">
            <summary>Optimizations enabled.</summary>
        </member>
        <member name="T:UnityEditor.WiiBuildSubtarget">
            <summary>Target Wii build platform.</summary>
            <remarks>See Also: EditorUserBuildSettings.wiiBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.WiiBuildSubtarget.DVD">
            <summary>Precompiled ELF targeting DVD deployment.</summary>
            <remarks>See Also: EditorUserBuildSettings.wiiBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.WiiBuildSubtarget.DVDLibrary">
            <summary>Precompiled libary with additional compile/link step targeting DVD deployment.</summary>
            <remarks>See Also: EditorUserBuildSettings.wiiBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.WiiBuildSubtarget.WiiWare">
            <summary>Precompiled ELF targeting WiiWare deployment.</summary>
            <remarks>See Also: EditorUserBuildSettings.wiiBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.WiiBuildSubtarget.WiiWareLibrary">
            <summary>Precompiled libary with additional compile/link step targeting WiiWare deployment.</summary>
            <remarks>See Also: EditorUserBuildSettings.wiiBuildSubtarget.</remarks>
        </member>
        <member name="T:UnityEditor.WiiHio2Usage">
            <summary>WiiHio2Usage.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.WiiHio2Usage.Automation">
            <summary>Automation, Hio2 is used for connecting to CWAutomation program.</summary>
        </member>
        <member name="F:UnityEditor.WiiHio2Usage.None">
            <summary>None, Hio2 isn't used at all.</summary>
        </member>
        <member name="F:UnityEditor.WiiHio2Usage.Profiler">
            <summary>Profiler, Hio2 is used for Wii profiler functionality.</summary>
        </member>
        <member name="T:UnityEditor.WiiRegion">
            <summary>Wii region.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.WiiRegion.China">
            <summary>China.</summary>
        </member>
        <member name="F:UnityEditor.WiiRegion.Europe">
            <summary>Europe.</summary>
        </member>
        <member name="F:UnityEditor.WiiRegion.Japan">
            <summary>Japan.</summary>
        </member>
        <member name="F:UnityEditor.WiiRegion.Korea">
            <summary>Korea.</summary>
        </member>
        <member name="F:UnityEditor.WiiRegion.Taiwan">
            <summary>Taiwan.</summary>
        </member>
        <member name="F:UnityEditor.WiiRegion.USA">
            <summary>USA.</summary>
        </member>
        <member name="T:UnityEditor.XboxBuildSubtarget">
            <summary>Target Xbox build type.</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.XboxBuildSubtarget.Debug">
            <summary>Debug player (for building with source code).</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.XboxBuildSubtarget.Development">
            <summary>Development player.</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</remarks>
        </member>
        <member name="F:UnityEditor.XboxBuildSubtarget.Master">
            <summary>Master player (submission-proof).</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</remarks>
        </member>
        <member name="T:UnityEditor.XboxRunMethod">
            <summary>Xbox 360 run method.</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxRunMethod.</remarks>
        </member>
        <member name="F:UnityEditor.XboxRunMethod.DiscEmuAccurate">
            <summary>Disc emulation (Accurate).</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxRunMethod.</remarks>
        </member>
        <member name="F:UnityEditor.XboxRunMethod.DiscEmuFast">
            <summary>Disc emulation (Fast).</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxRunMethod.</remarks>
        </member>
        <member name="F:UnityEditor.XboxRunMethod.HDD">
            <summary>Copy to hard drive.</summary>
            <remarks>See Also: EditorUserBuildSettings.xboxRunMethod.</remarks>
        </member>
        <member name="T:UnityEditor.Callbacks.DidReloadScripts">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.DidReloadScripts">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.DidReloadScripts(System.Int32)">
            <param name="callbackOrder">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Callbacks.OnOpenAssetAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.OnOpenAssetAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.OnOpenAssetAttribute(System.Int32)">
            <param name="callbackOrder">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Callbacks.PostProcessBuildAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.PostProcessBuildAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.PostProcessBuildAttribute(System.Int32)">
            <param name="callbackOrder">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Callbacks.PostProcessSceneAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.PostProcessSceneAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Callbacks.PostProcessSceneAttribute(System.Int32)">
            <param name="callbackOrder">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Macros.MacroEvaluator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Macros.MacroEvaluator.Eval(System.String)">
            <param name="macro">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Macros.MethodEvaluator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Macros.MethodEvaluator.Eval(System.String,System.String,System.String,System.Type[],System.Object[])">
            <param name="assemblyFile">To be added.</param>
            <param name="typeName">To be added.</param>
            <param name="methodName">To be added.</param>
            <param name="paramTypes">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Macros.MethodEvaluator+AssemblyResolver">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Macros.MethodEvaluator+AssemblyResolver(System.String)">
            <param name="assemblyDirectory">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Macros.MethodEvaluator+AssemblyResolver.AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <param name="sender">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.ProjectWindowCallback.EndNameEditAction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.ProjectWindowCallback.EndNameEditAction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowCallback.EndNameEditAction.Action(System.Int32,System.String,System.String)">
            <param name="instanceId">To be added.</param>
            <param name="pathName">To be added.</param>
            <param name="resourceFile">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowCallback.EndNameEditAction.CleanUp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.ProjectWindowCallback.EndNameEditAction.OnEnable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Sprites.AtlasSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.colorSpace">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.compressionQuality">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.filterMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.format">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.maxHeight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.maxWidth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.AtlasSettings.usageMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Sprites.DataUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Sprites.DataUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteIndices(UnityEngine.Sprite,System.Boolean)">
            <param name="sprite">To be added.</param>
            <param name="getAtlasData">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteMesh(UnityEngine.Sprite,System.Boolean)">
            <param name="sprite">To be added.</param>
            <param name="getAtlasData">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteTexture(UnityEngine.Sprite,System.Boolean)">
            <param name="sprite">To be added.</param>
            <param name="getAtlasData">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteUVs(UnityEngine.Sprite,System.Boolean)">
            <param name="sprite">To be added.</param>
            <param name="getAtlasData">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Sprites.IPackerPolicy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.IPackerPolicy.GetVersion">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.IPackerPolicy.OnGroupAtlases(UnityEditor.BuildTarget,UnityEditor.Sprites.PackerJob,UnityEditor.TextureImporter[])">
            <param name="target">To be added.</param>
            <param name="job">To be added.</param>
            <param name="textureImporters">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Sprites.Packer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.Sprites.Packer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Sprites.Packer.atlasNames">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.Packer.GetAtlasDataForSprite(UnityEngine.Sprite,System.String@,UnityEngine.Texture2D@)">
            <param name="sprite">To be added.</param>
            <param name="atlasName">To be added.</param>
            <param name="atlasTexture">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.Packer.GetTexturesForAtlas(System.String)">
            <param name="atlasName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.Packer.kDefaultPolicy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Sprites.Packer.Policies">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean)">
            <param name="target">To be added.</param>
            <param name="displayProgressBar">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean,UnityEditor.Sprites.Packer+Execution)">
            <param name="target">To be added.</param>
            <param name="displayProgressBar">To be added.</param>
            <param name="execution">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.Sprites.Packer.SelectedPolicy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.Sprites.Packer+Execution">
            <summary>Sprite Packer execution mode.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.Sprites.Packer+Execution.ForceRegroup">
            <summary>Will always trigger IPackerPolicy.OnGroupAtlases.</summary>
        </member>
        <member name="F:UnityEditor.Sprites.Packer+Execution.Normal">
            <summary>Normal execution. Will not trigger IPackerPolicy.OnGroupAtlases unless IPackerPolicy, IPackerPolicy version or TextureImporter settings have changed.</summary>
        </member>
        <member name="T:UnityEditor.Sprites.PackerJob">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.PackerJob.AddAtlas(System.String,UnityEditor.Sprites.AtlasSettings)">
            <param name="atlasName">To be added.</param>
            <param name="settings">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.Sprites.PackerJob.AssignToAtlas(System.String,UnityEngine.Sprite,UnityEngine.SpritePackingMode,UnityEngine.SpritePackingRotation)">
            <param name="atlasName">To be added.</param>
            <param name="sprite">To be added.</param>
            <param name="packingMode">To be added.</param>
            <param name="packingRotation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.Asset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.Asset(System.String)">
            <param name="clientPath">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.Edit">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.fullName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.IsChildOf(UnityEditor.VersionControl.Asset)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.isFolder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.isInCurrentProject">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.isMeta">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.IsOneOfStates(UnityEditor.VersionControl.Asset+States[])">
            <param name="states">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.IsState(UnityEditor.VersionControl.Asset+States)">
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Asset.Load">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.locked">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.path">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.prettyPath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.readOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Asset.state">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.Asset+States">
            <summary>Describes the various version control states an asset can have.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.AddedLocal">
            <summary>The was locally added to version control.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.AddedRemote">
            <summary>Remotely this asset was added to version control.</summary>
            <remarks>If the same assets exists on two machine but has only been added to version control on one of them, then it will appear as remotely added on the machine where it has not been added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.CheckedOutLocal">
            <summary>The asset has been checked out on the local machine.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.CheckedOutRemote">
            <summary>The asset has been checked out on a remote machine.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.Conflicted">
            <summary>There is a conflict with the asset that needs to be resolved.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.DeletedLocal">
            <summary>The asset has been deleted locally.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.DeletedRemote">
            <summary>The asset has been deleted on a remote machine.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.Local">
            <summary>The asset is not under version control.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.LockedLocal">
            <summary>The asset is locked by the local machine.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.LockedRemote">
            <summary>The asset is locked by a remote machine.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.MetaFile">
            <summary>This instance of the class actaully refers to a .meta file.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.Missing">
            <summary>The asset exists in version control but is missing on the local machine.</summary>
            <remarks>This can happen if you delete an assets from Finder/Explorer with out using the version control system.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.None">
            <summary>The version control state is unknown.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.OutOfSync">
            <summary>A newer version of the asset is available on the version control server.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.ReadOnly">
            <summary>The asset is read only.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.Synced">
            <summary>The asset is up to date.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Asset+States.Updating">
            <summary>The state of the asset is currently being queried from the version control server.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.AssetList">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.AssetList">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.AssetList(UnityEditor.VersionControl.AssetList)">
            <param name="src">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.AssetList.Filter(System.Boolean,UnityEditor.VersionControl.Asset+States[])">
            <param name="includeFolder">To be added.</param>
            <param name="states">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.AssetList.FilterChildren">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.AssetList.FilterCount(System.Boolean,UnityEditor.VersionControl.Asset+States[])">
            <param name="includeFolder">To be added.</param>
            <param name="states">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.ChangeSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.ChangeSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.ChangeSet(System.String)">
            <param name="description">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.ChangeSet(UnityEditor.VersionControl.ChangeSet)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.ChangeSet(System.String,System.String)">
            <param name="description">To be added.</param>
            <param name="revision">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ChangeSet.description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.ChangeSet.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.ChangeSet.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ChangeSet.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.ChangeSets">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.ChangeSets">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.CheckoutMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.CheckoutMode.Asset">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CheckoutMode.Both">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CheckoutMode.Meta">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.CompletionAction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.OnAddedChangeWindow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeContentsPendingWindow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeSetsPendingWindow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.OnGotLatestPendingWindow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.OnIncomingPendingWindow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.OnSubmittedChangeWindow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.CompletionAction.UpdatePendingWindow">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.ConfigField">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.ConfigField">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ConfigField.description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.ConfigField.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.ConfigField.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ConfigField.isPassword">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ConfigField.isRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ConfigField.label">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.ConfigField.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.FileMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.FileMode.Binary">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.FileMode.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.FileMode.Text">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.MergeMethod">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.MergeMethod.MergeAll">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNonConflicting">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNone">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.Message">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.Message">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Message.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Message.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Message.message">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Message.severity">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Message.Show">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.Message+Severity">
            <summary>Severity of a version control message.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.Message+Severity.Data">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Message+Severity.Error">
            <summary>Error message.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.Message+Severity.Info">
            <summary>Informational message.</summary>
            <remarks>This can include information such as who else is accessing an asset.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.Message+Severity.Verbose">
            <summary>Verbose message.</summary>
            <remarks>This includes intermediate query results and other info from the version control plugins.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.Message+Severity.Warning">
            <summary>Warning message.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.OnlineState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.OnlineState.Offline">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.OnlineState.Online">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.OnlineState.Updating">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.Plugin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.Plugin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Plugin.availablePlugins">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Plugin.configFields">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Plugin.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Plugin.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Plugin.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.Provider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.Provider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.activeTask">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.Asset,System.Boolean)">
            <param name="asset">To be added.</param>
            <param name="recursive">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.AssetList,System.Boolean)">
            <param name="assets">To be added.</param>
            <param name="recursive">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.AddIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetDescription(UnityEditor.VersionControl.ChangeSet)">
            <param name="changeset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,System.String)">
            <param name="asset">To be added.</param>
            <param name="changesetID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.ChangeSet)">
            <param name="asset">To be added.</param>
            <param name="changeset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,System.String)">
            <param name="assets">To be added.</param>
            <param name="changesetID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ChangeSet)">
            <param name="assets">To be added.</param>
            <param name="changeset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSets">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(System.String)">
            <param name="changesetID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(UnityEditor.VersionControl.ChangeSet)">
            <param name="changeset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String,UnityEditor.VersionControl.CheckoutMode)">
            <param name="asset">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String[],UnityEditor.VersionControl.CheckoutMode)">
            <param name="assets">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.CheckoutMode)">
            <param name="asset">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.CheckoutMode)">
            <param name="assets">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object,UnityEditor.VersionControl.CheckoutMode)">
            <param name="asset">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object[],UnityEditor.VersionControl.CheckoutMode)">
            <param name="assets">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ClearCache">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Delete(System.String)">
            <param name="assetProjectPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSets(UnityEditor.VersionControl.ChangeSets)">
            <param name="changesets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSetsIsValid(UnityEditor.VersionControl.ChangeSets)">
            <param name="changesets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.DiffHead(UnityEditor.VersionControl.AssetList,System.Boolean)">
            <param name="assets">To be added.</param>
            <param name="includingMetaFiles">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.DiffIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.enabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetActiveConfigFields">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetActivePlugin">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetAssetByGUID(System.String)">
            <param name="guid">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetAssetByPath(System.String)">
            <param name="unityPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetAssetListFromSelection">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.hasChangelistSupport">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Incoming">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(System.String)">
            <param name="changesetID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(UnityEditor.VersionControl.ChangeSet)">
            <param name="changeset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.isActive">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.IsOpenForEdit(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.isVersioningFolders">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.Asset,System.Boolean)">
            <param name="asset">To be added.</param>
            <param name="locked">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.AssetList,System.Boolean)">
            <param name="assets">To be added.</param>
            <param name="locked">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Merge(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.MergeMethod)">
            <param name="assets">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Move(System.String,System.String)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.offlineReason">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.onlineState">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Provider.requiresNetwork">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Resolve(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ResolveMethod)">
            <param name="assets">To be added.</param>
            <param name="resolveMethod">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.ResolveIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
            <param name="asset">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
            <param name="assets">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
            <param name="asset">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
            <param name="assets">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(System.String)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[])">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(System.String,System.Boolean)">
            <param name="asset">To be added.</param>
            <param name="recursively">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[],System.Boolean)">
            <param name="assets">To be added.</param>
            <param name="recursively">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset,System.Boolean)">
            <param name="asset">To be added.</param>
            <param name="recursively">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList,System.Boolean)">
            <param name="assets">To be added.</param>
            <param name="recursively">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.Submit(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList,System.String,System.Boolean)">
            <param name="changeset">To be added.</param>
            <param name="list">To be added.</param>
            <param name="description">To be added.</param>
            <param name="saveOnly">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.SubmitIsValid(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList)">
            <param name="changeset">To be added.</param>
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.Asset)">
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.AssetList)">
            <param name="assets">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Provider.UpdateSettings">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VersionControl.ResolveMethod">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMerged">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMine">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.ResolveMethod.UseTheirs">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.RevertMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.RevertMode.KeepModifications">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.RevertMode.Normal">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.RevertMode.Unchanged">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.SubmitResult">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditor.VersionControl.SubmitResult.ConflictingFiles">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.SubmitResult.Error">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.SubmitResult.OK">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditor.VersionControl.SubmitResult.UnaddedFiles">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditor.VersionControl.Task">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditor.VersionControl.Task">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.assetList">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.changeSets">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Task.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Task.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.messages">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.progressMessage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.progressPct">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.resultCode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.secondsSpent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Task.SetCompletionAction(UnityEditor.VersionControl.CompletionAction)">
            <param name="action">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.success">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.text">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditor.VersionControl.Task.userIdentifier">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VersionControl.Task.Wait">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditor.VisualStudioIntegration.SolutionGuidGenerator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VisualStudioIntegration.SolutionGuidGenerator.GuidForProject(System.String)">
            <param name="projectName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditor.VisualStudioIntegration.SolutionGuidGenerator.GuidForSolution(System.String)">
            <param name="projectName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AnimatorCondition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorCondition.exitTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorCondition.mode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorCondition.parameter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorCondition.threshold">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AnimatorController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AnimatorController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.AddAnimationClipToController(UnityEditorInternal.AnimatorController,UnityEngine.AnimationClip)">
            <param name="controller">To be added.</param>
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.AddLayer(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.AddParameter(System.String,UnityEditorInternal.AnimatorControllerParameterType)">
            <param name="name">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.CreateAnimatorControllerAtPath(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.CreateAnimatorControllerAtPathWithClip(System.String,UnityEngine.AnimationClip)">
            <param name="path">To be added.</param>
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.CreateAnimatorControllerForClip(UnityEngine.AnimationClip,UnityEngine.GameObject)">
            <param name="clip">To be added.</param>
            <param name="animatedObject">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.FindParameter(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.GetEffectiveAnimatorController(UnityEngine.Animator)">
            <param name="behavior">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.GetLayer(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.GetParameter(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorController.layerCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.AnimatorController.OnAnimatorControllerDirty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorController.parameterCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.RemoveLayer(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.RemoveParameter(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorController.SetAnimatorController(UnityEngine.Animator,UnityEditorInternal.AnimatorController)">
            <param name="behavior">To be added.</param>
            <param name="controller">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AnimatorControllerLayer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AnimatorControllerLayer(UnityEditorInternal.AnimatorController,System.Int32)">
            <param name="controller">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.avatarMask">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.blendingMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.defaultWeight">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.iKPass">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.motionSetIndex">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.stateMachine">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.syncedLayerAffectsTiming">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerLayer.syncedLayerIndex">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AnimatorControllerParameter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AnimatorControllerParameter(UnityEditorInternal.AnimatorController,System.Int32)">
            <param name="controller">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerParameter.defaultBool">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerParameter.defaultFloat">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerParameter.defaultInt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerParameter.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AnimatorControllerParameter.type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AnimatorControllerParameterType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.AnimatorControllerParameterType.Bool">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.AnimatorControllerParameterType.Float">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.AnimatorControllerParameterType.Int">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.AnimatorControllerParameterType.Trigger">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.AnimatorLayerBlendingMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.AnimatorLayerBlendingMode.Additive">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.AnimatorLayerBlendingMode.Override">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.AnimatorUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AnimatorUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorUtility.CalculateBlendTexture(UnityEngine.Animator,System.Int32,System.Int32,UnityEngine.Texture2D,UnityEngine.Texture2D[],UnityEngine.Rect)">
            <param name="animator">To be added.</param>
            <param name="layerIndex">To be added.</param>
            <param name="stateHash">To be added.</param>
            <param name="blendTexture">To be added.</param>
            <param name="weightTextures">To be added.</param>
            <param name="rect">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorUtility.CalculateRootBlendTreeChildWeights(UnityEngine.Animator,System.Int32,System.Int32,System.Single[],System.Single,System.Single)">
            <param name="animator">To be added.</param>
            <param name="layerIndex">To be added.</param>
            <param name="stateHash">To be added.</param>
            <param name="weightArray">To be added.</param>
            <param name="blendX">To be added.</param>
            <param name="blendY">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AnimatorUtility.GetRootBlendTreeChildWeights(UnityEngine.Animator,System.Int32,System.Int32,System.Single[])">
            <param name="animator">To be added.</param>
            <param name="layerIndex">To be added.</param>
            <param name="stateHash">To be added.</param>
            <param name="weightArray">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AssetStore">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AssetStore">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AssetStore.Open(System.String)">
            <param name="assetStoreURL">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AssetStoreToolUtils">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AssetStoreToolUtils">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AssetStoreToolUtils.BuildAssetStoreAssetBundle(UnityEngine.Object,System.String)">
            <param name="targetObject">To be added.</param>
            <param name="targetPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AssetStoreToolUtils.PreviewAssetStoreAssetBundleInInspector(UnityEngine.AssetBundle,UnityEditor.AssetStoreAsset)">
            <param name="bundle">To be added.</param>
            <param name="info">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AssetStoreToolUtils.UpdatePreloadingInternal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.AvatarMask">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.AvatarMask">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.Copy(UnityEditorInternal.AvatarMask)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.GetHumanoidBodyPartActive(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.GetTransformActive(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.GetTransformPath(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AvatarMask.humanoidBodyPartCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.Reset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.SetHumanoidBodyPartActive(System.Int32,System.Boolean)">
            <param name="index">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.SetTransformActive(System.Int32,System.Boolean)">
            <param name="index">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.AvatarMask.SetTransformPath(System.Int32,System.String)">
            <param name="index">To be added.</param>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.AvatarMask.transformCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.BlendTree">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.AddAnimationClip(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.AddNewBlendTree">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.automaticThresholds">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.blendParameter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.blendParameterY">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.blendType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.childCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.GetChildPosition(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.GetChildThreshold(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.GetChildTimeScale(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.GetMotion(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.maxThreshold">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.BlendTree.minThreshold">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.RemoveChild(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.SetChildPosition(System.Int32,UnityEngine.Vector2)">
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.SetChildThreshold(System.Int32,System.Single)">
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.SetChildTimeScale(System.Int32,System.Single)">
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.BlendTree.SortChildren">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.BlendTreeType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.BlendTreeType.FreeformCartesian2D">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.BlendTreeType.FreeformDirectional2D">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.BlendTreeType.Simple">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.BlendTreeType.SimpleDirectional2D">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.CanAppendBuild">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.CanAppendBuild.No">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.CanAppendBuild.Unsupported">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.CanAppendBuild.Yes">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.ComponentUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.ComponentUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ComponentUtility.CopyComponent(UnityEngine.Component)">
            <param name="component">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ComponentUtility.MoveComponentDown(UnityEngine.Component)">
            <param name="component">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ComponentUtility.MoveComponentUp(UnityEngine.Component)">
            <param name="component">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ComponentUtility.PasteComponentAsNew(UnityEngine.GameObject)">
            <param name="go">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ComponentUtility.PasteComponentValues(UnityEngine.Component)">
            <param name="component">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.InternalEditorUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.InternalEditorUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.AddScriptComponentUnchecked(UnityEngine.GameObject,UnityEditor.MonoScript)">
            <param name="gameObject">To be added.</param>
            <param name="script">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.BuildCanBeAppended(UnityEditor.BuildTarget,System.String)">
            <param name="target">To be added.</param>
            <param name="location">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.BumpMapSettingsFixingWindowReportResult(System.Int32)">
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.BumpMapTextureNeedsFixing(UnityEngine.Material)">
            <param name="material">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.CalculateHashForObjectsAndDependencies(UnityEngine.Object[])">
            <param name="objects">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.CalculateSelectionBounds(System.Boolean)">
            <param name="usePivotOnlyForParticles">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.CalculateShouldEnableLights">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.CanConnectToCacheServer">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.defaultScreenHeight">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.defaultScreenWidth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.defaultWebScreenHeight">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.defaultWebScreenWidth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.DetectDotNetDll(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.ExecuteCommandOnKeyWindow(System.String)">
            <param name="commandName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.expandedProjectWindowItems">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.FixNormalmapTexture(UnityEngine.Material)">
            <param name="material">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetAuthToken">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetAvailableDiffTools">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetBoundsOfDesktopAtPoint(UnityEngine.Vector2)">
            <param name="pos">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetClassIDWithoutLoadingObject(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetCrashReportFolder">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetDesktopResolution">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetDisplayStringOfInvalidCharsOfFileName(System.String)">
            <param name="filename">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetEditorAssemblyPath">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetEditorSettingsList(System.String,System.Int32)">
            <param name="prefix">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetEngineAssemblyPath">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetExternalScriptEditor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetExternalScriptEditorArgs">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetFullUnityVersion">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetGameObjectInstanceIDFromComponent(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetIconForFile(System.String)">
            <param name="fileName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetIsInspectorExpanded(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetLayerName(System.Int32)">
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetLicenseFlags">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetLicenseInfo">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetLoadedObjectFromInstanceID(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetNewSelection(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <param name="clickedInstanceID">To be added.</param>
            <param name="allInstanceIDs">To be added.</param>
            <param name="selectedInstanceIDs">To be added.</param>
            <param name="lastClickedInstanceID">To be added.</param>
            <param name="keepMultiSelection">To be added.</param>
            <param name="useShiftAsActionKey">To be added.</param>
            <param name="allowMultiSelection">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetNoDiffToolsDetectedMessage">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetObjectFromInstanceID(System.Int32)">
            <param name="instanceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetSceneViewCameras">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetUnityBuildBranchUrl">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetUnityCopyright">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetUnityRevision">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.GetUnityVersionDate">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.HasAdvancedLicenseOnBuildTarget(UnityEditor.BuildTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.HasFullscreenCamera">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.HasMaint">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.HasPro">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.HierarchyWindowDrag(UnityEditor.HierarchyProperty,System.Boolean)">
            <param name="property">To be added.</param>
            <param name="perform">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.ignoreInspectorChanges">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.inBatchMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.InstantiateMaterialsInEditMode(UnityEngine.Renderer)">
            <param name="renderer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.isHumanControllingUs">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.IsUnityBeta">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.IsValidFileName(System.String)">
            <param name="filename">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.layers">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.LoadDefaultLayout">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.LoadSerializedFileAndForget(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.OnGameViewFocus(System.Boolean)">
            <param name="focus">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.OpenEditorConsole">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.OpenFileAtLineExternal(System.String,System.Int32)">
            <param name="filename">To be added.</param>
            <param name="line">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.OpenPlayerConsole">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.ProjectWindowDrag(UnityEditor.HierarchyProperty,System.Boolean)">
            <param name="property">To be added.</param>
            <param name="perform">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.ReadScreenPixel(UnityEngine.Vector2,System.Int32,System.Int32)">
            <param name="pixelPos">To be added.</param>
            <param name="sizex">To be added.</param>
            <param name="sizey">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.ReloadWindowLayoutMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.remoteScreenHeight">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.remoteScreenWidth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.RemoveCustomLighting">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.RemoveInvalidCharsFromFileName(System.String,System.Boolean)">
            <param name="filename">To be added.</param>
            <param name="logIfInvalidChars">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.RepaintAllViews">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.RequestScriptReload">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.ResetCursor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.RevertFactoryLayoutSettings(System.Boolean)">
            <param name="quitOnCancel">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SaveEditorSettingsList(System.String,System.String[],System.Int32)">
            <param name="prefix">To be added.</param>
            <param name="aList">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SaveToSerializedFileAndForget(UnityEngine.Object[],System.String,System.Boolean)">
            <param name="obj">To be added.</param>
            <param name="path">To be added.</param>
            <param name="allowTextSerialization">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SceneViewDrag(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Vector2,System.Boolean)">
            <param name="dropUpon">To be added.</param>
            <param name="worldPosition">To be added.</param>
            <param name="viewportPosition">To be added.</param>
            <param name="perform">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SetCustomLighting(UnityEngine.Light[],UnityEngine.Color)">
            <param name="lights">To be added.</param>
            <param name="ambient">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SetIsInspectorExpanded(UnityEngine.Object,System.Boolean)">
            <param name="obj">To be added.</param>
            <param name="isExpanded">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SetupCustomDll(System.String,System.String)">
            <param name="dllName">To be added.</param>
            <param name="dllLocation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SetupShaderMenu(UnityEngine.Material)">
            <param name="material">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.ShowGameView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.SwitchSkinAndRepaintAllViews">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.tags">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.TextifyEvent(UnityEngine.Event)">
            <param name="evt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.TransformBounds(UnityEngine.Bounds,UnityEngine.Transform)">
            <param name="b">To be added.</param>
            <param name="t">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.InternalEditorUtility.unityPreferencesFolder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.Xbox360GenerateSPAConfig(System.String)">
            <param name="spaPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalEditorUtility.Xbox360SaveSplashScreenToFile(UnityEngine.Texture2D,System.String)">
            <param name="image">To be added.</param>
            <param name="spaPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.InternalGraphUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.InternalGraphUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.InternalSpriteUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.InternalSpriteUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalSpriteUtility.GenerateAutomaticSpriteRectangles(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <param name="texture">To be added.</param>
            <param name="minRectSize">To be added.</param>
            <param name="extrudeSize">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.InternalSpriteUtility.GenerateGridSpriteRectangles(UnityEngine.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="texture">To be added.</param>
            <param name="offsetX">To be added.</param>
            <param name="offsetY">To be added.</param>
            <param name="sizeX">To be added.</param>
            <param name="sizeY">To be added.</param>
            <param name="padding">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.MemoryInfoGCReason">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.AssetMarkedDirtyInEditor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.AssetReferenced">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.AssetReferencedByNativeCodeOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.BuiltinResource">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.MarkedDontSave">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.NotApplicable">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.SceneAssetReferenced">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.SceneAssetReferencedByNativeCodeOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.MemoryInfoGCReason.SceneObject">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.MonoScripts">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.MonoScripts.CreateMonoScript(System.String,System.String,System.String,System.String,System.Boolean)">
            <param name="scriptContents">To be added.</param>
            <param name="className">To be added.</param>
            <param name="nameSpace">To be added.</param>
            <param name="assemblyName">To be added.</param>
            <param name="isEditorScript">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.ObjectMemoryInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.ObjectMemoryInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryInfo.className">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryInfo.count">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryInfo.instanceId">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryInfo.memorySize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryInfo.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryInfo.reason">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.ObjectMemoryStackInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.ObjectMemoryStackInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryStackInfo.allocated">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryStackInfo.callerSites">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryStackInfo.expanded">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryStackInfo.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryStackInfo.ownedAllocated">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ObjectMemoryStackInfo.sorted">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.ProfilerArea">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.AreaCount">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.Audio">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.CPU">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.GPU">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.Memory">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.Physics">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.Physics2D">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerArea.Rendering">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.ProfilerColumn">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.Calls">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.DrawCalls">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.FunctionName">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.GCMemory">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.ObjectName">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.SelfGPUPercent">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.SelfGPUTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.SelfPercent">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.SelfTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.TotalGPUPercent">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.TotalGPUTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.TotalPercent">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.TotalTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerColumn.WarningCount">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.ProfilerDriver">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.ProfilerDriver">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.BeginFrame">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.ClearAllFrames">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.connectedProfiler">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.deepProfiling">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.DirectIPConnect(System.String)">
            <param name="IP">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.EndFrame">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.firstFrameIndex">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetAllStatisticsProperties">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetAvailableProfilers">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetConnectionIdentifier(System.Int32)">
            <param name="guid">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetFormattedStatisticsValue(System.Int32,System.Int32)">
            <param name="frame">To be added.</param>
            <param name="identifier">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetGraphStatisticsPropertiesForArea(UnityEditorInternal.ProfilerArea)">
            <param name="area">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetNextFrameIndex(System.Int32)">
            <param name="frame">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetOverviewText(UnityEditorInternal.ProfilerArea,System.Int32)">
            <param name="profilerArea">To be added.</param>
            <param name="frame">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetPreviousFrameIndex(System.Int32)">
            <param name="frame">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetStatisticsIdentifier(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.GetStatisticsValues(System.Int32,System.Int32,System.Single,System.Single[],System.Single@)">
            <param name="identifier">To be added.</param>
            <param name="firstFrame">To be added.</param>
            <param name="scale">To be added.</param>
            <param name="buffer">To be added.</param>
            <param name="maxValue">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.isGPUProfilerBuggyOnDriver">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.isGPUProfilerSupported">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.isGPUProfilerSupportedByOS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.IsIdentifierConnectable(System.Int32)">
            <param name="guid">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.lastFrameIndex">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.maxHistoryLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.miniMemoryOverview">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.objectCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.profileEditor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerDriver.RequestObjectMemoryInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.selectedPropertyPath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerDriver.usedHeapSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.ProfilerFrameDataIterator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.ProfilerFrameDataIterator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.depth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.durationMS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.frameTimeMS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.GetFrameStartS(System.Int32)">
            <param name="frame">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.GetThreadCount(System.Int32)">
            <param name="frame">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.GetThreadName">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.group">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.Next(System.Boolean)">
            <param name="enterChildren">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.path">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerFrameDataIterator.SetRoot(System.Int32,System.Int32)">
            <param name="frame">To be added.</param>
            <param name="threadIdx">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerFrameDataIterator.startTimeMS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.ProfilerMemoryView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ProfilerMemoryView.Detailed">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerMemoryView.Simple">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.ProfilerProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.ProfilerProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.Cleanup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.depth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.frameDataReady">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.frameFPS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.frameGpuTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.frameTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.GetColumn(UnityEditorInternal.ProfilerColumn)">
            <param name="column">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.GetTooltip(UnityEditorInternal.ProfilerColumn)">
            <param name="column">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.HasChildren">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.InitializeDetailProperty(UnityEditorInternal.ProfilerProperty)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.instanceIDs">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.Next(System.Boolean)">
            <param name="enterChildren">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.onlyShowGPUSamples">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.ProfilerProperty.propertyPath">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.ProfilerProperty.SetRoot(System.Int32,UnityEditorInternal.ProfilerColumn,UnityEditorInternal.ProfilerViewType)">
            <param name="frame">To be added.</param>
            <param name="profilerSortColumn">To be added.</param>
            <param name="viewType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.ProfilerViewType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.ProfilerViewType.Hierarchy">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerViewType.RawHierarchy">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.ProfilerViewType.Timeline">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.SpriteEditorHandles">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.State">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.State">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.State.CreateBlendTree">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.State.CreateBlendTree(UnityEditorInternal.AnimatorControllerLayer)">
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.State.GetMotion">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.State.GetMotion(UnityEditorInternal.AnimatorControllerLayer)">
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.iKOnFeet">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.mirror">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.position">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.State.SetAnimationClip(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.State.SetAnimationClip(UnityEngine.AnimationClip,UnityEditorInternal.AnimatorControllerLayer)">
            <param name="clip">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.speed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.stateMachine">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.uniqueName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.State.uniqueNameHash">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.StateMachine">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.StateMachine">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.AddAnyStateTransition(UnityEditorInternal.State)">
            <param name="dst">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.AddState(System.String)">
            <param name="stateName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.AddStateMachine(System.String)">
            <param name="stateMachineName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.AddTransition(UnityEditorInternal.State,UnityEditorInternal.State)">
            <param name="src">To be added.</param>
            <param name="dst">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.StateMachine.anyStatePosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.StateMachine.defaultState">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.GetState(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.GetStateMachine(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.GetStateMachinePosition(System.Int32)">
            <param name="i">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.GetTransitionsFromState(UnityEditorInternal.State)">
            <param name="srcState">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.StateMachine.motionSetCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.StateMachine.parentStateMachinePosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.RemoveState(UnityEditorInternal.State)">
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.RemoveStateMachine(UnityEditorInternal.StateMachine)">
            <param name="stateMachine">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.RemoveTransition(UnityEditorInternal.Transition)">
            <param name="transition">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.SetStateMachinePosition(System.Int32,UnityEngine.Vector3)">
            <param name="i">To be added.</param>
            <param name="pos">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.StateMachine.SetTransitionsFromState(UnityEditorInternal.State,UnityEditorInternal.Transition[])">
            <param name="srcState">To be added.</param>
            <param name="transitions">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.StateMachine.stateCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.StateMachine.stateMachineCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.Transition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.Transition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.Transition.AddCondition">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.atomic">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.conditionCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.dstState">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.duration">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.Transition.GetCondition(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.Transition.GetTransitionContentForRect(UnityEngine.Rect)">
            <param name="rect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.mute">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.offset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.Transition.RemoveCondition(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.solo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.srcState">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.uniqueName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.Transition.uniqueNameHash">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.TransitionConditionMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.Equals">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.ExitTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.Greater">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.If">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.IfNot">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.Less">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.TransitionConditionMode.NotEqual">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.AssetModificationHook">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.AssetModificationHook">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.AssetModificationHook.IsOpenForEdit(System.String,System.String@)">
            <param name="assetPath">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.AssetModificationHook.OnWillDeleteAsset(System.String,UnityEditor.RemoveAssetOptions)">
            <param name="assetPath">To be added.</param>
            <param name="option">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.AssetModificationHook.OnWillMoveAsset(System.String,System.String)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ChangeSetContextMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.ChangeSetContextMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListControl">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.ListControl">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.ActionEvent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Add(UnityEditorInternal.VersionControl.ListItem,System.String,UnityEditor.VersionControl.Asset)">
            <param name="parent">To be added.</param>
            <param name="name">To be added.</param>
            <param name="asset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Add(UnityEditorInternal.VersionControl.ListItem,System.String,UnityEditor.VersionControl.ChangeSet)">
            <param name="parent">To be added.</param>
            <param name="name">To be added.</param>
            <param name="change">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.DragAcceptOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.DragEvent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.ExpandEvent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.FindItemWithIdentifier(System.Int32)">
            <param name="identifier">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.FromID(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.listState">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.MenuDefault">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.MenuFolder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.OnGUI(UnityEngine.Rect,System.Boolean)">
            <param name="area">To be added.</param>
            <param name="focus">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.ReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Refresh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Refresh(System.Boolean)">
            <param name="updateExpanded">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.Root">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.SelectedAdd(UnityEditorInternal.VersionControl.ListItem)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.SelectedAll">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.SelectedAssets">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.SelectedChangeSets">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.SelectedSet(UnityEditorInternal.VersionControl.ListItem)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListControl.Size">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListControl.Sync">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListControl+ActionDelegate">
            <param name="item">To be added.</param>
            <param name="actionIdx">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListControl+DragDelegate">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListControl+ExpandDelegate">
            <param name="expand">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListControl+ListState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.ListControl+ListState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.VersionControl.ListControl+ListState.Expanded">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.VersionControl.ListControl+ListState.Scroll">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListControl+SelectDirection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEditorInternal.VersionControl.ListControl+SelectDirection.Current">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.VersionControl.ListControl+SelectDirection.Down">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEditorInternal.VersionControl.ListControl+SelectDirection.Up">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ListItem">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.ListItem">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Actions">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.Add(UnityEditorInternal.VersionControl.ListItem)">
            <param name="listItem">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Asset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.CanAccept">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.CanExpand">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Change">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.ChildCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Dummy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Exclusive">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Expanded">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.FindWithIdentifierRecurse(System.Int32)">
            <param name="inIdentifier">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.FirstChild">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.HasActions">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.HasChildren">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.HasPath">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Hidden">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Icon">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Identifier">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Indent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.IsChildOf(UnityEditorInternal.VersionControl.ListItem)">
            <param name="listItem">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Item">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.LastChild">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Next">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.NextOpen">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.NextOpenSkip">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.NextOpenVisible">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.OpenCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Parent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.Prev">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.PrevOpen">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.PrevOpenSkip">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEditorInternal.VersionControl.ListItem.PrevOpenVisible">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.Remove(UnityEditorInternal.VersionControl.ListItem)">
            <param name="listItem">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.ListItem.RemoveAll">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.Overlay">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.Overlay">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.Overlay.DrawOverlay(UnityEditor.VersionControl.Asset,UnityEngine.Rect)">
            <param name="asset">To be added.</param>
            <param name="itemRect">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEditorInternal.VersionControl.Overlay.GetOverlayRect(UnityEngine.Rect)">
            <param name="itemRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.PendingWindowContextMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.PendingWindowContextMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEditorInternal.VersionControl.ProjectContextMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEditorInternal.VersionControl.ProjectContextMenu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:AOT.MonoPInvokeCallbackAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:AOT.MonoPInvokeCallbackAttribute(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AccelerationEvent">
            <summary>Structure describing acceleration status of the device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AccelerationEvent.acceleration">
            <summary>Value of acceleration.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AccelerationEvent.deltaTime">
            <summary>Amount of time passed since last accelerometer measurement.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ADBannerView">
            <summary>ADBannerView is a wrapper around the ADBannerView class found in the Apple iAd framework and is only available on iOS.</summary>
            <remarks>It provides a view that displays banner advertisements to the user.</remarks>
        </member>
        <member name="C:UnityEngine.ADBannerView(UnityEngine.ADBannerView+Type,UnityEngine.ADBannerView+Layout)">
            <param name="type">To be added.</param>
            <param name="layout">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ADBannerView.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ADBannerView.IsAvailable(UnityEngine.ADBannerView+Type)">
            <param name="type">To be added.</param>
            <summary>Checks if the banner type is available (e.g. MediumRect is available only starting with ios6).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ADBannerView.layout">
            <summary>Specifies how banner should be layed out on screen.</summary>
            <value>To be added.</value>
            <remarks>Please note that Traditional Banner and Rect Banner (introduced in ios6) use different enum values. If you use "wrong" enum value for current ad type: for Traditional Banner Top* and Center* will be considered Top, and Bottom* will be considered Bottom* for Rect Banner Top will be considered TopLeft and Bottom - BottomLeft.</remarks>
        </member>
        <member name="P:UnityEngine.ADBannerView.loaded">
            <summary>Checks if banner contents are loaded.</summary>
            <value>To be added.</value>
            <remarks>You should hide banner if it is not loaded to avoid showing blank view.</remarks>
        </member>
        <member name="E:UnityEngine.ADBannerView.onBannerWasClicked">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:UnityEngine.ADBannerView.onBannerWasLoaded">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ADBannerView.position">
            <summary>The position of the banner view.</summary>
            <value>To be added.</value>
            <remarks>It uses unity GUI coords and convention, so it is top-left corner coords. If you change it, banner will become manually layed-out automatically. Please note that for Traditional Banner x component is ignored.</remarks>
        </member>
        <member name="P:UnityEngine.ADBannerView.size">
            <summary>The size of the banner view.</summary>
            <value>To be added.</value>
            <remarks>It uses unity GUI coords.</remarks>
        </member>
        <member name="P:UnityEngine.ADBannerView.visible">
            <summary>Banner visibility. Initially banner is not visible.</summary>
            <value>To be added.</value>
            <remarks>Please note that if you hide banner, ads might not be reloaded with time, so if you no longer need banner it is better to delete it completely.</remarks>
        </member>
        <member name="T:UnityEngine.ADBannerView+BannerWasClickedDelegate">
            <summary>Will be fired when banner was clicked.</summary>
            <remarks>Please note, that app will loose focus on banner click, so the delegate will be called on first frame after ad was shown.</remarks>
        </member>
        <member name="T:UnityEngine.ADBannerView+BannerWasLoadedDelegate">
            <summary>Will be fired when banner loaded new ad.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ADBannerView+Layout">
            <summary>Banner layout.</summary>
            <remarks>You can set manual layout to move banner around yourself.</remarks>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.Bottom">
            <summary>Traditional Banner: align to screen bottom.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.BottomCenter">
            <summary>Rect Banner: align to screen bottom, placing at the center.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.BottomLeft">
            <summary>Rect Banner: place in bottom-left corner.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.BottomRight">
            <summary>Rect Banner: place in bottom-right corner.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.Center">
            <summary>Rect Banner: place exactly at screen center.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.CenterLeft">
            <summary>Rect Banner: align to screen left, placing at the center.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.CenterRight">
            <summary>Rect Banner: align to screen right, placing at the center.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.Manual">
            <summary>Completely manual positioning.</summary>
            <remarks>Please use ADBannerView.position.</remarks>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.Top">
            <summary>Traditional Banner: align to screen top.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.TopCenter">
            <summary>Rect Banner: align to screen top, placing at the center.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.TopLeft">
            <summary>Rect Banner: place in top-left corner.</summary>
        </member>
        <member name="F:UnityEngine.ADBannerView+Layout.TopRight">
            <summary>Rect Banner: place in top-right corner.</summary>
        </member>
        <member name="T:UnityEngine.ADBannerView+Type">
            <summary>The type of the banner view.</summary>
            <remarks>Please check availability of banner type with ADBannerView.IsAvailable. Traditional banner is always available, though.</remarks>
        </member>
        <member name="F:UnityEngine.ADBannerView+Type.Banner">
            <summary>Traditional Banner (it takes full screen width).</summary>
            <remarks>iOS type: ADAdTypeBanner.</remarks>
        </member>
        <member name="F:UnityEngine.ADBannerView+Type.MediumRect">
            <summary>Rect Banner (300x250).</summary>
            <remarks>iOS type: ADAdTypeMediumRectangle.</remarks>
        </member>
        <member name="T:UnityEngine.AddComponentMenu">
            <summary>The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component-&amp;gt;Scripts" menu.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.AddComponentMenu(System.String)">
            <param name="menuName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AddComponentMenu.componentMenu">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ADInterstitialAd">
            <summary>ADInterstitialAd is a wrapper around the ADInterstitialAd class found in the Apple iAd framework and is only available on iPad.</summary>
            <remarks>It provides full-screen advertisements that your iPad application can display to the user.</remarks>
        </member>
        <member name="C:UnityEngine.ADInterstitialAd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ADInterstitialAd(System.Boolean)">
            <param name="autoReload">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ADInterstitialAd.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ADInterstitialAd.isAvailable">
            <summary>Checks if InterstitialAd is available (it is iPad-only and was added in iOS 4.3).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ADInterstitialAd.loaded">
            <summary>Has the interstitial ad object downloaded an advertisement? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:UnityEngine.ADInterstitialAd.onInterstitialWasLoaded">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ADInterstitialAd.ReloadAd">
            <summary>Reload advertisement.</summary>
            <remarks>Call it when you are done with current one (if you want more ads downloaded).</remarks>
        </member>
        <member name="M:UnityEngine.ADInterstitialAd.Show">
            <summary>Shows full-screen advertisement to user.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ADInterstitialAd+InterstitialWasLoadedDelegate">
            <summary>Will be called when ad is ready to be shown.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidActivityIndicatorStyle">
            <summary>ActivityIndicator Style (Android Specific).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AndroidActivityIndicatorStyle.DontShow">
            <summary>Do not show ActivityIndicator.</summary>
        </member>
        <member name="F:UnityEngine.AndroidActivityIndicatorStyle.InversedLarge">
            <summary>Large Inversed (android.R.attr.progressBarStyleLargeInverse).</summary>
        </member>
        <member name="F:UnityEngine.AndroidActivityIndicatorStyle.InversedSmall">
            <summary>Small Inversed (android.R.attr.progressBarStyleSmallInverse).</summary>
        </member>
        <member name="F:UnityEngine.AndroidActivityIndicatorStyle.Large">
            <summary>Large (android.R.attr.progressBarStyleLarge).</summary>
        </member>
        <member name="F:UnityEngine.AndroidActivityIndicatorStyle.Small">
            <summary>Small (android.R.attr.progressBarStyleSmall).</summary>
        </member>
        <member name="T:UnityEngine.AndroidInput">
            <summary>AndroidInput provides support for off-screen touch input, such as a touchpad.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidInput.GetSecondaryTouch(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns object representing status of a specific touch on a secondary touchpad (Does not allocate temporary variables).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AndroidInput.secondaryTouchEnabled">
            <summary>Property indicating whether the system provides secondary touch input.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AndroidInput.secondaryTouchHeight">
            <summary>Property indicating the height of the secondary touchpad.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AndroidInput.secondaryTouchWidth">
            <summary>Property indicating the width of the secondary touchpad.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AndroidInput.touchCountSecondary">
            <summary>Number of secondary touches. Guaranteed not to change throughout the frame. (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJavaClass">
            <summary>AndroidJavaClass is the Unity representation of a generic instance of java.lang.Class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.AndroidJavaClass(System.String)">
            <param name="className">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJavaException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJavaObject">
            <summary>AndroidJavaObject is the Unity representation of a generic instance of java.lang.Object.</summary>
            <remarks>It can be used as type-less interface to an instance of any Java class.</remarks>
        </member>
        <member name="C:UnityEngine.AndroidJavaObject(System.String,System.Object[])">
            <param name="className">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._Call(System.String,System.Object[])">
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._Call``1(System.String,System.Object[])">
            <typeparam name="ReturnType">To be added.</typeparam>
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._CallStatic(System.String,System.Object[])">
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._CallStatic``1(System.String,System.Object[])">
            <typeparam name="ReturnType">To be added.</typeparam>
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._Get``1(System.String)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._GetRawClass">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._GetRawObject">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._GetStatic``1(System.String)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._Set``1(System.String,``0)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject._SetStatic``1(System.String,``0)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Call(System.String,System.Object[])">
            <summary>Calls a Java method on an object (non-static).Call a Java method on an object.</summary>
            <remarks>To be added.</remarks>
            <param name="methodName">Specifies which method to call.</param>
            <param name="args">An array of parameters passed to the method.</param>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Call``1(System.String,System.Object[])">
            <typeparam name="ReturnType">To be added.</typeparam>
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.CallStatic(System.String,System.Object[])">
            <summary>Call a static Java method on a class.Call a static Java method on a class.</summary>
            <remarks>To be added.</remarks>
            <param name="methodName">Specifies which method to call.</param>
            <param name="args">An array of parameters passed to the method.</param>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.CallStatic``1(System.String,System.Object[])">
            <typeparam name="ReturnType">To be added.</typeparam>
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.DebugPrint(System.String)">
            <param name="msg">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.DebugPrint(System.String,System.String,System.String,System.Object[])">
            <param name="call">To be added.</param>
            <param name="methodName">To be added.</param>
            <param name="signature">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Dispose">
            <summary>IDisposable callback.</summary>
            <remarks>Used in conjunction with using() { } See Also: IDisposable Interface (MSDN)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>IDisposable callback.</summary>
            <remarks>Used in conjunction with using() { } See Also: IDisposable Interface (MSDN)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.FindClass(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Get``1(System.String)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.GetRawClass">
            <summary>Retrieve the raw jclass pointer to the Java class.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.GetRawObject">
            <summary>Retrieve the raw jobject pointer to the Java object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.GetStatic``1(System.String)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AndroidJavaObject.JavaLangClass">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AndroidJavaObject.m_jclass">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AndroidJavaObject.m_jobject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.Set``1(System.String,``0)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaObject.SetStatic``1(System.String,``0)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="fieldName">To be added.</param>
            <param name="val">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJavaProxy">
            <summary>This class can be used to implement any java interface. Any java vm method invocation matching the interface on the proxy object will automatically be passed to the c# implementation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.AndroidJavaProxy(System.String)">
            <param name="javaInterface">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.AndroidJavaProxy(UnityEngine.AndroidJavaClass)">
            <param name="javaInterface">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJavaProxy.Invoke(System.String,System.Object[])">
            <summary>Called by the java vm whenever a method is invoked on the java proxy interface. You can override this to run special code on method invokation, or you can leave the implementation as is, and leave the default behavior which is to look for c# methods matching the signature of the java method.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="methodName">Name of the invoked java method.</param>
            <param name="args">Arguments passed from the java vm - converted into AndroidJavaObject, AndroidJavaClass or a primitive.</param>
        </member>
        <member name="M:UnityEngine.AndroidJavaProxy.Invoke(System.String,UnityEngine.AndroidJavaObject[])">
            <summary>Called by the java vm whenever a method is invoked on the java proxy interface. You can override this to run special code on method invokation, or you can leave the implementation as is, and leave the default behavior which is to look for c# methods matching the signature of the java method.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="methodName">Name of the invoked java method.</param>
            <param name="javaArgs">Arguments passed from the java vm - all objects are represented by AndroidJavaObject, int for instance is represented by a java.lang.Integer object.</param>
        </member>
        <member name="F:UnityEngine.AndroidJavaProxy.javaInterface">
            <summary>Java interface implemented by the proxy.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJavaRunnable">
            <summary>AndroidJavaRunnable is the Unity representation of a java.lang.Runnable object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJNI">
            <summary>'Raw' JNI interface to Android Dalvik (Java) VM from Mono (CS/JS).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.AllocObject(System.IntPtr)">
            <param name="clazz">To be added.</param>
            <summary>Allocates a new Java object without invoking any of the constructors for the object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.AttachCurrentThread">
            <summary>Attaches the current thread to a Java (Dalvik) VM.</summary>
            <returns>To be added.</returns>
            <remarks>A thread must be attached to the VM before any other JNI calls can be made. Returns 0 on success; returns a negative number on failure. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallBooleanMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallByteMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallCharMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallDoubleMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallFloatMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallIntMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallLongMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallObjectMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>This method returns a reference to a java.lang.Object, or a subclass thereof. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallShortMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticBooleanMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticByteMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticCharMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticDoubleMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticFloatMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticIntMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticLongMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticObjectMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>This method returns a reference to a java.lang.Object, or a subclass thereof. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticShortMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticStringMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>This is a convenience function that calls CallStaticObjectMethod() with the same parameters, but creates a managed string from the result. See Also: AndroidJNI.CallStaticObjectMethod.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStaticVoidMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Invokes a static method on a Java object, according to the specified methodID, optionally passing an array of arguments (args) to the method.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallStringMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <returns>To be added.</returns>
            <remarks>This is a convenience function that calls CallObjectMethod() with the same parameters, but creates a managed string from the result. See Also: AndroidJNI.CallObjectMethod.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.CallVoidMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="obj">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls an instance (nonstatic) Java method defined by methodID, optionally passing an array of arguments (args) to the method.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.DeleteGlobalRef(System.IntPtr)">
            <param name="obj">To be added.</param>
            <summary>Deletes the global reference pointed to by obj.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.DeleteLocalRef(System.IntPtr)">
            <param name="obj">To be added.</param>
            <summary>Deletes the local reference pointed to by obj.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.DetachCurrentThread">
            <summary>Detaches the current thread from a Java (Dalvik) VM.</summary>
            <returns>To be added.</returns>
            <remarks>A thread must be detached from the VM before exiting. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.EnsureLocalCapacity(System.Int32)">
            <param name="capacity">To be added.</param>
            <summary>Ensures that at least a given number of local references can be created in the current thread.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ExceptionClear">
            <summary>Clears any exception that is currently being thrown.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ExceptionDescribe">
            <summary>Prints an exception and a backtrace of the stack to the logcat</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ExceptionOccurred">
            <summary>Determines if an exception is being thrown.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FatalError(System.String)">
            <param name="message">To be added.</param>
            <summary>Raises a fatal error and does not expect the VM to recover. This function does not return.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FindClass(System.String)">
            <param name="name">To be added.</param>
            <summary>This function loads a locally-defined class.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromBooleanArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of boolean to a managed array of System.Boolean.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetBooleanArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromByteArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of byte to a managed array of System.Byte.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetByteArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromCharArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of char to a managed array of System.Char.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetCharArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromDoubleArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of double to a managed array of System.Double.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetDoubleArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromFloatArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of float to a managed array of System.Single.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetFloatArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromIntArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of int to a managed array of System.Int32.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetIntArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromLongArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of long to a managed array of System.Int64.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetFloatArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromObjectArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of java.lang.Object to a managed array of System.IntPtr, representing Java objects.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetFloatArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromReflectedField(System.IntPtr)">
            <param name="refField">To be added.</param>
            <summary>Converts a java.lang.reflect.Field to a field ID.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromReflectedMethod(System.IntPtr)">
            <param name="refMethod">To be added.</param>
            <summary>Converts a java.lang.reflect.Method or java.lang.reflect.Constructor object to a method ID.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.FromShortArray(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Convert a Java array of short to a managed array of System.Int16.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.GetShortArrayElement, AndroidJNI.GetArrayLength.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetArrayLength(System.IntPtr)">
            <param name="array">To be added.</param>
            <summary>Returns the number of elements in the array.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetBooleanArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetBooleanArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetBooleanField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetByteArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetByteArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetByteField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetCharArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetCharArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetCharField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetDoubleArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetDoubleArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetDoubleField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetFieldID(System.IntPtr,System.String,System.String)">
            <param name="clazz">To be added.</param>
            <param name="name">To be added.</param>
            <param name="sig">To be added.</param>
            <summary>Returns the field ID for an instance (nonstatic) field of a class.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetFloatArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetFloatArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetFloatField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetIntArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetIntArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetIntField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetLongArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetLongArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetLongField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetMethodID(System.IntPtr,System.String,System.String)">
            <param name="clazz">To be added.</param>
            <param name="name">To be added.</param>
            <param name="sig">To be added.</param>
            <summary>Returns the method ID for an instance (nonstatic) method of a class or interface.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetObjectArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns an element of an Object array.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetObjectClass(System.IntPtr)">
            <param name="obj">To be added.</param>
            <summary>Returns the class of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetObjectField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>The result is a reference to a java.lang.Object, or a subclass thereof. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetShortArrayElement(System.IntPtr,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Returns the value of one element of a primitive array.</summary>
            <returns>To be added.</returns>
            <remarks>This function is a special case of GetShortArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetShortField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticBooleanField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticByteField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticCharField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticDoubleField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticFieldID(System.IntPtr,System.String,System.String)">
            <param name="clazz">To be added.</param>
            <param name="name">To be added.</param>
            <param name="sig">To be added.</param>
            <summary>Returns the field ID for a static field of a class.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticFloatField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticIntField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticLongField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticMethodID(System.IntPtr,System.String,System.String)">
            <param name="clazz">To be added.</param>
            <param name="name">To be added.</param>
            <param name="sig">To be added.</param>
            <summary>Returns the method ID for a static method of a class.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticObjectField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>The result is a reference to a java.lang.Object, or a subclass thereof. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticShortField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStaticStringField(System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of a static field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>This is a convenience function that calls GetStaticObjectField() with the same parameters, but creates a managed string from the result. See Also: AndroidJNI.GetStaticObjectField See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStringField(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <summary>This function returns the value of an instance (nonstatic) field of an object.</summary>
            <returns>To be added.</returns>
            <remarks>This is a convenience function that calls GetObjectField() with the same parameters, but creates a managed string from the result. See Also: AndroidJNI.GetObjectField.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStringUTFChars(System.IntPtr)">
            <param name="str">To be added.</param>
            <summary>Returns a managed string object representing the string in modified UTF-8 encoding.</summary>
            <returns>To be added.</returns>
            <remarks>This method is a modification of the original GetStringUTFChars, which returns a pointer to an array of bytes. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetStringUTFLength(System.IntPtr)">
            <param name="str">To be added.</param>
            <summary>Returns the length in bytes of the modified UTF-8 representation of a string.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetSuperclass(System.IntPtr)">
            <param name="clazz">To be added.</param>
            <summary>If clazz represents any class other than the class Object, then this function returns the object that represents the superclass of the class specified by clazz.</summary>
            <returns>To be added.</returns>
            <remarks>If clazz specifies the class Object, or clazz represents an interface, this function returns NULL. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.GetVersion">
            <summary>Returns the version of the native method interface.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.IsAssignableFrom(System.IntPtr,System.IntPtr)">
            <param name="clazz1">To be added.</param>
            <param name="clazz2">To be added.</param>
            <summary>Determines whether an object of clazz1 can be safely cast to clazz2.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.IsInstanceOf(System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="clazz">To be added.</param>
            <summary>Tests whether an object is an instance of a class.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.IsSameObject(System.IntPtr,System.IntPtr)">
            <param name="obj1">To be added.</param>
            <param name="obj2">To be added.</param>
            <summary>Tests whether two references refer to the same Java object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewBooleanArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewByteArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewCharArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewDoubleArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewFloatArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewGlobalRef(System.IntPtr)">
            <param name="obj">To be added.</param>
            <summary>Creates a new global reference to the object referred to by the obj argument.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewIntArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewLocalRef(System.IntPtr)">
            <param name="obj">To be added.</param>
            <summary>Creates a new local reference that refers to the same object as obj.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewLongArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewObject(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Constructs a new Java object. The method ID indicates which constructor method to invoke. This ID must be obtained by calling GetMethodID() with &amp;lt;init&amp;gt; as the method name and void (V) as the return type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewObjectArray(System.Int32,System.IntPtr,System.IntPtr)">
            <param name="size">To be added.</param>
            <param name="clazz">To be added.</param>
            <param name="obj">To be added.</param>
            <summary>Constructs a new array holding objects in class clazz. All elements are initially set to obj.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewShortArray(System.Int32)">
            <param name="size">To be added.</param>
            <summary>Construct a new primitive array object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.NewStringUTF(System.String)">
            <param name="bytes">To be added.</param>
            <summary>Constructs a new java.lang.String object from an array of characters in modified UTF-8 encoding.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.PopLocalFrame(System.IntPtr)">
            <param name="result">To be added.</param>
            <summary>Pops off the current local reference frame, frees all the local references, and returns a local reference in the previous local reference frame for the given result object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.PushLocalFrame(System.Int32)">
            <param name="capacity">To be added.</param>
            <summary>Creates a new local reference frame, in which at least a given number of local references can be created.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetBooleanArrayElement(System.IntPtr,System.Int32,System.Byte)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetBooleanArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetBooleanField(System.IntPtr,System.IntPtr,System.Boolean)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetByteArrayElement(System.IntPtr,System.Int32,System.SByte)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetByteArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetByteField(System.IntPtr,System.IntPtr,System.Byte)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetCharArrayElement(System.IntPtr,System.Int32,System.Char)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetCharArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetCharField(System.IntPtr,System.IntPtr,System.Char)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetDoubleArrayElement(System.IntPtr,System.Int32,System.Double)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetDoubleArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetDoubleField(System.IntPtr,System.IntPtr,System.Double)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetFloatArrayElement(System.IntPtr,System.Int32,System.Single)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetFloatArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetFloatField(System.IntPtr,System.IntPtr,System.Single)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetIntArrayElement(System.IntPtr,System.Int32,System.Int32)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetIntArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetIntField(System.IntPtr,System.IntPtr,System.Int32)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetLongArrayElement(System.IntPtr,System.Int32,System.Int64)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetLongArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetLongField(System.IntPtr,System.IntPtr,System.Int64)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetObjectArrayElement(System.IntPtr,System.Int32,System.IntPtr)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="obj">To be added.</param>
            <summary>Sets an element of an Object array.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetObjectField(System.IntPtr,System.IntPtr,System.IntPtr)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>The value to set is a reference to either a java.lang.Object, or a subclass thereof. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetShortArrayElement(System.IntPtr,System.Int32,System.Int16)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Sets the value of one element in a primitive array.</summary>
            <remarks>This function is a special case of SetShortArrayRegion(), called with region size set to 1. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetShortField(System.IntPtr,System.IntPtr,System.Int16)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticBooleanField(System.IntPtr,System.IntPtr,System.Boolean)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticByteField(System.IntPtr,System.IntPtr,System.Byte)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticCharField(System.IntPtr,System.IntPtr,System.Char)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticDoubleField(System.IntPtr,System.IntPtr,System.Double)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticFloatField(System.IntPtr,System.IntPtr,System.Single)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticIntField(System.IntPtr,System.IntPtr,System.Int32)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticLongField(System.IntPtr,System.IntPtr,System.Int64)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticObjectField(System.IntPtr,System.IntPtr,System.IntPtr)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>The value to set is a reference to either a java.lang.Object, or a subclass thereof. See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticShortField(System.IntPtr,System.IntPtr,System.Int16)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStaticStringField(System.IntPtr,System.IntPtr,System.String)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function ets the value of a static field of an object.</summary>
            <remarks>This is a convenience function that calls SetStaticObjectField() with the same parameters, but performs the necessary marshalling of the string value. See Also: AndroidJNI.SetStaticObjectField.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.SetStringField(System.IntPtr,System.IntPtr,System.String)">
            <param name="obj">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="val">To be added.</param>
            <summary>This function sets the value of an instance (nonstatic) field of an object.</summary>
            <remarks>This is a convenience function that calls SetObjectField() with the same parameters, but performs the necessary marshalling of the string value. See Also: AndroidJNI.SetObjectField.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.Throw(System.IntPtr)">
            <param name="obj">To be added.</param>
            <summary>Causes a java.lang.Throwable object to be thrown.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ThrowNew(System.IntPtr,System.String)">
            <param name="clazz">To be added.</param>
            <param name="message">To be added.</param>
            <summary>Constructs an exception object from the specified class with the message specified by message and causes that exception to be thrown.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToBooleanArray(System.Boolean[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Boolean to a Java array of boolean.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewBooleanArray, AndroidJNI.SetBooleanArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToByteArray(System.Byte[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Byte to a Java array of byte.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewByteArray, AndroidJNI.SetByteArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToCharArray(System.Char[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Char to a Java array of char.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewCharArray, AndroidJNI.SetCharArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToDoubleArray(System.Double[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Double to a Java array of double.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewDoubleArray, AndroidJNI.SetDoubleArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToFloatArray(System.Single[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Single to a Java array of float.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewFloatArray, AndroidJNI.SetFloatArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToIntArray(System.Int32[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Int32 to a Java array of int.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewIntArray, AndroidJNI.SetIntArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToLongArray(System.Int64[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Int64 to a Java array of long.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewLongArray, AndroidJNI.SetLongArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToObjectArray(System.IntPtr[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.IntPtr, representing Java objects, to a Java array of java.lang.Object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewObjectArray, AndroidJNI.SetObjectArrayElement.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToReflectedField(System.IntPtr,System.IntPtr,System.Boolean)">
            <param name="clazz">To be added.</param>
            <param name="fieldID">To be added.</param>
            <param name="isStatic">To be added.</param>
            <summary>Converts a field ID derived from cls to a java.lang.reflect.Field object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToReflectedMethod(System.IntPtr,System.IntPtr,System.Boolean)">
            <param name="clazz">To be added.</param>
            <param name="methodID">To be added.</param>
            <param name="isStatic">To be added.</param>
            <summary>Converts a method ID derived from clazz to a java.lang.reflect.Method or java.lang.reflect.Constructor object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Java Native Interface Specification (Oracle)</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNI.ToShortArray(System.Int16[])">
            <param name="array">To be added.</param>
            <summary>Convert a managed array of System.Int16 to a Java array of short.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNI.NewShortArray, AndroidJNI.SetShortArrayElement.</remarks>
        </member>
        <member name="T:UnityEngine.AndroidJNIHelper">
            <summary>Helper interface for JNI interaction; signature creation and method lookups.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.ConvertFromJNIArray``1(System.IntPtr)">
            <typeparam name="ArrayType">To be added.</typeparam>
            <param name="array">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.ConvertToJNIArray(System.Array)">
            <summary>Creates a Java array from a managed array.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJNIHelper.ConvertFromJNIArray.</remarks>
            <param name="array">Managed array to be converted into a Java array object.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.CreateJavaProxy(UnityEngine.AndroidJavaProxy)">
            <summary>Creates a java proxy object which connects to the supplied proxy implementation.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJavaProxy.</remarks>
            <param name="proxy">An implementatinon of a java interface in c#.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.CreateJavaRunnable(UnityEngine.AndroidJavaRunnable)">
            <param name="jrunnable">To be added.</param>
            <summary>Creates a UnityJavaRunnable object (implements java.lang.Runnable).</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AndroidJavaRunnable.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.CreateJNIArgArray(System.Object[])">
            <summary>Creates the parameter array to be used as argument list when invoking Java code through CallMethod() in AndroidJNI.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="args">An array of objects that should be converted to Call parameters.</param>
        </member>
        <member name="P:UnityEngine.AndroidJNIHelper.debug">
            <summary>Set debug to true to log calls through the AndroidJNIHelper.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.DeleteJNIArgArray(System.Object[],UnityEngine.jvalue[])">
            <summary>Deletes any local jni references previously allocated by CreateJNIArgArray().</summary>
            <remarks>To be added.</remarks>
            <param name="args">The array of arguments used as a parameter to CreateJNIArgArray().</param>
            <param name="jniArgs">The array returned by CreateJNIArgArray().</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetConstructorID(System.IntPtr)">
            <summary>Scans a particular Java class for a constructor method matching a signature.Get a JNI method ID for a constructor based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetConstructorID(System.IntPtr,System.Object[])">
            <param name="jclass">To be added.</param>
            <summary>Scans a particular Java class for a constructor method matching a signature.Get a JNI method ID for a constructor based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="args">Array with parameters to be passed to the constructor when invoked.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetConstructorID(System.IntPtr,System.String)">
            <summary>Scans a particular Java class for a constructor method matching a signature.Get a JNI method ID for a constructor based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="signature">Constructor method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID(System.IntPtr,System.String)">
            <summary>Scans a particular Java class for a field matching a name and a signature.Get a JNI field ID based on type detection. Generic parameter represents the field type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="fieldName">Name of the field as declared in Java.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID(System.IntPtr,System.String,System.String)">
            <summary>Scans a particular Java class for a field matching a name and a signature.Get a JNI field ID based on type detection. Generic parameter represents the field type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="fieldName">Name of the field as declared in Java.</param>
            <param name="signature">Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID(System.IntPtr,System.String,System.String,System.Boolean)">
            <summary>Scans a particular Java class for a field matching a name and a signature.Get a JNI field ID based on type detection. Generic parameter represents the field type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="fieldName">Name of the field as declared in Java.</param>
            <param name="signature">Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
            <param name="isStatic">Set to true for static fields; false for instance (nonstatic) fields.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID``1(System.IntPtr,System.String,System.Boolean)">
            <typeparam name="FieldType">To be added.</typeparam>
            <param name="jclass">To be added.</param>
            <param name="fieldName">To be added.</param>
            <param name="isStatic">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String)">
            <summary>Scans a particular Java class for a method matching a name and a signature.Get a JNI method ID based on calling arguments.Get a JNI method ID based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="methodName">Name of the method as declared in Java.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String,System.String)">
            <summary>Scans a particular Java class for a method matching a name and a signature.Get a JNI method ID based on calling arguments.Get a JNI method ID based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="methodName">Name of the method as declared in Java.</param>
            <param name="signature">Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String,System.Object[],System.Boolean)">
            <param name="jclass">To be added.</param>
            <summary>Scans a particular Java class for a method matching a name and a signature.Get a JNI method ID based on calling arguments.Get a JNI method ID based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="methodName">Name of the method as declared in Java.</param>
            <param name="args">Array with parameters to be passed to the method when invoked.</param>
            <param name="isStatic">Set to true for static methods; false for instance (nonstatic) methods.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String,System.String,System.Boolean)">
            <summary>Scans a particular Java class for a method matching a name and a signature.Get a JNI method ID based on calling arguments.Get a JNI method ID based on calling arguments.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
            <param name="methodName">Name of the method as declared in Java.</param>
            <param name="signature">Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
            <param name="isStatic">Set to true for static methods; false for instance (nonstatic) methods.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID``1(System.IntPtr,System.String,System.Object[],System.Boolean)">
            <typeparam name="ReturnType">To be added.</typeparam>
            <param name="jclass">To be added.</param>
            <param name="methodName">To be added.</param>
            <param name="args">To be added.</param>
            <param name="isStatic">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetSignature(System.Object)">
            <summary>Creates the JNI signature string for particular object type.Creates the JNI signature string for an object parameter list.Creates the JNI signature string for an object parameter list.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="obj">Object for which a signature is to be produced.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetSignature(System.Object[])">
            <summary>Creates the JNI signature string for particular object type.Creates the JNI signature string for an object parameter list.Creates the JNI signature string for an object parameter list.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="args">Array of object for which a signature is to be produced.</param>
        </member>
        <member name="M:UnityEngine.AndroidJNIHelper.GetSignature``1(System.Object[])">
            <typeparam name="ReturnType">To be added.</typeparam>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Animation">
            <summary>The animation component is used to play back animations.</summary>
            <remarks>You can assign animation clips to the animation component and control playback from your script. The animation system in Unity is weight based and supports: Animation Blending, Additive animations, Animation Mixing, Layers and full control over all aspects of animation playback. For an overview of animation scripting in Unity please read this introduction. To play a simple animation use Animation.Play To cross-fade between animations use Animation.CrossFade To change how animations wrap (Loop, Once, PingPong) change the WrapMode of the respective AnimationClips in their import settings, or use AnimationState.wrapMode to change it at runtime. AnimationState can be used to change the layer of an animation, modify playback speed, and for direct control over blending and mixing. Animation also supports enumerators so you can loop through all AnimationStates like this:See Also: An overview of animation scripting in Unity is here.</remarks>
        </member>
        <member name="C:UnityEngine.Animation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String)">
            <param name="clip">To be added.</param>
            <param name="newName">To be added.</param>
            <summary>Adds a clip to the animation with name newName.Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String,System.Int32,System.Int32)">
            <param name="clip">To be added.</param>
            <param name="newName">To be added.</param>
            <param name="firstFrame">To be added.</param>
            <param name="lastFrame">To be added.</param>
            <summary>Adds a clip to the animation with name newName.Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String,System.Int32,System.Int32,System.Boolean)">
            <param name="clip">To be added.</param>
            <param name="newName">To be added.</param>
            <param name="firstFrame">To be added.</param>
            <param name="lastFrame">To be added.</param>
            <summary>Adds a clip to the animation with name newName.Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.</summary>
            <remarks>To be added.</remarks>
            <param name="addLoopFrame">Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.</param>
        </member>
        <member name="P:UnityEngine.Animation.animateOnlyIfVisible">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.animatePhysics">
            <summary>When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.</summary>
            <value>To be added.</value>
            <remarks>An animated platform can apply velocity and friction to rigid bodies sitting on top of it. In order to use this, animatePhysics must be enabled and animated object must be a kinematic rigid body.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Blend(System.String)">
            <param name="animation">To be added.</param>
            <summary>Blends the animation named animation towards targetWeight over the next time seconds.</summary>
            <remarks>Playback of other animations will not be affected.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Blend(System.String,System.Single)">
            <param name="animation">To be added.</param>
            <param name="targetWeight">To be added.</param>
            <summary>Blends the animation named animation towards targetWeight over the next time seconds.</summary>
            <remarks>Playback of other animations will not be affected.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Blend(System.String,System.Single,System.Single)">
            <param name="animation">To be added.</param>
            <param name="targetWeight">To be added.</param>
            <param name="fadeLength">To be added.</param>
            <summary>Blends the animation named animation towards targetWeight over the next time seconds.</summary>
            <remarks>Playback of other animations will not be affected.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.clip">
            <summary>The default animation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFade(System.String)">
            <param name="animation">To be added.</param>
            <summary>Fades the animation with name animation in over a period of time seconds and fades other animations out.</summary>
            <remarks>If mode is PlayMode.StopSameLayer, animations in the same layer as animation will be faded out while animation is faded in. if mode is PlayMode.StopAll, all animations will be faded out while animation is faded in. If the animation is not set to be looping it will be stopped and rewinded after playing.Another example:</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFade(System.String,System.Single)">
            <param name="animation">To be added.</param>
            <param name="fadeLength">To be added.</param>
            <summary>Fades the animation with name animation in over a period of time seconds and fades other animations out.</summary>
            <remarks>If mode is PlayMode.StopSameLayer, animations in the same layer as animation will be faded out while animation is faded in. if mode is PlayMode.StopAll, all animations will be faded out while animation is faded in. If the animation is not set to be looping it will be stopped and rewinded after playing.Another example:</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFade(System.String,System.Single,UnityEngine.PlayMode)">
            <param name="animation">To be added.</param>
            <param name="fadeLength">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Fades the animation with name animation in over a period of time seconds and fades other animations out.</summary>
            <remarks>If mode is PlayMode.StopSameLayer, animations in the same layer as animation will be faded out while animation is faded in. if mode is PlayMode.StopAll, all animations will be faded out while animation is faded in. If the animation is not set to be looping it will be stopped and rewinded after playing.Another example:</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String)">
            <param name="animation">To be added.</param>
            <summary>Cross fades an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequence of animations after each other. The animation duplicates itself before playing thus you can fade between the same animation.  This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single)">
            <param name="animation">To be added.</param>
            <param name="fadeLength">To be added.</param>
            <summary>Cross fades an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequence of animations after each other. The animation duplicates itself before playing thus you can fade between the same animation.  This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single,UnityEngine.QueueMode)">
            <param name="animation">To be added.</param>
            <param name="fadeLength">To be added.</param>
            <param name="queue">To be added.</param>
            <summary>Cross fades an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequence of animations after each other. The animation duplicates itself before playing thus you can fade between the same animation.  This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single,UnityEngine.QueueMode,UnityEngine.PlayMode)">
            <param name="animation">To be added.</param>
            <param name="fadeLength">To be added.</param>
            <param name="queue">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Cross fades an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequence of animations after each other. The animation duplicates itself before playing thus you can fade between the same animation.  This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.cullingType">
            <summary>Controls culling of this Animation component.</summary>
            <value>To be added.</value>
            <remarks>See Also: AnimationCullingType for more details.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.GetClip(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.GetClipCount">
            <summary>Get the number of clips currently assigned to this animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.isPlaying">
            <summary>Is the animation named name playing?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.IsPlaying(System.String)">
            <param name="name">To be added.</param>
            <summary>Is the animation named name playing?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.Item(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.localBounds">
            <summary>AABB of this Animation animation component in local space.</summary>
            <value>To be added.</value>
            <remarks>By default it is computed based on animation states (i.e. attached animation clips), unless user overrides it by setting value to localBounds. You can switch back to precomputed bounds by setting cullingType to AnimationCullingType.BasedOnClipBounds. Value of localBounds is undefined when cullingType is not set to AnimationCullingType.BasedOnClipBounds or AnimationCullingType.BasedOnUserBounds. When setting localBounds cullingType will be set to AnimationCullingType.BasedOnUserBounds automatically. See Also: AnimationClip.localBounds property, cullingType, AnimationCullingType.BasedOnClipBounds.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Play">
            <summary>Plays animation without any blending.</summary>
            <returns>To be added.</returns>
            <remarks>Play() will start animation with name animation, or play the default animation. The animation will be played abruptly without any blending. If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped. If mode is PlayMode.StopAll then all animations currently playing will be stopped. If the animation is already playing, other animations will be stopped but the animation will not rewind to the beginning. If the animation is not set to be looping it will be stopped and rewinded after playing. Play() will return false if animation can't be played (no animation clip or no default animation).For a specific animation, you can call the animation with play as well.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Play(System.String)">
            <param name="animation">To be added.</param>
            <summary>Plays animation without any blending.</summary>
            <returns>To be added.</returns>
            <remarks>Play() will start animation with name animation, or play the default animation. The animation will be played abruptly without any blending. If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped. If mode is PlayMode.StopAll then all animations currently playing will be stopped. If the animation is already playing, other animations will be stopped but the animation will not rewind to the beginning. If the animation is not set to be looping it will be stopped and rewinded after playing. Play() will return false if animation can't be played (no animation clip or no default animation).For a specific animation, you can call the animation with play as well.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Play(UnityEngine.AnimationPlayMode)">
            <param name="mode">To be added.</param>
            <summary>Plays animation without any blending.</summary>
            <returns>To be added.</returns>
            <remarks>Play() will start animation with name animation, or play the default animation. The animation will be played abruptly without any blending. If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped. If mode is PlayMode.StopAll then all animations currently playing will be stopped. If the animation is already playing, other animations will be stopped but the animation will not rewind to the beginning. If the animation is not set to be looping it will be stopped and rewinded after playing. Play() will return false if animation can't be played (no animation clip or no default animation).For a specific animation, you can call the animation with play as well.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Play(UnityEngine.PlayMode)">
            <param name="mode">To be added.</param>
            <summary>Plays animation without any blending.</summary>
            <returns>To be added.</returns>
            <remarks>Play() will start animation with name animation, or play the default animation. The animation will be played abruptly without any blending. If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped. If mode is PlayMode.StopAll then all animations currently playing will be stopped. If the animation is already playing, other animations will be stopped but the animation will not rewind to the beginning. If the animation is not set to be looping it will be stopped and rewinded after playing. Play() will return false if animation can't be played (no animation clip or no default animation).For a specific animation, you can call the animation with play as well.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Play(System.String,UnityEngine.AnimationPlayMode)">
            <param name="animation">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Plays animation without any blending.</summary>
            <returns>To be added.</returns>
            <remarks>Play() will start animation with name animation, or play the default animation. The animation will be played abruptly without any blending. If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped. If mode is PlayMode.StopAll then all animations currently playing will be stopped. If the animation is already playing, other animations will be stopped but the animation will not rewind to the beginning. If the animation is not set to be looping it will be stopped and rewinded after playing. Play() will return false if animation can't be played (no animation clip or no default animation).For a specific animation, you can call the animation with play as well.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Play(System.String,UnityEngine.PlayMode)">
            <param name="animation">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Plays animation without any blending.</summary>
            <returns>To be added.</returns>
            <remarks>Play() will start animation with name animation, or play the default animation. The animation will be played abruptly without any blending. If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped. If mode is PlayMode.StopAll then all animations currently playing will be stopped. If the animation is already playing, other animations will be stopped but the animation will not rewind to the beginning. If the animation is not set to be looping it will be stopped and rewinded after playing. Play() will return false if animation can't be played (no animation clip or no default animation).For a specific animation, you can call the animation with play as well.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.playAutomatically">
            <summary>Should the default animation clip (Animation.clip) automatically start playing on startup.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.PlayQueued(System.String)">
            <param name="animation">To be added.</param>
            <summary>Plays an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequeue of animations after each other. The animation state duplicates itself before playing thus you can fade between the same animation. This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.PlayQueued(System.String,UnityEngine.QueueMode)">
            <param name="animation">To be added.</param>
            <param name="queue">To be added.</param>
            <summary>Plays an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequeue of animations after each other. The animation state duplicates itself before playing thus you can fade between the same animation. This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.PlayQueued(System.String,UnityEngine.QueueMode,UnityEngine.PlayMode)">
            <param name="animation">To be added.</param>
            <param name="queue">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Plays an animation after previous animations has finished playing.</summary>
            <returns>To be added.</returns>
            <remarks>For example you might play a specific sequeue of animations after each other. The animation state duplicates itself before playing thus you can fade between the same animation. This can be used to overlay two same animations. For example you might have a sword swing animation. The player slashes two times quickly after each other. You could rewind the animation and play from the beginning but then you will get a jump in the animation. The following queue modes are available: If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state. After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.RemoveClip(System.String)">
            <param name="clipName">To be added.</param>
            <summary>Remove clip from the animation list.Remove clip from the animation list.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.RemoveClip(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>Remove clip from the animation list.Remove clip from the animation list.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Rewind">
            <summary>Rewinds the animation named name.Rewinds all animations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Rewind(System.String)">
            <param name="name">To be added.</param>
            <summary>Rewinds the animation named name.Rewinds all animations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Sample">
            <summary>Samples animations at the current state.</summary>
            <remarks>This is useful when you explicitly want to set up some animation state, and sample it once.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Stop">
            <summary>Stops all playing animations that were started with this Animation.Stops an animation named name.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.Stop(System.String)">
            <param name="name">To be added.</param>
            <summary>Stops all playing animations that were started with this Animation.Stops an animation named name.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animation.SyncLayer(System.Int32)">
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animation.wrapMode">
            <summary>How should time beyond the playback range of the clip be treated?</summary>
            <value>To be added.</value>
            <remarks>WrapMode.Default: Read's the wrap mode from the clip (default for a clip is Once). WrapMode.Once: Stops the animation when time reaches the end. WrapMode.Loop: Starts at the beginning when time reaches the end. WrapMode.PingPong: Ping Pong's back and forth between beginning and end. WrapMode.ClampForever: Plays back the animation. When it reaches the end, it will keep sampling the last frame.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationBlendMode">
            <summary>Used by Animation.Play function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationBlendMode.Additive">
            <summary>Animations will be added.</summary>
        </member>
        <member name="F:UnityEngine.AnimationBlendMode.Blend">
            <summary>Animations will be blended.</summary>
        </member>
        <member name="T:UnityEngine.AnimationClip">
            <summary>Stores keyframe based animations.</summary>
            <remarks>AnimationClip is used by Animation to play back animations.</remarks>
        </member>
        <member name="C:UnityEngine.AnimationClip">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationClip.AddEvent(UnityEngine.AnimationEvent)">
            <param name="evt">To be added.</param>
            <summary>Adds an animation event to the clip.</summary>
            <remarks>Note that events added with AddEvent will only persist until play mode is exited of player is quit. If you want to add an event to a clip persistently, use AnimationUtility.SetAnimationEvents from the Unity editor. See Also: AnimationEvent, AnimationUtility classes.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationClip.ClearCurves">
            <summary>Clears all curves from the clip.</summary>
            <remarks>See Also: SetCurve function, AnimationCurve class.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationClip.EnsureQuaternionContinuity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationClip.frameRate">
            <summary>Frame rate at which keyframes are sampled. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This is the frame rate that was used in the animation program you used to create the animation or model.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationClip.length">
            <summary>Animation length in seconds. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationClip.localBounds">
            <summary>AABB of this Animation Clip in local space of Animation component that it is attached too.</summary>
            <value>To be added.</value>
            <remarks>It is precomputed on import for imported models/animations based on the meshes that this animation clip affects.  This bounding box is specific to the mesh(es) that this clip is attached to during import, i.e. this means that it is calculated based on the file that is part of and on the "Model" file if you're using Model@Animation notation.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationClip.SetCurve(System.String,System.Type,System.String,UnityEngine.AnimationCurve)">
            <summary>Assigns the curve to animate a specific property.</summary>
            <remarks>If curve is null the curve will be removed. If a curve already exists for that property, it will be replaced. Common names are: "localPosition.x", "localPosition.y", "localPosition.z", "localRotation.x", "localRotation.y", "localRotation.z", "localRotation.w" "localScale.x", "localScale.y", "localScale.z" .Material properties can be animated using the property name exported in the shader. Common property names are: "_MainTex", "_BumpMap", "_Color", "_SpecColor", "_Emission". How to animate different material property types: Float properties: "PropertyName" __ Vector4 properties:__ "PropertyName.x", "PropertyName.y", "PropertyName.z", "PropertyName.w" __ Color properties:__ "PropertyName.r ", "PropertyName.g", "PropertyName.b", "PropertyName.a" UV Rotation properties: "PropertyName.rotation" UV Offset and scale: "PropertyName.offset.x", "PropertyName.offset.y", "PropertyName.scale.x", "PropertyName.scale.y" To index into multiple materials on the same renderer you can prefix the attribute like this: "[1]._MainTex.offset.y" See Also: ClearCurves function, AnimationCurve class.</remarks>
            <param name="relativePath">Path to the GameObject this curve applies to. relativePath is formatted similar to a pathname, e.g. "rootspineleftArm". If relativePath is empty it refers to the GameObject the animation clip is attached to.</param>
            <param name="type">The class type of the component that is animated.</param>
            <param name="propertyName">The name or path to the property being animated.</param>
            <param name="curve">The animation curve.</param>
        </member>
        <member name="P:UnityEngine.AnimationClip.wrapMode">
            <summary>Sets the default wrap mode used in the animation state.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationClipPair">
            <summary>This class define a pair of clip used by See Also: AnimationSet.</summary>
            <remarks>Each original clip from the controller can be overriden with another clip.</remarks>
        </member>
        <member name="C:UnityEngine.AnimationClipPair">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationClipPair.originalClip">
            <summary>The original clip from the controller.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationClipPair.overrideClip">
            <summary>The override animation clip.</summary>
            <remarks>Can be null if no override is define.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationCullingType">
            <summary>This enum controlls culling of Animation component.</summary>
            <remarks>When culling is enabled, Unity might stop animating if it thinks that the results of the animation won't be visible to the user. This could save you some performance if you have things animating outside of the viewport, whose animation is only important when the user can actually see the thing that is being animated. When Animation component is culled it won't do anything: it won't update animation states, execute events or sample animations.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationCullingType.AlwaysAnimate">
            <summary>Animation culling is disabled - object is animated even when offscreen.</summary>
        </member>
        <member name="F:UnityEngine.AnimationCullingType.BasedOnClipBounds">
            <summary>Animation is disabled when Animation.localBounds are not visible.</summary>
            <remarks>When this type of culling is used Animation.localBounds will be based on bounds of attached clips which are precalculated on import. This culling method works better  than BasedOnRenderers, because animation can push itself into the camera frustum. See Also: BasedOnUserBounds, Animation.localBounds property, AnimationClip.localBounds property.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationCullingType.BasedOnRenderers">
            <summary>Animation is disabled when renderers are not visible.</summary>
            <remarks>This culling method is more suitable when you have renderers attached after import - it will take  renderers (like mesh renderers, particle renderers and so on) attached to this gameObject or children  of this GameObject.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationCullingType.BasedOnUserBounds">
            <summary>Animation is disabled when Animation.localBounds are not visible.</summary>
            <remarks>Animation.localBounds can be set by user, when culling is set to BasedOnUserBounds. This culling method works better than BasedOnRenderers, because animation can push itself into the camera frustum. See Also: BasedOnClipBounds, Animation.localBounds property.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationCurve">
            <summary>A collection of curves form an AnimationClip.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.AnimationCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.AnimationCurve(UnityEngine.Keyframe[])">
            <param name="keys">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.AddKey(UnityEngine.Keyframe)">
            <param name="key">To be added.</param>
            <summary>Add a new key to the curve.Add a new key to the curve.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.AddKey(System.Single,System.Single)">
            <param name="time">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a new key to the curve.Add a new key to the curve.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.EaseInOut(System.Single,System.Single,System.Single,System.Single)">
            <param name="timeStart">To be added.</param>
            <param name="valueStart">To be added.</param>
            <param name="timeEnd">To be added.</param>
            <param name="valueEnd">To be added.</param>
            <summary>An ease-in and out curve starting at timeStart, valueStart and ending at timeEnd, valueEnd.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.Evaluate(System.Single)">
            <param name="time">To be added.</param>
            <summary>Evaluate the curve at time.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationCurve.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationCurve.keys">
            <summary>All keys defined in the animation curve.</summary>
            <value>To be added.</value>
            <remarks>This lets you clear, add or remove any keys from the array. If keys are not sorted by time, they will be automatically sorted on assignment. Note that the array is "by value", i.e. getting keys returns a copy of all keys and setting keys copies them into the curve. See Also: Keyframe struct, AddKey, RemoveKey functions.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationCurve.length">
            <summary>The number of keys in the curve. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.Linear(System.Single,System.Single,System.Single,System.Single)">
            <param name="timeStart">To be added.</param>
            <param name="valueStart">To be added.</param>
            <param name="timeEnd">To be added.</param>
            <param name="valueEnd">To be added.</param>
            <summary>A straight Line starting at timeStart, valueStart and ending at timeEnd, valueEnd.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.MoveKey(System.Int32,UnityEngine.Keyframe)">
            <param name="index">To be added.</param>
            <param name="key">To be added.</param>
            <summary>Removes the keyframe at index and inserts key.</summary>
            <returns>To be added.</returns>
            <remarks>If a keyframe already exists at /key.time/ the time of the old keyframe's position /key[index].time/ will be used instead. This is the desired behaviour for dragging keyframes in a curve editor. Returns the index of the keyframe after moving it.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationCurve.postWrapMode">
            <summary>The behaviour of the animation after the last keyframe.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationCurve.preWrapMode">
            <summary>The behaviour of the animation before the first keyframe.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.RemoveKey(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Removes a key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationCurve.SmoothTangents(System.Int32,System.Single)">
            <param name="index">To be added.</param>
            <param name="weight">To be added.</param>
            <summary>Smooth the in and out tangents of the keyframe at index.</summary>
            <remarks>A weight of 0 evens out tangents.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationEvent">
            <summary>AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.</summary>
            <remarks>Animation events support functions that take zero or one parameter. The parameter can be a float, a string, an object reference, or an AnimationEvent.</remarks>
        </member>
        <member name="C:UnityEngine.AnimationEvent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.animationState">
            <summary>The animation state that fired this event (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Returns null when the method is called outside of an animation event callback.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.data">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationEvent.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.floatParameter">
            <summary>Float parameter that is stored in the event and will be sent to the function.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.functionName">
            <summary>The name of the function that will be called.</summary>
            <value>To be added.</value>
            <remarks>This is the same as calling gameObject.SendMessage(animationEvent.functionName, animationEvent).</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.intParameter">
            <summary>Int parameter that is stored in the event and will be sent to the function.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.messageOptions">
            <summary>Function call options.</summary>
            <value>To be added.</value>
            <remarks>If options are set to SendMessageOptions.RequireReceiver (default), an error is printed when the message is not picked up by any component.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.objectReferenceParameter">
            <summary>Object reference parameter that is stored in the event and will be sent to the function.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.stringParameter">
            <summary>String parameter that is stored in the event and will be sent to the function.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationEvent.time">
            <summary>The time at which the event will be fired off.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationInfo">
            <summary>Information about what animation clips is played and its weight.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationInfo.clip">
            <summary>Animation clip that is played.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationInfo.weight">
            <summary>The weight of the animation clip.</summary>
            <value>To be added.</value>
            <remarks>The weight is the concatenation of the blendtree weight and the transition weight.</remarks>
        </member>
        <member name="T:UnityEngine.AnimationPlayMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AnimationPlayMode.Mix">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.AnimationPlayMode.Queue">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.AnimationPlayMode.Stop">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.AnimationState">
            <summary>The AnimationState gives full control over animation blending.</summary>
            <remarks>In most cases the Animation interface is sufficient and easier to use. Use the AnimationState if you need full control over the animation blending any playback process. The AnimationState interface allows you to modify speed, weight, time and layers while any animation is playing. You can also setup animation mixing and wrapMode. The Animation.</remarks>
        </member>
        <member name="C:UnityEngine.AnimationState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationState.AddMixingTransform(UnityEngine.Transform)">
            <param name="mix">To be added.</param>
            <summary>Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.</summary>
            <remarks>For example you might have a handwaving animation. You might want to play the hand waving animation on a idle character or on a walking character. Either you have to create 2 hand waving animations one for idle, one for walking. By using mixing the hand waving animation will have full control of the shoulder. But the lower body will not be affected by it, and continue playing the idle or walk animation. Thus you only need one hand waving animation. If recursive is true all children of the mix transform will also be animated. If you don't call AddMixingTransform, all animation curves will be used.Another example using a path:</remarks>
        </member>
        <member name="M:UnityEngine.AnimationState.AddMixingTransform(UnityEngine.Transform,System.Boolean)">
            <param name="mix">To be added.</param>
            <param name="recursive">To be added.</param>
            <summary>Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.</summary>
            <remarks>For example you might have a handwaving animation. You might want to play the hand waving animation on a idle character or on a walking character. Either you have to create 2 hand waving animations one for idle, one for walking. By using mixing the hand waving animation will have full control of the shoulder. But the lower body will not be affected by it, and continue playing the idle or walk animation. Thus you only need one hand waving animation. If recursive is true all children of the mix transform will also be animated. If you don't call AddMixingTransform, all animation curves will be used.Another example using a path:</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.blendMode">
            <summary>Which blend mode should be used?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.clip">
            <summary>The clip that is being played by this animation state.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.enabled">
            <summary>Enables / disables the animation.</summary>
            <value>To be added.</value>
            <remarks>For the animation to take any effect the weight also needs to be set to a value higher than zero. If the animation is disabled, time will be paused until the animation is enabled again.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.layer">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.length">
            <summary>The length of the animation clip in seconds.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.name">
            <summary>The name of the animation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.normalizedSpeed">
            <summary>The normalized playback speed.</summary>
            <value>To be added.</value>
            <remarks>This is most commonly used to synchronize playback speed when blending between two animations. In most cases it is easier and better to use animation.SyncLayer instead.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.normalizedTime">
            <summary>The normalized time of the animation.</summary>
            <value>To be added.</value>
            <remarks>A value of 1 is the end of the animation. A value of 0.5 is the middle of the animation.</remarks>
        </member>
        <member name="M:UnityEngine.AnimationState.RemoveMixingTransform(UnityEngine.Transform)">
            <param name="mix">To be added.</param>
            <summary>Removes a transform which should be animated.</summary>
            <remarks>You can only pass transforms that have been added through AddMixingTransform function. If transform has been  added as recursive, then it will be removed as recursive. Once you remove all mixing transforms added to  animation state all curves become animated again. See Also: AddMixingTransform function.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.speed">
            <summary>The playback speed of the animation. 1 is normal playback speed.</summary>
            <value>To be added.</value>
            <remarks>A negative playback speed will play the animation backwards.See Also: AnimationState.time, AnimationState.wrapMode properties and WrapMode enum.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.time">
            <summary>The current time of the animation.</summary>
            <value>To be added.</value>
            <remarks>If the time is larger than length it will be wrapped according to wrapMode. The value can be larger than the animations length. In this case playback mode will remap the time before sampling. This value usually goes from 0 to infinity.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.weight">
            <summary>The weight of animation.</summary>
            <value>To be added.</value>
            <remarks>This calculates the blend weights for one curve. Weights are distributed so that the top layer gets everything. If it doesn't use the full weight then the next layer gets to distribute the remaining weights and so on. Once all weights are used by the top layers, no weights will be available for lower layers anymore Unity uses fair weighting, which means if a lower layer wants 80% and 50% have already been used up, the layer will NOT use up all weights. instead it will take up 80% of the 50%. Example: a upper body which is affected by wave, walk and idle a lower body which is affected by only walk and idle.- Blend weights can change per animated value because of mixing. Even without mixing, sometimes a curve is just not defined. Still you want the blend weights to add up to 1. Most of the time weights are similar between curves.</remarks>
        </member>
        <member name="P:UnityEngine.AnimationState.wrapMode">
            <summary>Wrapping mode of the animation.</summary>
            <value>To be added.</value>
            <remarks>By default wrapMode is initialized to the value set in the Animation component's wrap mode.</remarks>
        </member>
        <member name="T:UnityEngine.Animator">
            <summary>Interface to control the Mecanim animation system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Animator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.animatePhysics">
            <summary>When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.applyRootMotion">
            <summary>Should root motion be applied?</summary>
            <value>To be added.</value>
            <remarks>Root motion is the effect where an object's entire mesh moves away from its starting point but that motion is created by the animation itself rather than by changing the Transform position. Note that applyRootMotion has no effect when the script implements an MonoBehaviour.OnAnimatorMove function.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.avatar">
            <summary>Gets/Sets the current Avatar.</summary>
            <value>To be added.</value>
            <remarks>Changing the avatar at runtime is not fully supported. Use it at your own risk.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.bodyPosition">
            <summary>The position of the body center of mass.</summary>
            <value>To be added.</value>
            <remarks>The position is local to the gameobject.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.bodyRotation">
            <summary>The rotation of the body center of mass.</summary>
            <value>To be added.</value>
            <remarks>The rotation is local to the gameobject.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.CrossFade(System.Int32,System.Single)">
            <param name="stateNameHash">To be added.</param>
            <param name="transitionDuration">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.CrossFade(System.String,System.Single)">
            <param name="stateName">To be added.</param>
            <param name="transitionDuration">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.CrossFade(System.Int32,System.Single,System.Int32)">
            <param name="stateNameHash">To be added.</param>
            <param name="transitionDuration">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.CrossFade(System.String,System.Single,System.Int32)">
            <param name="stateName">To be added.</param>
            <param name="transitionDuration">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.CrossFade(System.Int32,System.Single,System.Int32,System.Single)">
            <param name="stateNameHash">To be added.</param>
            <param name="transitionDuration">To be added.</param>
            <param name="layer">To be added.</param>
            <param name="normalizedTime">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.CrossFade(System.String,System.Single,System.Int32,System.Single)">
            <param name="stateName">To be added.</param>
            <param name="transitionDuration">To be added.</param>
            <param name="layer">To be added.</param>
            <param name="normalizedTime">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.cullingMode">
            <summary>Controls culling of this Animator component.</summary>
            <value>To be added.</value>
            <remarks>See Also: AnimatorCullingMode enum.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.deltaPosition">
            <summary>Gets the avatar delta position for the last evaluated frame.</summary>
            <value>To be added.</value>
            <remarks>@TODO: Delta position should be premultiplied by the avatar rotation...</remarks>
        </member>
        <member name="P:UnityEngine.Animator.deltaRotation">
            <summary>Gets the avatar delta rotation for the last evaluated frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.feetPivotActive">
            <summary>Blends pivot point between body center of mass and feet pivot. At 0%, the blending point is body center of mass. At 100%, the blending point is feet pivot.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.fireEvents">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.ForceStateNormalizedTime(System.Single)">
            <param name="normalizedTime">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.GetAnimatorTransitionInfo(System.Int32)">
            <summary>Gets the Transition information on a specified AnimatorController layer.</summary>
            <returns>To be added.</returns>
            <remarks>Only valid when during a transition.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetBoneTransform(UnityEngine.HumanBodyBones)">
            <summary>Returns transform mapped to this human bone id.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="humanBoneId">The human bone that is queried, see enum HumanBodyBones for a list of possible values.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetBool(System.Int32)">
            <summary>Gets the value of a bool parameter.Gets the value of a bool parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetBool(System.String)">
            <summary>Gets the value of a bool parameter.Gets the value of a bool parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetCurrentAnimationClipState(System.Int32)">
            <summary>Gets the list of AnimationInfo currently played by the current state.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetCurrentAnimatorStateInfo(System.Int32)">
            <summary>Gets the current State information on a specified AnimatorController layer.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetFloat(System.Int32)">
            <summary>Gets the value of a float parameter.Gets the value of a float parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetFloat(System.String)">
            <summary>Gets the value of a float parameter.Gets the value of a float parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetIKPosition(UnityEngine.AvatarIKGoal)">
            <summary>Gets the position of an IK goal.</summary>
            <returns>To be added.</returns>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). This function gets the current position of the specified goal in world space. See Also: GetIKPositionWeight, SetIKPosition.</remarks>
            <param name="goal">The AvatarIKGoal that is queried.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetIKPositionWeight(UnityEngine.AvatarIKGoal)">
            <summary>Gets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).</summary>
            <returns>To be added.</returns>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). The point calculated by the IK is also influenced by a weight value in the range 0..1 that determines how far between the start and the goal to aim. This function returns the current weight value for the position of the goal. See Also: GetIKPosition, SetIKPosition.</remarks>
            <param name="goal">The AvatarIKGoal that is queried.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetIKRotation(UnityEngine.AvatarIKGoal)">
            <summary>Gets the rotation of an IK goal.</summary>
            <returns>To be added.</returns>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). This function gets the current rotation of the specified goal in world space. See Also: GetIKRotationWeight, SetIKRotation.</remarks>
            <param name="goal">The AvatarIKGoal that is is queried.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetIKRotationWeight(UnityEngine.AvatarIKGoal)">
            <summary>Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).</summary>
            <returns>To be added.</returns>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). The rotation calculated by the IK is also influenced by a weight value in the range 0..1 that determines how far between the start and the goal to aim. This function returns the current weight value for the rotation of the goal. See Also: GetIKRotation, SetIKRotation.</remarks>
            <param name="goal">The AvatarIKGoal that is queried.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetInteger(System.Int32)">
            <summary>Gets the value of an integer parameter.Gets the value of an integer parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetInteger(System.String)">
            <summary>Gets the value of an integer parameter.Gets the value of an integer parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetLayerName(System.Int32)">
            <summary>Gets name of the layer.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetLayerWeight(System.Int32)">
            <summary>Gets the layer's current weight.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetNextAnimationClipState(System.Int32)">
            <summary>Gets the list of AnimationInfo currently played by the next state.</summary>
            <returns>To be added.</returns>
            <remarks>Only valid when during a transition.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetNextAnimatorStateInfo(System.Int32)">
            <summary>Gets the next State information on a specified AnimatorController layer.</summary>
            <returns>To be added.</returns>
            <remarks>Only valid when during a transition.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="M:UnityEngine.Animator.GetQuaternion(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.GetQuaternion(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.GetVector(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.GetVector(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.gravityWeight">
            <summary>The current gravity weight based on current animations that are played.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.hasRootMotion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.hasTransformHierarchy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.humanScale">
            <summary>Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).</summary>
            <value>To be added.</value>
            <remarks>The scale is relative to Unity's Default Avatar.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.InterruptMatchTarget">
            <summary>Interrupts the automatic target matching.</summary>
            <remarks>CompleteMatch will make the gameobject match the target completely at the next frame.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.InterruptMatchTarget(System.Boolean)">
            <param name="completeMatch">To be added.</param>
            <summary>Interrupts the automatic target matching.</summary>
            <remarks>CompleteMatch will make the gameobject match the target completely at the next frame.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.IsControlled(UnityEngine.Transform)">
            <param name="transform">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.isHuman">
            <summary>Returns true if the current rig is humanoid, false if it is generic.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.IsInTransition(System.Int32)">
            <summary>Is the specified AnimatorController layer in a transition.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="layerIndex">The layer's index.</param>
        </member>
        <member name="P:UnityEngine.Animator.isMatchingTarget">
            <summary>If automatic matching is active.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.isOptimizable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.IsParameterControlledByCurve(System.Int32)">
            <summary>Returns true if a parameter is controlled by an additional curve on an animation.Returns true if a parameter is controlled by an additional curve on an animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
        </member>
        <member name="M:UnityEngine.Animator.IsParameterControlledByCurve(System.String)">
            <summary>Returns true if a parameter is controlled by an additional curve on an animation.Returns true if a parameter is controlled by an additional curve on an animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="P:UnityEngine.Animator.layerCount">
            <summary>The AnimatorController layer count.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.layersAffectMassCenter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.leftFeetBottomHeight">
            <summary>Get left foot bottom height.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.logWarnings">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.MatchTarget(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.AvatarTarget,UnityEngine.MatchTargetWeightMask,System.Single)">
            <summary>Automatically adjust the gameobject position and rotation so that the AvatarTarget reaches the matchPosition when the current state is at the specified progress.</summary>
            <remarks>Target matching only works on the base layer (index 0).</remarks>
            <param name="matchPosition">The position we want the body part to reach.</param>
            <param name="matchRotation">The rotation in which we want the body part to be.</param>
            <param name="targetBodyPart">The body part that is involved in the match.</param>
            <param name="weightMask">Structure that contains weights for matching position and rotation.</param>
            <param name="startNormalizedTime">Start time within the animation clip (0 - beginning of clip, 1 - end of clip).</param>
        </member>
        <member name="M:UnityEngine.Animator.MatchTarget(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.AvatarTarget,UnityEngine.MatchTargetWeightMask,System.Single,System.Single)">
            <summary>Automatically adjust the gameobject position and rotation so that the AvatarTarget reaches the matchPosition when the current state is at the specified progress.</summary>
            <remarks>Target matching only works on the base layer (index 0).</remarks>
            <param name="matchPosition">The position we want the body part to reach.</param>
            <param name="matchRotation">The rotation in which we want the body part to be.</param>
            <param name="targetBodyPart">The body part that is involved in the match.</param>
            <param name="weightMask">Structure that contains weights for matching position and rotation.</param>
            <param name="startNormalizedTime">Start time within the animation clip (0 - beginning of clip, 1 - end of clip).</param>
            <param name="targetNormalizedTime">End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop.</param>
        </member>
        <member name="P:UnityEngine.Animator.pivotPosition">
            <summary>Get the current position of the pivot.</summary>
            <value>To be added.</value>
            <remarks>The pivot is the most stable point between the avatar's left and right foot.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.pivotWeight">
            <summary>Gets the pivot weight.</summary>
            <value>To be added.</value>
            <remarks>The pivot is the most stable point between the avatar's left and right foot For a value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Play(System.Int32)">
            <param name="stateNameHash">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Play(System.String)">
            <param name="stateName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Play(System.Int32,System.Int32)">
            <param name="stateNameHash">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Play(System.String,System.Int32)">
            <param name="stateName">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Play(System.Int32,System.Int32,System.Single)">
            <param name="stateNameHash">To be added.</param>
            <param name="layer">To be added.</param>
            <param name="normalizedTime">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Play(System.String,System.Int32,System.Single)">
            <param name="stateName">To be added.</param>
            <param name="layer">To be added.</param>
            <param name="normalizedTime">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.playbackTime">
            <summary>Sets the playback position in the recording buffer.</summary>
            <value>To be added.</value>
            <remarks>When in playback mode (see StartPlayback ), this value is used for controlling the current playback position in the buffer (in seconds). The value can range between recordingStartTime and recordingStopTime See Also: StartPlayback, StopPlayback.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.recorderStartTime">
            <summary>Start time of the first frame of the buffer relative to the frame at which StartRecording was called.</summary>
            <value>To be added.</value>
            <remarks>For example, if we started recording at frame 10, and the buffer is 5 frames long. If the buffer is not initialized ( StartRecording is not called), the value of this property will be -1. See Also: recorderStopTime.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.recorderStopTime">
            <summary>End time of the recorded clip relative to when StartRecording was called.</summary>
            <value>To be added.</value>
            <remarks>For example, if we started recording at second 10, and ended recording at second 15, then this will have a value of 5. If the buffer is not initialized ( StartRecording is not called), the value of this property will be -1. See Also: recorderStartTime.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.ResetTrigger(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.ResetTrigger(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.rightFeetBottomHeight">
            <summary>Get right foot bottom height.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.rootPosition">
            <summary>The root position, the position of the GameObject.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.rootRotation">
            <summary>The root rotation, the rotation of the GameObject.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.runtimeAnimatorController">
            <summary>The runtime representation of AnimatorController that controls the Animator.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.SetBool(System.Int32,System.Boolean)">
            <summary>Sets the value of a bool parameter.Sets the value of a bool parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetBool(System.String,System.Boolean)">
            <summary>Sets the value of a bool parameter.Sets the value of a bool parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetFloat(System.Int32,System.Single)">
            <summary>Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetFloat(System.String,System.Single)">
            <summary>Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetFloat(System.Int32,System.Single,System.Single,System.Single)">
            <summary>Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
            <param name="value">The new value for the parameter.</param>
            <param name="dampTime">The time allowed to parameter to reach the value.</param>
            <param name="deltaTime">The current frame deltaTime.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetFloat(System.String,System.Single,System.Single,System.Single)">
            <summary>Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.Sets the value of a float parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
            <param name="value">The new value for the parameter.</param>
            <param name="dampTime">The time allowed to parameter to reach the value.</param>
            <param name="deltaTime">The current frame deltaTime.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetIKPosition(UnityEngine.AvatarIKGoal,UnityEngine.Vector3)">
            <summary>Sets the position of an IK goal.</summary>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). This function sets the position of the ultimate goal in world space; the actual point in space where the body part ends up is also influenced by a weight parameter that specifies how far between the start and the goal the IK should aim (a value in the range 0..1).See Also: SetIKPositionWeight, SetIKRotation.</remarks>
            <param name="goal">The AvatarIKGoal that is set.</param>
            <param name="goalPosition">The position in world space.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetIKPositionWeight(UnityEngine.AvatarIKGoal,System.Single)">
            <summary>Sets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).</summary>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). This function sets a weight value in the range 0..1 to determine how far between the start and goal positions the IK will aim. The position itself is set separately using SetIKPosition .See Also: SetIKPosition, SetIKRotationWeight.</remarks>
            <param name="goal">The AvatarIKGoal that is set.</param>
            <param name="value">The translative weight.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetIKRotation(UnityEngine.AvatarIKGoal,UnityEngine.Quaternion)">
            <summary>Sets the rotation of an IK goal.</summary>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). This function sets the rotation of the ultimate goal in world space; the actual rotation where the body part ends up is also influenced by a weight parameter that specifies how far between the start and the goal the IK should aim (a value in the range 0..1).See Also: SetIKRotationWeight, SetIKPosition.</remarks>
            <param name="goal">The AvatarIKGoal that is set.</param>
            <param name="goalRotation">The rotation in world space.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetIKRotationWeight(UnityEngine.AvatarIKGoal,System.Single)">
            <summary>Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).</summary>
            <remarks>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation). This function sets a weight value in the range 0..1 to determine how far between the start and goal rotations the IK will aim. The goal itself is set separately using SetIKRotation .See Also: SetIKRotation, SetIKPositionWeight.</remarks>
            <param name="goal">The AvatarIKGoal that is set.</param>
            <param name="value">The rotational weight.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetInteger(System.Int32,System.Int32)">
            <summary>Sets the value of an integer parameter.Sets the value of an integer parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetInteger(System.String,System.Int32)">
            <summary>Sets the value of an integer parameter.Sets the value of an integer parameter.</summary>
            <remarks>To be added.</remarks>
            <param name="name">The name of the parameter.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLayerWeight(System.Int32,System.Single)">
            <summary>Sets the layer's current weight.</summary>
            <remarks>To be added.</remarks>
            <param name="layerIndex">The layer's index.</param>
            <param name="weight">The weight of the layer.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLookAtPosition(UnityEngine.Vector3)">
            <summary>Sets the look at position.</summary>
            <remarks>To be added.</remarks>
            <param name="lookAtPosition">The position to lookAt.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single)">
            <summary>Set look at weights.</summary>
            <remarks>To be added.</remarks>
            <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single)">
            <summary>Set look at weights.</summary>
            <remarks>To be added.</remarks>
            <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
            <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single)">
            <summary>Set look at weights.</summary>
            <remarks>To be added.</remarks>
            <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
            <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
            <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single,System.Single)">
            <summary>Set look at weights.</summary>
            <remarks>To be added.</remarks>
            <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
            <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
            <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
            <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Set look at weights.</summary>
            <remarks>To be added.</remarks>
            <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
            <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
            <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
            <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
            <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
        </member>
        <member name="M:UnityEngine.Animator.SetQuaternion(System.Int32,UnityEngine.Quaternion)">
            <param name="id">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.SetQuaternion(System.String,UnityEngine.Quaternion)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.SetTarget(UnityEngine.AvatarTarget,System.Single)">
            <summary>Sets an AvatarTarget and a targetNormalizedTime for the current state.</summary>
            <remarks>Once the frame is evaluated, the position and the rotation can be queried using targetPosition and targetRotation.</remarks>
            <param name="targetIndex">The avatar body part that is queried.</param>
            <param name="targetNormalizedTime">The current state Time that is queried.</param>
        </member>
        <member name="M:UnityEngine.Animator.SetTrigger(System.Int32)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.SetTrigger(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.SetVector(System.Int32,UnityEngine.Vector3)">
            <param name="id">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.SetVector(System.String,UnityEngine.Vector3)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.speed">
            <summary>The playback speed of the Animator. 1 is normal playback speed.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.stabilizeFeet">
            <summary>Automatic stabilization of feet during transition and blending.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.StartPlayback">
            <summary>Sets the animator in playback mode.</summary>
            <remarks>In this mode, the animator is not updated from game logic and is controlled instead by setting time value. Note that time will not automatically progress here, you have to manipulate it explicitly from playbackTime. PlaybackRecordedFrame should be used to playback recorded data.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.StartRecording(System.Int32)">
            <summary>Sets the animator in recording mode, and allocates a circular buffer of size frameCount.</summary>
            <remarks>After this call, the recorder starts collecting up to frameCount frames in the buffer. Note it is not possible to start playback until a call to StopRecording is made.  See Also: StopRecording, recordingStartTime, recordingStopTime, StartPlayback, StopPlayback, playbackTime.</remarks>
            <param name="frameCount">The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.</param>
        </member>
        <member name="M:UnityEngine.Animator.StopPlayback">
            <summary>Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic.</summary>
            <remarks>See Also: StartRecording, StopRecording, recordingStartTime, recordingStopTime, StartPlayback, , playbackTime.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.StopRecording">
            <summary>Stops animator record mode.</summary>
            <remarks>A call to StopRecording will lock the recording buffer's contents in its current state. The data get saved for subsequent playback with StartPlayback. See Also: StartRecording, recordingStartTime, recordingStopTime, StartPlayback, StopPlayback, playbackTime.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.StringToHash(System.String)">
            <summary>Generates an parameter id from a string.</summary>
            <returns>To be added.</returns>
            <remarks>Ids are used for optimized setters and getters on parameters.</remarks>
            <param name="name">The string to convert to Id.</param>
        </member>
        <member name="P:UnityEngine.Animator.targetPosition">
            <summary>Returns the position of the target specified by SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)).</summary>
            <value>To be added.</value>
            <remarks>The position is only valid when a frame has being evaluated after the SetTarget call.</remarks>
        </member>
        <member name="P:UnityEngine.Animator.targetRotation">
            <summary>Returns the rotation of the target specified by SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)).</summary>
            <value>To be added.</value>
            <remarks>The rotation is only valid when a frame has being evaluated after the SetTarget call.</remarks>
        </member>
        <member name="M:UnityEngine.Animator.Update(System.Single)">
            <param name="deltaTime">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AnimatorCullingMode">
            <summary>Culling mode for the Animator.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AnimatorCullingMode.AlwaysAnimate">
            <summary>Always animate the entire character. Object is animated even when offscreen.</summary>
        </member>
        <member name="F:UnityEngine.AnimatorCullingMode.BasedOnRenderers">
            <summary>Animation is disabled when renderers are not visible.</summary>
            <remarks>The statemachine and root motion will always be evaluated. Thus you will always receive the OnAnimatorMove callbacks. All other animation will be skipped if the character is not visible. Specifically evaluation of bone animation, IK, OnAnimatorIK will be skipped.</remarks>
        </member>
        <member name="T:UnityEngine.AnimatorOverrideController">
            <summary>Interface to control AnimationSet.</summary>
            <remarks>AnimationSet are used to override clips from a controller to specialize some animation for a given avatar. See Also: Animator.animationSet.</remarks>
        </member>
        <member name="C:UnityEngine.AnimatorOverrideController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorOverrideController.clips">
            <summary>Returns the list of orignal clip from the controller and their override clip.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorOverrideController.Item(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorOverrideController.Item(UnityEngine.AnimationClip)">
            <param name="clip">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimatorOverrideController.PerformOverrideClipListCleanup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorOverrideController.runtimeAnimatorController">
            <summary>The Controller that the AnimatorOverrideController overrides.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AnimatorStateInfo">
            <summary>Information about the current or next state.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimatorStateInfo.IsName(System.String)">
            <param name="name">To be added.</param>
            <summary>Does name match the name of the active state in the statemachine?</summary>
            <returns>To be added.</returns>
            <remarks>The name should be in the form Layer.Name, for example "Base.Idle".</remarks>
        </member>
        <member name="M:UnityEngine.AnimatorStateInfo.IsTag(System.String)">
            <param name="tag">To be added.</param>
            <summary>Does tag match the tag of the active state in the statemachine.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorStateInfo.length">
            <summary>Current duration of the state.</summary>
            <value>To be added.</value>
            <remarks>In seconds Can vary when the State contains a Blend Tree.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorStateInfo.loop">
            <summary>Is the state looping.</summary>
            <value>To be added.</value>
            <remarks>All animations in the state must be looping.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorStateInfo.nameHash">
            <summary>Name of the State.</summary>
            <value>To be added.</value>
            <remarks>The hash is generated using Animator::StringToHash. The string to pass should include the parent layer's name. For example, if you have a Run state in the Base Layer the string to generate the hash will be Base Layer.Run.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorStateInfo.normalizedTime">
            <summary>Normalized time of the State.</summary>
            <value>To be added.</value>
            <remarks>The integer part is the number of time a state has been looped. The fractional part is the % (0-1) of progress in the current loop.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorStateInfo.tagHash">
            <summary>The Tag of the State.</summary>
            <value>To be added.</value>
            <remarks>The hash is generated using Animator::StringToHash.</remarks>
        </member>
        <member name="T:UnityEngine.AnimatorTransitionInfo">
            <summary>Information about the current transition.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AnimatorTransitionInfo.IsName(System.String)">
            <param name="name">To be added.</param>
            <summary>Does name match the name of the active Transition.</summary>
            <returns>To be added.</returns>
            <remarks>Format is "CURRENT_STATE -&gt; NEXT_STATE".</remarks>
        </member>
        <member name="M:UnityEngine.AnimatorTransitionInfo.IsUserName(System.String)">
            <param name="name">To be added.</param>
            <summary>Does userName match the name of the active Transition.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorTransitionInfo.nameHash">
            <summary>The unique name of the Transition.</summary>
            <value>To be added.</value>
            <remarks>Format is "CURRENT_STATE -&gt; NEXT_STATE"  The hash is generated using Animator::StringToHash.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorTransitionInfo.normalizedTime">
            <summary>Normalized time of the Transition.</summary>
            <value>To be added.</value>
            <remarks>0.0f to 1.0f.</remarks>
        </member>
        <member name="P:UnityEngine.AnimatorTransitionInfo.userNameHash">
            <summary>The user-specidied name of the Transition.</summary>
            <value>To be added.</value>
            <remarks>The hash is generated using Animator::StringToHash.</remarks>
        </member>
        <member name="T:UnityEngine.AnisotropicFiltering">
            <summary>Anisotropic filtering mode.</summary>
            <remarks>See Also: QualitySettings.anisotropicFiltering.</remarks>
        </member>
        <member name="F:UnityEngine.AnisotropicFiltering.Disable">
            <summary>Disable anisotropic filtering for all textures.</summary>
            <remarks>See Also: QualitySettings.anisotropicFiltering.</remarks>
        </member>
        <member name="F:UnityEngine.AnisotropicFiltering.Enable">
            <summary>Enable anisotropic filtering, as set for each texture.</summary>
            <remarks>See Also: QualitySettings.anisotropicFiltering.</remarks>
        </member>
        <member name="F:UnityEngine.AnisotropicFiltering.ForceEnable">
            <summary>Enable anisotropic filtering for all textures.</summary>
            <remarks>See Also: QualitySettings.anisotropicFiltering.</remarks>
        </member>
        <member name="T:UnityEngine.Application">
            <summary>Access to application run-time data.</summary>
            <remarks>This class contains static methods for looking up information about and controlling the run-time data.</remarks>
        </member>
        <member name="C:UnityEngine.Application">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Application.absoluteUrl">
            <summary>The absolute path to the web player data file (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Application.absoluteURL and Application.srcValue allow you to detect if your unityWeb data file was moved to another location or is being linked to. You might want to protect against both to prevent piracy of your data files.</remarks>
        </member>
        <member name="P:UnityEngine.Application.absoluteURL">
            <summary>The absolute path to the web player data file (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Application.absoluteURL and Application.srcValue allow you to detect if your unityWeb data file was moved to another location or is being linked to. You might want to protect against both to prevent piracy of your data files.</remarks>
        </member>
        <member name="P:UnityEngine.Application.backgroundLoadingPriority">
            <summary>Priority of background loading thread.</summary>
            <value>To be added.</value>
            <remarks>Lets you control how long it takes to load data asynchronously vs. performance impact on the game while loading in the background.See Also: ThreadPriority enum.</remarks>
        </member>
        <member name="M:UnityEngine.Application.CancelQuit">
            <summary>Cancels quitting the application. This is useful for showing a splash screen at the end of a game.</summary>
            <remarks>This function only works in the player and does nothing in the web player or editor. IMPORTANT: This function has no effect on iPhone. Application can not prevent termination under iPhone OS.</remarks>
        </member>
        <member name="M:UnityEngine.Application.CanStreamedLevelBeLoaded(System.Int32)">
            <param name="levelIndex">To be added.</param>
            <summary>Can the streamed level be loaded?Can the streamed level be loaded?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Application.CanStreamedLevelBeLoaded(System.String)">
            <param name="levelName">To be added.</param>
            <summary>Can the streamed level be loaded?Can the streamed level be loaded?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Application.CaptureScreenshot(System.String)">
            <summary>Captures a screenshot at path filename as a PNG file.</summary>
            <remarks>If the file exists already, it will be overwritten. This function does nothing if used from inside the web player. On mobile platforms the filename is appended to the persistent data path. When superSize parameter is larger than 1, a larger resolution screenshot will be produced. For example, passing 4 will make the screenshot be 4x4 larger than it normally would. This is useful to produce screenshots for printing.</remarks>
            <param name="filename">Pathname to save the screenshot file to.</param>
        </member>
        <member name="M:UnityEngine.Application.CaptureScreenshot(System.String,System.Int32)">
            <summary>Captures a screenshot at path filename as a PNG file.</summary>
            <remarks>If the file exists already, it will be overwritten. This function does nothing if used from inside the web player. On mobile platforms the filename is appended to the persistent data path. When superSize parameter is larger than 1, a larger resolution screenshot will be produced. For example, passing 4 will make the screenshot be 4x4 larger than it normally would. This is useful to produce screenshots for printing.</remarks>
            <param name="filename">Pathname to save the screenshot file to.</param>
            <param name="superSize">Factor by which to increase resolution.</param>
        </member>
        <member name="M:UnityEngine.Application.CommitSuicide(System.Int32)">
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Application.dataPath">
            <summary>Contains the path to the game data folder (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The value depends on which platform you are running on: Unity Editor: path to project folder &gt;/Assets Mac player: path to player app bundle &gt;/Contents iPhone player: path to player app bundle &gt;/ AppName.app &gt;/Data Win player: path to executablename_Data folder &gt; Web player: The absolute url to the player data file folder (without the actual data file name) Flash: The absolute url to the player data file folder (without the actual data file name) Note that the string returned on a PC will use a forward slash as a folder separator.</remarks>
        </member>
        <member name="M:UnityEngine.Application.DontDestroyOnLoad(UnityEngine.Object)">
            <param name="mono">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Application.ExternalCall(System.String,System.Object[])">
            <param name="functionName">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Calls a function in the containing web page (Web Player only).</summary>
            <remarks>This will call JavaScript function functionName in the web page that contains the web player, passing given arguments to it. Supported argument types are the primitive types (string, int, float, char) and arrays of them. Any other objects are converted to string (using ToString method) and passed as strings. The function is called non-blocking, i.e. ExternalCall immediately returns without waiting for the function that was called to complete. The number of passed arguments can be varying:The functions to be called are just declared in the HTML page using standard syntax, for example:See Also: Browser to Unity communication, Application.ExternalEval.</remarks>
        </member>
        <member name="M:UnityEngine.Application.ExternalEval(System.String)">
            <param name="script">To be added.</param>
            <summary>Evaluates script snippet in the containing web page (Web Player only).</summary>
            <remarks>This will execute JavaScript snippet script in the web page that contains the web player.See Also: Browser to Unity communication, Application.ExternalCall.</remarks>
        </member>
        <member name="P:UnityEngine.Application.genuine">
            <summary>Returns false if application is altered in any way after it was built.</summary>
            <value>To be added.</value>
            <remarks>Otherwise returns true.</remarks>
        </member>
        <member name="P:UnityEngine.Application.genuineCheckAvailable">
            <summary>Returns true if application integrity can be confirmed.</summary>
            <value>To be added.</value>
            <remarks>Otherwise returns false.</remarks>
        </member>
        <member name="M:UnityEngine.Application.GetStreamProgressForLevel(System.Int32)">
            <param name="levelIndex">To be added.</param>
            <summary>How far has the download progressed? [0...1].How far has the download progressed? [0...1].</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Application.GetStreamProgressForLevel(System.String)">
            <param name="levelName">To be added.</param>
            <summary>How far has the download progressed? [0...1].How far has the download progressed? [0...1].</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Application.HasProLicense">
            <summary>Is Unity activated with the Pro license?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Application.HasUserAuthorization(UnityEngine.UserAuthorization)">
            <param name="mode">To be added.</param>
            <summary>Check if the user has authorized use of the webcam or microphone in the Web Player.</summary>
            <returns>To be added.</returns>
            <remarks>This is used to check the result of a previous call to Application.RequestUserAuthorization. Explicit user consent to use features is only needed in the Web Player. In other build targets, this function will always return true.</remarks>
        </member>
        <member name="P:UnityEngine.Application.internetReachability">
            <summary>Returns the type of Internet reachability currently possible on the device.</summary>
            <value>To be added.</value>
            <remarks>This property is mostly useful on handhelds to distinguish fast and cheap WiFi connection from carrier networking. Note: Do not use this property to determine the actual connectivity. E.g. the device can be connected to a hot spot, but not have the actual route to the network. Non-handhelds are considered to always be capable of NetworkReachability.ReachableViaLocalAreaNetwork.</remarks>
        </member>
        <member name="P:UnityEngine.Application.isEditor">
            <summary>Are we running inside the Unity editor? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if the game is being run from the Unity editor; false if run from any deployment target.</remarks>
        </member>
        <member name="P:UnityEngine.Application.isLoadingLevel">
            <summary>Is some level being loaded? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>LoadLevel and LoadLevelAdditive don't happen immediately - a new level is loaded after the current game frame finishes. isLoadingLevel returns true if a level load was requested this frame already. See Also: LoadLevel, LoadLevelAdditive.</remarks>
        </member>
        <member name="P:UnityEngine.Application.isPlayer">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Application.isPlaying">
            <summary>Returns true when in any kind of player (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Returns true in the Unity editor when in play mode.</remarks>
        </member>
        <member name="P:UnityEngine.Application.isWebPlayer">
            <summary>Are we running inside a web player? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if the game is being run from the Unity web player.</remarks>
        </member>
        <member name="P:UnityEngine.Application.levelCount">
            <summary>The total number of levels available (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Application.loadedLevel">
            <summary>The level index that was last loaded (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Application.loadedLevelName">
            <summary>The name of the level that was last loaded (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Note that this value is set only by Application.LoadLevel and Application.LoadLevelAsync. The Additive versions add content to the current level.</remarks>
        </member>
        <member name="M:UnityEngine.Application.LoadLevel(System.Int32)">
            <summary>Loads the level by its name or index.</summary>
            <remarks>Before you can load a level you have to add it to the list of levels used in the game. Use File-&gt;Build Settings... in Unity and add the levels you need to the level list there. MonoBehaviour.OnLevelWasLoaded is called on all active GameObjects after the level has been loaded.When loading a new level all GameObjects that have been loaded before are destroyed. If you want to let an object survive when loading a new level, use Object.DontDestroyOnLoad. Calling LoadLevel will update Application.loadedLevel and Application.loadedLevelName. See Also: Application.LoadLevelAsync, Application.LoadLevelAdditive, Application.LoadLevelAdditiveAsync.</remarks>
            <param name="index">The level to load.</param>
        </member>
        <member name="M:UnityEngine.Application.LoadLevel(System.String)">
            <summary>Loads the level by its name or index.</summary>
            <remarks>Before you can load a level you have to add it to the list of levels used in the game. Use File-&gt;Build Settings... in Unity and add the levels you need to the level list there. MonoBehaviour.OnLevelWasLoaded is called on all active GameObjects after the level has been loaded.When loading a new level all GameObjects that have been loaded before are destroyed. If you want to let an object survive when loading a new level, use Object.DontDestroyOnLoad. Calling LoadLevel will update Application.loadedLevel and Application.loadedLevelName. See Also: Application.LoadLevelAsync, Application.LoadLevelAdditive, Application.LoadLevelAdditiveAsync.</remarks>
            <param name="name">The name of the level to load.</param>
        </member>
        <member name="M:UnityEngine.Application.LoadLevelAdditive(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Loads a level additively.</summary>
            <remarks>Unlike LoadLevel, LoadLevelAdditive does not destroy objects in the current level. Objects from the new level are added to the current scene. This is useful for creating continuous virtual worlds, where more content is loaded in as you walk through the environment.See Also: AsyncOperation, Application.backgroundLoadingPriority, Application.LoadLevelAdditiveAsync, Application.LoadLevel, Application.LoadLevelAsync.</remarks>
        </member>
        <member name="M:UnityEngine.Application.LoadLevelAdditive(System.String)">
            <param name="name">To be added.</param>
            <summary>Loads a level additively.</summary>
            <remarks>Unlike LoadLevel, LoadLevelAdditive does not destroy objects in the current level. Objects from the new level are added to the current scene. This is useful for creating continuous virtual worlds, where more content is loaded in as you walk through the environment.See Also: AsyncOperation, Application.backgroundLoadingPriority, Application.LoadLevelAdditiveAsync, Application.LoadLevel, Application.LoadLevelAsync.</remarks>
        </member>
        <member name="M:UnityEngine.Application.LoadLevelAdditiveAsync(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Loads the level additively and asynchronously in the background.</summary>
            <returns>To be added.</returns>
            <remarks>Unlike LoadLevelAsync, LoadLevelAdditiveAsync does not destroy objects in the current level. Objects from the new level are added to the current scene. This is useful for creating continuous virtual worlds, where more content is loaded in as you walk through the environment. Unity will completely load all assets and all objects in the scene in a background loading thread. This allows you to create a completely streaming world where you constantly load and unload different parts of the world based on the player position, without any hiccups in game play. isDone variable from the resulting AsyncOperation can be used to query if the level load has completed. The result of a LoadLevelAdditiveAsync can also be used to yield in a coroutine. When building a player Unity automatically optimizes assets in such a way that LoadLevelAdditiveAsync will load them from disk linearly to avoid seek times. Note that background loading performance in the Unity Editor is much lower than in the web player or standalone build. In the Editor you might also get more loading hiccups than in the player. This function requires Unity Pro .See Also: AsyncOperation, Application.backgroundLoadingPriority, Application.LoadLevelAdditive, Application.LoadLevel, Application.LoadLevelAsync.</remarks>
        </member>
        <member name="M:UnityEngine.Application.LoadLevelAdditiveAsync(System.String)">
            <param name="levelName">To be added.</param>
            <summary>Loads the level additively and asynchronously in the background.</summary>
            <returns>To be added.</returns>
            <remarks>Unlike LoadLevelAsync, LoadLevelAdditiveAsync does not destroy objects in the current level. Objects from the new level are added to the current scene. This is useful for creating continuous virtual worlds, where more content is loaded in as you walk through the environment. Unity will completely load all assets and all objects in the scene in a background loading thread. This allows you to create a completely streaming world where you constantly load and unload different parts of the world based on the player position, without any hiccups in game play. isDone variable from the resulting AsyncOperation can be used to query if the level load has completed. The result of a LoadLevelAdditiveAsync can also be used to yield in a coroutine. When building a player Unity automatically optimizes assets in such a way that LoadLevelAdditiveAsync will load them from disk linearly to avoid seek times. Note that background loading performance in the Unity Editor is much lower than in the web player or standalone build. In the Editor you might also get more loading hiccups than in the player. This function requires Unity Pro .See Also: AsyncOperation, Application.backgroundLoadingPriority, Application.LoadLevelAdditive, Application.LoadLevel, Application.LoadLevelAsync.</remarks>
        </member>
        <member name="M:UnityEngine.Application.LoadLevelAsync(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Loads the level asynchronously in the background.</summary>
            <returns>To be added.</returns>
            <remarks>Unity will completely load all assets and all objects in the scene in a background loading thread. This allows you to load new levels while still playing the current one, show a progress bar or create a completely streaming world where you constantly load and unload different parts of the world based on the player position, without any hiccups in game play. isDone variable from the resulting AsyncOperation can be used to query if the level load has completed. The result of a LoadLevelAsync can also be used to yield in a coroutine. When building a player Unity automatically optimizes assets in such a way that LoadLevelAsync will load them from disk linearly to avoid seek times. Note that background loading performance in the Unity Editor is much lower than in the web player or standalone build. In the Editor you might also get more loading hiccups than in the player. This function requires Unity Pro .See Also: AsyncOperation, Application.backgroundLoadingPriority, Application.LoadLevel, Application.LoadLevelAdditive, Application.LoadLevelAdditiveAsync.</remarks>
        </member>
        <member name="M:UnityEngine.Application.LoadLevelAsync(System.String)">
            <param name="levelName">To be added.</param>
            <summary>Loads the level asynchronously in the background.</summary>
            <returns>To be added.</returns>
            <remarks>Unity will completely load all assets and all objects in the scene in a background loading thread. This allows you to load new levels while still playing the current one, show a progress bar or create a completely streaming world where you constantly load and unload different parts of the world based on the player position, without any hiccups in game play. isDone variable from the resulting AsyncOperation can be used to query if the level load has completed. The result of a LoadLevelAsync can also be used to yield in a coroutine. When building a player Unity automatically optimizes assets in such a way that LoadLevelAsync will load them from disk linearly to avoid seek times. Note that background loading performance in the Unity Editor is much lower than in the web player or standalone build. In the Editor you might also get more loading hiccups than in the player. This function requires Unity Pro .See Also: AsyncOperation, Application.backgroundLoadingPriority, Application.LoadLevel, Application.LoadLevelAdditive, Application.LoadLevelAdditiveAsync.</remarks>
        </member>
        <member name="M:UnityEngine.Application.OpenURL(System.String)">
            <param name="url">To be added.</param>
            <summary>Opens the url in a browser.</summary>
            <remarks>In the editor or standalone player this will open a new page in the default browser with the url. It will also bring the browser application to the front. When executed in the web player, the page the plugin is contained in will be redirected to the url.</remarks>
        </member>
        <member name="P:UnityEngine.Application.persistentDataPath">
            <summary>Contains the path to a persistent data directory (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The value is a directory path where data expected to be kept between runs can be stored. When publishing on iOS and Android, persistentDataPath will point to a public directory on the device. Files in this location won't be erased with each update of the App. However, you should bear in mind that this is not foolproof against users' actions. For example, removing the SD Card would make data stored on it inaccessible. Note that when you build the app, a GUID will be generated based on the Bundle Identifier, and this GUID will be part of persistentDataPath. If you keep the same Bundle Identifier in future versions then the app will continue accessing the same location on every update.</remarks>
        </member>
        <member name="P:UnityEngine.Application.platform">
            <summary>Returns the platform the game is running (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Use this property if you absolutely need to do some platform dependent work. See Also: RuntimePlatform.</remarks>
        </member>
        <member name="M:UnityEngine.Application.Quit">
            <summary>Quits the player application. Quit is ignored in the editor or the web player.</summary>
            <remarks>IMPORTANT: In most cases termination of application under iOS should be left at the user discretion. Consult Apple's Technical Q&amp;A qa1561 page for further details: http://developer.apple.com iphone library qa qa2008/qa1561.html.</remarks>
        </member>
        <member name="M:UnityEngine.Application.RegisterLogCallback(UnityEngine.Application+LogCallback)">
            <param name="handler">To be added.</param>
            <summary>Register a delegate to be called on log messages.</summary>
            <remarks>Pass null to remove log handler.See Also: Application.LogCallback, LogType.</remarks>
        </member>
        <member name="M:UnityEngine.Application.RegisterLogCallbackThreaded(UnityEngine.Application+LogCallback)">
            <param name="handler">To be added.</param>
            <summary>Register a delegate to be called on log messages.</summary>
            <remarks>The only difference between this function and RegisterLogCallback is that this function gets called from a different thread. Note: You should *only* use this function if you know what you are doing, else just use Application.RegisterLogCallback. See Also: Application.LogCallback, Application.RegisterLogCallback, LogType.</remarks>
        </member>
        <member name="M:UnityEngine.Application.RequestUserAuthorization(UnityEngine.UserAuthorization)">
            <param name="mode">To be added.</param>
            <summary>Request authorization to use the webcam or microphone in the Web Player.</summary>
            <returns>To be added.</returns>
            <remarks>For security reasons (to avoid implementing a web player spying on users), we require you to have the user explicitly allow these features in the web player. To do so, you need to call Application.RequestUserAuthorization, which shows a dialog box to the user, and wait for operation to complete before being able to use these features. Use Application.HasUserAuthorization to query the result of the operation.</remarks>
        </member>
        <member name="P:UnityEngine.Application.runInBackground">
            <summary>Should the player be running when the application is in the background?</summary>
            <value>To be added.</value>
            <remarks>Default is false (application pauses when it is in background).</remarks>
        </member>
        <member name="P:UnityEngine.Application.srcValue">
            <summary>The path to the web player data file relative to the html file (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Actually this is whatever path is written in the html file as a src parameter to object and embed tags. So if it's the absolute URL, srcValue will have the absolute path. Application.absoluteURL and Application.srcValue allow you to detect if your unityWeb data file was moved to another location or is being linked to. You might want to protect against both to prevent piracy of your data files.</remarks>
        </member>
        <member name="P:UnityEngine.Application.streamedBytes">
            <summary>How many bytes have we downloaded from the main unity web stream (Read Only).</summary>
            <value>To be added.</value>
            <remarks>In the webplayer this returns the number of compressed bytes downloaded so far. In standalone player or the editor this always returns zero. See Also: GetStreamProgressForLevel function.</remarks>
        </member>
        <member name="P:UnityEngine.Application.streamingAssetsPath">
            <summary>Contains the path to the StreamingAssets folder (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If you have a "StreamingAssets" folder in the Assets folder of your project, it will be copied to your player builds and be present in the path given by Application.streamingAssetsPath. Note that on some platforms it is not possible to directly access the StreamingAssets folder because there is no file system access in the web platforms, and because it is compressed into the .apk file on Android. On those platforms, a url will be returned, which can be used using the WWW class.</remarks>
        </member>
        <member name="P:UnityEngine.Application.systemLanguage">
            <summary>The language the user's operating system is running in.</summary>
            <value>To be added.</value>
            <remarks>You can use this to automatically pick a localization for your content based on the user's system language.</remarks>
        </member>
        <member name="P:UnityEngine.Application.targetFrameRate">
            <summary>Instructs game to try to render at a specified frame rate.</summary>
            <value>To be added.</value>
            <remarks>Setting targetFrameRate to -1 (the default) makes standalone games render as fast as they can, and web player games to render at 50-60 frames/second depending on the platform. Note that setting targetFrameRate does not guarantee that frame rate. There can be fluctuations due to platform specifics, or the game might not achieve the frame rate because the computer is too slow. If vsync is set in quality setting, the target framerate is ignored, and the vblank interval is used instead. The vBlankCount property on qualitysettings can be used to limit the framerate to half of the screens refresh rate (60 fps screen can be limited to 30 fps by setting vBlankCount to 2) targetFrameRate is ignored in the editor.</remarks>
        </member>
        <member name="P:UnityEngine.Application.temporaryCachePath">
            <summary>Contains the path to a temporary data / cache directory (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The value is a directory path where temporary data can be stored.</remarks>
        </member>
        <member name="P:UnityEngine.Application.unityVersion">
            <summary>The version of the Unity runtime used to play the content.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Application.webSecurityEnabled">
            <summary>Indicates whether Unity's webplayer security model is enabled.</summary>
            <value>To be added.</value>
            <remarks>In the web player, this will always return true. In the Unity editor, it will return true if web security emulation is enabled (Menu-&gt;Edit-&gt;Project Settings-&gt;Editor) and false if the emulation is disabled. On all other platforms, this will return false; This property can only be read.</remarks>
        </member>
        <member name="P:UnityEngine.Application.webSecurityHostUrl">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Application+LogCallback">
            <param name="condition">To be added.</param>
            <param name="stackTrace">To be added.</param>
            <param name="type">To be added.</param>
            <summary>Use this delegate type with RegisterLogCallback to monitor what gets logged.</summary>
            <remarks>See Also: Application.RegisterLogCallback, LogType.</remarks>
        </member>
        <member name="T:UnityEngine.AssetBundle">
            <summary>AssetBundles let you stream additional assets via the WWW class and instantiate them at runtime. AssetBundles are created via BuildPipeline.BuildAssetBundle.</summary>
            <remarks>Note that bundles are not fully compatible between platforms. A bundle built for any of the standalone platforms (including webplayer) can be loaded on any of those platforms but not on iOS or Android. Furthermore, a bundle built for iOS is not compatible with Android and vice versa. See Also: WWW.assetBundle, Loading Resources at Runtime, BuildPipeline.BuildAssetBundle.</remarks>
        </member>
        <member name="C:UnityEngine.AssetBundle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.Contains(System.String)">
            <param name="name">To be added.</param>
            <summary>Check if an AssetBundle contains a specific object.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if an object referred to by name is contained in the AssetBundle, false otherwise.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.CreateFromFile(System.String)">
            <summary>Loads an asset bundle from a disk.</summary>
            <returns>To be added.</returns>
            <remarks>Only uncompressed asset bundles are supported by this function. This is the fastest way to load an asset bundle.</remarks>
            <param name="path">Path of the file on disk See Also: WWW.assetBundle, WWW.LoadFromCacheOrDownload.</param>
        </member>
        <member name="M:UnityEngine.AssetBundle.CreateFromMemory(System.Byte[])">
            <param name="binary">To be added.</param>
            <summary>Asynchronously create an AssetBundle from a memory region.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: AssetBundleCreateRequest.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.Load(System.String)">
            <param name="name">To be added.</param>
            <summary>Loads object with name from the bundle.Loads object with name of a given type from the bundle.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.Load(System.String,System.Type)">
            <param name="name">To be added.</param>
            <param name="type">To be added.</param>
            <summary>Loads object with name from the bundle.Loads object with name of a given type from the bundle.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.LoadAll">
            <summary>Loads all objects contained in the asset bundle that inherit from type.Loads all objects contained in the asset bundle.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.LoadAll(System.Type)">
            <param name="type">To be added.</param>
            <summary>Loads all objects contained in the asset bundle that inherit from type.Loads all objects contained in the asset bundle.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.LoadAsync(System.String,System.Type)">
            <param name="name">To be added.</param>
            <param name="type">To be added.</param>
            <summary>Asynchronously loads object with name of a given type from the bundle.</summary>
            <returns>To be added.</returns>
            <remarks>Asynchronous loading requires Unity Pro. See Also: AssetBundleRequest.</remarks>
        </member>
        <member name="P:UnityEngine.AssetBundle.mainAsset">
            <summary>Main asset that was supplied when building the asset bundle (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is a convenience function that makes it easy to find the primary asset of a bundle. For example you might want to have a prefab of a character and include all textures, materials, meshes and animations files with it. But the fully rigged prefab of the character would be your mainAsset and can easily be accessed.</remarks>
        </member>
        <member name="M:UnityEngine.AssetBundle.Unload(System.Boolean)">
            <param name="unloadAllLoadedObjects">To be added.</param>
            <summary>Unloads all assets in the bundle.</summary>
            <remarks>Unload frees all the memory associated with the objects inside the bundle. When unloadAllLoadedObjects is false, compressed file data for assets inside the bundle will be unloaded, but any actual objects already loaded from this bundle will be kept intact. Of course you won't be able to load any more objects from this bundle. When unloadAllLoadedObjects is true, all objects that were loaded from this bundle will be destroyed as well. If there are GameObjects in your scene referencing those assets, the references to them will become missing.</remarks>
        </member>
        <member name="T:UnityEngine.AssetBundleCreateRequest">
            <summary>Asynchronous create request for an AssetBundle.</summary>
            <remarks>See Also: AssetBundle.CreateFromMemory, AsyncOperation.</remarks>
        </member>
        <member name="C:UnityEngine.AssetBundleCreateRequest">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AssetBundleCreateRequest.assetBundle">
            <summary>Asset object being loaded (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Note that accessing asset before isDone is true will stall the loading process.</remarks>
        </member>
        <member name="T:UnityEngine.AssetBundleRequest">
            <summary>Asynchronous load request from an AssetBundle.</summary>
            <remarks>See Also: AssetBundle.LoadAsync, AsyncOperation.</remarks>
        </member>
        <member name="C:UnityEngine.AssetBundleRequest">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AssetBundleRequest.asset">
            <summary>Asset object being loaded (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Note that accessing asset before isDone is true will stall the loading process.</remarks>
        </member>
        <member name="T:UnityEngine.AsyncOperation">
            <summary>Asynchronous operation coroutine.</summary>
            <remarks>You can yield until asynchronous operation continues, or manually check whether it's done ( isDone ) or progress ( progress ). See Also: Application.LoadLevelAsync, Application.LoadLevelAdditiveAsync, AssetBundle.LoadAsync.</remarks>
        </member>
        <member name="C:UnityEngine.AsyncOperation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AsyncOperation.allowSceneActivation">
            <summary>Allow scenes to be activated as soon as it is ready.</summary>
            <value>To be added.</value>
            <remarks>When used in combination with LoadLevelAsync &amp; LoadLevelAsyncAdditive it allows you to delay the actual activation of the scene. (And unloading of the previous scene).</remarks>
        </member>
        <member name="M:UnityEngine.AsyncOperation.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AsyncOperation.isDone">
            <summary>Has the operation finished? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: progress.</remarks>
        </member>
        <member name="P:UnityEngine.AsyncOperation.priority">
            <summary>Priority lets you tweak in which order async operation calls will be performed.</summary>
            <value>To be added.</value>
            <remarks>When multiple asynchronous operations are queued up, the operation with the higher priority will be executed first. Once an operation has been started on the background thread, changing the priority will have no effect anymore.</remarks>
        </member>
        <member name="P:UnityEngine.AsyncOperation.progress">
            <summary>What's the operation's progress. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: isDone.</remarks>
        </member>
        <member name="T:UnityEngine.AudioChorusFilter">
            <summary>The Audio Chorus Filter takes an Audio Clip and processes it creating a chorus effect.</summary>
            <remarks>The chorus effect modulates the original sound by a sinusoid low frequency oscillator (LFO). The output sounds like there are multiple sources emitting the same sound with slight variations - resembling a choir. Note: This filter is only available on the PRO version.</remarks>
        </member>
        <member name="C:UnityEngine.AudioChorusFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.delay">
            <summary>Chorus delay in ms. 0.1 to 100.0. Default = 40.0 ms.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.depth">
            <summary>Chorus modulation depth. 0.0 to 1.0. Default = 0.03.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.dryMix">
            <summary>Volume of original signal to pass to output. 0.0 to 1.0. Default = 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.feedback">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.rate">
            <summary>Chorus modulation rate in hz. 0.0 to 20.0. Default = 0.8 hz.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.wetMix1">
            <summary>Volume of 1st chorus tap. 0.0 to 1.0. Default = 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.wetMix2">
            <summary>Volume of 2nd chorus tap. This tap is 90 degrees out of phase of the first tap. 0.0 to 1.0. Default = 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioChorusFilter.wetMix3">
            <summary>Volume of 3rd chorus tap. This tap is 90 degrees out of phase of the second tap. 0.0 to 1.0. Default = 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioClip">
            <summary>A container for audio data.</summary>
            <remarks>An AudioClip stores the audio file either compressed as ogg vorbis or uncompressed. AudioClips are referenced and used by AudioSources to play sounds. See Also: AudioClip component in the Components Reference.</remarks>
        </member>
        <member name="C:UnityEngine.AudioClip">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioClip.channels">
            <summary>Channels in audio clip. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <param name="name">To be added.</param>
            <param name="lengthSamples">To be added.</param>
            <param name="channels">To be added.</param>
            <param name="frequency">To be added.</param>
            <param name="_3D">To be added.</param>
            <param name="stream">To be added.</param>
            <summary>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</summary>
            <returns>To be added.</returns>
            <remarks>Set your own audio data with SetData. Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position. If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</remarks>
        </member>
        <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,UnityEngine.AudioClip+PCMReaderCallback)">
            <param name="name">To be added.</param>
            <param name="lengthSamples">To be added.</param>
            <param name="channels">To be added.</param>
            <param name="frequency">To be added.</param>
            <param name="_3D">To be added.</param>
            <param name="stream">To be added.</param>
            <param name="pcmreadercallback">To be added.</param>
            <summary>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</summary>
            <returns>To be added.</returns>
            <remarks>Set your own audio data with SetData. Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position. If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</remarks>
        </member>
        <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,UnityEngine.AudioClip+PCMReaderCallback,UnityEngine.AudioClip+PCMSetPositionCallback)">
            <param name="name">To be added.</param>
            <param name="lengthSamples">To be added.</param>
            <param name="channels">To be added.</param>
            <param name="frequency">To be added.</param>
            <param name="_3D">To be added.</param>
            <param name="stream">To be added.</param>
            <param name="pcmreadercallback">To be added.</param>
            <param name="pcmsetpositioncallback">To be added.</param>
            <summary>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</summary>
            <returns>To be added.</returns>
            <remarks>Set your own audio data with SetData. Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position. If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</remarks>
        </member>
        <member name="P:UnityEngine.AudioClip.frequency">
            <summary>Sample frequency. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioClip.GetData(System.Single[],System.Int32)">
            <param name="data">To be added.</param>
            <param name="offsetSamples">To be added.</param>
            <summary>Fills an array with sample data from the clip. The samples are floats ranging from -1.0f to 1.0f. The sample count is determined by the length of the float array.</summary>
            <remarks>Use offsetSamples to start the read from a random position in the clip. If the read length from the offset is longer than the clip length, the read will wrap around and read the remaining samples from the start of the clip.</remarks>
        </member>
        <member name="P:UnityEngine.AudioClip.isReadyToPlay">
            <summary>Is a streamed audio clip ready to play? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>If the AudioClip is downloading from a web site, this returns if enough data has been downloaded so playback should be able to start without interruptions. For AudioClips not associated with a web stream, this value always returns true.</remarks>
        </member>
        <member name="P:UnityEngine.AudioClip.length">
            <summary>The length of the audio clip in seconds. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioClip.samples">
            <summary>The length of the audio clip in samples. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioClip.SetData(System.Single[],System.Int32)">
            <param name="data">To be added.</param>
            <param name="offsetSamples">To be added.</param>
            <summary>Set sample data in a clip. The samples should be floats ranging from 0.0f to 1.0f (exceeding these limits will lead to artifacts and undefined behaviour).</summary>
            <remarks>The sample count is determined by the length of the float array. Use offsetSamples to write into a random position in the clip. If the length from the offset is longer than the clip length, the write will wrap around and write the remaining samples from the start of the clip.</remarks>
        </member>
        <member name="T:UnityEngine.AudioClip+PCMReaderCallback">
            <summary>Delegate called each time AudioClip reads data.</summary>
            <remarks>See Also: AudioClip.Create.</remarks>
            <param name="data">Array of floats containing data read from the clip.</param>
        </member>
        <member name="T:UnityEngine.AudioClip+PCMSetPositionCallback">
            <summary>Delegate called each time AudioClip changes read position.</summary>
            <remarks>See Also: AudioClip.Create.</remarks>
            <param name="position">New position in the audio clip.</param>
        </member>
        <member name="T:UnityEngine.AudioDistortionFilter">
            <summary>The Audio Distortion Filter distorts the sound from an AudioSource or.</summary>
            <remarks>Sounds reaching the AudioListener. Note: This filter is only available on the PRO version.</remarks>
        </member>
        <member name="C:UnityEngine.AudioDistortionFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioDistortionFilter.distortionLevel">
            <summary>Distortion value. 0.0 to 1.0. Default = 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioEchoFilter">
            <summary>The Audio Echo Filter repeats a sound after a given Delay, attenuating.</summary>
            <remarks>The repetitions based on the Decay Ratio. Note: This filter is only available on the PRO version.</remarks>
        </member>
        <member name="C:UnityEngine.AudioEchoFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioEchoFilter.decayRatio">
            <summary>Echo decay per delay. 0 to 1. 1.0 = No decay, 0.0 = total decay (i.e. simple 1 line delay). Default = 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioEchoFilter.delay">
            <summary>Echo delay in ms. 10 to 5000. Default = 500.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioEchoFilter.dryMix">
            <summary>Volume of original signal to pass to output. 0.0 to 1.0. Default = 1.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioEchoFilter.wetMix">
            <summary>Volume of echo signal to pass to output. 0.0 to 1.0. Default = 1.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioHighPassFilter">
            <summary>The Audio High Pass Filter passes high frequencies of an AudioSource and.</summary>
            <remarks>Attenuates signals with frequencies lower than the Cutoff Frequency. Note: This filter is only available on the PRO version.</remarks>
        </member>
        <member name="C:UnityEngine.AudioHighPassFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioHighPassFilter.cutoffFrequency">
            <summary>Highpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioHighPassFilter.highpassResonaceQ">
            <summary>Determines how much the filter's self-resonance isdampened.</summary>
            <value>To be added.</value>
            <remarks>Higher Highpass resonance Q indicates a lower rate of energy loss i.e. the oscillations die out more slowly. Highpass resonance Q value goes from 1.0 to 10.0. Default = 1.0.</remarks>
        </member>
        <member name="T:UnityEngine.AudioListener">
            <summary>Representation of a listener in 3D space.</summary>
            <remarks>This class implements a microphone-like device. It records the sounds around it and plays that through the player's speakers. You can only have one listener in a scene. See Also: AudioSource, AudioListener component in the Components Reference.</remarks>
        </member>
        <member name="C:UnityEngine.AudioListener">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioListener.GetOutputData(System.Int32,System.Int32)">
            <param name="numSamples">To be added.</param>
            <param name="channel">To be added.</param>
            <summary>Returns a block of the listener (master)'s output data.Returns a block of the listener (master)'s output data.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioListener.GetOutputData(System.Single[],System.Int32)">
            <param name="samples">To be added.</param>
            <param name="channel">To be added.</param>
            <summary>Returns a block of the listener (master)'s output data.Returns a block of the listener (master)'s output data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioListener.GetSpectrumData(System.Int32,System.Int32,UnityEngine.FFTWindow)">
            <param name="numSamples">To be added.</param>
            <param name="channel">To be added.</param>
            <param name="window">To be added.</param>
            <summary>Returns a block of the listener (master)'s spectrum data.Returns a block of the listener (master)'s spectrum data.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioListener.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
            <param name="samples">To be added.</param>
            <param name="channel">To be added.</param>
            <param name="window">To be added.</param>
            <summary>Returns a block of the listener (master)'s spectrum data.Returns a block of the listener (master)'s spectrum data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioListener.pause">
            <summary>The paused state of the audio system.</summary>
            <value>To be added.</value>
            <remarks>If set to true, all AudioSources playing will be paused. This works in the same way as pausing the game in the editor. While the pause-state is true, the AudioSettings.dspTime will be frozen and further AudioSource play requests will start off paused. If you want certain sounds to still play during the pause, you need to set the ignoreListenerPause property on the AudioSource to true for these. This is typically menu item sounds or background music for the menu. Any scheduled play requests will be frozen in time, so that if you scheduled a sound to play after 3 seconds and paused the audio system 1 second after this, the scheduled sounds will start playing 2 seconds after unpausing.</remarks>
        </member>
        <member name="P:UnityEngine.AudioListener.velocityUpdateMode">
            <summary>This lets you set whether the Audio Listener should be updated in the fixed or dynamic update.</summary>
            <value>To be added.</value>
            <remarks>Make sure this is set to update in the same update loop as the Audio Listener is moved in if you are experiencing problems with Doppler effect simulation. The default setting will automatically set the listener to be updated in the fixed update loop if it is attached to a rigidbody, and dynamic otherwise.</remarks>
        </member>
        <member name="P:UnityEngine.AudioListener.volume">
            <summary>Controls the game sound volume (0.0 to 1.0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioLowPassFilter">
            <summary>The Audio Low Pass Filter filter passes low frequencies of an.</summary>
            <remarks>AudioSource, or all sound reaching an AudioListener, and attenuates frequencies higher than the Cutoff Frequency. Note: This filter is only available on the PRO.</remarks>
        </member>
        <member name="C:UnityEngine.AudioLowPassFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioLowPassFilter.cutoffFrequency">
            <summary>Lowpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioLowPassFilter.lowpassResonaceQ">
            <summary>Determines how much the filter's self-resonance is dampened.</summary>
            <value>To be added.</value>
            <remarks>Higher Lowpass Resonance Q indicates a lower rate of energy loss i.e. the oscillations die out more slowly. Lowpass resonance Q value goes from 1.0 to 10.0. Default = 1.0.</remarks>
        </member>
        <member name="T:UnityEngine.AudioReverbFilter">
            <summary>The Audio Reverb Filter takes an Audio Clip and distortionates it in a.</summary>
            <remarks>Way to create a personalized reverb effect. Note: This filter is only available in the PRO version.</remarks>
        </member>
        <member name="C:UnityEngine.AudioReverbFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.decayHFRatio">
            <summary>Decay HF Ratio : High-frequency to low-frequency decay time ratio. Ranges from 0.1 to 2.0. Default is 0.5.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.decayTime">
            <summary>Reverberation decay time at low-frequencies in seconds. Ranges from 0.1 to 20.0. Default is 1.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.density">
            <summary>Reverberation density (modal density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.diffusion">
            <summary>Reverberation diffusion (echo density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.dryLevel">
            <summary>Mix level of dry signal in output in mB. Ranges from -10000.0 to 0.0. Default is 0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.hfReference">
            <summary>Reference high frequency in Hz. Ranges from 20.0 to 20000.0. Default is 5000.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.lFReference">
            <summary>Reference low-frequency in Hz. Ranges from 20.0 to 1000.0. Default is 250.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.reflectionsDelay">
            <summary>Late reverberation level relative to room effect in mB. Ranges from -10000.0 to 2000.0. Default is 0.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.reflectionsLevel">
            <summary>Early reflections level relative to room effect in mB. Ranges from -10000.0 to 1000.0. Default is -10000.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.reverbDelay">
            <summary>Late reverberation delay time relative to first reflection in seconds. Ranges from 0.0 to 0.1. Default is 0.04.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.reverbLevel">
            <summary>Late reverberation level relative to room effect in mB. Ranges from -10000.0 to 2000.0. Default is 0.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.reverbPreset">
            <summary>Set/Get reverb preset properties.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.room">
            <summary>Room effect level at low frequencies in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.roomHF">
            <summary>Room effect high-frequency level re. low frequency level in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.roomLF">
            <summary>Room effect low-frequency level in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbFilter.roomRolloff">
            <summary>Rolloff factor for room effect. Ranges from 0.0 to 10.0. Default is 10.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioReverbPreset">
            <summary>Reverb presets used by the Reverb Zone class and the audio reverb filter.</summary>
            <remarks>Component for audio sources.</remarks>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Alley">
            <summary>Alley preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Arena">
            <summary>Arena preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Auditorium">
            <summary>Auditorium preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Bathroom">
            <summary>Bathroom preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.CarpetedHallway">
            <summary>Carpeted hallway preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Cave">
            <summary>Cave preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.City">
            <summary>City preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Concerthall">
            <summary>Concert hall preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Dizzy">
            <summary>Dizzy preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Drugged">
            <summary>Drugged preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Forest">
            <summary>Forest preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Generic">
            <summary>Generic preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Hallway">
            <summary>Hallway preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Hangar">
            <summary>Hangar preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Livingroom">
            <summary>Livingroom preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Mountains">
            <summary>Mountains preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Off">
            <summary>No reverb preset selected.</summary>
            <remarks>All the values are disabled and the sound is the default without any modifications.</remarks>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.PaddedCell">
            <summary>Padded cell preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.ParkingLot">
            <summary>Parking Lot preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Plain">
            <summary>Plain preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Psychotic">
            <summary>Psychotic preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Quarry">
            <summary>Quarry preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Room">
            <summary>Room preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.SewerPipe">
            <summary>Sewer pipe preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.StoneCorridor">
            <summary>Stone corridor preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Stoneroom">
            <summary>Stoneroom preset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.Underwater">
            <summary>Underwater presset.</summary>
        </member>
        <member name="F:UnityEngine.AudioReverbPreset.User">
            <summary>User defined preset.</summary>
            <remarks>Select this preset if you want to change manually the values of your preset.</remarks>
        </member>
        <member name="T:UnityEngine.AudioReverbZone">
            <summary>Reverb Zones are used when you want to create location based ambient effects in the scene.</summary>
            <remarks>As the Audio Listener moves into a Reverb Zone, the ambient effect associated with the zone is gradually applied. At the max distance there is no effect and at the min distance the effect is fully applied. For example you can gradually change your character's footsteps sounds and create the feeling like you where entering into a cavern, going trough a room, swimming underwater, etc. You can always mix reverb zones to have combined effects. For more info check Reverb Zones in the manual.</remarks>
        </member>
        <member name="C:UnityEngine.AudioReverbZone">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.decayHFRatio">
            <summary>High-frequency to mid-frequency decay time ratio.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.decayTime">
            <summary>Reverberation decay time at mid frequencies.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.density">
            <summary>Value that controls the modal density in the late reverberation decay.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.diffusion">
            <summary>Value that controls the echo density in the late reverberation decay.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.HFReference">
            <summary>Reference high frequency (hz).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.LFReference">
            <summary>Reference low frequency (hz).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.maxDistance">
            <summary>The distance from the centerpoint that the reverb will not have any effect. Default = 15.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.minDistance">
            <summary>The distance from the centerpoint that the reverb will have full effect at. Default = 10.0.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.reflections">
            <summary>Early reflections level relative to room effect.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.reflectionsDelay">
            <summary>Initial reflection delay time.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.reverb">
            <summary>Late reverberation level relative to room effect.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.reverbDelay">
            <summary>Late reverberation delay time relative to initial reflection.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.reverbPreset">
            <summary>Set/Get reverb preset properties.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.room">
            <summary>Room effect level (at mid frequencies).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.roomHF">
            <summary>Relative room effect level at high frequencies.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.roomLF">
            <summary>Relative room effect level at low frequencies.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioReverbZone.roomRolloffFactor">
            <summary>Like rolloffscale in global settings, but for reverb room size effect.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioRolloffMode">
            <summary>Rolloff modes that a 3D sound can have in an audio source.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AudioRolloffMode.Custom">
            <summary>Use this when you want to use a custom rolloff.</summary>
            <remarks>Note: Currently is not possible to modify the volume curve via scripting.</remarks>
        </member>
        <member name="F:UnityEngine.AudioRolloffMode.Linear">
            <summary>Use this mode when you want to lower the volume of your sound over the distance.</summary>
        </member>
        <member name="F:UnityEngine.AudioRolloffMode.Logarithmic">
            <summary>Use this mode when you want a real-world rolloff.</summary>
        </member>
        <member name="T:UnityEngine.AudioSettings">
            <summary>Controls the global audio settings from script.</summary>
            <remarks>Setup speaker output and format.</remarks>
        </member>
        <member name="C:UnityEngine.AudioSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSettings.driverCaps">
            <summary>Returns the speaker mode capability of the current audio driver. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSettings.dspTime">
            <summary>Returns the current time of the audio system.</summary>
            <value>To be added.</value>
            <remarks>This is a value specified in seconds and based on the actual number of samples the audio system processes and is therefore much more precise than the time obtained via the Time.time property.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSettings.GetDSPBufferSize(System.Int32@,System.Int32@)">
            <summary>Get or set the mixer's buffer size in samples.</summary>
            <remarks>Note that setting a new buffersize will reset the audio system (all audio will stop). For mobiles (iOS devices and Android) the is also settable from the menu 'Audio Settings-&gt;Mobile DSP Buffer size'. The software mixer mixes to a ringbuffer. The size of this ringbuffer is determined here. It mixes a block of sound data every 'bufferlength' number of samples, and there are 'numbuffers' number of these blocks that make up the entire ringbuffer. Adjusting these values can lead to extremely low latency performance (smaller values), or greater stability in sound output (larger values). Warning! The 'buffersize' is generally best left alone. Making the granularity smaller will just increase CPU usage (cache misses and DSP network overhead). Making it larger affects how often you hear commands update such as volume pitch pan changes. Anything above 20ms will be noticable and sound parameter changes will be obvious instead of smooth. Unity chooses the most optimal size by default for best stability, depending on the output type, and if the drivers are emulated or not (for example DirectSound is emulated using waveOut on NT). It is not recommended changing this value unless you really need to. You may get worse performance than the default settings chosen by Unity.</remarks>
            <param name="bufferLength">Is the length of each buffer in the ringbuffer.</param>
            <param name="numBuffers">Is number of buffers.</param>
        </member>
        <member name="P:UnityEngine.AudioSettings.outputSampleRate">
            <summary>Get and set the mixer's current output rate.</summary>
            <value>To be added.</value>
            <remarks>Note that setting a new samplerate will reset the audio system (all audio will stop).</remarks>
        </member>
        <member name="M:UnityEngine.AudioSettings.SetDSPBufferSize(System.Int32,System.Int32)">
            <summary>Get or set the mixer's buffer size in samples.</summary>
            <remarks>Note that setting a new buffersize will reset the audio system (all audio will stop). For mobiles (iOS devices and Android) the is also settable from the menu 'Audio Settings-&gt;Mobile DSP Buffer size'. The software mixer mixes to a ringbuffer. The size of this ringbuffer is determined here. It mixes a block of sound data every 'bufferlength' number of samples, and there are 'numbuffers' number of these blocks that make up the entire ringbuffer. Adjusting these values can lead to extremely low latency performance (smaller values), or greater stability in sound output (larger values). Warning! The 'buffersize' is generally best left alone. Making the granularity smaller will just increase CPU usage (cache misses and DSP network overhead). Making it larger affects how often you hear commands update such as volume pitch pan changes. Anything above 20ms will be noticable and sound parameter changes will be obvious instead of smooth. Unity chooses the most optimal size by default for best stability, depending on the output type, and if the drivers are emulated or not (for example DirectSound is emulated using waveOut on NT). It is not recommended changing this value unless you really need to. You may get worse performance than the default settings chosen by Unity.</remarks>
            <param name="bufferLength">Is the length of each buffer in the ringbuffer.</param>
            <param name="numBuffers">Is number of buffers.</param>
        </member>
        <member name="P:UnityEngine.AudioSettings.speakerMode">
            <summary>Sets or gets the current speaker mode. Default is 2 channel stereo.</summary>
            <value>To be added.</value>
            <remarks>Be aware that the audio system is restarted when a new speaker mode is set. This means that playback on all AudioSources is stopped; any sounds that should be continuous (such as music) will need to be started again after the speaker mode is changed. If a speaker mode is set beyond the drivers capability, the audio behaviour is undefined. Use AudioSettings.driverCaps to get the capabilities of the current driver.</remarks>
        </member>
        <member name="T:UnityEngine.AudioSource">
            <summary>A representation of audio sources in 3D.</summary>
            <remarks>An AudioSource is attached to a GameObject for playing back sounds in a 3D environment. In order to play 3D sounds you also need to have a AudioListener. The audio listener is normally attached to the camera you want to use. Whether sounds are played in 3D or 2D is determined by AudioImporter settings. You can play a single audio clip using Play, Pause and Stop. You can also adjust its volume while playing using the volume property, or seek using time. Multiple sounds can be played on one AudioSource using PlayOneShot. You can play a clip at a static position in 3D space using PlayClipAtPoint. See Also: AudioListener, AudioClip, AudioSource component.</remarks>
        </member>
        <member name="C:UnityEngine.AudioSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.bypassEffects">
            <summary>Bypass effects (Applied from filter components or global listener filters).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.bypassListenerEffects">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.bypassReverbZones">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.clip">
            <summary>The default AudioClip to play.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.dopplerLevel">
            <summary>Sets the Doppler scale for this AudioSource.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.GetOutputData(System.Int32,System.Int32)">
            <param name="numSamples">To be added.</param>
            <param name="channel">To be added.</param>
            <summary>Returns a block of the currently playing source's output data.Returns a block of the currently playing source's output data.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.GetOutputData(System.Single[],System.Int32)">
            <param name="samples">To be added.</param>
            <param name="channel">To be added.</param>
            <summary>Returns a block of the currently playing source's output data.Returns a block of the currently playing source's output data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.GetSpectrumData(System.Int32,System.Int32,UnityEngine.FFTWindow)">
            <param name="numSamples">To be added.</param>
            <param name="channel">To be added.</param>
            <param name="window">To be added.</param>
            <summary>Returns a block of the currently playing source's spectrum data.Returns a block of the currently playing source's spectrum data.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
            <param name="samples">To be added.</param>
            <param name="channel">To be added.</param>
            <param name="window">To be added.</param>
            <summary>Returns a block of the currently playing source's spectrum data.Returns a block of the currently playing source's spectrum data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.ignoreListenerPause">
            <summary>Allows AudioSource to play even though AudioListener.pause is set to true. This is useful for the menu element sounds or background music in pause menus.</summary>
            <value>To be added.</value>
            <remarks>This property can only be set via the script and is not serialized.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.ignoreListenerVolume">
            <summary>This makes the audio source not take into account the volume of the audio listener.</summary>
            <value>To be added.</value>
            <remarks>Enable this when playing back music. When playing back music you want a separate setting which is unaffected by the normal sound effects volume.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.isPlaying">
            <summary>Is the clip playing right now (Read Only)?</summary>
            <value>To be added.</value>
            <remarks>Note: AudioSource.isPlaying will return false when AudioSource.Pause() is called. When you use AudioSource.Play() again back, it will return true.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.loop">
            <summary>Is the audio clip looping?</summary>
            <value>To be added.</value>
            <remarks>If you disable looping on a playing AudioSource the sound will stop after the end of the current loop.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.maxDistance">
            <summary>(Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.</summary>
            <value>To be added.</value>
            <remarks>(Linear rolloff) MaxDistance is the distance where the sound is completely inaudible.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.maxVolume">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.minDistance">
            <summary>Within the Min distance the AudioSource will cease to grow louder in volume.</summary>
            <value>To be added.</value>
            <remarks>Outside the min distance the volume starts to attenuate.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.minVolume">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.mute">
            <summary>Un- / Mutes the AudioSource. Mute sets the volume=0, Un-Mute restore the original volume.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.pan">
            <summary>Sets a channels pan position linearly. Only works for 2D clips.</summary>
            <value>To be added.</value>
            <remarks>-1.0 to 1.0. -1.0 is full left. 0.0 is center. 1.0 is full right. Only sounds that are mono or stereo can be panned. Multichannel sounds (ie &gt;2 channels) cannot be panned.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.panLevel">
            <summary>Sets how much the 3d engine has an effect on the channel.</summary>
            <value>To be added.</value>
            <remarks>Useful for morphing an AudioSource from 3D(1.0f) to 2D(0.0f).</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.Pause">
            <summary>Pauses playing the clip.</summary>
            <remarks>See Also: Play, Stop functions.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.pitch">
            <summary>The pitch of the audio source.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.Play">
            <summary>Plays the clip with an optional certain delay.</summary>
            <remarks>The delay parameter is deprecated, please use the newer PlayDelayed function instead which specifies the delay in seconds. Note: To obtain sample accuracy with an AudioClip with a different samplerate (than 44.1 khz) you have to do the math yourselves. Delaying an audiosource with an attached AudioClip with samplerate of, say, 32 khz, with 16k samples(.5 sec) is done by Play(22050). ((44100/32000) * 16000 = 22050). Note: The AudioSource.PlayScheduled API will give you more accurate control over when the audio clip is played.See Also: Stop, Pause, clip and PlayScheduled functions.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.Play(System.UInt64)">
            <summary>Plays the clip with an optional certain delay.</summary>
            <remarks>The delay parameter is deprecated, please use the newer PlayDelayed function instead which specifies the delay in seconds. Note: To obtain sample accuracy with an AudioClip with a different samplerate (than 44.1 khz) you have to do the math yourselves. Delaying an audiosource with an attached AudioClip with samplerate of, say, 32 khz, with 16k samples(.5 sec) is done by Play(22050). ((44100/32000) * 16000 = 22050). Note: The AudioSource.PlayScheduled API will give you more accurate control over when the audio clip is played.See Also: Stop, Pause, clip and PlayScheduled functions.</remarks>
            <param name="delay">Delay in number of samples, assuming a 44100Hz sample rate (meaning that Play(44100) will delay the playing by exactly 1 sec).</param>
        </member>
        <member name="M:UnityEngine.AudioSource.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3)">
            <summary>Plays an AudioClip at a given position in world space.</summary>
            <remarks>This function creates an audio source but automatically disposes of it once the clip has finished playing.</remarks>
            <param name="clip">Audio data to play.</param>
            <param name="position">Position in world space from which sound originates.</param>
        </member>
        <member name="M:UnityEngine.AudioSource.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single)">
            <summary>Plays an AudioClip at a given position in world space.</summary>
            <remarks>This function creates an audio source but automatically disposes of it once the clip has finished playing.</remarks>
            <param name="clip">Audio data to play.</param>
            <param name="position">Position in world space from which sound originates.</param>
            <param name="volume">Playback volume.</param>
        </member>
        <member name="M:UnityEngine.AudioSource.PlayDelayed(System.Single)">
            <summary>Plays the clip with a delay specified in seconds. Users are advised to use this function instead of the old Play(delay) function that took a delay specified in samples relative to a reference rate of 44.1 kHz as an argument.</summary>
            <remarks>Note: This function replaces the Play(delay) function when called with the delay-argument. In that function the delay had to be specified as samples relative to a reference rate of 44100. This is inconvenient when the engine is running on a different sample rate and the source sound has an even different rate. Working with delays specified in seconds makes this independent of these.</remarks>
            <param name="delay">Delay time specified in seconds.</param>
        </member>
        <member name="P:UnityEngine.AudioSource.playOnAwake">
            <summary>If set to true, the audio source will automatically start playing on awake.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.PlayOneShot(UnityEngine.AudioClip)">
            <summary>Plays an AudioClip, and scales the AudioSource volume by volumeScale.</summary>
            <remarks>See Also: AudioSource.Play.</remarks>
            <param name="clip">The clip being played.</param>
        </member>
        <member name="M:UnityEngine.AudioSource.PlayOneShot(UnityEngine.AudioClip,System.Single)">
            <summary>Plays an AudioClip, and scales the AudioSource volume by volumeScale.</summary>
            <remarks>See Also: AudioSource.Play.</remarks>
            <param name="clip">The clip being played.</param>
            <param name="volumeScale">The scale of the volume (0-1).</param>
        </member>
        <member name="M:UnityEngine.AudioSource.PlayScheduled(System.Double)">
            <summary>Plays the clip at a specific time on the absolute time-line that AudioSettings.dspTime reads from.</summary>
            <remarks>This is the preferred way to stitch AudioClips in music players because it is independent of the frame rate and gives the audio system enough time to prepare the playback of the sound to fetch it from media where the opening and buffering takes a lot of time (streams) without causing sudden CPU spikes.The example at AudioSource.SetScheduledEndTime shows how you can play two audio clips without pops or clicks between the clips. The approach is to have two AudioSources with clips attached, and queue up each clip using its AudioSource. See Also: SetScheduledStartTime.</remarks>
            <param name="time">Time in seconds on the absolute time-line that AudioSettings.dspTime refers to for when the sound should start playing.</param>
        </member>
        <member name="P:UnityEngine.AudioSource.priority">
            <summary>Sets the priority of the AudioSource.</summary>
            <value>To be added.</value>
            <remarks>Unity is virtualizing AudioSources, when there's more AudioSources playing than available hardware channels. The AudioSources with lowest priority (and audibility) is virtualized first. Priority is an integer between 0 and 255. 0=highest priority, 255=lowest priority.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.rolloffFactor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.rolloffMode">
            <summary>Sets/Gets how the AudioSource attenuates over distance.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.SetScheduledEndTime(System.Double)">
            <summary>Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing not all rescheduling requests can be fulfilled.</summary>
            <remarks>Note that the time specified is still a time on the absolute time-line, meaning that the sound will stop when reaching that time, regardless of when it was started. So if you have a 5 second long sound and want it to play at time T and stop after 3 seconds (i.e. silencing the last 2 seconds of the sound), you need to specify the end time to be T+3. This function is useful in music systems to overcome the discontinuities in signals that frame-based lossy codecs cause.Note: If possible create clips that overlap, and use the scheduled end time for the first, and AudioSource.time for the second to trim out the overlapped part, as the example above shows.</remarks>
            <param name="time">Time in seconds.</param>
        </member>
        <member name="M:UnityEngine.AudioSource.SetScheduledStartTime(System.Double)">
            <summary>Changes the time at which a sound that has already been scheduled to play will start.</summary>
            <remarks>Notice that depending on the timing not all rescheduling requests can be fulfilled. One interesting use case for this is stinger sound effects that are initiated by game events, but that you also want to be synchronized to specific beats in music. Then this function can be used to defer the stinger until the next musical transition. Note: In general it is better to use PlayScheduled to cue up audio. Only use SetScheduledStartTime if you have scheduled an audio clip to play in the future and you need to change the time at which it starts. Calling SetScheduledStartTime will not cause an un-scheduled audio clip to play. See Also: AudioClip.PlayScheduled.</remarks>
            <param name="time">Time in seconds.</param>
        </member>
        <member name="P:UnityEngine.AudioSource.spread">
            <summary>Sets the spread angle a 3d stereo or multichannel sound in speaker space.</summary>
            <value>To be added.</value>
            <remarks>0 = all sound channels are located at the same speaker location and is 'mono'. 360 = all subchannels are located at the opposite speaker location to the speaker location that it should be according to 3D position. Default = 0.</remarks>
        </member>
        <member name="M:UnityEngine.AudioSource.Stop">
            <summary>Stops playing the clip.</summary>
            <remarks>See Also: Play, Pause functions.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.time">
            <summary>Playback position in seconds.</summary>
            <value>To be added.</value>
            <remarks>Use this to read current playback time or to seek to a new playback time. Be aware that: On a compressed audio track position does not necessary reflect the actual time in the track Compressed audio is represented as a set of so-called packets. The length of a packet depends on the compression settings and can quite often be 2-3 seconds per packet. See Also: timeSamples variable.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.timeSamples">
            <summary>Playback position in PCM samples.</summary>
            <value>To be added.</value>
            <remarks>Use this to read current playback time or to seek to a new playback time in samples, if you want more precise timing than what time variable allows. See Also: time variable.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.velocityUpdateMode">
            <summary>Whether the Audio Source should be updated in the fixed or dynamic update.</summary>
            <value>To be added.</value>
            <remarks>Make sure this is set to update in the same update loop as the Audio Source is moved in if you are experiencing problems with Doppler effect simulation for this source. The default setting will automatically set the source to be updated in the fixed update loop if it is attached to a rigidbody, and dynamic otherwise.</remarks>
        </member>
        <member name="P:UnityEngine.AudioSource.volume">
            <summary>The volume of the audio source (0.0 to 1.0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AudioSpeakerMode">
            <summary>These are speaker types defined for use with AudioSettings.speakerMode.</summary>
            <remarks>Your project's default speaker mode can be set in the Audiomanager through Edit-&gt;Project Settings-&gt;Audio. See Also: AudioSettings, Audio Manager.</remarks>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Mode5point1">
            <summary>Channel count is set to 6. 5.1 speaker setup. This includes front left, front right, center, rear left, rear right and a subwoofer.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Mode7point1">
            <summary>Channel count is set to 8. 7.1 speaker setup. This includes front left, front right, center, rear left, rear right, side left, side right and a subwoofer.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Mono">
            <summary>Channel count is set to 1. The speakers are monaural.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Prologic">
            <summary>Channel count is set to 2. Stereo output, but data is encoded in a way that is picked up by a Prologic/Prologic2 decoder and split into a 5.1 speaker setup.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Quad">
            <summary>Channel count is set to 4. 4 speaker setup. This includes front left, front right, rear left, rear right.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Raw">
            <summary>Channel count is unaffected.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Stereo">
            <summary>Channel count is set to 2. The speakers are stereo. This is the editor default.</summary>
        </member>
        <member name="F:UnityEngine.AudioSpeakerMode.Surround">
            <summary>Channel count is set to 5. 5 speaker setup. This includes front left, front right, center, rear left, rear right.</summary>
        </member>
        <member name="T:UnityEngine.AudioType">
            <summary>Type of the imported(native) data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AudioType.ACC">
            <summary>Acc - not supported.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.AIFF">
            <summary>Aiff.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.AUDIOQUEUE">
            <summary>iPhone hardware decoder, supports AAC, ALAC and MP3. Extracodecdata is a pointer to an FMOD_AUDIOQUEUE_EXTRACODECDATA structure.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.GCADPCM">
            <summary>Game cube ADPCM.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.IT">
            <summary>Impulse tracker.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.MOD">
            <summary>Protracker / Fasttracker MOD.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.MPEG">
            <summary>MP2/MP3 MPEG.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.OGGVORBIS">
            <summary>Ogg vorbis.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.S3M">
            <summary>ScreamTracker 3.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.UNKNOWN">
            <summary>3rd party / unknown plugin format.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.WAV">
            <summary>Microsoft WAV.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.XM">
            <summary>FastTracker 2 XM.</summary>
        </member>
        <member name="F:UnityEngine.AudioType.XMA">
            <summary>Xbox360 XMA.</summary>
        </member>
        <member name="T:UnityEngine.AudioVelocityUpdateMode">
            <summary>Describes when an AudioSource or AudioListener is updated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.AudioVelocityUpdateMode.Auto">
            <summary>Updates the source or listener in the fixed update loop if it is attached to a Rigidbody, dynamic otherwise.</summary>
        </member>
        <member name="F:UnityEngine.AudioVelocityUpdateMode.Dynamic">
            <summary>Updates the source or listener in the dynamic update loop.</summary>
        </member>
        <member name="F:UnityEngine.AudioVelocityUpdateMode.Fixed">
            <summary>Updates the source or listener in the fixed update loop.</summary>
        </member>
        <member name="T:UnityEngine.Avatar">
            <summary>Avatar definition.</summary>
            <remarks>See Also: Animator.avatar.</remarks>
        </member>
        <member name="C:UnityEngine.Avatar">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Avatar.isHuman">
            <summary>Return true if this avatar is a valid human avatar.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Avatar.isValid">
            <summary>Return true if this avatar is a valid mecanim avatar. It can be a generic avatar or a human avatar.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.AvatarBuilder">
            <summary>Class to build avatars from user scripts.</summary>
            <remarks>The Unity editor has tools for setting up and editing avatars but this class can be useful for creating custom editors and inspectors for your characters.</remarks>
        </member>
        <member name="C:UnityEngine.AvatarBuilder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.AvatarBuilder.BuildGenericAvatar(UnityEngine.GameObject,System.String)">
            <summary>Create a new generic avatar.</summary>
            <returns>To be added.</returns>
            <remarks>All transforms under the root GameObject will be part of this generic avatar.</remarks>
            <param name="go">Root object of your transform hierarchy.</param>
            <param name="rootMotionTransformName">Transform name of the root motion transform. If empty no root motion is defined and you must take care of avatar movement yourself.</param>
        </member>
        <member name="M:UnityEngine.AvatarBuilder.BuildHumanAvatar(UnityEngine.GameObject,UnityEngine.HumanDescription)">
            <summary>Create a humanoid avatar.</summary>
            <returns>To be added.</returns>
            <remarks>The avatar is created using the supplied HumanDescription object which specifies the muscle space range limits and retargeting parameters like arm/leg twist and arm/leg stretch. See Also: HumanDescription.</remarks>
            <param name="go">Root object of your transform hierachy.</param>
            <param name="monoHumanDescription">Description of the avatar.</param>
        </member>
        <member name="T:UnityEngine.AvatarIKGoal">
            <summary>IK Goal.</summary>
            <remarks>Used to set and get IK weights and transform.</remarks>
        </member>
        <member name="F:UnityEngine.AvatarIKGoal.LeftFoot">
            <summary>The left foot.</summary>
        </member>
        <member name="F:UnityEngine.AvatarIKGoal.LeftHand">
            <summary>The left hand.</summary>
        </member>
        <member name="F:UnityEngine.AvatarIKGoal.RightFoot">
            <summary>The right foot.</summary>
        </member>
        <member name="F:UnityEngine.AvatarIKGoal.RightHand">
            <summary>The right hand.</summary>
        </member>
        <member name="T:UnityEngine.AvatarTarget">
            <summary>Target.</summary>
            <remarks>Used for the MatchPosition, MatchRotation, and Set functions.</remarks>
        </member>
        <member name="F:UnityEngine.AvatarTarget.Body">
            <summary>The body, center of mass.</summary>
        </member>
        <member name="F:UnityEngine.AvatarTarget.LeftFoot">
            <summary>The left foot.</summary>
        </member>
        <member name="F:UnityEngine.AvatarTarget.LeftHand">
            <summary>The left hand.</summary>
        </member>
        <member name="F:UnityEngine.AvatarTarget.RightFoot">
            <summary>The right foot.</summary>
        </member>
        <member name="F:UnityEngine.AvatarTarget.RightHand">
            <summary>The right hand.</summary>
        </member>
        <member name="F:UnityEngine.AvatarTarget.Root">
            <summary>The root, the position of the GameObject.</summary>
        </member>
        <member name="T:UnityEngine.Behaviour">
            <summary>Behaviours are Components that can be enabled or disabled.</summary>
            <remarks>See Also: MonoBehaviour and Component.</remarks>
        </member>
        <member name="C:UnityEngine.Behaviour">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Behaviour.enabled">
            <summary>Enabled Behaviours are Updated, disabled Behaviours are not.</summary>
            <value>To be added.</value>
            <remarks>This is shown as the small checkbox in the inspector of the behaviour.</remarks>
        </member>
        <member name="T:UnityEngine.BitStream">
            <summary>The BitStream class represents seralized variables, packed into a stream.</summary>
            <remarks>Data can be serialized, transmitted, and then received by remote clients by using this class. See the Network View component reference page for general information on network synchronization and the Network.OnSerializeNetworkView function for more information.</remarks>
        </member>
        <member name="C:UnityEngine.BitStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.BitStream.isReading">
            <summary>Is the BitStream currently being read? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: Network.OnSerializeNetworkView, isWriting.</remarks>
        </member>
        <member name="P:UnityEngine.BitStream.isWriting">
            <summary>Is the BitStream currently being written? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: Network.OnSerializeNetworkView, isReading.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(System.Boolean@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(System.Char@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(System.Int16@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(System.Int32@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(System.Single@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.NetworkPlayer@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.NetworkViewID@)">
            <param name="viewID">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Quaternion@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Vector3@)">
            <param name="value">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(System.Single@,System.Single)">
            <param name="value">To be added.</param>
            <param name="maxDelta">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Quaternion@,System.Single)">
            <param name="value">To be added.</param>
            <param name="maxDelta">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Vector3@,System.Single)">
            <param name="value">To be added.</param>
            <param name="maxDelta">To be added.</param>
            <summary>Serializes different types of variables.</summary>
            <remarks>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer. Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</remarks>
        </member>
        <member name="T:UnityEngine.BlendWeights">
            <summary>Blend weights.</summary>
            <remarks>How many bones affect each vertex. See Also: QualitySettings.blendWeights.</remarks>
        </member>
        <member name="F:UnityEngine.BlendWeights.FourBones">
            <summary>Four bones affect each vertex.</summary>
            <remarks>See Also: QualitySettings.blendWeights.</remarks>
        </member>
        <member name="F:UnityEngine.BlendWeights.OneBone">
            <summary>One bone affects each vertex.</summary>
            <remarks>See Also: QualitySettings.blendWeights.</remarks>
        </member>
        <member name="F:UnityEngine.BlendWeights.TwoBones">
            <summary>Two bones affect each vertex.</summary>
            <remarks>See Also: QualitySettings.blendWeights.</remarks>
        </member>
        <member name="T:UnityEngine.BoneWeight">
            <summary>Skinning bone weights of a vertex in the mesh.</summary>
            <remarks>Each vertex is skinned with up to four bones. All weights should sum up to one. Weights and bone indices should be defined in the order of decreasing weight. If a vertex is affected by less than four bones, the remaining weights should be zeroes. See Also: Mesh.boneWeights variable.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.boneIndex0">
            <summary>Index of first bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: weight0.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.boneIndex1">
            <summary>Index of second bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: weight1.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.boneIndex2">
            <summary>Index of third bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: weight2.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.boneIndex3">
            <summary>Index of fourth bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: weight3.</remarks>
        </member>
        <member name="M:UnityEngine.BoneWeight.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.BoneWeight.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.BoneWeight.op_Equality(UnityEngine.BoneWeight,UnityEngine.BoneWeight)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.BoneWeight.op_Inequality(UnityEngine.BoneWeight,UnityEngine.BoneWeight)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.weight0">
            <summary>Skinning weight for first bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: boneIndex0.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.weight1">
            <summary>Skinning weight for second bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: boneIndex1.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.weight2">
            <summary>Skinning weight for third bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: boneIndex2.</remarks>
        </member>
        <member name="P:UnityEngine.BoneWeight.weight3">
            <summary>Skinning weight for fourth bone.</summary>
            <value>To be added.</value>
            <remarks>See Also: boneIndex3.</remarks>
        </member>
        <member name="T:UnityEngine.Bounds">
            <summary>Represents an axis aligned bounding box.</summary>
            <remarks>An axis-aligned bounding box, or AABB for short, is a box aligned with coordinate axes and fully enclosing some object. Because the box is never rotated with respect to the axes, it can be defined by just its center and extents, or alternatively by min and max points. Bounds is used by Collider.bounds, Mesh.bounds, Renderer.bounds.</remarks>
        </member>
        <member name="C:UnityEngine.Bounds(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="center">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Bounds.center">
            <summary>The center of the bounding box.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Contains(UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <summary>Is point contained in the bounding box?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Encapsulate(UnityEngine.Bounds)">
            <param name="bounds">To be added.</param>
            <summary>Grows the Bounds to include the point.Grow the bounds to encapsulate the bounds.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Encapsulate(UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <summary>Grows the Bounds to include the point.Grow the bounds to encapsulate the bounds.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Expand(System.Single)">
            <param name="amount">To be added.</param>
            <summary>Expand the bounds by increasing its size by amount along each side.Expand the bounds by increasing its size by amount along each side.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Expand(UnityEngine.Vector3)">
            <param name="amount">To be added.</param>
            <summary>Expand the bounds by increasing its size by amount along each side.Expand the bounds by increasing its size by amount along each side.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Bounds.extents">
            <summary>The extents of the box. This is always half of the size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray)">
            <param name="ray">To be added.</param>
            <summary>Does ray intersect this bounding box?Does ray intersect this bounding box?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray,System.Single@)">
            <param name="ray">To be added.</param>
            <param name="distance">To be added.</param>
            <summary>Does ray intersect this bounding box?Does ray intersect this bounding box?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.Intersects(UnityEngine.Bounds)">
            <param name="bounds">To be added.</param>
            <summary>Does another bounding box intersect with this bounding box?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Bounds.max">
            <summary>The maximal point of the box. This is always equal to center+extents.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Bounds.min">
            <summary>The minimal point of the box. This is always equal to center-extents.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.op_Equality(UnityEngine.Bounds,UnityEngine.Bounds)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.op_Inequality(UnityEngine.Bounds,UnityEngine.Bounds)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.SetMinMax(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>Sets the bounds to the min and max value of the box.</summary>
            <remarks>Using this function is faster than assigning min and max separately.</remarks>
        </member>
        <member name="P:UnityEngine.Bounds.size">
            <summary>The total size of the box. This is always twice as large as the extents.</summary>
            <value>To be added.</value>
            <remarks>size.x is the width, size.y is the height and size.z is the depth of the box.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.SqrDistance(UnityEngine.Vector3)">
            <param name="point">To be added.</param>
            <summary>The smallest squared distance between the point and this bounding box.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.ToString">
            <summary>Returns a nicely formatted string for the bounds.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Bounds.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for the bounds.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.BoxCollider">
            <summary>A box-shaped primitive collider.</summary>
            <remarks>See Also: SphereCollider, CapsuleCollider, PhysicMaterial, Rigidbody.</remarks>
        </member>
        <member name="C:UnityEngine.BoxCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.BoxCollider.center">
            <summary>The center of the box, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.BoxCollider.extents">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.BoxCollider.size">
            <summary>The size of the box, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>The box size will be scaled by the transform's scale.</remarks>
        </member>
        <member name="T:UnityEngine.BoxCollider2D">
            <summary>Collider for 2D physics representing an axis-aligned rectangle.</summary>
            <remarks>See Also: CircleCollider2D class, PolygonCollider2D class.</remarks>
        </member>
        <member name="C:UnityEngine.BoxCollider2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.BoxCollider2D.center">
            <summary>The center point of the rectangle in local space.</summary>
            <value>To be added.</value>
            <remarks>See Also: size.</remarks>
        </member>
        <member name="P:UnityEngine.BoxCollider2D.size">
            <summary>The width and height of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>The X coordinate of the vector represents the width while the Y represents the height. These values are specified relative to a center point, so the distance from the center to the left edge is actually width/2. See Also: center.</remarks>
        </member>
        <member name="T:UnityEngine.CacheIndex">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CacheIndex.bytesUsed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CacheIndex.expires">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CacheIndex.name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Caching">
            <summary>The Caching class lets you manage cached AssetBundles, downloaded using WWW.LoadFromCacheOrDownload.</summary>
            <remarks>See Also: WWW.LoadFromCacheOrDownload.</remarks>
        </member>
        <member name="C:UnityEngine.Caching">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.Authorize(System.String,System.String,System.Int32,System.String)">
            <param name="name">To be added.</param>
            <param name="domain">To be added.</param>
            <param name="size">To be added.</param>
            <param name="signature">To be added.</param>
            <summary>(This is a WebPlayer-only function).</summary>
            <returns>To be added.</returns>
            <remarks>Enables a dedicated, application-specific WebPlayer cache (Dedicated WebPlayer caches require a paid license from Unity Technologies). If you have a dedicated cache license, call this function at WebPlayer application startup with the license information provided to you. Starting with the release of Unity 3.2, all WebPlayer applications have access to a 50 MiB shared cache; calling the Authorize() function is not necessary. Starting with the release of Unity 3.4, PC/Mac Standalone players and iOS/Android players have access to a 4 GiB dedicated cache for each application; calling the Authorize() function is not necessary.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.Authorize(System.String,System.String,System.Int64,System.String)">
            <param name="name">To be added.</param>
            <param name="domain">To be added.</param>
            <param name="size">To be added.</param>
            <param name="signature">To be added.</param>
            <summary>(This is a WebPlayer-only function).</summary>
            <returns>To be added.</returns>
            <remarks>Enables a dedicated, application-specific WebPlayer cache (Dedicated WebPlayer caches require a paid license from Unity Technologies). If you have a dedicated cache license, call this function at WebPlayer application startup with the license information provided to you. Starting with the release of Unity 3.2, all WebPlayer applications have access to a 50 MiB shared cache; calling the Authorize() function is not necessary. Starting with the release of Unity 3.4, PC/Mac Standalone players and iOS/Android players have access to a 4 GiB dedicated cache for each application; calling the Authorize() function is not necessary.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.Authorize(System.String,System.String,System.Int32,System.Int32,System.String)">
            <param name="name">To be added.</param>
            <param name="domain">To be added.</param>
            <param name="size">To be added.</param>
            <param name="expiration">To be added.</param>
            <param name="signature">To be added.</param>
            <summary>(This is a WebPlayer-only function).</summary>
            <returns>To be added.</returns>
            <remarks>Enables a dedicated, application-specific WebPlayer cache (Dedicated WebPlayer caches require a paid license from Unity Technologies). If you have a dedicated cache license, call this function at WebPlayer application startup with the license information provided to you. Starting with the release of Unity 3.2, all WebPlayer applications have access to a 50 MiB shared cache; calling the Authorize() function is not necessary. Starting with the release of Unity 3.4, PC/Mac Standalone players and iOS/Android players have access to a 4 GiB dedicated cache for each application; calling the Authorize() function is not necessary.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.Authorize(System.String,System.String,System.Int64,System.Int32,System.String)">
            <param name="name">To be added.</param>
            <param name="domain">To be added.</param>
            <param name="size">To be added.</param>
            <param name="expiration">To be added.</param>
            <param name="signature">To be added.</param>
            <summary>(This is a WebPlayer-only function).</summary>
            <returns>To be added.</returns>
            <remarks>Enables a dedicated, application-specific WebPlayer cache (Dedicated WebPlayer caches require a paid license from Unity Technologies). If you have a dedicated cache license, call this function at WebPlayer application startup with the license information provided to you. Starting with the release of Unity 3.2, all WebPlayer applications have access to a 50 MiB shared cache; calling the Authorize() function is not necessary. Starting with the release of Unity 3.4, PC/Mac Standalone players and iOS/Android players have access to a 4 GiB dedicated cache for each application; calling the Authorize() function is not necessary.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.CleanCache">
            <summary>Delete all AssetBundle content that has been cached by the current application.</summary>
            <returns>True when cache cleaning succeeded, false if cache was in use.</returns>
            <remarks>This function is not available to WebPlayer applications that use the shared cache.</remarks>
            <example>if (GUILayout.Button("Uninstall Game"))  Caching.CleanCache ();</example>
        </member>
        <member name="M:UnityEngine.Caching.CleanNamedCache(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.DeleteFromCache(System.String)">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.enabled">
            <summary>Is Caching enabled?</summary>
            <value>To be added.</value>
            <remarks>WebPlayer users may disable Caching for all WebPlayer applications by right-clicking on the WebPlayer content, selecting "Setup...", and checking the 'Disable all caching' checkbox. If caching is disabled, WWW.LoadFromCacheOrDownload() will continue to function, but will never cache downloaded AssetBundles. Caching is always enabled for PC/Mac Standalone and iOS/Android player builds.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.expirationDelay">
            <summary>The number of seconds that an AssetBundle may remain unused in the cache before it is automatically deleted.</summary>
            <value>To be added.</value>
            <remarks>This value defaults to 150 days (12,960,000 seconds). Lower values will cause the cache to be cleaned more aggressively in order to minimize disk storage usage. The delay cannot be set greater than 12,960,000 seconds.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.GetVersionFromCache(System.String)">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.index">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.IsVersionCached(System.String,System.Int32)">
            <param name="url">To be added.</param>
            <param name="version">To be added.</param>
            <summary>Checks if an AssetBundle is cached.</summary>
            <returns>True if an AssetBundle matching the and parameters has previously been loaded using WWW.LoadFromCacheOrDownload() and is currently stored in the cache. Returns false if the AssetBundle is not in cache, either because it has been flushed from the cache or was never loaded using the Caching API.</returns>
            <remarks>When using the default shared cache, the URL of the WebPlayer application bundle is automatically prepended to the url parameter; this prevents filename collisions with identically-named AssetBundles used by other developers' WebPlayer applications. WebPlayer applications that use a dedicated cache do not experience this behavior. This function can be utilized to enable AssetBundle preloading. First, call Caching.IsVersionCached() to see if the current version of an AssetBundle is already cached. If the AssetBundle is not cached, it can be preloaded in the background so that it is immediately available for loading into memory when requested.</remarks>
            <example>if (Caching.IsVersionCached("http://myserver.com/bla.unity3d", 3))   GUILayout.Button("Load Level");</example>
        </member>
        <member name="M:UnityEngine.Caching.MarkAsUsed(System.String,System.Int32)">
            <param name="url">To be added.</param>
            <param name="version">To be added.</param>
            <summary>Bumps the timestamp of a cached file to be the current time.</summary>
            <returns>To be added.</returns>
            <remarks>This allows you to keep files in the cache even if you are not explicitly loading them. Returns true if the url is cached.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.maximumAvailableDiskSpace">
            <summary>The total number of bytes that can potentially be allocated for caching.</summary>
            <value>To be added.</value>
            <remarks>This value can be set to a smaller number in order to limit the amount of disk space used by cached AssetBundles. The WebPlayer shared cache allows up to 50 MiB of cached AssetBundles. PC/Mac Standalone applications and iOS/Android applications have a limit of 4 GiB. WebPlayer applications that make use of a dedicated cache are limited to the number of bytes specified in the Caching license agreement. This property does not account for total available disk space. If a user's computer has less available disk space on the drive where the cache is located than maximumAvailableDiskSpace, the full amount of maximumAvailableDiskSpace will not be usable. Cache storage is allocated on an as-needed basis in order to minimize disk space usage.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.ready">
            <summary>Is caching ready?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.ResetNoBackupFlag(System.String,System.Int32)">
            <param name="url">To be added.</param>
            <param name="version">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Caching.SetNoBackupFlag(System.String,System.Int32)">
            <param name="url">To be added.</param>
            <param name="version">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.spaceAvailable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.spaceFree">
            <summary>The number of currently unused bytes in the cache.</summary>
            <value>To be added.</value>
            <remarks>When the cache is empty, this value equals maximumAvailableDiskSpace. As AssetBundles are stored in the cache, this value will decrease. Caching manages cached content based on a Least Recently Used (LRU) algorithm. If insufficient space is available in the cache to store a requested AssetBundle, the oldest AssetBundles in the cache will be iteratively removed until enough space is free for the new AssetBundle. This property does not account for total available disk space. If a user's computer has less available disk space on the drive where the cache is located than spaceFree, the full amount of spaceFree will not be usable.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.spaceOccupied">
            <summary>Used disk space in bytes.</summary>
            <value>To be added.</value>
            <remarks>Initially this is 0. As you download files to the cache, this will increment. If insufficient space is available in the cache to store a requested AssetBundle, the least-recently-used AssetBundles in the cache will be iteratively removed until enough space is available for the new AssetBundle.</remarks>
        </member>
        <member name="P:UnityEngine.Caching.spaceUsed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.CalendarIdentifier">
            <summary>Specify calendar types.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.BuddhistCalendar">
            <summary>Identifies the Buddhist calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.ChineseCalendar">
            <summary>Identifies the Chinese calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.GregorianCalendar">
            <summary>Identifies the Gregorian calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.HebrewCalendar">
            <summary>Identifies the Hebrew calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.IndianCalendar">
            <summary>Identifies the Indian calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.IslamicCalendar">
            <summary>Identifies the Islamic calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.IslamicCivilCalendar">
            <summary>Identifies the Islamic civil calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.ISO8601Calendar">
            <summary>Identifies the ISO8601.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.JapaneseCalendar">
            <summary>Identifies the Japanese calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.PersianCalendar">
            <summary>Identifies the Persian calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarIdentifier.RepublicOfChinaCalendar">
            <summary>Identifies the Republic of China (Taiwan) calendar.</summary>
        </member>
        <member name="T:UnityEngine.CalendarUnit">
            <summary>Specify calendrical units.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Day">
            <summary>Specifies the day unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Era">
            <summary>Specifies the era unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Hour">
            <summary>Specifies the hour unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Minute">
            <summary>Specifies the minute unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Month">
            <summary>Specifies the month unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Quarter">
            <summary>Specifies the quarter of the calendar.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Second">
            <summary>Specifies the second unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Week">
            <summary>Specifies the week unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Weekday">
            <summary>Specifies the weekday unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.WeekdayOrdinal">
            <summary>Specifies the ordinal weekday unit.</summary>
        </member>
        <member name="F:UnityEngine.CalendarUnit.Year">
            <summary>Specifies the year unit.</summary>
        </member>
        <member name="T:UnityEngine.Camera">
            <summary>A Camera is a device through which the player views the world.</summary>
            <remarks>A screen space point is defined in pixels. The bottom-left of the screen is (0,0); the right-top is ( pixelWidth, pixelHeight ). The z position is in world units from the camera. A viewport space point is normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1). The z position is in world units from the camera. A world space point is defined in global coordinates (eg. Transform.position). See Also: camera component.</remarks>
        </member>
        <member name="C:UnityEngine.Camera">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.actualRenderingPath">
            <summary>Actually used rendering path (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: renderingPath, RenderingPath.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.allCameras">
            <summary>Returns all enabled cameras in the scene.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.aspect">
            <summary>The aspect ratio (width divided by height).</summary>
            <value>To be added.</value>
            <remarks>By default the aspect ratio is automatically calculated from the screen's aspect ratio, even if the camera is not rendering to full area. If you modify the aspect ratio of the camera, the value will stay until you call camera.ResetAspect(); which resets the aspect to the screen's aspect ratio. See Also: camera component, Screen class.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.backgroundColor">
            <summary>The color with which the screen will be cleared.</summary>
            <value>To be added.</value>
            <remarks>Only used if clearFlags are set to CameraClearFlags.SolidColor (or CameraClearFlags.Skybox but the skybox is not set up).See Also: camera component, Camera.clearFlags property.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.cameraToWorldMatrix">
            <summary>Matrix that transforms from camera space to world space (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Use this to calculate where in the world a specific camera space point is. Note that camera space matches OpenGL convention: camera's forward is the negative Z axis. This is different from Unity's convention, where forward is the positive Z axis.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.clearFlags">
            <summary>How the camera clears the background.</summary>
            <value>To be added.</value>
            <remarks>Can be CameraClearFlags.Skybox, CameraClearFlags.SolidColor, CameraClearFlags.Depth or CameraClearFlags.Nothing.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.clearStencilAfterLightingPass">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.CopyFrom(UnityEngine.Camera)">
            <param name="other">To be added.</param>
            <summary>Makes this camera's settings match other camera.</summary>
            <remarks>This will copy all camera's variables (field of view, clear flags, culling mask, ...) from the other camera. It will also set this camera's transform to match the other camera, as well as this camera's layer to match the layer of the other camera. This can be useful if you want one camera to match the other camera's setup, when doing custom rendering effects. For example when using RenderWithShader.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.cullingMask">
            <summary>This is used to render parts of the scene selectively.</summary>
            <value>To be added.</value>
            <remarks>If the GameObject 's layerMask AND the camera's cullingMask is zero then the GameObject will be invisible from this camera. See Layers for more information. See Also: camera component.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.current">
            <summary>The camera we are currently rendering with, for low-level render control only (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Most of the time you will want to use Camera.main instead. Use this function only when implementing one of the following events: MonoBehaviour.OnRenderImage, MonoBehaviour.OnPreRender, MonoBehaviour.OnPostRender.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.depth">
            <summary>Camera's depth in the camera rendering order.</summary>
            <value>To be added.</value>
            <remarks>Cameras with lower depth are rendered before cameras with higher depth. Use this to control the order in which cameras are drawn if you have multiple cameras and some of them don't cover the full screen. See Also: camera component, Camera.rect property.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.depthTextureMode">
            <summary>How and if camera generates a depth texture.</summary>
            <value>To be added.</value>
            <remarks>A camera can build a screen-space depth texture. This is mostly useful for image post-processing effects. Note that generating the texture incurs a performance cost. See Also: DepthTextureMode.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.DoClear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.eventMask">
            <summary>Mask to select which layers can trigger events on the camera.</summary>
            <value>To be added.</value>
            <remarks>Just as the camera's cullingMask determines if the camera is able to see the GameObject, the event mask determines whether the GameObject is able to receive mouse events. Only objects visible by the camera and whose layerMask overlaps with the camera's eventMask will be able to receive OnMouseXXX events. Setting this mask to zero will improve performance and is recommended if you don't use OnMouseXXX events. See Layers for more information. See Also: MonoBehaviour.OnMouseEnter See Also: MonoBehaviour.OnMouseExit See Also: MonoBehaviour.OnMouseOver See Also: MonoBehaviour.OnMouseDown See Also: MonoBehaviour.OnMouseOver See Also: MonoBehaviour.OnMouseUp See Also: MonoBehaviour.OnMouseDrag See Also: MonoBehaviour.OnMouseUpAsButton.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.far">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.farClipPlane">
            <summary>The far clipping plane distance.</summary>
            <value>To be added.</value>
            <remarks>See Also: camera component, layerCullDistances.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.fieldOfView">
            <summary>The field of view of the camera in degrees.</summary>
            <value>To be added.</value>
            <remarks>This is the vertical field of view; horizontal FOV varies depending on the viewport's aspect ratio. Field of view is ignored when camera is orthographic (see orthographic ). See Also: camera component .Another example using specifically the main camera:</remarks>
        </member>
        <member name="P:UnityEngine.Camera.fov">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.GetScreenHeight">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.GetScreenWidth">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.hdr">
            <summary>High dynamic range rendering.</summary>
            <value>To be added.</value>
            <remarks>Should this camera use HDR rendering?</remarks>
        </member>
        <member name="P:UnityEngine.Camera.isOrthoGraphic">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.layerCullDistances">
            <summary>Per-layer culling distances.</summary>
            <value>To be added.</value>
            <remarks>Normally Camera skips rendering of objects that are further away than farClipPlane. You can set up some Layers to use smaller culling distances using layerCullDistances. This is very useful to cull small objects early on, if you put them into appropriate layers. When assigning layerCullDistances, you need to assign float array that has 32 values. Zero values in cull distances means "use far plane distance". By default, per-layer culling will use a plane aligned with the camera. You can change this to a sphere by setting layerCullSpherical on the Camera to true.See Also: farClipPlane. See Also: layerCullSpherical.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.layerCullSpherical">
            <summary>How to perform per-layer culling for a Camera.</summary>
            <value>To be added.</value>
            <remarks>Normally this type of culling is performed by moving the Camera's far plane closer to the eye. By setting this value to true, the culling is instead based on spherical distance. The benefit is that rotating on the same spot does not affect which objects are visible. See Also: layerCullDistances.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.main">
            <summary>The first enabled camera tagged "MainCamera" (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Returns null if there is no such camera in the scene.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.mainCamera">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.near">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.nearClipPlane">
            <summary>The near clipping plane distance.</summary>
            <value>To be added.</value>
            <remarks>See Also: camera component.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.orthographic">
            <summary>Is the camera orthographic (true) or perspective (false)?</summary>
            <value>To be added.</value>
            <remarks>When ortho is true, camera's viewing volume is defined by orthographicSize. When orthographic is false, camera's viewing volume is defined by fieldOfView. See Also: camera component, transparencySortMode .Specifically for the main camera:</remarks>
        </member>
        <member name="P:UnityEngine.Camera.orthographicSize">
            <summary>Camera's half-size when in orthographic mode.</summary>
            <value>To be added.</value>
            <remarks>This is half of the vertical size of the viewing volume. Horizontal viewing size varies depending on viewport's aspect ratio. Orthographic size is ignored when camera is not orthographic (see orthographic ). See Also: camera component .Using specifically the main camera:</remarks>
        </member>
        <member name="P:UnityEngine.Camera.pixelHeight">
            <summary>How tall is the camera in pixels (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.pixelRect">
            <summary>Where on the screen is the camera rendered in pixel coordinates.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.pixelWidth">
            <summary>How wide is the camera in pixels (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.projectionMatrix">
            <summary>Set a custom projection matrix.</summary>
            <value>To be added.</value>
            <remarks>If you change this matrix, the camera no longer updates its rendering based on its fieldOfView. This lasts until you call ResetProjectionMatrix. Use a custom projection only if you really need a non-standard projection. This property is used by Unity's water rendering to setup an oblique projection matrix. Using custom projections requires good knowledge of transformation and projection matrices.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.rect">
            <summary>Where on the screen is the camera rendered in normalized coordinates.</summary>
            <value>To be added.</value>
            <remarks>The values in rect range from zero (left/bottom) to one (right/top).</remarks>
        </member>
        <member name="M:UnityEngine.Camera.Render">
            <summary>Render the camera manually.</summary>
            <remarks>This will render the camera. It will use the camera's clear flags, target texture and all other settings. The camera will send OnPreCull, OnPreRender &amp; OnPostRender to any scripts attached, and render any eventual image filters. This is used for taking precise control of render order. To make use of this feature, create a  camera and disable it. Then call Render on it. You are not able to call the Render function from a camera that is currently rendering. If you wish to do this create a copy of the camera, and make it match the original one using CopyFrom. See Also: RenderWithShader.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.RenderDontRestore">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.renderingPath">
            <summary>Rendering path.</summary>
            <value>To be added.</value>
            <remarks>See Also: actualRenderingPath, RenderingPath.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.Cubemap)">
            <param name="cubemap">To be added.</param>
            <summary>Render into a static cubemap from this camera.Render into a cubemap from this camera.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.RenderTexture)">
            <param name="cubemap">To be added.</param>
            <summary>Render into a static cubemap from this camera.Render into a cubemap from this camera.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.Cubemap,System.Int32)">
            <param name="cubemap">To be added.</param>
            <param name="faceMask">To be added.</param>
            <summary>Render into a static cubemap from this camera.Render into a cubemap from this camera.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.RenderTexture,System.Int32)">
            <param name="cubemap">To be added.</param>
            <param name="faceMask">To be added.</param>
            <summary>Render into a static cubemap from this camera.Render into a cubemap from this camera.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.RenderWithShader(UnityEngine.Shader,System.String)">
            <param name="shader">To be added.</param>
            <param name="replacementTag">To be added.</param>
            <summary>Render the camera with shader replacement.</summary>
            <remarks>See Rendering with Replaced Shaders page for details. This will render the camera. It will use the camera's clear flags, target texture and all other settings. The camera will not send OnPreCull, OnPreRender or OnPostRender to attached scripts. Image filters will not be rendered either. This is used for special effects, e.g. rendering screenspace normal buffer of the whole scene, heat vision and so on. To make use of this feature, usually you create a camera and disable it. Then call RenderWithShader on it. You are not able to call the Render function from a camera that is currently rendering. If you wish to do this create a copy of the camera, and make it match the original one using CopyFrom. See Also: Rendering with Replaced Shaders, SetReplacementShader, Render.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ResetAspect">
            <summary>Revert the aspect ratio to the screen's aspect ratio.</summary>
            <remarks>Call this to end the effect of setting aspect.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ResetProjectionMatrix">
            <summary>Make the projection reflect normal camera's parameters.</summary>
            <remarks>Call this to end the effect of setting projectionMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ResetReplacementShader">
            <summary>Remove shader replacement from camera.</summary>
            <remarks>Call this to end the effect of setting SetReplacementShader.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ResetWorldToCameraMatrix">
            <summary>Make the rendering position reflect the camera's position in the scene.</summary>
            <remarks>Call this to end the effect of setting worldToCameraMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ScreenPointToRay(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Returns a ray going from camera through a screen point.</summary>
            <returns>To be added.</returns>
            <remarks>Resulting ray is in world space, starting on the near plane of the camera and going through position's (x,y) pixel coordinates on the screen (position.z is ignored). Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top is ( pixelWidth, pixelHeight ).</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ScreenToViewportPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from screen space into viewport space.</summary>
            <returns>To be added.</returns>
            <remarks>Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top is ( pixelWidth, pixelHeight ). The z position is in world units from the camera. Viewport space is normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1). The z position is in world units from the camera.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ScreenToWorldPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from screen space into world space.</summary>
            <returns>To be added.</returns>
            <remarks>Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top is ( pixelWidth, pixelHeight ). The z position is in world units from the camera.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.SetReplacementShader(UnityEngine.Shader,System.String)">
            <param name="shader">To be added.</param>
            <param name="replacementTag">To be added.</param>
            <summary>Make the camera render with shader replacement.</summary>
            <remarks>See Rendering with Replaced Shaders page for details. After calling this function, camera will render its view with shader replacement. Call ResetReplacementShader to reset it back to normal rendering. See Also: Rendering with Replaced Shaders, ResetReplacementShader, RenderWithShader.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.SetTargetBuffers(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer)">
            <summary>Sets the Camera to render to the chosen buffers of one or more RenderTextures.</summary>
            <remarks>See Also: RenderBuffer, RenderTexture.</remarks>
            <param name="colorBuffer">The RenderBuffer to which color information will be rendered.</param>
            <param name="depthBuffer">The RenderBuffer to which depth information will be rendered.</param>
        </member>
        <member name="M:UnityEngine.Camera.SetTargetBuffers(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
            <summary>Sets the Camera to render to the chosen buffers of one or more RenderTextures.</summary>
            <remarks>See Also: RenderBuffer, RenderTexture.</remarks>
            <param name="colorBuffer">The RenderBuffer to which color information will be rendered.</param>
            <param name="depthBuffer">The RenderBuffer to which depth information will be rendered.</param>
        </member>
        <member name="M:UnityEngine.Camera.SetupCurrent(UnityEngine.Camera)">
            <param name="cur">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.targetTexture">
            <summary>Destination render texture (Unity Pro only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.transparencySortMode">
            <summary>Transparent object sorting mode.</summary>
            <value>To be added.</value>
            <remarks>By default, perspective cameras sort objects based on distance from camera position to the object center; and orthographic cameras sort based on distance along the view direction. If you're making a 2D game with a perspective camera, you might want to use TransparencySortMode.Orthographic sort mode so that objects are sorted based on distance along the camera's view.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.useOcclusionCulling">
            <summary>Whether or not the Camera will use occlusion culling during rendering.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.velocity">
            <summary>Get the world-space speed of the camera (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This camera's motion in units per second as it was during the last frame.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ViewportPointToRay(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Returns a ray going from camera through a viewport point.</summary>
            <returns>To be added.</returns>
            <remarks>Resulting ray is in world space, starting on the near plane of the camera and going through position's (x,y) coordinates on the viewport (position.z is ignored). Viewport coordinates are normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1).</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ViewportToScreenPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from viewport space into screen space.</summary>
            <returns>To be added.</returns>
            <remarks>Viewport space is normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1). The z position is in world units from the camera. Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top is ( pixelWidth, pixelHeight ). The z position is in world units from the camera.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.ViewportToWorldPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from viewport space into world space.</summary>
            <returns>To be added.</returns>
            <remarks>Viewport space is normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1). The z position is in world units from the camera. Note that it transforms a x-y screen position, into a x-y-z position in 3D space. You provide the function with a vector where the x-y components of the vector are the screen coordinates and the z component is the distance of the resulting plane from the camera.</remarks>
        </member>
        <member name="P:UnityEngine.Camera.worldToCameraMatrix">
            <summary>Matrix that transforms from world to camera space.</summary>
            <value>To be added.</value>
            <remarks>Use this to calculate the camera space position of objects or to provide custom camera's location that is not based on the transform. Note that camera space matches OpenGL convention: camera's forward is the negative Z axis. This is different from Unity's convention, where forward is the positive Z axis. If you change this matrix, the camera no longer updates its rendering based on its Transform. This lasts until you call ResetWorldToCameraMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.WorldToScreenPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from world space into screen space.</summary>
            <returns>To be added.</returns>
            <remarks>Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top is ( pixelWidth, pixelHeight ). The z position is in world units from the camera.</remarks>
        </member>
        <member name="M:UnityEngine.Camera.WorldToViewportPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from world space into viewport space.</summary>
            <returns>To be added.</returns>
            <remarks>Viewport space is normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1). The z position is in world units from the camera.</remarks>
        </member>
        <member name="T:UnityEngine.CameraClearFlags">
            <summary>Values for Camera.clearFlags, determining what to clear when rendering a Camera.</summary>
            <remarks>See Also: camera component.</remarks>
        </member>
        <member name="F:UnityEngine.CameraClearFlags.Color">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.CameraClearFlags.Depth">
            <summary>Clear only the depth buffer.</summary>
            <remarks>This will leave colors from the previous frame or whatever was displayed before. See Also: Camera.clearFlags property, camera component.</remarks>
        </member>
        <member name="F:UnityEngine.CameraClearFlags.Nothing">
            <summary>Don't clear anything.</summary>
            <remarks>This will leave colors and depth buffer from the previous frame or whatever was displayed before. See Also: Camera.clearFlags property, camera component.</remarks>
        </member>
        <member name="F:UnityEngine.CameraClearFlags.Skybox">
            <summary>Clear with the skybox.</summary>
            <remarks>If a skybox is not set up, the Camera will clear with a backgroundColor. See Also: Camera.clearFlags property, camera component, Render Settings.</remarks>
        </member>
        <member name="F:UnityEngine.CameraClearFlags.SolidColor">
            <summary>Clear with a background color.</summary>
            <remarks>See Also: Camera.clearFlags property, camera component, Camera.backgroundColor property.</remarks>
        </member>
        <member name="T:UnityEngine.CapsuleCollider">
            <summary>A capsule-shaped primitive collider.</summary>
            <remarks>Capsules are cylinders with a half-sphere at each end. See Also: BoxCollider, SphereCollider, PhysicMaterial, Rigidbody.</remarks>
        </member>
        <member name="C:UnityEngine.CapsuleCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CapsuleCollider.center">
            <summary>The center of the capsule, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CapsuleCollider.direction">
            <summary>The direction of the capsule.</summary>
            <value>To be added.</value>
            <remarks>0 -&gt; Capsule height is along the x-axis. 1 -&gt; Capsule height is along the y-axis. 2 -&gt; Capsule height is along the z-axis.</remarks>
        </member>
        <member name="P:UnityEngine.CapsuleCollider.height">
            <summary>The height of the capsule meased in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>The capsule's height will be scaled by the transform's scale. Note that the height is the actual height including the half-spheres at each end.</remarks>
        </member>
        <member name="P:UnityEngine.CapsuleCollider.radius">
            <summary>The radius of the sphere, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>The capsule's radius will be scaled by the transform's scale.</remarks>
        </member>
        <member name="T:UnityEngine.CharacterController">
            <summary>A CharacterController allows you to easily do movement constrained by collisions without having to deal with a rigidbody.</summary>
            <remarks>A CharacterController is not affected by forces and will only move when you call the Move funtion. It will then carry out the movement but be constrained by collisions. See Also: Character Controller component and Character animation examples</remarks>
        </member>
        <member name="C:UnityEngine.CharacterController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.center">
            <summary>The center of the character's capsule relative to the transform's position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.collisionFlags">
            <summary>What part of the capsule collided with the environment during the last CharacterController.Move call.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.detectCollisions">
            <summary>Determines whether other rigidbodies or character controllers collide with this character controller (by default this is always enabled).</summary>
            <value>To be added.</value>
            <remarks>This method does not affect collisions detected during the character controller's movement but rather decides whether an incoming collider will be blocked by the controller's collider. For example, a box collider in the scene will block the movement of the controller, but the box may still fall through the controller if detectCollisions is false. This property is useful to disable the character controller temporarily. For example, you might want to mount a character into a car and  disable collision detection until it exits the car again.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.height">
            <summary>The height of the character's capsule.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.isGrounded">
            <summary>Was the CharacterController touching the ground during the last move?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.CharacterController.Move(UnityEngine.Vector3)">
            <param name="motion">To be added.</param>
            <summary>A more complex move function taking absolute movement deltas.</summary>
            <returns>To be added.</returns>
            <remarks>Attempts to move the controller by motion, the motion will only be constrained by collisions. It will slide along colliders. CollisionFlags is the summary of collisions that occurred during the Move. This function does not apply any gravity.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.radius">
            <summary>The radius of the character's capsule.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.CharacterController.SimpleMove(UnityEngine.Vector3)">
            <param name="speed">To be added.</param>
            <summary>Moves the character with speed.</summary>
            <returns>To be added.</returns>
            <remarks>Velocity along the y-axis is ignored. Speed is in meters/s. Gravity is automatically applied. Returns if the character is grounded. It is recommended that you make only one call to Move or SimpleMove per frame.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.slopeLimit">
            <summary>The character controllers slope limit in degrees.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.stepOffset">
            <summary>The character controllers step offset in meters.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterController.velocity">
            <summary>The current relative velocity of the Character (see notes).</summary>
            <value>To be added.</value>
            <remarks>This allows you to track how fast the character is actually walking for example when he is stuck at a wall this value will be the zero vector. Note: The velocity returned is simply the difference in distance for the current timestep before and after a call to CharacterController.Move or CharacterController.SimpleMove.  The velocity is relative because it won't track movements to the transform that happen  outside of the CharacterController (e.g. character parented under another moving Transform,  such as a moving vehicle).</remarks>
        </member>
        <member name="T:UnityEngine.CharacterInfo">
            <summary>Info how to render a character from the font texture. See /Font.characterInfo/.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.flipped">
            <summary>Is the character flipped?</summary>
            <remarks>Unity may flip the U and V coordinates of characters in font textures it generates to make more efficient use of texture space.</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.index">
            <summary>Unicode value of the character.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.size">
            <summary>The size of the character or 0 if it is the default font size.</summary>
            <remarks>Only used with characters generated at runtime for dynamic fonts).</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.style">
            <summary>The style of the character.</summary>
            <remarks>Only used with characters generated at runtime for dynamic fonts).</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.uv">
            <summary>UV coordinates for the character in the texture.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.vert">
            <summary>Screen coordinates for the character in generated text meshes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CharacterInfo.width">
            <summary>How for to advance between the beginning of this charcater and the next.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.CharacterJoint">
            <summary>Character Joints are mainly used for Ragdoll effects. They are an extended ball-socket joint which allows you to limit the joint on each axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.CharacterJoint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.highTwistLimit">
            <summary>The upper limit around the primary axis of the character joint.</summary>
            <value>To be added.</value>
            <remarks>The limit is relative to the angle the two rigidbodies started the simulation out with.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.lowTwistLimit">
            <summary>The lower limit around the primary axis of the character joint.</summary>
            <value>To be added.</value>
            <remarks>The limit is relative to the angle the two rigidbodies started the simulation out with.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.rotationDrive">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.swing1Limit">
            <summary>The limit around the primary axis of the character joint.</summary>
            <value>To be added.</value>
            <remarks>The limit is symmetric. Thus a value of eg. 30 will limit the rotation between -30 and 30. The limit is relative to the angle the two rigidbodies started the simulation out with.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.swing2Limit">
            <summary>The limit around the primary axis of the character joint.</summary>
            <value>To be added.</value>
            <remarks>The limit is symmetric. Thus a value of eg. 30 will limit the rotation between -30 and 30. The limit is relative to the angle the two rigidbodies started the simulation out with.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.swingAxis">
            <summary>The secondary axis around which the joint can rotate.</summary>
            <value>To be added.</value>
            <remarks>CharacterJoint.swing1Limit are the limits of the rotation allowed around this axis.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.targetAngularVelocity">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CharacterJoint.targetRotation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.CircleCollider2D">
            <summary>Collider for 2D physics representing an circle.</summary>
            <remarks>See Also: BoxCollider class, PolygonCollider2D class.</remarks>
        </member>
        <member name="C:UnityEngine.CircleCollider2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CircleCollider2D.center">
            <summary>Center point of the circle in local space.</summary>
            <value>To be added.</value>
            <remarks>See Also: radius.</remarks>
        </member>
        <member name="P:UnityEngine.CircleCollider2D.radius">
            <summary>Radius of the circle.</summary>
            <value>To be added.</value>
            <remarks>See Also: center.</remarks>
        </member>
        <member name="T:UnityEngine.Cloth">
            <summary>Base class used to simulate cloth physics - shared by both InteractiveCloth and SkinnedCloth.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Cloth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.bendingStiffness">
            <summary>Bending stiffness of the cloth.</summary>
            <value>To be added.</value>
            <remarks>Must be between zero and one. Setting the value to zero disables bending stiffness simulation. In many cases, when you want a cloth to be more stiff, actually reducing the number of vertices will get you better results - and performance.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.damping">
            <summary>Damp cloth motion.</summary>
            <value>To be added.</value>
            <remarks>Set this to damp the motions of a cloth instance. Must be between zero and one. Setting this to zero will disable cloth damping.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.enabled">
            <summary>Is this cloth enabled?</summary>
            <value>To be added.</value>
            <remarks>This is the same as the checkbox next to the component label in the inspector. A disabled cloth component will not update it's physics simulation, so you can use this to suspend the simulation of cloth objects when they are not needed, as cloth simulation is a very CPU-intensive task.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.externalAcceleration">
            <summary>A constant, external acceleration applied to the cloth.</summary>
            <value>To be added.</value>
            <remarks>Use this to simulate constant forces on the cloth, such as wind waving a flag. See Also: Cloth.randomAcceleration, InteractiveCloth.AddForceAtPosition.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.normals">
            <summary>The current normals of the cloth object.</summary>
            <value>To be added.</value>
            <remarks>This gives you read access to the normals of the cloth object, so you can analyse it's current simulation state. Note that the normal indices may not necessarily correspond to the indices of the source mesh - especially when triangle stripping or UV seams are used in the source mesh (ie, multiple indices for the same vertex), cloth vertices will be different, as the cloth simulation only uses a single index for each vertex.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.randomAcceleration">
            <summary>A random, external acceleration applied to the cloth.</summary>
            <value>To be added.</value>
            <remarks>Use this to simulate randomly changing forces on the cloth, such as wind turbulences waving a flag. See Also: Cloth.externalAcceleration, InteractiveCloth.AddForceAtPosition.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.selfCollision">
            <summary>Will the cloth collide with itself?</summary>
            <value>To be added.</value>
            <remarks>Enable this only where needed, as it has a big impact on cloth performance.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.stretchingStiffness">
            <summary>Stretching stiffness of the cloth.</summary>
            <value>To be added.</value>
            <remarks>Must be greater than zero and smaller or equal to one. In many cases, when you want a cloth to be more stiff, actually reducing the number of vertices will get you better results - and performance.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.thickness">
            <summary>The thickness of the cloth surface.</summary>
            <value>To be added.</value>
            <remarks>This is the distance kept between any cloth vertex and and other collider (or other cloth vertex if self-collision is enabled).  Any object closer then this distance will collide with the cloth. If this value is too low, you may see the edges of objects intersecting the cloth surface. If this value is too high, you may see noticable distance between the cloth surface and colliding objects or stiffness in cloth motion if self-collision is enabled. Must be larger then zero.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.useGravity">
            <summary>Should gravity affect the cloth simulation?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Cloth.vertices">
            <summary>The current vertex positions of the cloth object.</summary>
            <value>To be added.</value>
            <remarks>This gives you read access to the vertex positions of the cloth object, so you can analyse it's current simulation state. Note that the vertex indices may not necessarily correspond to the indices of the source mesh - especially when triangle stripping or UV seams are used in the source mesh (ie, multiple indices for the same vertex), cloth vertices will be different, as the cloth simulation only uses a single index for each vertex.</remarks>
        </member>
        <member name="T:UnityEngine.ClothRenderer">
            <summary>The ClothRenderer component is used together with the InteractiveCloth component, to visualize a cloth object in the scene.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ClothRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ClothRenderer.pauseWhenNotVisible">
            <summary>Pause the cloth simulation, when the ClothRenderer is not currently visible.</summary>
            <value>To be added.</value>
            <remarks>If this is enable, the cloth will only be simulated, while the cloth is visible to any camera. This can improve performance of the physics simulation.</remarks>
        </member>
        <member name="T:UnityEngine.ClothSkinningCoefficient">
            <summary>The ClothSkinningCoefficient struct is used to set up how a SkinnedCloth component is allowed to move with respect to the SkinnedMeshRenderer it is attached to.</summary>
            <remarks>This is set using the SkinnedCloth.coefficients property on the SkinnedCloth component, which is a per-vertex array of ClothSkinningCoefficient structs. Typically, you will not set these values from code, but instead, set them up in the editor which shows up when you look at the SkinnedCloth component in the inspector.</remarks>
        </member>
        <member name="F:UnityEngine.ClothSkinningCoefficient.collisionSphereDistance">
            <summary>Definition of a sphere a vertex is not allowed to enter. This allows collision against the animated cloth.</summary>
            <remarks>The pair (collisionSphereRadius, collisionSphereDistance) define a sphere for each cloth vertex. The sphere's center is located at the position  constrainPosition - constrainNormal * (collisionSphereRadius + collisionSphereDistance) and its radius is collisionSphereRadius, where constrainPosition and constrainNormal are the vertex positions and normals generated by the SkinnedMeshRenderer. The SkinnedCloth makes sure that the cloth vertex does not enter this sphere. As a typical usecase, set collisionSphereDistance to zero and collisionSphereRadius to a large value w.r.t. the triangle size. In this setup, the cloth collides against the skinned mesh. Default: 0.0 Range: [0,inf).</remarks>
        </member>
        <member name="F:UnityEngine.ClothSkinningCoefficient.collisionSphereRadius">
            <summary>Definition of a sphere a vertex is not allowed to enter. This allows collision against the animated cloth.</summary>
            <remarks>The pair (collisionSphereRadius, collisionSphereDistance) define a sphere for each cloth vertex. The sphere's center is located at the position  constrainPosition - constrainNormal * (collisionSphereRadius + collisionSphereDistance) and its radius is collisionSphereRadius, where constrainPosition and constrainNormal are the vertex positions and normals generated by the SkinnedMeshRenderer. The SkinnedCloth makes sure that the cloth vertex does not enter this sphere. As a typical usecase, set collisionSphereDistance to zero and collisionSphereRadius to a large value w.r.t. the triangle size. In this setup, the cloth collides against the skinned mesh. Default: 0.5 Range: [0,inf).</remarks>
        </member>
        <member name="F:UnityEngine.ClothSkinningCoefficient.maxDistance">
            <summary>Distance a vertex is allowed to travel from the skinned mesh vertex position.</summary>
            <remarks>The SkinnedCloth component makes sure that the cloth vertices stay within maxDistance from the skinned mesh vertex positions.  If maxDistance is zero, the vertex is not simulated but set to the skinned mesh vertex position. This behavior is useful for attaching the cloth vertex to the skin of an animated character.  Default: 0.2 Range: [0, inf).</remarks>
        </member>
        <member name="F:UnityEngine.ClothSkinningCoefficient.maxDistanceBias">
            <summary>Distorts the sphere defined by the maxDistance based on skinned mesh normals.</summary>
            <remarks>The feature is disabled for a value of 0.0 (default). In this case the max distance sphere is undistorted. Decreasing the maxDistanceBias towards -1.0 reduces the distance the vertex is allowed to travel in the tangential direction. For -1.0 the vertex has to stay on the normal through the skinned mesh vertex position and within maxDistance to the skinned mesh vertex position. Increasing maxDistanceBias towards 1.0 reduces the discance the vertex is allowed to travel in the normal direction. At 1.0 the vertex can only move inside the tangental plane within  maxDistance from the skinned mesh vertex position. Default: 0.0 Range: [-1.0, 1.0].</remarks>
        </member>
        <member name="T:UnityEngine.Collider">
            <summary>A base class of all colliders.</summary>
            <remarks>See Also: BoxCollider, SphereCollider, CapsuleCollider, MeshCollider, PhysicMaterial, Rigidbody. If the object with the Collider needs to be moved during gameplay then you should also attach a Rigidbody component to the object. The Rigidbody can be set to be kinematic if you don't want the object to have physical interaction with other objects.</remarks>
        </member>
        <member name="C:UnityEngine.Collider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collider.attachedRigidbody">
            <summary>The rigidbody the collider is attached to.</summary>
            <value>To be added.</value>
            <remarks>Returns null if the collider is attached to no rigidbody. Colliders are automatically connected to the rigidbody attached  to the same GameObject or attached to any parent GameObject.</remarks>
        </member>
        <member name="P:UnityEngine.Collider.bounds">
            <summary>The world space bounding volume of the collider.</summary>
            <value>To be added.</value>
            <remarks>Note that this will be an empty bounding box if the collider is disabled or the GameObject  is inactive.</remarks>
        </member>
        <member name="M:UnityEngine.Collider.ClosestPointOnBounds(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>The closest point to the bounding box of the attached collider.</summary>
            <returns>To be added.</returns>
            <remarks>This can be used to calculate hit points when applying explosion damage.</remarks>
        </member>
        <member name="P:UnityEngine.Collider.enabled">
            <summary>Enabled Colliders will collide with other colliders, disabled Colliders won't.</summary>
            <value>To be added.</value>
            <remarks>This is shown as the small checkbox in the inspector of the Colliders.</remarks>
        </member>
        <member name="P:UnityEngine.Collider.isTrigger">
            <summary>Is the collider a trigger?</summary>
            <value>To be added.</value>
            <remarks>A trigger doesn't collide with rigid bodies. Instead it sends OnTriggerEnter, OnTriggerExit and OnTriggerStay message when a rigidbody enters or exits the trigger.</remarks>
        </member>
        <member name="P:UnityEngine.Collider.material">
            <summary>The material used by the collider.</summary>
            <value>To be added.</value>
            <remarks>If material is shared by colliders, it will duplicate the material and assign it to the collider.</remarks>
        </member>
        <member name="M:UnityEngine.Collider.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single)">
            <summary>Casts a Ray that ignores all Colliders except this one.</summary>
            <returns>True when the ray intersects any collider, otherwise false.</returns>
            <remarks>Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</remarks>
            <example>// pragma below is needed due to a UnityJS issue  #pragma strict function Update(){    var ray : Ray = Camera.main.ScreenPointToRay (Input.mousePosition);    var hit : RaycastHit;    if (collider.Raycast (ray, hit, 100.0)) {      Debug.DrawLine (ray.origin, hit.point);    }  }</example>
            <param name="ray">The starting point and direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the ray.</param>
        </member>
        <member name="P:UnityEngine.Collider.sharedMaterial">
            <summary>The shared physic material of this collider.</summary>
            <value>To be added.</value>
            <remarks>Modifying this material will change the surface properties of all colliders using the material. In most cases you want to modify Collider.material instead.</remarks>
        </member>
        <member name="T:UnityEngine.Collider2D">
            <summary>Parent class for collider types used with 2D gameplay.</summary>
            <remarks>See Also: BoxCollider2D class, CircleCollider2D class, PolygonCollider2D class.</remarks>
        </member>
        <member name="C:UnityEngine.Collider2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collider2D.attachedRigidbody">
            <summary>The Rigidbody2D attached to the Collider2D's GameObject.</summary>
            <value>To be added.</value>
            <remarks>This property will be null if no Rigidbody2D is attached. See Also: Rigidbody2D::ref::</remarks>
        </member>
        <member name="P:UnityEngine.Collider2D.isTrigger">
            <summary>Is this collider configured as a trigger?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Collider2D.OverlapPoint(UnityEngine.Vector2)">
            <summary>Check if a collider overlaps a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This will always return false when used on a EdgeCollider2D.</remarks>
            <param name="point">A point in world space.</param>
        </member>
        <member name="P:UnityEngine.Collider2D.shapeCount">
            <summary>The number of separate shaped regions in the collider.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collider2D.sharedMaterial">
            <summary>The PhysicsMaterial2D that is applied to this collider.</summary>
            <value>To be added.</value>
            <remarks>See Also: PhysicsMaterial2D class.</remarks>
        </member>
        <member name="T:UnityEngine.Collision">
            <summary>Describes collision.</summary>
            <remarks>Collision information is passed to Collider.OnCollisionEnter, Collider.OnCollisionStay and Collider.OnCollisionExit events. See Also: ContactPoint.</remarks>
        </member>
        <member name="C:UnityEngine.Collision">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.collider">
            <summary>The Collider we hit (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To find all colliders that were hit in detail you have to iterate the contact points ( contacts property).</remarks>
        </member>
        <member name="P:UnityEngine.Collision.contacts">
            <summary>The contact points generated by the physics engine.</summary>
            <value>To be added.</value>
            <remarks>Every contact contains a contact point, normal and the two colliders that collided (see ContactPoint ). From inside OnCollisionStay or OnCollisionEnter you can always be sure that contacts has at least one element.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.frictionForceSum">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.gameObject">
            <summary>The GameObject whose collider we are colliding with. (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Collision.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.impactForceSum">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.other">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.relativeVelocity">
            <summary>The relative linear velocity of the two colliding objects (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.rigidbody">
            <summary>The Rigidbody we hit (Read Only). This is null if the object we hit is a collider with no rigidbody attached.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision.transform">
            <summary>The Transform of the object we hit (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If we collided against a collider with a Rigidbody, the transform will be the transform attached to the rigidbody. If we collided against a collider without a rigidbody, the transform will be the transform attached to the collider.</remarks>
        </member>
        <member name="T:UnityEngine.Collision2D">
            <summary>Information returned by a collision in 2D physics.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Collision2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision2D.collider">
            <summary>The incoming Collider2D involved in the collision.</summary>
            <value>To be added.</value>
            <remarks>See Also: Collider2D class.</remarks>
        </member>
        <member name="P:UnityEngine.Collision2D.contacts">
            <summary>The specific points of contact with the incoming Collider2D.</summary>
            <value>To be added.</value>
            <remarks>See Also: Collider2D class.</remarks>
        </member>
        <member name="P:UnityEngine.Collision2D.gameObject">
            <summary>The incoming GameObject involved in the collision.</summary>
            <value>To be added.</value>
            <remarks>See Also: GameObject class.</remarks>
        </member>
        <member name="P:UnityEngine.Collision2D.relativeVelocity">
            <summary>The relative linear velocity of the two colliding objects (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision2D.rigidbody">
            <summary>The incoming Rigidbody2D involved in the collision.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Collision2D.transform">
            <summary>The Transform of the incoming object involved in the collision.</summary>
            <value>To be added.</value>
            <remarks>See Also: Transform class.</remarks>
        </member>
        <member name="T:UnityEngine.CollisionDetectionMode">
            <summary>The collision detection mode constants used for Rigidbody.collisionDetectionMode.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionDetectionMode.Continuous">
            <summary>Continuous collision detection is on for colliding with static mesh geometry.</summary>
            <remarks>Collisions will be detected for any static mesh geometry in the path of this Rigidbody, even if the collision occurs between two FixedUpdate steps. Static mesh geometry is any MeshCollider which does not have a Rigidbody attached. This also prevent Rigidbodies set to ContinuousDynamic mode from passing through this Rigidbody.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionDetectionMode.ContinuousDynamic">
            <summary>Continuous collision detection is on for colliding with static and dynamic geometry.</summary>
            <remarks>Prevent this Rigidbody from passing through static mesh geometry, and through other  Rigidbodies which have continuous collision detection enabled, when it is moving fast. This is the slowest collision detection mode, and should only be used for selected fast moving objects.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionDetectionMode.Discrete">
            <summary>Continuous collision detection is off for this Rigidbody.</summary>
            <remarks>This is the default collision detection mode, and it is the fastest mode. Collisions for this collider will only be checked at the content's Time.fixedDeltaTime.</remarks>
        </member>
        <member name="T:UnityEngine.CollisionDetectionMode2D">
            <summary>Options for the detection mode used by a Rigidbody2D.</summary>
            <remarks>See Also: Rigidbody2D.collisionDetectionMode.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionDetectionMode2D.Continuous">
            <summary>The Rigidbody2D estimates its position between physics updates.</summary>
            <remarks>See Also: Rigidbody2D class.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionDetectionMode2D.None">
            <summary>No collision detection is used on the Rigidbody2D.</summary>
            <remarks>See Also: Rigidbody2D class.</remarks>
        </member>
        <member name="T:UnityEngine.CollisionFlags">
            <summary>CollisionFlags is a bitmask returned by CharacterController.Move.</summary>
            <remarks>It gives you a broad overview of where your character collided with any other objects.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionFlags.Above">
            <summary>CollisionFlags is a bitmask returned by CharacterController.Move.</summary>
            <remarks>It gives you a broad overview of where your character collided with any other objects.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionFlags.Below">
            <summary>CollisionFlags is a bitmask returned by CharacterController.Move.</summary>
            <remarks>It gives you a broad overview of where your character collided with any other objects.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionFlags.CollidedAbove">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.CollisionFlags.CollidedBelow">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.CollisionFlags.CollidedSides">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.CollisionFlags.None">
            <summary>CollisionFlags is a bitmask returned by CharacterController.Move.</summary>
            <remarks>It gives you a broad overview of where your character collided with any other objects.</remarks>
        </member>
        <member name="F:UnityEngine.CollisionFlags.Sides">
            <summary>CollisionFlags is a bitmask returned by CharacterController.Move.</summary>
            <remarks>It gives you a broad overview of where your character collided with any other objects.</remarks>
        </member>
        <member name="T:UnityEngine.Color">
            <summary>Representation of RGBA colors.</summary>
            <remarks>This structure is used throughout Unity to pass colors around.  Each color component is a floating point value with a range from 0 to 1. Components ( r, g, b ) define a color in RGB color space. Alpha component ( a ) defines transparency - alpha of one is completely opaque, alpha of zero is completely transparent.</remarks>
        </member>
        <member name="C:UnityEngine.Color(System.Single,System.Single,System.Single)">
            <param name="r">To be added.</param>
            <param name="g">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Color(System.Single,System.Single,System.Single,System.Single)">
            <param name="r">To be added.</param>
            <param name="g">To be added.</param>
            <param name="b">To be added.</param>
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color.a">
            <summary>Alpha component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color.b">
            <summary>Blue component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.black">
            <summary>Solid black. RGBA is (0, 0, 0, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.blue">
            <summary>Solid blue. RGBA is (0, 0, 1, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.clear">
            <summary>Completely transparent. RGBA is (0, 0, 0, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.cyan">
            <summary>Cyan. RGBA is (0, 1, 1, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color.g">
            <summary>Green component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.gamma">
            <summary>A version of the color that has had the gamma curve applied.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.gray">
            <summary>Gray. RGBA is (0.5, 0.5, 0.5, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.grayscale">
            <summary>The grayscale value of the color. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.green">
            <summary>Solid green. RGBA is (0, 1, 0, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.grey">
            <summary>English spelling for gray. RGBA is the same (0.5, 0.5, 0.5, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.Lerp(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Interpolates between colors a and b by t.</summary>
            <returns>To be added.</returns>
            <remarks>t is clamped between 0 and 1. When t is 0 returns a. When t is 1 returns b.</remarks>
        </member>
        <member name="P:UnityEngine.Color.linear">
            <summary>A version of the color that has had the inverse gamma curve applied.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.magenta">
            <summary>Magenta. RGBA is (1, 0, 1, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Addition(UnityEngine.Color,UnityEngine.Color)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Division(UnityEngine.Color,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Equality(UnityEngine.Color,UnityEngine.Color)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Implicit(UnityEngine.Color)~UnityEngine.Vector4">
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Implicit(UnityEngine.Vector4)~UnityEngine.Color">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Inequality(UnityEngine.Color,UnityEngine.Color)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Multiply(System.Single,UnityEngine.Color)">
            <param name="b">To be added.</param>
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Multiply(UnityEngine.Color,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Multiply(UnityEngine.Color,UnityEngine.Color)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.op_Subtraction(UnityEngine.Color,UnityEngine.Color)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color.r">
            <summary>Red component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.red">
            <summary>Solid red. RGBA is (1, 0, 0, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.ToString">
            <summary>Returns a nicely formatted string of this color.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string of this color.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.white">
            <summary>Solid white. RGBA is (1, 1, 1, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Color.yellow">
            <summary>Yellow. RGBA is (1, 0.92, 0.016, 1), but the color is nice to look at!</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Color32">
            <summary>Representation of RGBA colors in 32 bit format.</summary>
            <remarks>Each color component is a byte value with a range from 0 to 255. Components ( r, g, b ) define a color in RGB color space. Alpha component ( a ) defines transparency - alpha of 255 is completely opaque, alpha of zero is completely transparent.</remarks>
        </member>
        <member name="C:UnityEngine.Color32(System.Byte,System.Byte,System.Byte,System.Byte)">
            <param name="r">To be added.</param>
            <param name="g">To be added.</param>
            <param name="b">To be added.</param>
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color32.a">
            <summary>Alpha component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color32.b">
            <summary>Blue component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color32.g">
            <summary>Green component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color32.Lerp(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Interpolates between colors a and b by t.</summary>
            <returns>To be added.</returns>
            <remarks>t is clamped between 0 and 1. When t is 0 returns a. When t is 1 returns b.</remarks>
        </member>
        <member name="M:UnityEngine.Color32.op_Implicit(UnityEngine.Color)~UnityEngine.Color32">
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color32.op_Implicit(UnityEngine.Color32)~UnityEngine.Color">
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Color32.r">
            <summary>Red component of the color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color32.ToString">
            <summary>Returns a nicely formatted string of this color.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Color32.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string of this color.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ColorSpace">
            <summary>Valid color spaces.</summary>
            <remarks>See Also: LightmapSettings.bakedColorSpace.</remarks>
        </member>
        <member name="F:UnityEngine.ColorSpace.Gamma">
            <summary>Lightmap has been baked for gamma rendering.</summary>
            <remarks>See Also: LightmapSettings.bakedColorSpace.</remarks>
        </member>
        <member name="F:UnityEngine.ColorSpace.Linear">
            <summary>Lightmap has been baked for linear rendering.</summary>
            <remarks>See Also: LightmapSettings.bakedColorSpace.</remarks>
        </member>
        <member name="F:UnityEngine.ColorSpace.Uninitialized">
            <summary>Uninitialized colorspace.</summary>
            <remarks>See Also: LightmapSettings.bakedColorSpace.</remarks>
        </member>
        <member name="T:UnityEngine.CombineInstance">
            <summary>Struct used to describe meshes to be combined using Mesh.CombineMeshes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.CombineInstance.mesh">
            <summary>Mesh to combine.</summary>
            <value>To be added.</value>
            <remarks>See Also: Mesh.CombineMeshes, subMeshIndex, transform.</remarks>
        </member>
        <member name="P:UnityEngine.CombineInstance.subMeshIndex">
            <summary>Submesh index of the mesh.</summary>
            <value>To be added.</value>
            <remarks>See Also: Mesh.CombineMeshes, mesh, transform.</remarks>
        </member>
        <member name="P:UnityEngine.CombineInstance.transform">
            <summary>Matrix to transform the mesh with before combining.</summary>
            <value>To be added.</value>
            <remarks>See Also: Mesh.CombineMeshes, mesh, subMeshIndex.</remarks>
        </member>
        <member name="T:UnityEngine.Compass">
            <summary>Interface into compass functionality.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Compass">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Compass.enabled">
            <summary>Used to enable or disable compass. Note, that if you want Input.compass.trueHeading property to contain a valid value, you must also enable location updates by calling Input.location.Start().</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Compass.magneticHeading">
            <summary>The heading in degrees relative to the magnetic North Pole. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The value in this property is always measured relative to the top  of the screen in its current orientation.  The heading of magnetic  north is not exactly the same as true geographical north - to get  the exact heading, use the trueHeading property.</remarks>
        </member>
        <member name="P:UnityEngine.Compass.rawVector">
            <summary>The raw geomagnetic data measured in microteslas. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The compass is actually a magnetometer that measures the magnetic  field in the device's XYZ coordinates - in the absence of a stronger  magnet, it will measure the Earth's field from which the compass heading  can be found. This property can be used if you want to make non-standard  use of the compass (eg, find the heading from the X or Z axis of the device).</remarks>
        </member>
        <member name="P:UnityEngine.Compass.timestamp">
            <summary>Timestamp (in seconds since 1970) when the heading was last time updated. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Compass.trueHeading">
            <summary>The heading in degrees relative to the geographic North Pole. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The value in this property is always measured relative to the top  of the screen in its current orientation.  Note, that if you want this property to contain a valid value, you  must also enable location updates by calling Input.location.Start(). (Read Only)</remarks>
        </member>
        <member name="T:UnityEngine.Component">
            <summary>Base class for everything attached to GameObjects.</summary>
            <remarks>Note that your code will never directly create a Component. Instead, you write script code, and attach the script to a GameObject. See Also: ScriptableObject as a way to create scripts that do not attach to any GameObject.</remarks>
        </member>
        <member name="C:UnityEngine.Component">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.active">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.animation">
            <summary>The Animation attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.audio">
            <summary>The AudioSource attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Component.BroadcastMessage(System.String)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
            <param name="methodName">Name of the method to call.</param>
        </member>
        <member name="M:UnityEngine.Component.BroadcastMessage(System.String,System.Object)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
            <param name="methodName">Name of the method to call.</param>
            <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
        </member>
        <member name="M:UnityEngine.Component.BroadcastMessage(System.String,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
            <param name="methodName">Name of the method to call.</param>
            <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
        </member>
        <member name="M:UnityEngine.Component.BroadcastMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
            <param name="methodName">Name of the method to call.</param>
            <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
            <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
        </member>
        <member name="P:UnityEngine.Component.camera">
            <summary>The Camera attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.collider">
            <summary>The Collider attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.collider2D">
            <summary>The Collider2D component attached to the object.</summary>
            <value>To be added.</value>
            <remarks>This returns null if no Collider2D is attached. See Also: Collider2D class.</remarks>
        </member>
        <member name="M:UnityEngine.Component.CompareTag(System.String)">
            <summary>Is this GameObject tagged with tag?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="tag">The tag to compare.</param>
        </member>
        <member name="P:UnityEngine.Component.constantForce">
            <summary>The ConstantForce attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.gameObject">
            <summary>The GameObject this component is attached to. A component is always attached to a GameObject.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Component.GetComponent(System.String)">
            <summary>Returns the component of Type type if the GameObject has one attached, null if it doesn't.Generic version. See the Generic Functions page for more details.Returns the component with name type if the GameObject has one attached, null if it doesn't.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.Component.GetComponent(System.Type)">
            <summary>Returns the component of Type type if the GameObject has one attached, null if it doesn't.Generic version. See the Generic Functions page for more details.Returns the component with name type if the GameObject has one attached, null if it doesn't.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.Component.GetComponent``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Component.GetComponentInChildren(System.Type)">
            <summary>Returns the component of Type type in the GameObject or any of its children using depth first search.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.Component.GetComponentInChildren``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Component.GetComponents(System.Type)">
            <summary>Returns all components of Type type in the GameObject.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.Component.GetComponents``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Component.GetComponentsInChildren(System.Type)">
            <summary>Returns all components of Type type in the GameObject or any of its children.Generic version. See the Generic Functions page for more details.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.Component.GetComponentsInChildren(System.Type,System.Boolean)">
            <summary>Returns all components of Type type in the GameObject or any of its children.Generic version. See the Generic Functions page for more details.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="t">The type of Component to retrieve.</param>
            <param name="includeInactive">Should inactive Components be included in the found set?</param>
        </member>
        <member name="M:UnityEngine.Component.GetComponentsInChildren``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Component.GetComponentsInChildren``1(System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="includeInactive">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.guiElement">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.guiText">
            <summary>The GUIText attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.guiTexture">
            <summary>The GUITexture attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.hingeJoint">
            <summary>The HingeJoint attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.light">
            <summary>The Light attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.networkView">
            <summary>The NetworkView attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.particleEmitter">
            <summary>The ParticleEmitter attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.particleSystem">
            <summary>The ParticleSystem attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.renderer">
            <summary>The Renderer attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.rigidbody">
            <summary>The Rigidbody attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Component.rigidbody2D">
            <summary>The Rigidbody2D that is attached to the Component's GameObject.</summary>
            <value>To be added.</value>
            <remarks>This property will be null if no Rigidbody2D::ref:: is attached. See Also: rigidbody.</remarks>
        </member>
        <member name="M:UnityEngine.Component.SendMessage(System.String)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of the method to call.</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessage(System.String,System.Object)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of the method to call.</param>
            <param name="value">Optional parameter for the method.</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessage(System.String,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of the method to call.</param>
            <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of the method to call.</param>
            <param name="value">Optional parameter for the method.</param>
            <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessageUpwards(System.String)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of method to call.</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,System.Object)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of method to call.</param>
            <param name="value">Optional parameter value for the method.</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of method to call.</param>
            <param name="options">Should an error be raised if the method does not exist on the target object?</param>
        </member>
        <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,System.Object,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero arguments. If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</remarks>
            <param name="methodName">Name of method to call.</param>
            <param name="value">Optional parameter value for the method.</param>
            <param name="options">Should an error be raised if the method does not exist on the target object?</param>
        </member>
        <member name="P:UnityEngine.Component.tag">
            <summary>The tag of this GameObject.</summary>
            <value>To be added.</value>
            <remarks>A tag can be used to identify a GameObject. Tags must be declared in the tag manager before using them.</remarks>
        </member>
        <member name="P:UnityEngine.Component.transform">
            <summary>The Transform attached to this GameObject (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ComputeBuffer">
            <summary>Data buffer to hold data for compute shaders.</summary>
            <remarks>ComputeShader programs often need arbitrary data to be read &amp; written into memory buffers. ComputeBuffer class is exactly for that - you can create &amp; fill them from script code, and use them in compute shaders or regular shaders. Compute shaders need a fairly modern GPU and are only available when using DirectX 11 right now. On shader side, ComputeBuffers map to StructuredBuffer and RWStructuredBuffer in HLSL. See Also: SystemInfo.supportsComputeShaders, ComputeShader class, Shader.SetGlobalBuffer, Material.SetBuffer, Compute Shaders.</remarks>
        </member>
        <member name="C:UnityEngine.ComputeBuffer(System.Int32,System.Int32)">
            <param name="count">To be added.</param>
            <param name="stride">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ComputeBuffer(System.Int32,System.Int32,UnityEngine.ComputeBufferType)">
            <param name="count">To be added.</param>
            <param name="stride">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeBuffer.CopyCount(UnityEngine.ComputeBuffer,UnityEngine.ComputeBuffer,System.Int32)">
            <param name="src">To be added.</param>
            <param name="dst">To be added.</param>
            <param name="dstOffset">To be added.</param>
            <summary>Set buffer data.</summary>
            <remarks>Compute buffer data can be filled from an aribrary array of value types (simple types like ints or floats; or struct types like Vector3 or Color). Read buffer data. Reads buffer data into an aribrary array of value types (simple types like ints or floats; or struct types like Vector3 or Color). Note that reading data back from the buffer can be quite slow, as the CPU will have to wait for GPU to finish any pending operations and read the data back to system memory. Copy counter value of append/consume buffer into another buffer. CopyCount takes an append or consume buffer as src, and copies its "counter" value into dst buffer at given byte offset. This is most commonly used in conjunction with Graphics.DrawProceduralIndirect, to render arbitrary number of primitives without reading their count back to the CPU.</remarks>
        </member>
        <member name="P:UnityEngine.ComputeBuffer.count">
            <summary>Number of elements in the buffer (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeBuffer.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeBuffer.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeBuffer.GetData(System.Array)">
            <summary>Read data values from the buffer into an array.</summary>
            <remarks>To be added.</remarks>
            <param name="data">An array to receive the data.</param>
        </member>
        <member name="M:UnityEngine.ComputeBuffer.Release">
            <summary>Release a Compute Buffer.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeBuffer.SetData(System.Array)">
            <summary>Set the buffer with values from an array.</summary>
            <remarks>To be added.</remarks>
            <param name="data">Array of values to fill the buffer.</param>
        </member>
        <member name="P:UnityEngine.ComputeBuffer.stride">
            <summary>Size of one element in the buffer (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ComputeBufferType">
            <summary>ComputeBuffer type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ComputeBufferType.Append">
            <summary>Append-consume ComputeBuffer type.</summary>
            <remarks>Allows a buffer to be treated like a stack in compute shaders.</remarks>
        </member>
        <member name="F:UnityEngine.ComputeBufferType.Counter">
            <summary>ComputeBuffer with a counter.</summary>
        </member>
        <member name="F:UnityEngine.ComputeBufferType.Default">
            <summary>Default ComputeBuffer type.</summary>
            <remarks>A simple structured buffer in DX11.</remarks>
        </member>
        <member name="F:UnityEngine.ComputeBufferType.DrawIndirect">
            <summary>ComputeBuffer used for Graphics.DrawProceduralIndirect.</summary>
        </member>
        <member name="F:UnityEngine.ComputeBufferType.Raw">
            <summary>Raw ComputeBuffer type.</summary>
            <remarks>Buffer that allows raw unstructured access; underlying DX11 format is typeless R32.</remarks>
        </member>
        <member name="T:UnityEngine.ComputeShader">
            <summary>Compute Shader asset.</summary>
            <remarks>Compute shaders are programs that run on the GPU outside of the normal rendering pipeline. They correspond to compute shader assets in the project (.compute files). Compute shaders need a fairly modern GPU and are only available when using DirectX 11 right now. See Also: SystemInfo.supportsComputeShaders, ComputeBuffer class, Compute Shaders.</remarks>
        </member>
        <member name="C:UnityEngine.ComputeShader">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.Dispatch(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="kernelIndex">To be added.</param>
            <param name="threadsX">To be added.</param>
            <param name="threadsY">To be added.</param>
            <param name="threadsZ">To be added.</param>
            <summary>Execute a compute shader.</summary>
            <remarks>This functions "runs" the compute shader, with the given work size as indicated by threadsX, threadsY, threadsZ parameters. See Also: FindKernel, Compute Shaders.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.FindKernel(System.String)">
            <param name="name">To be added.</param>
            <summary>Find ComputeShader kernel index.</summary>
            <returns>To be added.</returns>
            <remarks>A single compute shader can contain many "kernels" (functions that do the computation); FindKernel returns kernel index given the name. If name is not found, -1 is returned.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetBuffer(System.Int32,System.String,UnityEngine.ComputeBuffer)">
            <param name="kernelIndex">To be added.</param>
            <param name="name">To be added.</param>
            <param name="buffer">To be added.</param>
            <summary>This function can either set an input or output compute buffer.</summary>
            <remarks>See Also: FindKernel, ComputeBuffer.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetFloat(System.String,System.Single)">
            <param name="name">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Set a float parameter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetFloats(System.String,System.Single[])">
            <param name="name">To be added.</param>
            <param name="values">To be added.</param>
            <summary>Set multiple consecutive float parameters at once.</summary>
            <remarks>This function can be used to set float vector, float array or float vector array values. For example, float4 myArray[4] in the compute shader can be filled by passing 16 floats.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetInt(System.String,System.Int32)">
            <param name="name">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Set an integer parameter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetInts(System.String,System.Int32[])">
            <param name="name">To be added.</param>
            <param name="values">To be added.</param>
            <summary>Set multiple consecutive integer parameters at once.</summary>
            <remarks>This function can be used to set int vector, int array or int vector array values. For example, int4 myArray[4] in the compute shader can be filled by passing 16 integers.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.String,UnityEngine.Texture)">
            <param name="kernelIndex">To be added.</param>
            <param name="name">To be added.</param>
            <param name="texture">To be added.</param>
            <summary>Set a texture parameter.</summary>
            <remarks>This function can either set a regular texture that is read in the compute shader, or an output texture that is written into by the shader. For an output texture, it has to be a RenderTexture with random write flag enabled, see RenderTexture.enableRandomWrite. See Also: FindKernel, RenderTexture.enableRandomWrite.</remarks>
        </member>
        <member name="M:UnityEngine.ComputeShader.SetVector(System.String,UnityEngine.Vector4)">
            <param name="name">To be added.</param>
            <param name="val">To be added.</param>
            <summary>Set a vector parameter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ConfigurableJoint">
            <summary>The configurable joint is an extremely flexible joint giving you complete control over rotation and linear motion.</summary>
            <remarks>You can build all other joints with it and much more but it is also more complicated to setup. It gives you control over motors, drives and joint limits for each rotation axis and and linear degree of freedom.</remarks>
        </member>
        <member name="C:UnityEngine.ConfigurableJoint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularXDrive">
            <summary>Definition of how the joint's rotation will behave around its local X axis. Only used if Rotation Drive Mode is Swing &amp;amp; Twist.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularXMotion">
            <summary>Allow rotation around the X axis to be Free, completely Locked, or Limited according to Low and High Angular XLimit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularYLimit">
            <summary>Boundary defining rotation restriction, based on delta from original rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularYMotion">
            <summary>Allow rotation around the Y axis to be Free, completely Locked, or Limited according to Angular YLimit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularYZDrive">
            <summary>Definition of how the joint's rotation will behave around its local Y and Z axes. Only used if Rotation Drive Mode is Swing &amp;amp; Twist.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularZLimit">
            <summary>Boundary defining rotation restriction, based on delta from original rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.angularZMotion">
            <summary>Allow rotation around the Z axis to be Free, completely Locked, or Limited according to Angular ZLimit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.configuredInWorldSpace">
            <summary>If enabled, all Target values will be calculated in world space instead of the object's local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.highAngularXLimit">
            <summary>Boundary defining upper rotation restriction, based on delta from original rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.linearLimit">
            <summary>Boundary defining movement restriction, based on distance from the joint's origin.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.lowAngularXLimit">
            <summary>Boundary defining lower rotation restriction, based on delta from original rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.projectionAngle">
            <summary>Difference in angle from the Connected Body that must be exceeded before the object snaps back to an acceptable position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.projectionDistance">
            <summary>Distance from the Connected Body that must be exceeded before the object snaps back to an acceptable position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.projectionMode">
            <summary>Properties to track to snap the object back to its constrained position when it drifts off too much.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.rotationDriveMode">
            <summary>Control the object's rotation with either X &amp;amp; YZ or Slerp Drive by itself.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.secondaryAxis">
            <summary>The joint's secondary axis.</summary>
            <value>To be added.</value>
            <remarks>Together, secondary and primary axes define the joint's coordinate space.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.slerpDrive">
            <summary>Definition of how the joint's rotation will behave around all local axes. Only used if Rotation Drive Mode is Slerp Only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.swapBodies">
            <summary>If enabled, the two connected rigidbodies will be swapped, as if the joint was attached to the other body.</summary>
            <value>To be added.</value>
            <remarks>Prior to Unity 3.4, this was wrongfully applied to all ConfigurableJoints with the configuredInWorldSpace property set. If you want to restore the behaviour of older Unity versions and you are using configuredInWorldSpace, enable this property.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.targetAngularVelocity">
            <summary>This is a Vector3. It defines the desired angular velocity that the joint should rotate into.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.targetPosition">
            <summary>The desired position that the joint should move into.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.targetRotation">
            <summary>This is a Quaternion. It defines the desired rotation that the joint should rotate into.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.targetVelocity">
            <summary>The desired velocity that the joint should move along.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.xDrive">
            <summary>Definition of how the joint's movement will behave along its local X axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.xMotion">
            <summary>Allow movement along the X axis to be Free, completely Locked, or Limited according to Linear Limit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.yDrive">
            <summary>Definition of how the joint's movement will behave along its local Y axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.yMotion">
            <summary>Allow movement along the Y axis to be Free, completely Locked, or Limited according to Linear Limit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.zDrive">
            <summary>Definition of how the joint's movement will behave along its local Z axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConfigurableJoint.zMotion">
            <summary>Allow movement along the Z axis to be Free, completely Locked, or Limited according to Linear Limit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ConfigurableJointMotion">
            <summary>Constrains movement for a ConfigurableJoint along the 6 axes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ConfigurableJointMotion.Free">
            <summary>Motion along the axis will be completely free and completely unconstrained.</summary>
        </member>
        <member name="F:UnityEngine.ConfigurableJointMotion.Limited">
            <summary>Motion along the axis will be limited by the respective limit.</summary>
        </member>
        <member name="F:UnityEngine.ConfigurableJointMotion.Locked">
            <summary>Motion along the axis will be locked.</summary>
        </member>
        <member name="T:UnityEngine.ConnectionTesterStatus">
            <summary>The various test results the connection tester may return with.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.Error">
            <summary>Some unknown error occurred.</summary>
            <remarks>Possibly there is no network connectivity available.</remarks>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted">
            <summary>Port-restricted NAT type, can do NAT punchthrough to everyone except symmetric.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.LimitedNATPunchthroughSymmetric">
            <summary>Symmetric NAT type, cannot do NAT punchthrough to other symmetric types nor port restricted type.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone">
            <summary>Address-restricted cone type, NAT punchthrough fully supported.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.NATpunchthroughFullCone">
            <summary>Full cone type, NAT punchthrough fully supported.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.PrivateIPHasNATPunchThrough">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.PrivateIPNoNATPunchthrough">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.PublicIPIsConnectable">
            <summary>Public IP address detected and game listen port is accessible to the internet.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.PublicIPNoServerStarted">
            <summary>Public IP address detected but server is not initialized and no port is listening.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.PublicIPPortBlocked">
            <summary>Public IP address detected but the port is not connectable from the internet.</summary>
        </member>
        <member name="F:UnityEngine.ConnectionTesterStatus.Undetermined">
            <summary>Test result undetermined, still in progress.</summary>
        </member>
        <member name="T:UnityEngine.ConstantForce">
            <summary>A force applied constantly.</summary>
            <remarks>This is a small physics utility class used to apply a continous force to an object. Rigidbody.AddForce applies a force to the Rigidbody only for one frame, thus you have to keep calling the function. ConstantForce on the other hand will apply the force every frame until you change the force or torque to a new value. See Also: Rigidbody.</remarks>
        </member>
        <member name="C:UnityEngine.ConstantForce">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConstantForce.force">
            <summary>The force applied to the rigidbody every frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConstantForce.relativeForce">
            <summary>The force - relative to the rigid bodies coordinate system - applied every frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConstantForce.relativeTorque">
            <summary>The torque - relative to the rigid bodies coordinate system - applied every frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ConstantForce.torque">
            <summary>The torque applied to the rigidbody every frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ConstructorSafeAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ConstructorSafeAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ContactPoint">
            <summary>Describes a contact point where the collision occurs.</summary>
            <remarks>Contact points are stored in Collision structure. See Also: Collision, Collider.OnCollisionEnter, Collider.OnCollisionStay, Collider.OnCollisionExit.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint.normal">
            <summary>Normal of the contact point.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint.otherCollider">
            <summary>The other collider in contact.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint.point">
            <summary>The point of contact.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint.thisCollider">
            <summary>The first collider in contact.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ContactPoint2D">
            <summary>Details about a specific point of contact involved in a 2D physics collision.</summary>
            <remarks>See Also: Collision2D class.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint2D.collider">
            <summary>The collider attached to the object receiving the collision message.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint2D.normal">
            <summary>Surface normal at the contact point.</summary>
            <value>To be added.</value>
            <remarks>This is the normal vector (ie, the vector perpendicular to the surface) of the incoming Collider2D at the contact point. See Also: Collider2D class.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint2D.otherCollider">
            <summary>The incoming collider involved in the collision at this contact point.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ContactPoint2D.point">
            <summary>The point of contact between the two colliders in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ContextMenu">
            <summary>The ContextMenu attribute allows you to add commands to the context menu.</summary>
            <remarks>In the inspector of the attached script. When the user selects the context menu, the function will be executed. This is most useful for automatically setting up scene data from the script. The function has to be non-static.</remarks>
        </member>
        <member name="C:UnityEngine.ContextMenu(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ContextMenu.menuItem">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ControllerColliderHit">
            <summary>ControllerColliderHit is used by CharacterController.OnControllerColliderHit to give detailed information about the collision and how to deal with it.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ControllerColliderHit">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.collider">
            <summary>The collider that was hit by the controller.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.controller">
            <summary>The controller that hit the collider.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.gameObject">
            <summary>The GameObject that was hit by the controller.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.moveDirection">
            <summary>Approximately the direction from the center of the capsule to the point we touch.</summary>
            <value>To be added.</value>
            <remarks>This can be used to find a reasonable direction to apply forces to touched rigidbodies.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.moveLength">
            <summary>How far the character has travelled until it hit the collider.</summary>
            <value>To be added.</value>
            <remarks>Note that this can is different from what you pass to CharacterController.Move, because all movement is constrained by collisions.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.normal">
            <summary>The normal of the surface we collided with in world space.</summary>
            <value>To be added.</value>
            <remarks>Note: When the CharacterController is colliding with an edge or a corner rather than a flat surface, the reported normal may be different when colliding with BoxColliders than when colliding with MeshColliders. This is due to a limitation in how PhysX handles Capsule/BoxCollider collisions.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.point">
            <summary>The impact point in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.rigidbody">
            <summary>The rigidbody that was hit by the controller.</summary>
            <value>To be added.</value>
            <remarks>Null if we didn't touch a rigidbody but a static collider.</remarks>
        </member>
        <member name="P:UnityEngine.ControllerColliderHit.transform">
            <summary>The transform that was hit by the controller.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Coroutine">
            <summary>MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines and do not hold any exposed properties or functions.</summary>
            <remarks>A coroutine is a function that can suspend its execution (yield) until the given given YieldInstruction finishes.</remarks>
        </member>
        <member name="M:UnityEngine.Coroutine.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.CrashReport">
            <summary>Holds data for a single application crash event and provides access to all gathered crash reports.</summary>
            <remarks>If compiled with appropriate settings, Unity will try to gather useful information, like location and thread stack traces, when your application crashes. Upon the next application start, if the data gathering was successful, all crash information will be accessible using this API. To enable crash report generation open your generated Xcode project and edit trampoline file: Classes/CrashReporter.h. Change ENABLE_CUSTOM_CRASH_REPORTER define from 0 to 1. Note: this API currently is available only for iOS targets. CrashReport API requires Unity Pro license for target platform. See Also: CrashReport.reports.</remarks>
        </member>
        <member name="P:UnityEngine.CrashReport.lastReport">
            <summary>Returns last crash report, or null if no reports are available.</summary>
            <value>To be added.</value>
            <remarks>See Also: CrashReport.reports.</remarks>
        </member>
        <member name="M:UnityEngine.CrashReport.Remove">
            <summary>Remove report from available reports list.</summary>
            <remarks>See Also: CrashReport.RemoveAll.</remarks>
        </member>
        <member name="M:UnityEngine.CrashReport.RemoveAll">
            <summary>Remove all reports from available reports list.</summary>
            <remarks>See Also: CrashReport.Remove.</remarks>
        </member>
        <member name="P:UnityEngine.CrashReport.reports">
            <summary>Returns all currently available reports in a new array.</summary>
            <value>To be added.</value>
            <remarks>See Also: CrashReport.lastReport.</remarks>
        </member>
        <member name="F:UnityEngine.CrashReport.text">
            <summary>Crash report data as formatted text.</summary>
            <remarks>NOTE: data provided and text format depends on the target platform.</remarks>
        </member>
        <member name="F:UnityEngine.CrashReport.time">
            <summary>Time, when the crash occured.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Cubemap">
            <summary>Class for handling cube maps, Use this to create or modify existing cube map assets.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Cubemap(System.Int32,UnityEngine.TextureFormat,System.Boolean)">
            <param name="size">To be added.</param>
            <param name="format">To be added.</param>
            <param name="mipmap">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Cubemap.Apply">
            <summary>Actually apply all previous SetPixel and SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. See Also: SetPixel, SetPixels functions.</remarks>
        </member>
        <member name="M:UnityEngine.Cubemap.Apply(System.Boolean)">
            <summary>Actually apply all previous SetPixel and SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. See Also: SetPixel, SetPixels functions.</remarks>
            <param name="updateMipmaps">Should all mipmap levels be updated?</param>
        </member>
        <member name="M:UnityEngine.Cubemap.Apply(System.Boolean,System.Boolean)">
            <summary>Actually apply all previous SetPixel and SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. See Also: SetPixel, SetPixels functions.</remarks>
            <param name="updateMipmaps">Should all mipmap levels be updated?</param>
            <param name="makeNoLongerReadable">Should the Cubemap texture data be readable/modifiable after changes are applied?</param>
        </member>
        <member name="P:UnityEngine.Cubemap.format">
            <summary>The format of the pixel data in the texture (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Use this to determine the format of the texture.</remarks>
        </member>
        <member name="M:UnityEngine.Cubemap.GetPixel(UnityEngine.CubemapFace,System.Int32,System.Int32)">
            <param name="face">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Returns pixel color at coordinates (face, x, y).</summary>
            <returns>To be added.</returns>
            <remarks>If the pixel coordinates are out of bounds (larger than width/height or small than 0), they will be clamped or repeat based on the texture's wrap mode. The texture must have the Is Readable flag set in the import settings, otherwise this function will fail.</remarks>
        </member>
        <member name="M:UnityEngine.Cubemap.GetPixels(UnityEngine.CubemapFace)">
            <summary>Returns pixel colors of a cubemap face.</summary>
            <returns>To be added.</returns>
            <remarks>This function returns an array of pixel colors of the whole mip level of a cubemap face. The returned array is a flattened 2D array, where pixels are laid out right to left, top to bottom (i.e. row after row). Array size is width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipSize=max(1,width&gt;&gt;miplevel). The texture must have the Is Readable flag set in the import settings, otherwise this function will fail. Using GetPixels can be faster than calling GetPixel repeatedly, especially for large textures. In addition, GetPixels can access individual mipmap levels. See Also: SetPixels, mipmapCount.</remarks>
            <param name="face">The face from which pixel data is taken.</param>
        </member>
        <member name="M:UnityEngine.Cubemap.GetPixels(UnityEngine.CubemapFace,System.Int32)">
            <summary>Returns pixel colors of a cubemap face.</summary>
            <returns>To be added.</returns>
            <remarks>This function returns an array of pixel colors of the whole mip level of a cubemap face. The returned array is a flattened 2D array, where pixels are laid out right to left, top to bottom (i.e. row after row). Array size is width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipSize=max(1,width&gt;&gt;miplevel). The texture must have the Is Readable flag set in the import settings, otherwise this function will fail. Using GetPixels can be faster than calling GetPixel repeatedly, especially for large textures. In addition, GetPixels can access individual mipmap levels. See Also: SetPixels, mipmapCount.</remarks>
            <param name="face">The face from which pixel data is taken.</param>
            <param name="miplevel">Mipmap level for the chosen face.</param>
        </member>
        <member name="M:UnityEngine.Cubemap.SetPixel(UnityEngine.CubemapFace,System.Int32,System.Int32,UnityEngine.Color)">
            <param name="face">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="color">To be added.</param>
            <summary>Sets pixel color at coordinates (face, x, y).</summary>
            <remarks>Call Apply to actually upload the changed pixels to the graphics card. Uploading is an expensive operation, so you'll want to change as many pixels as possible between Apply calls. This function works only on ARGB32, RGB24 and Alpha8 texture formats. For other formats SetPixel is ignored. See Also: Apply function.</remarks>
        </member>
        <member name="M:UnityEngine.Cubemap.SetPixels(UnityEngine.Color[],UnityEngine.CubemapFace)">
            <summary>Sets pixel colors of a cubemap face.</summary>
            <remarks>This function takes a color array and changes the pixel colors of the whole cubemap face. Call Apply to actually upload the changed pixels to the graphics card. The colors array is a flattened 2D array, where pixels are laid out right to left, top to bottom (i.e. row after row). Array size must be at least width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipSize=max(1,width&gt;&gt;miplevel). This function works only on ARGB32, RGB24 and Alpha8 texture formats. For other formats SetPixels is ignored. See Also: GetPixels, Apply, mipmapCount.</remarks>
            <param name="colors">Pixel data for the Cubemap face.</param>
            <param name="face">The face to which the new data should be applied.</param>
        </member>
        <member name="M:UnityEngine.Cubemap.SetPixels(UnityEngine.Color[],UnityEngine.CubemapFace,System.Int32)">
            <summary>Sets pixel colors of a cubemap face.</summary>
            <remarks>This function takes a color array and changes the pixel colors of the whole cubemap face. Call Apply to actually upload the changed pixels to the graphics card. The colors array is a flattened 2D array, where pixels are laid out right to left, top to bottom (i.e. row after row). Array size must be at least width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipSize=max(1,width&gt;&gt;miplevel). This function works only on ARGB32, RGB24 and Alpha8 texture formats. For other formats SetPixels is ignored. See Also: GetPixels, Apply, mipmapCount.</remarks>
            <param name="colors">Pixel data for the Cubemap face.</param>
            <param name="face">The face to which the new data should be applied.</param>
            <param name="miplevel">The mipmap level for the face.</param>
        </member>
        <member name="M:UnityEngine.Cubemap.SmoothEdges">
            <summary>Performs smoothing of near edge regions.</summary>
            <remarks>Helps to compensate lack of linear interpolation across the edges of cubemap in GPU. Usually you will want to call this function for the cubemap which is going to be used for glossy reflections.</remarks>
        </member>
        <member name="M:UnityEngine.Cubemap.SmoothEdges(System.Int32)">
            <summary>Performs smoothing of near edge regions.</summary>
            <remarks>Helps to compensate lack of linear interpolation across the edges of cubemap in GPU. Usually you will want to call this function for the cubemap which is going to be used for glossy reflections.</remarks>
            <param name="smoothRegionWidthInPixels">Pixel distance at edges over which to apply smoothing.</param>
        </member>
        <member name="T:UnityEngine.CubemapFace">
            <summary>Cubemap face.</summary>
            <remarks>Used by Cubemap.GetPixel and Cubemap.SetPixel.</remarks>
        </member>
        <member name="F:UnityEngine.CubemapFace.NegativeX">
            <summary>Left facing side (-x).</summary>
        </member>
        <member name="F:UnityEngine.CubemapFace.NegativeY">
            <summary>Downward facing side (-y).</summary>
        </member>
        <member name="F:UnityEngine.CubemapFace.NegativeZ">
            <summary>Backward facing side (-z).</summary>
        </member>
        <member name="F:UnityEngine.CubemapFace.PositiveX">
            <summary>Right facing side (+x).</summary>
        </member>
        <member name="F:UnityEngine.CubemapFace.PositiveY">
            <summary>Upwards facing side (+y).</summary>
        </member>
        <member name="F:UnityEngine.CubemapFace.PositiveZ">
            <summary>Forward facing side (+z).</summary>
        </member>
        <member name="T:UnityEngine.Cursor">
            <summary>Cursor API for setting the cursor that is used for rendering.</summary>
            <remarks>Supports Hardware Cursors on OSX, Windows, Linux, and Flash falls back to software cursors on unsupported platforms. Textures used as cursors should be marked as such in their import settings. OSX Webplayer note: Due to sandboxing, Hardware Cursors can only be updated intermittently (when the cursor is moving) the best way to ensure correct behavior if to use OnMouseEnter and OnMouseExit to set the hardware cursors. This is not an issue for software cursors.</remarks>
        </member>
        <member name="C:UnityEngine.Cursor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Cursor.SetCursor(UnityEngine.Texture2D,UnityEngine.Vector2,UnityEngine.CursorMode)">
            <summary>Change the mouse cursor to the set texture OnMouseEnter.Specify a custom cursor that you wish to use as a cursor.</summary>
            <remarks>To be added.</remarks>
            <param name="texture">The texture to use for the cursor.</param>
            <param name="hotspot">The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).</param>
            <param name="cursorMode">Allow this cursor to render as a hardware cursor on supported platforms, or force software cursor.</param>
        </member>
        <member name="T:UnityEngine.CursorMode">
            <summary>How should the custom cursor be rendered.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.CursorMode.Auto">
            <summary>Use hardware cursors on supported platforms.</summary>
        </member>
        <member name="F:UnityEngine.CursorMode.ForceSoftware">
            <summary>Force the use of software cursors.</summary>
        </member>
        <member name="T:UnityEngine.Debug">
            <summary>Class containing methods to ease debugging while developing a game.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Debug">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.Break">
            <summary>Pauses the editor.</summary>
            <remarks>This is useful when you want to check certain values on the inspector and you are not able to pause it manually.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.ClearDeveloperConsole">
            <summary>Clears errors from the developer console.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.DebugBreak">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Debug.developerConsoleVisible">
            <summary>Opens or closes developer console.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Draws a line between specified start and end points.</summary>
            <remarks>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame. Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</remarks>
            <param name="start">Point in world space where the line should start.</param>
            <param name="end">Point in world space where the line should end.</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>Draws a line between specified start and end points.</summary>
            <remarks>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame. Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</remarks>
            <param name="start">Point in world space where the line should start.</param>
            <param name="end">Point in world space where the line should end.</param>
            <param name="color">Color of the line.</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>Draws a line between specified start and end points.</summary>
            <remarks>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame. Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</remarks>
            <param name="start">Point in world space where the line should start.</param>
            <param name="end">Point in world space where the line should end.</param>
            <param name="color">Color of the line.</param>
            <param name="duration">How long the line should be visible for.</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
            <summary>Draws a line between specified start and end points.</summary>
            <remarks>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame. Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</remarks>
            <param name="start">Point in world space where the line should start.</param>
            <param name="end">Point in world space where the line should end.</param>
            <param name="color">Color of the line.</param>
            <param name="duration">How long the line should be visible for.</param>
            <param name="depthTest">Should the line be obscured by objects closer to the camera?</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Draws a line from start to start + dir in world coordinates.</summary>
            <remarks>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame. If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</remarks>
            <param name="start">Point in world space where the ray should start.</param>
            <param name="dir">Direction and length of the ray.</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>Draws a line from start to start + dir in world coordinates.</summary>
            <remarks>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame. If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</remarks>
            <param name="start">Point in world space where the ray should start.</param>
            <param name="dir">Direction and length of the ray.</param>
            <param name="color">Color of the drawn line.</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>Draws a line from start to start + dir in world coordinates.</summary>
            <remarks>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame. If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</remarks>
            <param name="start">Point in world space where the ray should start.</param>
            <param name="dir">Direction and length of the ray.</param>
            <param name="color">Color of the drawn line.</param>
            <param name="duration">How long the line will be visible for (in seconds).</param>
        </member>
        <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
            <summary>Draws a line from start to start + dir in world coordinates.</summary>
            <remarks>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame. If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</remarks>
            <param name="start">Point in world space where the ray should start.</param>
            <param name="dir">Direction and length of the ray.</param>
            <param name="color">Color of the drawn line.</param>
            <param name="duration">How long the line will be visible for (in seconds).</param>
            <param name="depthTest">Should the line be obscured by other objects closer to the camera?</param>
        </member>
        <member name="P:UnityEngine.Debug.isDebugBuild">
            <summary>In the Build Settings dialog there is a check box called "Development Build".</summary>
            <value>To be added.</value>
            <remarks>If it is checked isDebugBuild will be true. In the editor isDebugBuild always returns true. It is recommended to remove all calls to Debug.Log when deploying a game, this way you can easily deploy beta builds with debug prints and final builds without.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.Log(System.Object)">
            <summary>Logs message to the Unity Console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This can be useful for locating the object on which an error occurs. When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</remarks>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:UnityEngine.Debug.Log(System.Object,UnityEngine.Object)">
            <summary>Logs message to the Unity Console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This can be useful for locating the object on which an error occurs. When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</remarks>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:UnityEngine.Debug.LogError(System.Object)">
            <summary>A variant of Debug.Log that logs an error message to the console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This is very useful if you want know on which object an error occurs. When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</remarks>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:UnityEngine.Debug.LogError(System.Object,UnityEngine.Object)">
            <summary>A variant of Debug.Log that logs an error message to the console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This is very useful if you want know on which object an error occurs. When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</remarks>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:UnityEngine.Debug.LogException(System.Exception)">
            <param name="exception">To be added.</param>
            <summary>A variant of Debug.Log that logs an error message to the console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This is very useful if you want know on which object an error occurs.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.LogException(System.Exception,UnityEngine.Object)">
            <param name="exception">To be added.</param>
            <param name="context">To be added.</param>
            <summary>A variant of Debug.Log that logs an error message to the console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This is very useful if you want know on which object an error occurs.</remarks>
        </member>
        <member name="M:UnityEngine.Debug.LogWarning(System.Object)">
            <summary>A variant of Debug.Log that logs a warning message to the console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This is very useful if you want know on which object a warning occurs. When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</remarks>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:UnityEngine.Debug.LogWarning(System.Object,UnityEngine.Object)">
            <summary>A variant of Debug.Log that logs a warning message to the console.</summary>
            <remarks>When you select the message in the console a connection to the context object will be drawn. This is very useful if you want know on which object a warning occurs. When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</remarks>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="T:UnityEngine.DepthTextureMode">
            <summary>Depth texture generation mode for Camera.</summary>
            <remarks>The flags can be combined, so you can set a Camera to generate both a Depth and Depth+Normals texture if needed. See Also: Camera.depthTextureMode.</remarks>
        </member>
        <member name="F:UnityEngine.DepthTextureMode.Depth">
            <summary>Generate a depth texture.</summary>
            <remarks>Will generate a screen-space depth texture as seen from this camera. Texture will be in RenderTextureFormat.Depth format and will be set as _CameraDepthTexture global shader property. See Also: Camera.depthTextureMode.</remarks>
        </member>
        <member name="F:UnityEngine.DepthTextureMode.DepthNormals">
            <summary>Generate a depth + normals texture.</summary>
            <remarks>Will generate a screen-space depth and view space normals texture as seen from this camera. Texture will be in RenderTextureFormat.ARGB32 format and will be set as _CameraDepthNormalsTexture global shader property. Depth and normals will be specially encoded, see Camera Depth Texture page for details. See Also: Camera.depthTextureMode.</remarks>
        </member>
        <member name="F:UnityEngine.DepthTextureMode.None">
            <summary>Do not generate depth texture (Default).</summary>
            <remarks>See Also: Camera.depthTextureMode.</remarks>
        </member>
        <member name="T:UnityEngine.DetailPrototype">
            <summary>Detail prototype used by the Terrain GameObject.</summary>
            <remarks>This can be grass, or a flower..</remarks>
        </member>
        <member name="C:UnityEngine.DetailPrototype">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.bendFactor">
            <summary>Bend factor of the detailPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.dryColor">
            <summary>Color when the DetailPrototypes are "dry".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.healthyColor">
            <summary>Color when the DetailPrototypes are "healthy".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.maxHeight">
            <summary>Maximum height of the grass billboards (if render mode is GrassBillboard).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.maxWidth">
            <summary>Maximum width of the grass billboards (if render mode is GrassBillboard).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.minHeight">
            <summary>Minimum height of the grass billboards (if render mode is GrassBillboard).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.minWidth">
            <summary>Minimum width of the grass billboards (if render mode is GrassBillboard).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.noiseSpread">
            <summary>How spread out is the noise for the DetailPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.prototype">
            <summary>GameObject used by the DetailPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.prototypeTexture">
            <summary>Texture used by the DetailPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.renderMode">
            <summary>Render mode for the DetailPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DetailPrototype.usePrototypeMesh">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.DetailRenderMode">
            <summary>Render mode for detail prototypes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.DetailRenderMode.Grass">
            <summary>The detail prototype will use the grass shader.</summary>
            <remarks>When using custom meshes in this mode, control the wave amount by setting vertex color's alpha channel. Grass will take normals from terrain directly underneath it, so that the shading matches the terrain.</remarks>
        </member>
        <member name="F:UnityEngine.DetailRenderMode.GrassBillboard">
            <summary>The detail prototype will be rendered as billboards that are always facing the camera.</summary>
            <remarks>Grass will take normals from terrain directly underneath it, so that the shading matches the terrain.</remarks>
        </member>
        <member name="F:UnityEngine.DetailRenderMode.VertexLit">
            <summary>Will show the prototype using diffuse shading.</summary>
        </member>
        <member name="T:UnityEngine.DeviceOrientation">
            <summary>Describes physical orientation of the device as determined by the OS.</summary>
            <remarks>If device is physically situated between discrete positions, as when (for example) rotated diagonally, system will report Unknown orientation.</remarks>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.FaceDown">
            <summary>The device is held parallel to the ground with the screen facing downwards.</summary>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.FaceUp">
            <summary>The device is held parallel to the ground with the screen facing upwards.</summary>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.LandscapeLeft">
            <summary>The device is in landscape mode, with the device held upright and the home button on the right side.</summary>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.LandscapeRight">
            <summary>The device is in landscape mode, with the device held upright and the home button on the left side.</summary>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.Portrait">
            <summary>The device is in portrait mode, with the device held upright and the home button at the bottom.</summary>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.PortraitUpsideDown">
            <summary>The device is in portrait mode but upside down, with the device held upright and the home button at the top.</summary>
        </member>
        <member name="F:UnityEngine.DeviceOrientation.Unknown">
            <summary>The orientation of the device cannot be determined.</summary>
        </member>
        <member name="T:UnityEngine.DeviceType">
            <summary>Enumeration for SystemInfo.deviceType, denotes a coarse grouping of kinds of devices.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.DeviceType.Console">
            <summary>A stationary gaming console.</summary>
        </member>
        <member name="F:UnityEngine.DeviceType.Desktop">
            <summary>Desktop or laptop computer.</summary>
        </member>
        <member name="F:UnityEngine.DeviceType.Handheld">
            <summary>A handheld device like mobile phone or a tablet.</summary>
        </member>
        <member name="F:UnityEngine.DeviceType.Unknown">
            <summary>Device type is unknown. You should never see this in practice.</summary>
        </member>
        <member name="T:UnityEngine.Display">
            <summary>Provides access to a display / screen for rendering operations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Display.colorBuffer">
            <summary>Color RenderBuffer.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Display.depthBuffer">
            <summary>Depth RenderBuffer.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Display.displays">
            <summary>The list of currently connected Displays. Contains at least one (main) display.</summary>
            <remarks>It will be automatically updated should the display be connected/disconnected.</remarks>
        </member>
        <member name="P:UnityEngine.Display.main">
            <summary>Main Display.</summary>
            <value>To be added.</value>
            <remarks>It is synonymous to Display.displays[0].</remarks>
        </member>
        <member name="E:UnityEngine.Display.onDisplaysUpdated">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Display.renderingHeight">
            <summary>Rendering Height.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Display.renderingWidth">
            <summary>Rendering Width.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Display.SetRenderingResolution(System.Int32,System.Int32)">
            <summary>Sets Rendering resolution for the display.</summary>
            <remarks>To be added.</remarks>
            <param name="w">Rendering width.</param>
            <param name="h">Rendering height.</param>
        </member>
        <member name="P:UnityEngine.Display.systemHeight">
            <summary>System Height.</summary>
            <value>To be added.</value>
            <remarks>The native height of Display.</remarks>
        </member>
        <member name="P:UnityEngine.Display.systemWidth">
            <summary>System Width.</summary>
            <value>To be added.</value>
            <remarks>The native width of Display.</remarks>
        </member>
        <member name="T:UnityEngine.Display+DisplaysUpdatedDelegate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.DistanceJoint2D">
            <summary>Joint that keeps two Rigidbody2D objects a fixed distance apart.</summary>
            <remarks>Note that unlike the SpringJoint2D component, the distance separating the objects is truly fixed and does not allow for any stretching. See Also: HingeJoint2D class, SliderJoint2D class, SpringJoint2D class.</remarks>
        </member>
        <member name="C:UnityEngine.DistanceJoint2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.DistanceJoint2D.anchor">
            <summary>The joint's anchor point on the object that has the DistanceJoint2D component.</summary>
            <value>To be added.</value>
            <remarks>See Also: connectedAnchor, distance.</remarks>
        </member>
        <member name="P:UnityEngine.DistanceJoint2D.connectedAnchor">
            <summary>The joint's anchor point on the second object (ie, the one which doesn't have the component).</summary>
            <value>To be added.</value>
            <remarks>See Also: anchor, distance.</remarks>
        </member>
        <member name="P:UnityEngine.DistanceJoint2D.distance">
            <summary>The distance separating the two ends of the joint.</summary>
            <value>To be added.</value>
            <remarks>See Also: anchor, connectedAnchor.</remarks>
        </member>
        <member name="T:UnityEngine.EdgeCollider2D">
            <summary>Collider for 2D physics representing an arbitrary set of connected edges (lines) defined by its vertices.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.EdgeCollider2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.EdgeCollider2D.edgeCount">
            <summary>Gets the number of edges.</summary>
            <value>To be added.</value>
            <remarks>This is one less than the number of points.</remarks>
        </member>
        <member name="P:UnityEngine.EdgeCollider2D.pointCount">
            <summary>Gets the number of points.</summary>
            <value>To be added.</value>
            <remarks>This cannot be less than two which will form a single edge.</remarks>
        </member>
        <member name="P:UnityEngine.EdgeCollider2D.points">
            <summary>Get or set the points defining multiple continuous edges.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.EdgeCollider2D.Reset">
            <summary>Reset to a single edge consisting of two points.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Event">
            <summary>A UnityGUI event.</summary>
            <remarks>Events correspond to user input (key presses, mouse actions), or are UnityGUI layout or rendering events. For each event OnGUI is called in the scripts; so OnGUI is potentially called multiple times per frame. Event.current corresponds to "current" event inside OnGUI call. See Also: GUI Scripting Guide, EventType.</remarks>
        </member>
        <member name="C:UnityEngine.Event">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Event(UnityEngine.Event)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.alt">
            <summary>Is Alt/Option key held down? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>On Windows, this returns true if any Alt key is held down. On Mac, this returns true if any Option key is held down.</remarks>
        </member>
        <member name="P:UnityEngine.Event.button">
            <summary>Which mouse button was pressed.</summary>
            <value>To be added.</value>
            <remarks>0 means left mouse button, 1 means right mouse button, 2 means middle mouse button. Used in EventType.MouseDown, EventType.MouseUp events.</remarks>
        </member>
        <member name="P:UnityEngine.Event.capsLock">
            <summary>Is Caps Lock on? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if Caps Lock is switched on.</remarks>
        </member>
        <member name="P:UnityEngine.Event.character">
            <summary>The character typed.</summary>
            <value>To be added.</value>
            <remarks>Used in EventType.KeyDown event. Note that EventType.KeyUp events might not contain a character, only Event.keyCode. See Also: Event.keyCode.</remarks>
        </member>
        <member name="P:UnityEngine.Event.clickCount">
            <summary>How many consecutive mouse clicks have we received.</summary>
            <value>To be added.</value>
            <remarks>Used in EventType.MouseDown event; use this to differentiate between a single and double clicks.</remarks>
        </member>
        <member name="P:UnityEngine.Event.command">
            <summary>Is Command/Windows key held down? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>On Windows, this returns true if any Windows key is held down. On Mac, this returns true if any Command key is held down.</remarks>
        </member>
        <member name="P:UnityEngine.Event.commandName">
            <summary>The name of an ExecuteCommand or ValidateCommand Event.</summary>
            <value>To be added.</value>
            <remarks>"Copy", "Cut", "Paste", "Delete", "FrameSelected", "Duplicate", "SelectAll" and so on. Sent only in the editor.</remarks>
        </member>
        <member name="P:UnityEngine.Event.control">
            <summary>Is Control key held down? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if any Control key is held down.</remarks>
        </member>
        <member name="P:UnityEngine.Event.current">
            <summary>The current event that's being processed right now.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.delta">
            <summary>The relative movement of the mouse compared to last event.</summary>
            <value>To be added.</value>
            <remarks>Used in EventType.MouseMove, EventType.MouseDrag, EventType.ScrollWheel events. See Also: Event.mousePosition.</remarks>
        </member>
        <member name="M:UnityEngine.Event.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Event.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.functionKey">
            <summary>Is the current keypress a function key? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if the current keypress is an arrow key, page up, page down, backspace, etc. key. If this key needs special processing in order to work in text editing, functionKey is on.</remarks>
        </member>
        <member name="M:UnityEngine.Event.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Event.GetTypeForControl(System.Int32)">
            <summary>Get a filtered event type for a given control ID.</summary>
            <returns>To be added.</returns>
            <remarks>This function is used to implement mouse locking and keyboard focus. The controlID can be obtained from GUIUtilty.GetControlID (). See Also: EventType for the list of possible values.</remarks>
            <param name="controlID">The ID of the control you are querying from.</param>
        </member>
        <member name="P:UnityEngine.Event.isKey">
            <summary>Is this event a keyboard event? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.isMouse">
            <summary>Is this event a mouse event? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Event.KeyboardEvent(System.String)">
            <param name="key">To be added.</param>
            <summary>Create a keyboard event.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful when you need to check if a certain key has been pressed - possibly with modifiers. The syntax for the key string is a key name (same as in the Input Manager), optionally prefixed by any number of modifiers: &amp; = Alternate, ^ = Control, % = Command/Windows key, # = Shift Examples: &amp;f12 = Alternate + F12,  "^[0]" = Control + keypad0.</remarks>
        </member>
        <member name="P:UnityEngine.Event.keyCode">
            <summary>The raw key code for keyboard events.</summary>
            <value>To be added.</value>
            <remarks>Used in EventType.KeyDown and EventType.KeyUp events; this returns KeyCode value that matches the physical keyboard key. Use this for handling cursor keys, function keys etc. See Also: Event.character.</remarks>
        </member>
        <member name="P:UnityEngine.Event.modifiers">
            <summary>Which modifier keys are held down.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.mousePosition">
            <summary>The mouse position.</summary>
            <value>To be added.</value>
            <remarks>Used in EventType.MouseMove and EventType.MouseDrag events. See Also: Event.delta.</remarks>
        </member>
        <member name="P:UnityEngine.Event.mouseRay">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.numeric">
            <summary>Is the current keypress on the numeric keyboard? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Use this flag to destinguish between main &amp; numeric keys.</remarks>
        </member>
        <member name="P:UnityEngine.Event.pressure">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.rawType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.shift">
            <summary>Is Shift held down? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if any Shift key is held down.</remarks>
        </member>
        <member name="M:UnityEngine.Event.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Event.type">
            <summary>The type of event.</summary>
            <value>To be added.</value>
            <remarks>See Also: EventType, GUI Scripting Guide.</remarks>
        </member>
        <member name="M:UnityEngine.Event.Use">
            <summary>Use this event.</summary>
            <remarks>Call this method when you've used an event. The event's type will be set to EventType.Used, causing other GUI elements to ignore it.</remarks>
        </member>
        <member name="T:UnityEngine.EventModifiers">
            <summary>Types of modifier key that can be active during a keystroke event.</summary>
            <remarks>See Also: Event, GUI Scripting Guide.</remarks>
        </member>
        <member name="F:UnityEngine.EventModifiers.Alt">
            <summary>Alt key.</summary>
        </member>
        <member name="F:UnityEngine.EventModifiers.CapsLock">
            <summary>Caps lock key.</summary>
        </member>
        <member name="F:UnityEngine.EventModifiers.Command">
            <summary>Command key (Mac).</summary>
        </member>
        <member name="F:UnityEngine.EventModifiers.Control">
            <summary>Control key.</summary>
        </member>
        <member name="F:UnityEngine.EventModifiers.FunctionKey">
            <summary>Function key.</summary>
        </member>
        <member name="F:UnityEngine.EventModifiers.Numeric">
            <summary>Num lock key.</summary>
        </member>
        <member name="F:UnityEngine.EventModifiers.Shift">
            <summary>Shift key.</summary>
        </member>
        <member name="T:UnityEngine.EventType">
            <summary>Types of UnityGUI input and processing events.</summary>
            <remarks>See Also: Event.type, Event, GUI Scripting Guide.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.ContextClick">
            <summary>User has right-clicked (or control-clicked on the mac).</summary>
            <remarks>Window should show a context menu if applicable. Sent only in the editor.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.DragExited">
            <summary>Editor only: drag &amp;amp; drop operation exited.</summary>
        </member>
        <member name="F:UnityEngine.EventType.dragPerform">
            <summary>Editor only: drag &amp;amp; drop operation performed.</summary>
        </member>
        <member name="F:UnityEngine.EventType.DragPerform">
            <summary>Editor only: drag &amp;amp; drop operation performed.</summary>
        </member>
        <member name="F:UnityEngine.EventType.dragUpdated">
            <summary>Editor only: drag &amp;amp; drop operation updated.</summary>
        </member>
        <member name="F:UnityEngine.EventType.DragUpdated">
            <summary>Editor only: drag &amp;amp; drop operation updated.</summary>
        </member>
        <member name="F:UnityEngine.EventType.ExecuteCommand">
            <summary>Execute a special command (eg. copy &amp;amp; paste).</summary>
        </member>
        <member name="F:UnityEngine.EventType.ignore">
            <summary>Event should be ignored.</summary>
            <remarks>This event is temporarily disabled and should be ignored.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.Ignore">
            <summary>Event should be ignored.</summary>
            <remarks>This event is temporarily disabled and should be ignored.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.keyDown">
            <summary>A keyboard key was pressed.</summary>
            <remarks>Use Event.character to find out what has been typed. Use Event.keyCode to handle arrow, home/end or other function keys, or to find out which physical key has been pressed. This event is sent repeatedly depending on the end user's keyboard repeat settings. Note that key presses can come as separate events, one with valid Event.keyCode, and another with valid Event.character. In case of keyboard layouts with dead keys, multiple Event.keyCode events can generate a single Event.character event.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.KeyDown">
            <summary>A keyboard key was pressed.</summary>
            <remarks>Use Event.character to find out what has been typed. Use Event.keyCode to handle arrow, home/end or other function keys, or to find out which physical key has been pressed. This event is sent repeatedly depending on the end user's keyboard repeat settings. Note that key presses can come as separate events, one with valid Event.keyCode, and another with valid Event.character. In case of keyboard layouts with dead keys, multiple Event.keyCode events can generate a single Event.character event.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.keyUp">
            <summary>A keyboard key was released.</summary>
            <remarks>Use Event.keyCode to find which physical key was released. Note that depending on the system and keyboard layout, Event.character might not contain any character for a key release event.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.KeyUp">
            <summary>A keyboard key was released.</summary>
            <remarks>Use Event.keyCode to find which physical key was released. Note that depending on the system and keyboard layout, Event.character might not contain any character for a key release event.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.layout">
            <summary>A layout event.</summary>
            <remarks>This event is sent prior to anything else - this is a chance to perform any initialization.  It is used by the automatic layout system.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.Layout">
            <summary>A layout event.</summary>
            <remarks>This event is sent prior to anything else - this is a chance to perform any initialization.  It is used by the automatic layout system.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.mouseDown">
            <summary>Mouse button was pressed.</summary>
            <remarks>This event gets sent when any mouse button is pressed. Use Event.button to determine which button was pressed down.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.MouseDown">
            <summary>Mouse button was pressed.</summary>
            <remarks>This event gets sent when any mouse button is pressed. Use Event.button to determine which button was pressed down.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.mouseDrag">
            <summary>Mouse was dragged.</summary>
            <remarks>The mouse was moved with a button held down - a mouse drag. Use Event.mousePosition and Event.delta to determine mouse motion.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.MouseDrag">
            <summary>Mouse was dragged.</summary>
            <remarks>The mouse was moved with a button held down - a mouse drag. Use Event.mousePosition and Event.delta to determine mouse motion.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.mouseMove">
            <summary>Mouse was moved (editor views only).</summary>
            <remarks>The mouse was moved without any buttons being held down. Use Event.mousePosition and Event.delta to determine mouse motion. Note that this even is only sent in the Editor, for EditorWindow windows which have EditorWindow.wantsMouseMove set to true. Mouse move events are never sent in the games.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.MouseMove">
            <summary>Mouse was moved (editor views only).</summary>
            <remarks>The mouse was moved without any buttons being held down. Use Event.mousePosition and Event.delta to determine mouse motion. Note that this even is only sent in the Editor, for EditorWindow windows which have EditorWindow.wantsMouseMove set to true. Mouse move events are never sent in the games.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.mouseUp">
            <summary>Mouse button was released.</summary>
            <remarks>This event gets sent when any mouse button is released. Use Event.button to determine which button was pressed down.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.MouseUp">
            <summary>Mouse button was released.</summary>
            <remarks>This event gets sent when any mouse button is released. Use Event.button to determine which button was pressed down.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.repaint">
            <summary>A repaint event. One is sent every frame.</summary>
            <remarks>All other events are processed first, then the repaint event is sent.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.Repaint">
            <summary>A repaint event. One is sent every frame.</summary>
            <remarks>All other events are processed first, then the repaint event is sent.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.scrollWheel">
            <summary>The scroll wheel was moved.</summary>
            <remarks>Use Event.delta to determine X &amp; Y scrolling amount.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.ScrollWheel">
            <summary>The scroll wheel was moved.</summary>
            <remarks>Use Event.delta to determine X &amp; Y scrolling amount.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.used">
            <summary>Already processed event.</summary>
            <remarks>This event has been used by some other control and should be ignored.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.Used">
            <summary>Already processed event.</summary>
            <remarks>This event has been used by some other control and should be ignored.</remarks>
        </member>
        <member name="F:UnityEngine.EventType.ValidateCommand">
            <summary>Validates a special command (e.g. copy &amp;amp; paste).</summary>
        </member>
        <member name="T:UnityEngine.ExecuteInEditMode">
            <summary>Makes a script execute in edit mode.</summary>
            <remarks>By default, script components are only executed in play mode. By adding this attribute, each script component will also have its callback functions executed while the Editor is not in playmode. The functions are not called constantly like they are in play mode. - Update is only called when something in the scene changed. - OnGUI is called when the Game View recieves an Event. - OnRenderObject and the other rendering callback functions are called on every repaint of the Scene View or Game View.</remarks>
        </member>
        <member name="C:UnityEngine.ExecuteInEditMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ExitGUIException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ExitGUIException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.FFTWindow">
            <summary>Spectrum analysis windowing types.</summary>
            <remarks>Use this to reduce leakage of signals across frequency bands.</remarks>
        </member>
        <member name="F:UnityEngine.FFTWindow.Blackman">
            <summary>W[n] = 0.42 - (0.5 * COS(n/N) ) + (0.08 * COS(2.0 * n/N) ).</summary>
        </member>
        <member name="F:UnityEngine.FFTWindow.BlackmanHarris">
            <summary>W[n] = 0.35875 - (0.48829 * COS(1.0 * n/N)) + (0.14128 * COS(2.0 * n/N)) - (0.01168 * COS(3.0 * n/N)).</summary>
        </member>
        <member name="F:UnityEngine.FFTWindow.Hamming">
            <summary>W[n] = 0.54 - (0.46 * COS(n/N) ).</summary>
        </member>
        <member name="F:UnityEngine.FFTWindow.Hanning">
            <summary>W[n] = 0.5 * (1.0 - COS(n/N) ).</summary>
        </member>
        <member name="F:UnityEngine.FFTWindow.Rectangular">
            <summary>W[n] = 1.0.</summary>
        </member>
        <member name="F:UnityEngine.FFTWindow.Triangle">
            <summary>W[n] = TRI(2n/N).</summary>
        </member>
        <member name="T:UnityEngine.FilterMode">
            <summary>Filtering mode for textures. Corresponds to the settings in a texture inspector.</summary>
            <remarks>See Also: Texture.filterMode, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.FilterMode.Bilinear">
            <summary>Bilinear filtering - texture samples are averaged.</summary>
            <remarks>See Also: Texture.filterMode, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.FilterMode.Point">
            <summary>Point filtering - texture pixels become blocky up close.</summary>
            <remarks>See Also: Texture.filterMode, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.FilterMode.Trilinear">
            <summary>Trilinear filtering - texture samples are averaged and also blended between mipmap levels.</summary>
            <remarks>RenderTextures do not support mipmaps, so this setting reverts to Bilinear for those. See Also: Texture.filterMode, texture assets.</remarks>
        </member>
        <member name="T:UnityEngine.FixedJoint">
            <summary>The Fixed joint groups together 2 rigidbodies, making them stick together in their bound position.</summary>
            <remarks>See Also: CharacterJoint, HingeJoint, SpringJoint, ConfigurableJoint.</remarks>
        </member>
        <member name="C:UnityEngine.FixedJoint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Flare">
            <summary>A flare asset. Read more about flares in the components reference.</summary>
            <remarks>The flare class has no properties. It needs to be setup up in the inspector. You can reference flares and assign them to a Light at runtime.See Also: Flare assets, LensFlare class.</remarks>
        </member>
        <member name="C:UnityEngine.Flare">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.FocusType">
            <summary>Used by GUIUtility.GetControlID to inform the UnityGUI system if a given control can get keyboard focus.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.FocusType.Keyboard">
            <summary>This is a proper keyboard control. It can have input focus on all platforms. Used for TextField and TextArea controls.</summary>
        </member>
        <member name="F:UnityEngine.FocusType.Native">
            <summary>This control can get keyboard focus on Windows, but not on Mac. Used for buttons, checkboxes and other "pressable" things.</summary>
        </member>
        <member name="F:UnityEngine.FocusType.Passive">
            <summary>This control can never recieve keyboard focus.</summary>
        </member>
        <member name="T:UnityEngine.FogMode">
            <summary>Fog mode to use.</summary>
            <remarks>See Also: RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="F:UnityEngine.FogMode.Exponential">
            <summary>Exponential fog.</summary>
            <remarks>See Also: RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="F:UnityEngine.FogMode.ExponentialSquared">
            <summary>Exponential squared fog (default).</summary>
            <remarks>See Also: RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="F:UnityEngine.FogMode.Linear">
            <summary>Linear fog.</summary>
            <remarks>See Also: RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="T:UnityEngine.Font">
            <summary>Script interface for font assets.</summary>
            <remarks>You can use this class to dynamically switch fonts on GUI texts or Text Meshes. See Also: GUIText and TextMesh.</remarks>
        </member>
        <member name="C:UnityEngine.Font">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Font(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Font.characterInfo">
            <summary>Access an array of all characters contained in the font texture.</summary>
            <value>To be added.</value>
            <remarks>You can read this if you want to render the font texture using custom generated Meshes, or you can set it when you want to build your own custom font assets from scripts (or modify existing ones). See Also: GetCharacterInfo.</remarks>
        </member>
        <member name="P:UnityEngine.Font.fontNames">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@)">
            <param name="ch">To be added.</param>
            <param name="info">To be added.</param>
            <summary>Get rendering info for a specific character.</summary>
            <returns>To be added.</returns>
            <remarks>Note: You should only ever need to use this when you want to implement your own text rendering. If the character ch with the specified size and style is present in the font texture, then this method will return true, and info will contain the texture placement information for that character. If the character is not present, this method returns false. If size is zero, it will use the default size for the font. See Also: characterInfo.</remarks>
        </member>
        <member name="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32)">
            <param name="ch">To be added.</param>
            <param name="info">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Get rendering info for a specific character.</summary>
            <returns>To be added.</returns>
            <remarks>Note: You should only ever need to use this when you want to implement your own text rendering. If the character ch with the specified size and style is present in the font texture, then this method will return true, and info will contain the texture placement information for that character. If the character is not present, this method returns false. If size is zero, it will use the default size for the font. See Also: characterInfo.</remarks>
        </member>
        <member name="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32,UnityEngine.FontStyle)">
            <param name="ch">To be added.</param>
            <param name="info">To be added.</param>
            <param name="size">To be added.</param>
            <param name="style">To be added.</param>
            <summary>Get rendering info for a specific character.</summary>
            <returns>To be added.</returns>
            <remarks>Note: You should only ever need to use this when you want to implement your own text rendering. If the character ch with the specified size and style is present in the font texture, then this method will return true, and info will contain the texture placement information for that character. If the character is not present, this method returns false. If size is zero, it will use the default size for the font. See Also: characterInfo.</remarks>
        </member>
        <member name="M:UnityEngine.Font.HasCharacter(System.Char)">
            <param name="c">To be added.</param>
            <summary>Does this font have a specific character?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Font.material">
            <summary>The material used for the font display.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String)">
            <param name="characters">To be added.</param>
            <summary>Request characters to be added to the font texture (dynamic fonts only).</summary>
            <remarks>Note: You should only ever need to use this when you want to implement your own text rendering. Call this function to request Unity to make sure all the characters in the string characters are available in the font's font texture (and it's characterInfo property). This is useful when you want to implement your own code to render dynamic fonts. You can supply a custom font size and style for the characters. If size is zero (the default), it will use the default size for that font. RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the requested characters. If the font texture is regenerated it will only contain characters which have been used using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using custom font rendering functions, even if the characters are currently present in the texture, to make sure they don't get purged during texture rebuild. See Also: FontTextureRebuildCallback, GetCharacterInfo.</remarks>
        </member>
        <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String,System.Int32)">
            <param name="characters">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Request characters to be added to the font texture (dynamic fonts only).</summary>
            <remarks>Note: You should only ever need to use this when you want to implement your own text rendering. Call this function to request Unity to make sure all the characters in the string characters are available in the font's font texture (and it's characterInfo property). This is useful when you want to implement your own code to render dynamic fonts. You can supply a custom font size and style for the characters. If size is zero (the default), it will use the default size for that font. RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the requested characters. If the font texture is regenerated it will only contain characters which have been used using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using custom font rendering functions, even if the characters are currently present in the texture, to make sure they don't get purged during texture rebuild. See Also: FontTextureRebuildCallback, GetCharacterInfo.</remarks>
        </member>
        <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String,System.Int32,UnityEngine.FontStyle)">
            <param name="characters">To be added.</param>
            <param name="size">To be added.</param>
            <param name="style">To be added.</param>
            <summary>Request characters to be added to the font texture (dynamic fonts only).</summary>
            <remarks>Note: You should only ever need to use this when you want to implement your own text rendering. Call this function to request Unity to make sure all the characters in the string characters are available in the font's font texture (and it's characterInfo property). This is useful when you want to implement your own code to render dynamic fonts. You can supply a custom font size and style for the characters. If size is zero (the default), it will use the default size for that font. RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the requested characters. If the font texture is regenerated it will only contain characters which have been used using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using custom font rendering functions, even if the characters are currently present in the texture, to make sure they don't get purged during texture rebuild. See Also: FontTextureRebuildCallback, GetCharacterInfo.</remarks>
        </member>
        <member name="P:UnityEngine.Font.textureRebuildCallback">
            <summary>Set a function to be called when the dynamic font texture is rebuilt.</summary>
            <value>To be added.</value>
            <remarks>This lets you set a delegate function to be called when the dynamic font texture is rebuilt. This will happen when new characters added to the font no longer fit into the texture. The font texture will then be rebuilt to fit all needed characters. If you use custom meshes to render characters from the font, you will need to use the textureRebuildCallback to regenerate such meshes, as previous UV coordinates from the Font will no longer be valid.</remarks>
        </member>
        <member name="T:UnityEngine.Font+FontTextureRebuildCallback">
            <summary>Delegate used for Font.textureRebuildCallback.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.FontStyle">
            <summary>Font Style applied to GUI Texts, Text Meshes or GUIStyles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.FontStyle.Bold">
            <summary>Bold style applied to your texts.</summary>
        </member>
        <member name="F:UnityEngine.FontStyle.BoldAndItalic">
            <summary>Bold and Italic styles applied to your texts.</summary>
        </member>
        <member name="F:UnityEngine.FontStyle.Italic">
            <summary>Italic style applied to your texts.</summary>
        </member>
        <member name="F:UnityEngine.FontStyle.Normal">
            <summary>No special style is applied.</summary>
        </member>
        <member name="T:UnityEngine.ForceMode">
            <summary>Option for how to apply a force using Rigidbody.AddForce.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ForceMode.Acceleration">
            <summary>Add a continuous acceleration to the rigidbody, ignoring its mass.</summary>
            <remarks>Apply the acceleration in each FixedUpdate over a duration of time. In contrast to ForceMode.Force, Acceleration will move every rigidbody the same way regardless of differences in mass. This mode is useful if you just want to control the acceleration of an object directly. In this mode, the unit of the force parameter is applied to the rigidbody as distance/time^2.</remarks>
        </member>
        <member name="F:UnityEngine.ForceMode.Force">
            <summary>Add a continuous force to the rigidbody, using its mass.</summary>
            <remarks>Apply the force in each FixedUpdate over a duration of time. This mode depends on the mass of rigidbody so more force must be applied to push or twist higher-mass objects the same amount as lower-mass objects. This mode is useful for setting up realistic physics where it takes more force to move heavier objects. In this mode, the unit of the force parameter is applied to the rigidbody as mass*distance/time^2.</remarks>
        </member>
        <member name="F:UnityEngine.ForceMode.Impulse">
            <summary>Add an instant force impulse to the rigidbody, using its mass.</summary>
            <remarks>Apply the impulse force instantly with a single function call. This mode depends on the mass of rigidbody so more force must be applied to push or twist higher-mass objects the same amount as lower-mass objects. This mode is useful for applying forces that happen instantly, such as forces from explosions or collisions. In this mode, the unit of the force parameter is applied to the rigidbody as mass*distance/time.</remarks>
        </member>
        <member name="F:UnityEngine.ForceMode.VelocityChange">
            <summary>Add an instant velocity change to the rigidbody, ignoring its mass.</summary>
            <remarks>Apply the velocity change instantly with a single function call. In contrast to ForceMode.Impulse, VelocityChange will change the velocity of every rigidbody the same way regardless of differences in mass. This mode is useful for something like a fleet of differently-sized space ships that you want to control without accounting for differences in mass. In this mode, the unit of the force parameter is applied to the rigidbody as distance/time.</remarks>
        </member>
        <member name="T:UnityEngine.FullScreenMovieControlMode">
            <summary>Describes options for displaying movie playback controls.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieControlMode.CancelOnInput">
            <summary>Do not display any controls, but cancel movie playback if input occurs.</summary>
        </member>
        <member name="F:UnityEngine.FullScreenMovieControlMode.Full">
            <summary>Display the standard controls for controlling movie playback.</summary>
            <remarks>This includes play/pause controls, a volume slider, and a timeline control.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieControlMode.Hidden">
            <summary>Do not display any controls.</summary>
            <remarks>This mode prevents the user from controlling playback.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieControlMode.Minimal">
            <summary>Display minimal set of controls controlling movie playback.</summary>
            <remarks>The set of controls displayed might differ between OS versions.</remarks>
        </member>
        <member name="T:UnityEngine.FullScreenMovieScalingMode">
            <summary>Describes scaling modes for displaying movies.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieScalingMode.AspectFill">
            <summary>Scale the movie until the movie fills the entire screen.</summary>
            <remarks>Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the screen exactly. The aspect ratio of the movie is preserved.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieScalingMode.AspectFit">
            <summary>Scale the movie until one dimension fits on the screen exactly.</summary>
            <remarks>In the other dimension, the region between the edge of the movie and the edge of the screen is filled with a black bar. The aspect ratio of the movie is preserved.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieScalingMode.Fill">
            <summary>Scale the movie until both dimensions fit the screen exactly.</summary>
            <remarks>The aspect ratio of the movie is not preserved.</remarks>
        </member>
        <member name="F:UnityEngine.FullScreenMovieScalingMode.None">
            <summary>Do not scale the movie.</summary>
        </member>
        <member name="T:UnityEngine.GameObject">
            <summary>Base class for all entities in Unity scenes.</summary>
            <remarks>See Also: Component.</remarks>
        </member>
        <member name="C:UnityEngine.GameObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GameObject(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GameObject(System.String,System.Type[])">
            <param name="name">To be added.</param>
            <param name="components">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.active">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.activeInHierarchy">
            <summary>Is the GameObject active in the scene?</summary>
            <value>To be added.</value>
            <remarks>This lets you know if a gameObject is active in the game. That is the case if its GameObject.activeSelf property is enabled, as well as that of all it's parents. See Also: GameObject.SetActive, GameObject.activeSelf.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.activeSelf">
            <summary>The local active state of this GameObject. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This returns the local active state of this GameObject, which is set using GameObject.SetActive. Note that a GameObject may be inactive because a parent is not active, even if this returns true. This  state will then be used once all parents are active. Use GameObject.activeInHierarchy if you want to check if the GameObject is actually treated as active in the scene. See Also: GameObject.SetActive, GameObject.activeInHierarchy.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.AddComponent(System.String)">
            <param name="className">To be added.</param>
            <summary>Adds a component class named className to the GameObject.Adds a component class of type componentType to the GameObject. C# Users can use a generic version.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.AddComponent(System.Type)">
            <param name="componentType">To be added.</param>
            <summary>Adds a component class named className to the GameObject.Adds a component class of type componentType to the GameObject. C# Users can use a generic version.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.AddComponent``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.animation">
            <summary>The Animation attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.audio">
            <summary>The AudioSource attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String)">
            <param name="methodName">To be added.</param>
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,System.Object)">
            <param name="methodName">To be added.</param>
            <param name="parameter">To be added.</param>
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,UnityEngine.SendMessageOptions)">
            <param name="methodName">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
            <param name="methodName">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.</summary>
            <remarks>The receiving method can choose to ignore parameter by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.camera">
            <summary>The Camera attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.collider">
            <summary>The Collider attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.collider2D">
            <summary>The Collider2D component attached to this object.</summary>
            <value>To be added.</value>
            <remarks>This returns null if no Collider2D is attached. See Also: Collider2D class.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.CompareTag(System.String)">
            <summary>Is this GameObject tagged with tag?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="tag">The tag to compare.</param>
        </member>
        <member name="P:UnityEngine.GameObject.constantForce">
            <summary>The ConstantForce attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.CreatePrimitive(UnityEngine.PrimitiveType)">
            <summary>Creates a GameObject with a primitive mesh renderer and appropriate collider.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of primitive object to create.</param>
        </member>
        <member name="M:UnityEngine.GameObject.Find(System.String)">
            <param name="name">To be added.</param>
            <summary>Finds a GameObject by name and returns it.</summary>
            <returns>To be added.</returns>
            <remarks>If no GameObject with name can be found, null is returned. If name contains a '/' character it will traverse the hierarchy like a path name. This function only returns active gameobjects. For performance reasons it is recommended to not use this function every frame Instead cache the result in a member variable at startup or use GameObject.FindWithTag.This function is most useful to automatically connect references to other objects at load time, eg. inside MonoBehaviour.Awake or MonoBehaviour.Start. You should avoid calling this function every frame eg. MonoBehaviour.Update for performance reasons. A common pattern is to assign a GameObject to a variable inside MonoBehaviour.Start. And use the variable in MonoBehaviour.Update.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.FindGameObjectsWithTag(System.String)">
            <summary>Returns a list of active GameObjects tagged tag. Returns empty array if no GameObject was found.</summary>
            <returns>To be added.</returns>
            <remarks>Tags must be declared in the tag manager before using them. A UnityException will be thrown if the tag does not exist or an empty string or null is passed as the tag.Another example:Another example, testing for empty array:</remarks>
            <param name="tag">The name of the tag to search GameObjects for.</param>
        </member>
        <member name="M:UnityEngine.GameObject.FindGameObjectWithTag(System.String)">
            <param name="tag">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.FindWithTag(System.String)">
            <summary>Returns one active GameObject tagged tag. Returns null if no GameObject was found.</summary>
            <returns>To be added.</returns>
            <remarks>Tags must be declared in the tag manager before using them. A UnityException will be thrown if the tag does not exist or an empty string or null is passed as the tag.</remarks>
            <param name="tag">The tag to search for.</param>
        </member>
        <member name="P:UnityEngine.GameObject.gameObject">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponent(System.String)">
            <summary>Returns the component of Type type if the GameObject has one attached, null if it doesn't. You can access both builtin components or scripts with this function.Generic version. See the Generic Functions page for more details.Returns the component with name type if the GameObject has one attached, null if it doesn't.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponent(System.Type)">
            <summary>Returns the component of Type type if the GameObject has one attached, null if it doesn't. You can access both builtin components or scripts with this function.Generic version. See the Generic Functions page for more details.Returns the component with name type if the GameObject has one attached, null if it doesn't.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponent``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponentInChildren(System.Type)">
            <summary>Returns the component of Type type in the GameObject or any of its children using depth first search.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponentInChildren``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponents(System.Type)">
            <summary>Returns all components of Type type in the GameObject.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponents``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type)">
            <summary>Returns all components of Type type in the GameObject or any of its children.Generic version. See the Generic Functions page for more details.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type,System.Boolean)">
            <summary>Returns all components of Type type in the GameObject or any of its children.Generic version. See the Generic Functions page for more details.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="type">The type of Component to retrieve.</param>
            <param name="includeInactive">Should inactive Components be included in the found set?</param>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponentsInChildren``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.GetComponentsInChildren``1(System.Boolean)">
            <typeparam name="T">To be added.</typeparam>
            <param name="includeInactive">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.guiElement">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.guiText">
            <summary>The GUIText attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.guiTexture">
            <summary>The GUITexture attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.hingeJoint">
            <summary>The HingeJoint attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.isStatic">
            <summary>Editor only API that specifies if a GameObject is static.</summary>
            <value>To be added.</value>
            <remarks>Returns true if any of the static flags are set (See Also: GameObjectUtility.SetStaticEditorFlags). setting this to true sets all the static flags (See Also: GameObjectUtility.SetStaticEditorFlags).</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.layer">
            <summary>The layer the GameObject is in. A layer is in the range [0...31].</summary>
            <value>To be added.</value>
            <remarks>Layers can be used for selective rendering from cameras or ignoring raycasts.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.light">
            <summary>The Light attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.networkView">
            <summary>The NetworkView attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.particleEmitter">
            <summary>The ParticleEmitter attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.particleSystem">
            <summary>The ParticleSystem attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.PlayAnimation(UnityEngine.AnimationClip)">
            <param name="animation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.renderer">
            <summary>The Renderer attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.rigidbody">
            <summary>The Rigidbody attached to this GameObject (Read Only). (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.rigidbody2D">
            <summary>The Rigidbody2D component attached to this GameObject. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This property will be null if no Rigidbody2D is attached. See Also: rigidbody.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.SampleAnimation(UnityEngine.AnimationClip,System.Single)">
            <param name="animation">To be added.</param>
            <param name="time">To be added.</param>
            <summary>Samples an animation at a given time for any animated properties.</summary>
            <remarks>It is recommended to use the Animation interface instead for performance reasons. This will sample animation at the given time. Any component properties that are animated in the clip will be replaced with the sampled value. Most of the time you want to use Animation.Play instead. SampleAnimation is useful when you need to jump between frames in an unordered way or based on some special input. See Also: Animation.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessage(System.String)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessage(System.String,System.Object)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
            <param name="value">An optional parameter value to pass to the called method.</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessage(System.String,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
            <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
            <param name="value">An optional parameter value to pass to the called method.</param>
            <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,System.Object)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
            <param name="value">An optional parameter value to pass to the called method.</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
            <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
        </member>
        <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,System.Object,UnityEngine.SendMessageOptions)">
            <summary>Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.</summary>
            <remarks>The receiving method can choose to ignore the argument by having zero parameters. If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component. Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</remarks>
            <param name="methodName">The name of the method to call.</param>
            <param name="value">An optional parameter value to pass to the called method.</param>
            <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
        </member>
        <member name="M:UnityEngine.GameObject.SetActive(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>Activates/Deactivates the GameObject.</summary>
            <remarks>Note that a GameObject may be inactive because a parent is not active. In that case, calling SetActive() will not activate it, but only set the local state of the GameObject, which can be checked using GameObject.activeSelf. This state will then be used once all parents are active. See Also: GameObject.activeSelf, GameObject.activeInHierarchy.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.SetActiveRecursively(System.Boolean)">
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GameObject.StopAnimation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.tag">
            <summary>The tag of this GameObject.</summary>
            <value>To be added.</value>
            <remarks>A tag can be used to identify a GameObject. Tags must be declared in the tag manager before using them.</remarks>
        </member>
        <member name="P:UnityEngine.GameObject.transform">
            <summary>The Transform attached to this GameObject. (null if there is none attached).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GeometryUtility">
            <summary>Utility class for common geometric functions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GeometryUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Camera)">
            <param name="camera">To be added.</param>
            <summary>Calculates frustum planes.Calculates frustum planes.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Matrix4x4)">
            <param name="worldToProjectionMatrix">To be added.</param>
            <summary>Calculates frustum planes.Calculates frustum planes.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GeometryUtility.TestPlanesAABB(UnityEngine.Plane[],UnityEngine.Bounds)">
            <param name="planes">To be added.</param>
            <param name="bounds">To be added.</param>
            <summary>Returns true if bounds are inside the plane array.</summary>
            <returns>To be added.</returns>
            <remarks>Will return true if the bounding box is inside the planes or intersects any of the planes. The TestPlanesAABB function uses the Plane array to test whether a bounding box is in the frustum or not. You can use this function with CalculateFrustrumPlanes to test whether a camera's view contains an object regardless of whether it is rendered or not. See Also: GeometryUtility.CalculateFrustumPlanes.</remarks>
        </member>
        <member name="T:UnityEngine.Gizmos">
            <summary>Gizmos are used to give visual debugging or setup aids in the scene view.</summary>
            <remarks>All gizmo drawing has to be done in either OnDrawGizmos or OnDrawGizmosSelected functions of the script. OnDrawGizmos is called every frame. All gizmos rendered within OnDrawGizmos are pickable. OnDrawGizmosSelected is called only if the object the script is attached to is selected.</remarks>
        </member>
        <member name="C:UnityEngine.Gizmos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gizmos.color">
            <summary>Sets the color for the gizmos that will be drawn next.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawCube(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="center">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a solid box with center and size.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawFrustum(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>Draw a camera frustum using the currently set Gizmos.matrix for it's location and rotation.</summary>
            <remarks>To be added.</remarks>
            <param name="center">The apex of the truncated pyramid.</param>
            <param name="fov">Vertical field of view (ie, the angle at the apex).</param>
            <param name="maxRange">Distance of the frustum's far plane.</param>
            <param name="minRange">Distance of the frustum's near plane.</param>
            <param name="aspect">Width/height ratio.</param>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Draw a texture in the scene.</summary>
            <remarks>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie, the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way to create a large background region around the main texture when its edges are of a single colour. This function can be useful for creating GUI backgrounds in conjunction with a camera pointing directly at the texture.</remarks>
            <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
            <param name="texture">The texture to be displayed.</param>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
            <summary>Draw a texture in the scene.</summary>
            <remarks>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie, the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way to create a large background region around the main texture when its edges are of a single colour. This function can be useful for creating GUI backgrounds in conjunction with a camera pointing directly at the texture.</remarks>
            <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
            <param name="texture">The texture to be displayed.</param>
            <param name="mat">An optional material to apply the texture.</param>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Draw a texture in the scene.</summary>
            <remarks>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie, the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way to create a large background region around the main texture when its edges are of a single colour. This function can be useful for creating GUI backgrounds in conjunction with a camera pointing directly at the texture.</remarks>
            <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
            <param name="texture">The texture to be displayed.</param>
            <param name="leftBorder">Inset from the rectangle's left edge.</param>
            <param name="rightBorder">Inset from the rectangle's right edge.</param>
            <param name="topBorder">Inset from the rectangle's top edge.</param>
            <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
            <summary>Draw a texture in the scene.</summary>
            <remarks>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie, the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way to create a large background region around the main texture when its edges are of a single colour. This function can be useful for creating GUI backgrounds in conjunction with a camera pointing directly at the texture.</remarks>
            <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
            <param name="texture">The texture to be displayed.</param>
            <param name="leftBorder">Inset from the rectangle's left edge.</param>
            <param name="rightBorder">Inset from the rectangle's right edge.</param>
            <param name="topBorder">Inset from the rectangle's top edge.</param>
            <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
            <param name="mat">An optional material to apply the texture.</param>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawIcon(UnityEngine.Vector3,System.String)">
            <param name="center">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Draw an icon at a position in the scene view.</summary>
            <remarks>The image filename for the icon is specified with the name parameter while the center parameter denotes the location of the icon in world space and the allowScaling parameter determines if the icon is allowed to be scaled.  The image file should be placed in the Assets/Gizmos folder. DrawIcon can be used to allow important objects in your game to be selected quickly.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawIcon(UnityEngine.Vector3,System.String,System.Boolean)">
            <param name="center">To be added.</param>
            <param name="name">To be added.</param>
            <param name="allowScaling">To be added.</param>
            <summary>Draw an icon at a position in the scene view.</summary>
            <remarks>The image filename for the icon is specified with the name parameter while the center parameter denotes the location of the icon in world space and the allowScaling parameter determines if the icon is allowed to be scaled.  The image file should be placed in the Assets/Gizmos folder. DrawIcon can be used to allow important objects in your game to be selected quickly.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>Draws a line starting at from towards to.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawRay(UnityEngine.Ray)">
            <param name="r">To be added.</param>
            <summary>Draws a ray starting at from to from + direction.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="from">To be added.</param>
            <param name="direction">To be added.</param>
            <summary>Draws a ray starting at from to from + direction.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawSphere(UnityEngine.Vector3,System.Single)">
            <param name="center">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Draws a solid sphere with center and radius.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawWireCube(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="center">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Draw a wireframe box with center and size.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gizmos.DrawWireSphere(UnityEngine.Vector3,System.Single)">
            <param name="center">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Draws a wireframe sphere with center and radius.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gizmos.matrix">
            <summary>Set the gizmo matrix used to draw all gizmos.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GL">
            <summary>Low-level graphics library.</summary>
            <remarks>Use this class to manipulate active transformation matrices, issue rendering commands similar to OpenGL's immediate mode and do other low-level graphics tasks. Note that in almost all cases using Graphics.DrawMesh is more efficient than using immediate mode drawing. GL immediate drawing functions use whatever is the "current material" set up right now. The material controls how the rendering is done (blending, textures, etc.), so unless you explicitly set it to something before using GL draw functions, the material can happen to be anything. Also, if you call any other drawing commands from inside GL drawing code, they can set material to something else, so make sure it's under control as well. GL drawing commands execute immediately. That means if you call them in Update(), they will be executed before the camera is rendered (and the camera will most likely clear the screen, making the GL drawing not visible). The usual place to call GL drawing is most often in OnPostRender() from a script attached to a cameraNote: This class is almost always used when you need to draw a couple of lines or triangles, and don't want to deal with meshes. If you want to avoid surprises the usage pattern is this:Where at the "// Draw your stuff" you should do SetPass() on some material previously declared, which will be used for drawing. If you dont call SetPass, then you'll get basically a random material (whatever was used before) which is not good. So do it.</remarks>
        </member>
        <member name="C:UnityEngine.GL">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GL.Begin(System.Int32)">
            <summary>Begin drawing 3D primitives.</summary>
            <remarks>In OpenGL this matches glBegin ; on other graphics APIs the same functionality is emulated. Between GL.Begin and GL.End it is valid to call GL.Vertex, GL.Color, GL.TexCoord and other immediate mode drawing functions. You should be careful about culling when drawing primitives yourself. The culling rules may be different depending on which graphics API the game is running. In most cases the safest way is to use Cull Off command in the shader. See Also: GL.End.</remarks>
            <param name="mode">Primitives to draw: can be TRIANGLES, TRIANGLE_STRIP, QUADS or LINES.</param>
        </member>
        <member name="M:UnityEngine.GL.Clear(System.Boolean,System.Boolean,UnityEngine.Color)">
            <summary>Clear the current render buffer.</summary>
            <remarks>This clears the screen or the active RenderTexture you are drawing into. In most other situations, some camera is drawing something somewhere, and probably is clearing already with the background color of the skybox. See Also: GL.ClearWithSkybox.</remarks>
            <param name="clearDepth">Should the depth buffer be cleared?</param>
            <param name="clearColor">Should the color buffer be cleared?</param>
            <param name="backgroundColor">The color to clear with, used only if clearColor is true.</param>
        </member>
        <member name="M:UnityEngine.GL.Clear(System.Boolean,System.Boolean,UnityEngine.Color,System.Single)">
            <summary>Clear the current render buffer.</summary>
            <remarks>This clears the screen or the active RenderTexture you are drawing into. In most other situations, some camera is drawing something somewhere, and probably is clearing already with the background color of the skybox. See Also: GL.ClearWithSkybox.</remarks>
            <param name="clearDepth">Should the depth buffer be cleared?</param>
            <param name="clearColor">Should the color buffer be cleared?</param>
            <param name="backgroundColor">The color to clear with, used only if clearColor is true.</param>
            <param name="depth">The depth to clear Z buffer with, used only if clearDepth is true.</param>
        </member>
        <member name="M:UnityEngine.GL.ClearWithSkybox(System.Boolean,UnityEngine.Camera)">
            <summary>Clear the current render buffer with camera's skybox.</summary>
            <remarks>This draws skybox into the screen or the active RenderTexture. If the passed camera does not have custom Skybox component, the global skybox from RenderSettings will be used. See Also: GL.Clear.</remarks>
            <param name="clearDepth">Should the depth buffer be cleared?</param>
            <param name="camera">Camera to get projection parameters and skybox from.</param>
        </member>
        <member name="M:UnityEngine.GL.Color(UnityEngine.Color)">
            <param name="c">To be added.</param>
            <summary>Sets current vertex color.</summary>
            <remarks>In OpenGL this matches glColor4f(c.r,c.g,c.b,c.a) ; on other graphics APIs the same functionality is emulated. In order for per-vertex colors to work reliably across different hardware, you have to use a shader that binds in the color channel. See BindChannels documentation. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.End">
            <summary>End drawing 3D primitives.</summary>
            <remarks>In OpenGL this matches glEnd ; on other graphics APIs the same functionality is emulated. See Also: GL.Begin.</remarks>
        </member>
        <member name="M:UnityEngine.GL.GetGPUProjectionMatrix(UnityEngine.Matrix4x4,System.Boolean)">
            <param name="proj">To be added.</param>
            <param name="renderIntoTexture">To be added.</param>
            <summary>Compute GPU projection matrix from camera's projection matrix.</summary>
            <returns>To be added.</returns>
            <remarks>In Unity, projection matrices follow OpenGL convention. However on some platforms they have to be transformed a bit to match the native API requirements. Use this function to calculate how the final projection matrix will be like. The value will match what comes as UNITY_MATRIX_P matrix in a shader. The renderIntoTexture value should be set to true if you intend to render into a RenderTexture with this projection matrix. On some platforms it affects how the final matrix will look like.</remarks>
        </member>
        <member name="M:UnityEngine.GL.InvalidateState">
            <summary>Invalidate the internally cached renderstates.</summary>
            <remarks>This invalidates any cached renderstates tied to the GL context. If for example a (native) plugin alters the renderstate settings then Unity's rendering architecture must be made aware of that to not assume the GL context is preserved.</remarks>
        </member>
        <member name="M:UnityEngine.GL.IssuePluginEvent(System.Int32)">
            <param name="eventID">To be added.</param>
            <summary>Send a user-defined event to a native code plugin.</summary>
            <remarks>Rendering in Unity can be multithreaded if the platform and number of available CPUs will allow for it. When multithreaded rendering is used, the rendering API commands happen on a thread which is completely separate from the one that runs the scripts. Consequently, it is not possible for your plugin to start rendering immediately, since it might interfere with what the render thread is doing at the time. In order to do any rendering from the plugin, you should call GL.IssuePluginEvent from your script, which will cause your native plugin to be called from the render thread. For example, if you call GL.IssuePluginEvent from the camera's OnPostRender function, you'll get a plugin callback immediately after the camera has finished rendering. See Native Plugin Interface for more details and an example.</remarks>
        </member>
        <member name="F:UnityEngine.GL.LINES">
            <summary>Mode for Begin: draw lines.</summary>
            <remarks>If you want to draw something 2D in screen space then probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix. If you want something in "3D", then probably you should consider using GL.LoadIdentity followed by GL.MultMatrix with the actual 3D transform you want your stuff to be in. See Also: GL.Begin, GL.End.</remarks>
        </member>
        <member name="M:UnityEngine.GL.LoadIdentity">
            <summary>Load the identity matrix to the current modelview matrix.</summary>
            <remarks>This function overrides current camera's view parameters, so most often you want to save and restore matrix using GL.PushMatrix and GL.PopMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.GL.LoadOrtho">
            <summary>Helper function to set up an ortho perspective transform.</summary>
            <remarks>After calling LoadOrtho, the viewing frustum goes from (0,0,-1) to (1,1,100). LoadOrtho can be used for drawing primitives in 2D.</remarks>
        </member>
        <member name="M:UnityEngine.GL.LoadPixelMatrix">
            <summary>Setup a matrix for pixel-correct rendering.Setup a matrix for pixel-correct rendering.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GL.LoadPixelMatrix(System.Single,System.Single,System.Single,System.Single)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <param name="top">To be added.</param>
            <summary>Setup a matrix for pixel-correct rendering.Setup a matrix for pixel-correct rendering.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GL.LoadProjectionMatrix(UnityEngine.Matrix4x4)">
            <param name="mat">To be added.</param>
            <summary>Load an arbitrary matrix to the current projection matrix.</summary>
            <remarks>This function overrides current camera's projection parameters, so most often you want to save and restore projection matrix using GL.PushMatrix and GL.PopMatrix.</remarks>
        </member>
        <member name="P:UnityEngine.GL.modelview">
            <summary>The current modelview matrix.</summary>
            <value>To be added.</value>
            <remarks>Assigning to this variable is equivalent to glLoadMatrix(mat) in OpenGL; in other graphics APIs the corresponding functionality is emulated. Changing modelview matrix overrides current camera's view parameters, so most often you want to save and restore matrix using GL.PushMatrix and GL.PopMatrix. Reading this variable returns the current modelview matrix.</remarks>
        </member>
        <member name="M:UnityEngine.GL.MultiTexCoord(System.Int32,UnityEngine.Vector3)">
            <param name="unit">To be added.</param>
            <param name="v">To be added.</param>
            <summary>Sets current texture coordinate (v.x,v.y,v.z) to the actual texture unit.</summary>
            <remarks>In OpenGL this matches glMultiTexCoord for the given texture unit if multi-texturing is available. On other graphics APIs the same functionality is emulated. The Z component is used only when: 1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp; z). 2. You do "projective texturing", where the X &amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.MultiTexCoord2(System.Int32,System.Single,System.Single)">
            <param name="unit">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Sets current texture coordinate (x,y) for the actual texture unit.</summary>
            <remarks>In OpenGL this matches glMultiTexCoord for the given texture unit if multi-texturing is available. On other graphics APIs the same functionality is emulated. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.MultiTexCoord3(System.Int32,System.Single,System.Single,System.Single)">
            <param name="unit">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Sets current texture coordinate (x,y,z) to the actual texture unit.</summary>
            <remarks>In OpenGL this matches glMultiTexCoord for the given texture unit if multi-texturing is available. On other graphics APIs the same functionality is emulated. The Z component is used only when: 1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp; z). 2. You do "projective texturing", where the X &amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.MultMatrix(UnityEngine.Matrix4x4)">
            <param name="mat">To be added.</param>
            <summary>Multiplies the current modelview matrix with the one specified.</summary>
            <remarks>Equivalent to glMultMatrix(mat) in OpenGL; in other graphics APIs the corresponding functionality is emulated. Changing modelview matrix overrides current camera's view parameters, so most often you want to save and restore matrix using GL.PushMatrix and GL.PopMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.GL.PopMatrix">
            <summary>Restores both projection and modelview matrices off the top of the matrix stack.</summary>
            <remarks>Changing modelview or projection matrices overrides current camera's parameters. These matrices can be saved and restored using GL.PushMatrix and GL.PopMatrix. See Also: PushMatrix function.</remarks>
        </member>
        <member name="M:UnityEngine.GL.PushMatrix">
            <summary>Saves both projection and modelview matrices to the matrix stack.</summary>
            <remarks>Changing modelview or projection matrices overrides current camera's parameters. These matrices can be saved and restored using GL.PushMatrix and GL.PopMatrix. See Also: PopMatrix function.</remarks>
        </member>
        <member name="F:UnityEngine.GL.QUADS">
            <summary>Mode for Begin: draw quads.</summary>
            <remarks>If you want to draw something 2D in screen space then probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix. If you want something in "3D", then probably you should consider using GL.LoadIdentity followed by GL.MultMatrix with the actual 3D transform you want your stuff to be in. See Also: GL.Begin, GL.End.</remarks>
        </member>
        <member name="M:UnityEngine.GL.SetRevertBackfacing(System.Boolean)">
            <param name="revertBackFaces">To be added.</param>
            <summary>Select whether to invert the backface culling (true) or not (false).</summary>
            <remarks>Unlike most other calls, this is not only related to stuff you draw via GL class. It changes culling of triangles globally. Major use case: rendering reflections for mirrors, water etc. Since virtual camera for rendering the reflection is mirrored, the culling order has to be inverted. You can see that the Water script in Pro Standard Assets does that.</remarks>
        </member>
        <member name="P:UnityEngine.GL.sRGBWrite">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GL.TexCoord(UnityEngine.Vector3)">
            <param name="v">To be added.</param>
            <summary>Sets current texture coordinate (v.x,v.y,v.z) for all texture units.</summary>
            <remarks>In OpenGL this matches glMultiTexCoord for all texture units or glTexCoord when no multi-texturing is available. On other graphics APIs the same functionality is emulated. The Z component is used only when: 1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp; z). 2. You do "projective texturing", where the X &amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.TexCoord2(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Sets current texture coordinate (x,y) for all texture units.</summary>
            <remarks>In OpenGL this matches glMultiTexCoord for all texture units or glTexCoord when no multi-texturing is available. On other graphics APIs the same functionality is emulated. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.TexCoord3(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Sets current texture coordinate (x,y,z) for all texture units.</summary>
            <remarks>In OpenGL this matches glMultiTexCoord for all texture units or glTexCoord when no multi-texturing is available. On other graphics APIs the same functionality is emulated. The Z component is used only when: 1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp; z). 2. You do "projective texturing", where the X &amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="F:UnityEngine.GL.TRIANGLE_STRIP">
            <summary>Mode for Begin: draw triangle strip.</summary>
            <remarks>If you want to draw something 2D in screen space then probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix. If you want something in "3D", then probably you should consider using GL.LoadIdentity followed by GL.MultMatrix with the actual 3D transform you want your stuff to be in. See Also: GL.Begin, GL.End.</remarks>
        </member>
        <member name="F:UnityEngine.GL.TRIANGLES">
            <summary>Mode for Begin: draw triangles.</summary>
            <remarks>If you want to draw something 2D in screen space then probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix. If you want something in "3D", then probably you should consider using GL.LoadIdentity followed by GL.MultMatrix with the actual 3D transform you want your stuff to be in. See Also: GL.Begin, GL.End.</remarks>
        </member>
        <member name="M:UnityEngine.GL.Vertex(UnityEngine.Vector3)">
            <param name="v">To be added.</param>
            <summary>Submit a vertex.</summary>
            <remarks>In OpenGL this matches glVertex3f(v.x,v.y,v.z) ; on other graphics APIs the same functionality is emulated. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.Vertex3(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Submit a vertex.</summary>
            <remarks>In OpenGL this matches glVertex3f(x,y,z) ; on other graphics APIs the same functionality is emulated. This function can only be called between GL.Begin and GL.End functions.</remarks>
        </member>
        <member name="M:UnityEngine.GL.Viewport(UnityEngine.Rect)">
            <param name="pixelRect">To be added.</param>
            <summary>Set the rendering viewport.</summary>
            <remarks>All rendering is constrained to be inside the passed pixelRect. If the Viewport is modified, all the rendered content inside of it gets stretched.</remarks>
        </member>
        <member name="P:UnityEngine.GL.wireframe">
            <summary>Should rendering be done in wireframe?</summary>
            <value>To be added.</value>
            <remarks>Turning on wireframe mode will affect all objects rendered after the call, until you turn wireframe back off. In the Unity editor, wireframe mode is always turned off before repainting any window. Note that some platforms, for example mobile (OpenGL ES) and Flash (Stage3D) do not support wireframe rendering.</remarks>
        </member>
        <member name="T:UnityEngine.Gradient">
            <summary>Gradient used for animating colors.</summary>
            <remarks>See Also: GradientColorKey, GradientAlphaKey.Note that the alpha and colors keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 color keys and 2 alpha keys.</remarks>
        </member>
        <member name="C:UnityEngine.Gradient">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gradient.alphaKeys">
            <summary>All alpha keys defined in the gradient.</summary>
            <value>To be added.</value>
            <remarks>Note that the alpha keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 alpha keys.</remarks>
        </member>
        <member name="P:UnityEngine.Gradient.colorKeys">
            <summary>All color keys defined in the gradient.</summary>
            <value>To be added.</value>
            <remarks>Note that the color keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 color keys.</remarks>
        </member>
        <member name="M:UnityEngine.Gradient.Evaluate(System.Single)">
            <summary>Calculate color at a given time.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="time">Time of the key (0 - 1).</param>
        </member>
        <member name="M:UnityEngine.Gradient.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Gradient.SetKeys(UnityEngine.GradientColorKey[],UnityEngine.GradientAlphaKey[])">
            <summary>Setup Gradient with an array of color keys and alpha keys.</summary>
            <remarks>Note that the alpha and colors keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 color keys and 2 alpha keys.</remarks>
            <param name="colorKeys">Color keys of the gradient (maximum 8 color keys).</param>
            <param name="alphaKeys">Alpha keys of the gradient (maximum 8 alpha keys).</param>
        </member>
        <member name="T:UnityEngine.GradientAlphaKey">
            <summary>Alpha key used by Gradient.</summary>
            <remarks>See Also: GradientColorKey, Gradient.</remarks>
        </member>
        <member name="C:UnityEngine.GradientAlphaKey(System.Single,System.Single)">
            <param name="alpha">To be added.</param>
            <param name="time">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.GradientAlphaKey.alpha">
            <summary>Alpha alpha of key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.GradientAlphaKey.time">
            <summary>Time of the key (0 - 1).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GradientColorKey">
            <summary>Color key used by Gradient.</summary>
            <remarks>See Also: GradientAlphaKey, Gradient.</remarks>
        </member>
        <member name="C:UnityEngine.GradientColorKey(UnityEngine.Color,System.Single)">
            <param name="col">To be added.</param>
            <param name="time">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.GradientColorKey.color">
            <summary>Color of key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.GradientColorKey.time">
            <summary>Time of the key (0 - 1).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Graphics">
            <summary>Raw interface to Unity's drawing functions.</summary>
            <remarks>This is the high-level shortcut into the optimized mesh drawing functionality of Unity.</remarks>
        </member>
        <member name="C:UnityEngine.Graphics">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Graphics.activeColorBuffer">
            <summary>Currently active color buffer (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderBuffer, Graphics.activeDepthBuffer, Graphics.SetRenderTarget.</remarks>
        </member>
        <member name="P:UnityEngine.Graphics.activeDepthBuffer">
            <summary>Currently active depth buffer (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderBuffer, Graphics.activeColorBuffer, Graphics.SetRenderTarget.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.Material)">
            <summary>Copies source texture into destination render texture.</summary>
            <remarks>This is mostly used for implementing image effects, and requires Unity Pro. Blit sets dest to be active render texture, sets source as _MainTex property on the material, and draws a full-screen quad. See Also: Graphics.BlitMultiTap, image effects.</remarks>
            <param name="source">Source texture.</param>
            <param name="mat">Material to use for copying. Material's shader could do some post-processing effect, for example.</param>
        </member>
        <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture)">
            <summary>Copies source texture into destination render texture.</summary>
            <remarks>This is mostly used for implementing image effects, and requires Unity Pro. Blit sets dest to be active render texture, sets source as _MainTex property on the material, and draws a full-screen quad. See Also: Graphics.BlitMultiTap, image effects.</remarks>
            <param name="source">Source texture.</param>
            <param name="dest">Destination RenderTexture, or null to blit directly to screen.</param>
        </member>
        <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.Material,System.Int32)">
            <summary>Copies source texture into destination render texture.</summary>
            <remarks>This is mostly used for implementing image effects, and requires Unity Pro. Blit sets dest to be active render texture, sets source as _MainTex property on the material, and draws a full-screen quad. See Also: Graphics.BlitMultiTap, image effects.</remarks>
            <param name="source">Source texture.</param>
            <param name="mat">Material to use for copying. Material's shader could do some post-processing effect, for example.</param>
            <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
        </member>
        <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material)">
            <summary>Copies source texture into destination render texture.</summary>
            <remarks>This is mostly used for implementing image effects, and requires Unity Pro. Blit sets dest to be active render texture, sets source as _MainTex property on the material, and draws a full-screen quad. See Also: Graphics.BlitMultiTap, image effects.</remarks>
            <param name="source">Source texture.</param>
            <param name="dest">Destination RenderTexture, or null to blit directly to screen.</param>
            <param name="mat">Material to use for copying. Material's shader could do some post-processing effect, for example.</param>
        </member>
        <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,System.Int32)">
            <summary>Copies source texture into destination render texture.</summary>
            <remarks>This is mostly used for implementing image effects, and requires Unity Pro. Blit sets dest to be active render texture, sets source as _MainTex property on the material, and draws a full-screen quad. See Also: Graphics.BlitMultiTap, image effects.</remarks>
            <param name="source">Source texture.</param>
            <param name="dest">Destination RenderTexture, or null to blit directly to screen.</param>
            <param name="mat">Material to use for copying. Material's shader could do some post-processing effect, for example.</param>
            <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
        </member>
        <member name="M:UnityEngine.Graphics.BlitMultiTap(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,UnityEngine.Vector2[])">
            <summary>Copies source texture into destination, for multi-tap shader.</summary>
            <remarks>This is mostly used for implementing some image effects. For example, Gaussian or iterative Cone blurring samples source texture at multiple different locations. Requires Unity Pro. BlitMultiTap sets dest to be active render texture, sets source as _MainTex property on the material, and draws a full-screen quad. Each vertex of the quad has multiple texture coordinates set up, offset by offsets pixels. See Also: Graphics.Blit, image effects.</remarks>
            <param name="source">Source texture.</param>
            <param name="dest">Destination RenderTexture, or null to blit directly to screen.</param>
            <param name="mat">Material to use for copying. Material's shader should do some post-processing effect.</param>
            <param name="offsets">Variable number of filtering offsets. Offsets are given in pixels.</param>
        </member>
        <member name="M:UnityEngine.Graphics.ClearRandomWriteTargets">
            <summary>Clear random write targets for DX11 pixel shaders.</summary>
            <remarks>This function clears any "random write" targets that were previously set with SetRandomWriteTarget.</remarks>
        </member>
        <member name="P:UnityEngine.Graphics.deviceName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Graphics.deviceVendor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Graphics.deviceVersion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,System.Int32)">
            <param name="materialIndex">To be added.</param>
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
            <param name="materialIndex">To be added.</param>
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
            <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
            <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
            <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
            <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock)">
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
            <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
            <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean)">
            <param name="castShadows">To be added.</param>
            <param name="receiveShadows">To be added.</param>
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
            <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
            <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean)">
            <param name="castShadows">To be added.</param>
            <param name="receiveShadows">To be added.</param>
            <summary>Draw a mesh.</summary>
            <remarks>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be affected by Projectors - just like it was part of some GameObject. It can be drawn for all cameras or just for some specific camera. Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and managing GameObjects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow. Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter. See Also: MaterialPropertyBlock.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
            <param name="material">Material to use.</param>
            <param name="layer">Layer to use.</param>
            <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
            <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
            <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Matrix4x4)">
            <summary>Draw a mesh immediately.</summary>
            <remarks>This function will draw a given mesh immediately. Currently set shader and material (see Material.SetPass) will be used. The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows. If you want full integration with lighting and shadowing, use Graphics.DrawMesh instead.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Matrix4x4,System.Int32)">
            <summary>Draw a mesh immediately.</summary>
            <remarks>This function will draw a given mesh immediately. Currently set shader and material (see Material.SetPass) will be used. The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows. If you want full integration with lighting and shadowing, use Graphics.DrawMesh instead.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.</param>
            <param name="materialIndex">Subset of the mesh to draw.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>Draw a mesh immediately.</summary>
            <remarks>This function will draw a given mesh immediately. Currently set shader and material (see Material.SetPass) will be used. The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows. If you want full integration with lighting and shadowing, use Graphics.DrawMesh instead.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
            <summary>Draw a mesh immediately.</summary>
            <remarks>This function will draw a given mesh immediately. Currently set shader and material (see Material.SetPass) will be used. The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows. If you want full integration with lighting and shadowing, use Graphics.DrawMesh instead.</remarks>
            <param name="mesh">The Mesh to draw.</param>
            <param name="position">Position of the mesh.</param>
            <param name="rotation">Rotation of the mesh.</param>
            <param name="materialIndex">Subset of the mesh to draw.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawProcedural(UnityEngine.MeshTopology,System.Int32)">
            <param name="topology">To be added.</param>
            <param name="vertexCount">To be added.</param>
            <summary>Draws a fully procedural geometry on the GPU.</summary>
            <remarks>DrawProcedural does a draw call on the GPU, without any vertex or index buffers. This is only useful on DirectX 11 level hardware where shaders can read arbitrary data from ComputeBuffer buffers. See Also: Graphics.DrawProceduralIndirect, SystemInfo.supportsInstancing.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.DrawProcedural(UnityEngine.MeshTopology,System.Int32,System.Int32)">
            <param name="topology">To be added.</param>
            <param name="vertexCount">To be added.</param>
            <param name="instanceCount">To be added.</param>
            <summary>Draws a fully procedural geometry on the GPU.</summary>
            <remarks>DrawProcedural does a draw call on the GPU, without any vertex or index buffers. This is only useful on DirectX 11 level hardware where shaders can read arbitrary data from ComputeBuffer buffers. See Also: Graphics.DrawProceduralIndirect, SystemInfo.supportsInstancing.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.DrawProceduralIndirect(UnityEngine.MeshTopology,UnityEngine.ComputeBuffer)">
            <param name="topology">To be added.</param>
            <param name="bufferWithArgs">To be added.</param>
            <summary>Draws a fully procedural geometry on the GPU.</summary>
            <remarks>DrawProceduralIndirect does a draw call on the GPU, without any vertex or index buffers. The amount of geometry to draw is read from a ComputeBuffer. Typical use case is generating arbitrary amount of data from a ComputeShader and then rendering that, without requiring a readback to the CPU. This is only useful on DirectX 11 level hardware where shaders can read arbitrary data from ComputeBuffer buffers. Buffer with arguments, bufferWithArgs, has to have four integer numbers at given argsOffset offset: vertex count per instance, instance count, start vertex location, start instance location. This very much maps to Direct3D11 DrawInstancedIndirect function. See Also: Graphics.DrawProcedural, ComputeBuffer.CopyCount, SystemInfo.supportsComputeShaders.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.DrawProceduralIndirect(UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32)">
            <param name="topology">To be added.</param>
            <param name="bufferWithArgs">To be added.</param>
            <param name="argsOffset">To be added.</param>
            <summary>Draws a fully procedural geometry on the GPU.</summary>
            <remarks>DrawProceduralIndirect does a draw call on the GPU, without any vertex or index buffers. The amount of geometry to draw is read from a ComputeBuffer. Typical use case is generating arbitrary amount of data from a ComputeShader and then rendering that, without requiring a readback to the CPU. This is only useful on DirectX 11 level hardware where shaders can read arbitrary data from ComputeBuffer buffers. Buffer with arguments, bufferWithArgs, has to have four integer numbers at given argsOffset offset: vertex count per instance, instance count, start vertex location, start instance location. This very much maps to Direct3D11 DrawInstancedIndirect function. See Also: Graphics.DrawProcedural, ComputeBuffer.CopyCount, SystemInfo.supportsComputeShaders.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
            <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
            <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
            <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
            <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
            <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
            <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
            <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
            <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
            <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
            <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
            <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
            <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
            <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
            <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
            <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
            <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
            <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
            <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
            <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
            <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
            <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
        </member>
        <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color,UnityEngine.Material)">
            <summary>Draw a texture in screen coordinates.</summary>
            <remarks>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint events. It's probably better to use GUI.DrawTexture for GUI code.</remarks>
            <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
            <param name="texture">Texture to draw.</param>
            <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
            <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
            <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
            <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
            <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
            <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
            <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
        </member>
        <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.ComputeBuffer)">
            <param name="index">To be added.</param>
            <param name="uav">To be added.</param>
            <summary>Set random write target for DX11 pixel shaders.</summary>
            <remarks>DirectX 11 pixel shaders can write into arbitrary locations of some textures, called "unordered access views" in DX11. These "random write" targets are set similarly to how multiple render targets are set. You can either use a RenderTexture with enableRandomWrite flag set, or a ComputeBuffer as target. The targets stay set until you manually clear them with ClearRandomWriteTargets. See Also: RenderTexture.enableRandomWrite, ComputeBuffer, DirectX 11.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.RenderTexture)">
            <param name="index">To be added.</param>
            <param name="uav">To be added.</param>
            <summary>Set random write target for DX11 pixel shaders.</summary>
            <remarks>DirectX 11 pixel shaders can write into arbitrary locations of some textures, called "unordered access views" in DX11. These "random write" targets are set similarly to how multiple render targets are set. You can either use a RenderTexture with enableRandomWrite flag set, or a ComputeBuffer as target. The targets stay set until you manually clear them with ClearRandomWriteTargets. See Also: RenderTexture.enableRandomWrite, ComputeBuffer, DirectX 11.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture)">
            <param name="rt">To be added.</param>
            <summary>Sets current render target.</summary>
            <remarks>This function sets which RenderTexture or a RenderBuffer combination will be rendered into next. Use it when implementing custom rendering algorithms, where you need to render something into a render texture manually. Requires Unity Pro. The function call with colorBuffers array enables techniques that use Multiple Render Targets (MRT), where fragment shader can output more than one final color. See Also: RenderTexture, Graphics.activeColorBuffer, Graphics.activeDepthBuffer, SystemInfo.supportedRenderTargetCount.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer)">
            <param name="colorBuffer">To be added.</param>
            <param name="depthBuffer">To be added.</param>
            <summary>Sets current render target.</summary>
            <remarks>This function sets which RenderTexture or a RenderBuffer combination will be rendered into next. Use it when implementing custom rendering algorithms, where you need to render something into a render texture manually. Requires Unity Pro. The function call with colorBuffers array enables techniques that use Multiple Render Targets (MRT), where fragment shader can output more than one final color. See Also: RenderTexture, Graphics.activeColorBuffer, Graphics.activeDepthBuffer, SystemInfo.supportedRenderTargetCount.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
            <param name="colorBuffers">To be added.</param>
            <param name="depthBuffer">To be added.</param>
            <summary>Sets current render target.</summary>
            <remarks>This function sets which RenderTexture or a RenderBuffer combination will be rendered into next. Use it when implementing custom rendering algorithms, where you need to render something into a render texture manually. Requires Unity Pro. The function call with colorBuffers array enables techniques that use Multiple Render Targets (MRT), where fragment shader can output more than one final color. See Also: RenderTexture, Graphics.activeColorBuffer, Graphics.activeDepthBuffer, SystemInfo.supportedRenderTargetCount.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture,System.Int32)">
            <param name="rt">To be added.</param>
            <param name="mipLevel">To be added.</param>
            <summary>Sets current render target.</summary>
            <remarks>This function sets which RenderTexture or a RenderBuffer combination will be rendered into next. Use it when implementing custom rendering algorithms, where you need to render something into a render texture manually. Requires Unity Pro. The function call with colorBuffers array enables techniques that use Multiple Render Targets (MRT), where fragment shader can output more than one final color. See Also: RenderTexture, Graphics.activeColorBuffer, Graphics.activeDepthBuffer, SystemInfo.supportedRenderTargetCount.</remarks>
        </member>
        <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture,System.Int32,UnityEngine.CubemapFace)">
            <param name="rt">To be added.</param>
            <param name="mipLevel">To be added.</param>
            <param name="face">To be added.</param>
            <summary>Sets current render target.</summary>
            <remarks>This function sets which RenderTexture or a RenderBuffer combination will be rendered into next. Use it when implementing custom rendering algorithms, where you need to render something into a render texture manually. Requires Unity Pro. The function call with colorBuffers array enables techniques that use Multiple Render Targets (MRT), where fragment shader can output more than one final color. See Also: RenderTexture, Graphics.activeColorBuffer, Graphics.activeDepthBuffer, SystemInfo.supportedRenderTargetCount.</remarks>
        </member>
        <member name="P:UnityEngine.Graphics.supportsVertexProgram">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GUI">
            <summary>The GUI class is the interface for Unity's GUI with manual positioning.</summary>
            <remarks>See Also: GUI tutorial.</remarks>
        </member>
        <member name="C:UnityEngine.GUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUI.backgroundColor">
            <summary>Global tinting color for all background elements rendered by the GUI.</summary>
            <value>To be added.</value>
            <remarks>This gets multiplied by color. See Also: contentColor, color.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,System.String)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="text">Text to display on the group.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="content">Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="style">The style to use for the background.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="image">Texture to display on the group.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="text">Text to display on the group.</param>
            <param name="style">The style to use for the background.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="content">Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.</param>
            <param name="style">The style to use for the background.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Begin a group. Must be matched with a call to EndGroup.</summary>
            <remarks>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays. See Also: matrix, BeginScrollView.</remarks>
            <param name="position">Rectangle on the screen to use for the group.</param>
            <param name="image">Texture to display on the group.</param>
            <param name="style">The style to use for the background.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
            <summary>Begin a scrolling view inside your GUI.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the ScrollView.</param>
            <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
            <param name="viewRect">The rectangle used inside the scrollview.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean)">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <summary>Begin a scrolling view inside your GUI.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the ScrollView.</param>
            <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
            <param name="viewRect">The rectangle used inside the scrollview.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>Begin a scrolling view inside your GUI.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the ScrollView.</param>
            <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
            <param name="viewRect">The rectangle used inside the scrollview.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <summary>Begin a scrolling view inside your GUI.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the ScrollView.</param>
            <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
            <param name="viewRect">The rectangle used inside the scrollview.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,System.String)">
            <summary>Make a graphical box.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the box.</param>
            <param name="text">Text to display on the box.</param>
        </member>
        <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a graphical box.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the box.</param>
            <param name="content">Text, image and tooltip for this box.</param>
        </member>
        <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Make a graphical box.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the box.</param>
            <param name="image">Texture to display on the box.</param>
        </member>
        <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a graphical box.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the box.</param>
            <param name="text">Text to display on the box.</param>
            <param name="style">The style to use. If left out, the box style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a graphical box.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the box.</param>
            <param name="content">Text, image and tooltip for this box.</param>
            <param name="style">The style to use. If left out, the box style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Make a graphical box.</summary>
            <remarks>To be added.</remarks>
            <param name="position">Rectangle on the screen to use for the box.</param>
            <param name="image">Texture to display on the box.</param>
            <param name="style">The style to use. If left out, the box style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.BringWindowToBack(System.Int32)">
            <summary>Bring a specific window to back of the floating windows.</summary>
            <remarks>To be added.</remarks>
            <param name="windowID">The identifier used when you created the window in the Window call.</param>
        </member>
        <member name="M:UnityEngine.GUI.BringWindowToFront(System.Int32)">
            <summary>Bring a specific window to front of the floating windows.</summary>
            <remarks>To be added.</remarks>
            <param name="windowID">The identifier used when you created the window in the Window call.</param>
        </member>
        <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,System.String)">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="text">Text to display on the button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="content">Text, image and tooltip for this button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="image">Texture to display on the button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="text">Text to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="image">Texture to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="P:UnityEngine.GUI.changed">
            <summary>Returns true if any controls changed the value of the input data.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUI.color">
            <summary>Global tinting color for the GUI.</summary>
            <value>To be added.</value>
            <remarks>This will affect both backgrounds &amp; text colors. See Also: backgroundColor, contentColor.</remarks>
        </member>
        <member name="P:UnityEngine.GUI.contentColor">
            <summary>Tinting color for all text rendered by the GUI.</summary>
            <value>To be added.</value>
            <remarks>This gets multiplied by color. See Also: backgroundColor, color.</remarks>
        </member>
        <member name="P:UnityEngine.GUI.depth">
            <summary>The sorting depth of the currently executing GUI behaviour.</summary>
            <value>To be added.</value>
            <remarks>Set this to determine ordering when you have different scripts running simultaneously. GUI elements drawn with lower depth values will appear on top of elements with higher values (ie, you can think of the depth as "distance" from the camera). Note: To see this example working, you will need to create 2 scripts. Remember to name the scripts with the same name as the class names, else it will not work.And copy this other example to another script:</remarks>
        </member>
        <member name="M:UnityEngine.GUI.DoBeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <param name="position">To be added.</param>
            <param name="scrollPosition">To be added.</param>
            <param name="viewRect">To be added.</param>
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <param name="horizontalScrollbar">To be added.</param>
            <param name="verticalScrollbar">To be added.</param>
            <param name="background">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.DragWindow">
            <summary>Make a window draggable.If you want to have the entire window background to act as a drag area, use the version of DragWindow that takes no parameters and put it at the end of the window function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.DragWindow(UnityEngine.Rect)">
            <summary>Make a window draggable.If you want to have the entire window background to act as a drag area, use the version of DragWindow that takes no parameters and put it at the end of the window function.</summary>
            <remarks>To be added.</remarks>
            <param name="position">The part of the window that can be dragged. This is clipped to the actual window.</param>
        </member>
        <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Draw a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
        </member>
        <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
            <summary>Draw a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
        </member>
        <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Boolean)">
            <summary>Draw a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
            <param name="alphaBlend">Whether to apply alpha blending when drawing the image (enabled by default).</param>
        </member>
        <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Boolean,System.Single)">
            <summary>Draw a texture within a rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
            <param name="alphaBlend">Whether to apply alpha blending when drawing the image (enabled by default).</param>
            <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used. Pass in w/h for the desired aspect ratio. This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.</param>
        </member>
        <member name="M:UnityEngine.GUI.DrawTextureWithTexCoords(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect)">
            <summary>Draw a texture within a rectangle with the given texture coordinates. Use this function for clipping or tiling the image within the given rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="texCoords">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
        </member>
        <member name="M:UnityEngine.GUI.DrawTextureWithTexCoords(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Boolean)">
            <summary>Draw a texture within a rectangle with the given texture coordinates. Use this function for clipping or tiling the image within the given rectangle.</summary>
            <remarks>See Also: GUI.color, GUI.contentColor.</remarks>
            <param name="position">Rectangle on the screen to draw the texture within.</param>
            <param name="image">Texture to display.</param>
            <param name="texCoords">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
            <param name="alphaBlend">Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.</param>
        </member>
        <member name="P:UnityEngine.GUI.enabled">
            <summary>Is the GUI enabled?</summary>
            <value>To be added.</value>
            <remarks>Set this value to false to disable all GUI interaction. All controls will be draw semi-transparently, and will not respond to user input.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.EndGroup">
            <summary>End a group.</summary>
            <remarks>Should be attached with GUI.BeginGroup See Also: BeginGroup.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.EndScrollView">
            <summary>Ends a scrollview started with a call to BeginScrollView.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.EndScrollView(System.Boolean)">
            <param name="handleScrollWheel">To be added.</param>
            <summary>Ends a scrollview started with a call to BeginScrollView.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.FocusControl(System.String)">
            <summary>Move keyboard focus to a named control.</summary>
            <remarks>See Also: SetNextControlName, GetNameOfFocusedControl. For focusing text in Editor GUI text fields, see EditorGUI.FocusTextInControl.</remarks>
            <param name="name">Name set using SetNextControlName.</param>
        </member>
        <member name="M:UnityEngine.GUI.FocusWindow(System.Int32)">
            <summary>Make a window become the active window.</summary>
            <remarks>See Also: GUI.UnfocusWindow.</remarks>
            <param name="windowID">The identifier used when you created the window in the Window call.</param>
        </member>
        <member name="M:UnityEngine.GUI.GetNameOfFocusedControl">
            <summary>Get the name of named control that has focus.</summary>
            <returns>To be added.</returns>
            <remarks>Control names are set up by using SetNextControlName. When a named control has focus, this function will return its name. If no control has focus or the focused control has no name set, an empty string will be returned instead.See Also: SetNextControlName, FocusControl.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.HorizontalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
            <summary>Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>Finding extra elements:  The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "leftbutton" and "rightbutton" to the style name.  The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyScrollbarleftbutton  - Name of style used for the left button.  // MyScrollbarrightbutton - Name of style used for the right button.  // MyScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUI.HorizontalScrollbar(Rect(0,0,100,20), scrollPos, 1, 0, 100, "Scroll");  }</example>
            <param name="position">Rectangle on the screen to use for the scrollbar.</param>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="leftValue">The value at the left end of the scrollbar.</param>
            <param name="rightValue">The value at the right end of the scrollbar.</param>
        </member>
        <member name="M:UnityEngine.GUI.HorizontalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
            <summary>Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>Finding extra elements:  The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "leftbutton" and "rightbutton" to the style name.  The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyScrollbarleftbutton  - Name of style used for the left button.  // MyScrollbarrightbutton - Name of style used for the right button.  // MyScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUI.HorizontalScrollbar(Rect(0,0,100,20), scrollPos, 1, 0, 100, "Scroll");  }</example>
            <param name="position">Rectangle on the screen to use for the scrollbar.</param>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="leftValue">The value at the left end of the scrollbar.</param>
            <param name="rightValue">The value at the right end of the scrollbar.</param>
            <param name="style">The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.HorizontalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
            <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
        </member>
        <member name="M:UnityEngine.GUI.HorizontalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="slider">The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.</param>
            <param name="thumb">The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,System.String)">
            <summary>Make a text or texture label on screen.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control. Example: Draw the classic Hello World! string:Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture:</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="text">Text to display on the label.</param>
        </member>
        <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a text or texture label on screen.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control. Example: Draw the classic Hello World! string:Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture:</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="content">Text, image and tooltip for this label.</param>
        </member>
        <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Make a text or texture label on screen.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control. Example: Draw the classic Hello World! string:Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture:</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="image">Texture to display on the label.</param>
        </member>
        <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a text or texture label on screen.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control. Example: Draw the classic Hello World! string:Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture:</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="text">Text to display on the label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a text or texture label on screen.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control. Example: Draw the classic Hello World! string:Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture:</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="content">Text, image and tooltip for this label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Make a text or texture label on screen.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control. Example: Draw the classic Hello World! string:Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture:</remarks>
            <param name="position">Rectangle on the screen to use for the label.</param>
            <param name="image">Texture to display on the label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.</param>
        </member>
        <member name="P:UnityEngine.GUI.matrix">
            <summary>The GUI transform matrix.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,System.String)">
            <summary>Show a Modal Window.</summary>
            <returns>To be added.</returns>
            <remarks>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</remarks>
            <param name="id">A unique id number.</param>
            <param name="clientRect">Position and size of the window.</param>
            <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
            <param name="text">Text to appear in the title-bar area of the window, if any.</param>
        </member>
        <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.GUIContent)">
            <summary>Show a Modal Window.</summary>
            <returns>To be added.</returns>
            <remarks>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</remarks>
            <param name="id">A unique id number.</param>
            <param name="clientRect">Position and size of the window.</param>
            <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
            <param name="content">GUIContent to appear in the title bar of the window, if any.</param>
        </member>
        <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.Texture)">
            <summary>Show a Modal Window.</summary>
            <returns>To be added.</returns>
            <remarks>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</remarks>
            <param name="id">A unique id number.</param>
            <param name="clientRect">Position and size of the window.</param>
            <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
            <param name="image">An image to appear in the title bar of the window, if any.</param>
        </member>
        <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,System.String,UnityEngine.GUIStyle)">
            <summary>Show a Modal Window.</summary>
            <returns>To be added.</returns>
            <remarks>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</remarks>
            <param name="id">A unique id number.</param>
            <param name="clientRect">Position and size of the window.</param>
            <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
            <param name="text">Text to appear in the title-bar area of the window, if any.</param>
            <param name="style">Style to apply to the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Show a Modal Window.</summary>
            <returns>To be added.</returns>
            <remarks>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</remarks>
            <param name="id">A unique id number.</param>
            <param name="clientRect">Position and size of the window.</param>
            <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
            <param name="content">GUIContent to appear in the title bar of the window, if any.</param>
            <param name="style">Style to apply to the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Show a Modal Window.</summary>
            <returns>To be added.</returns>
            <remarks>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</remarks>
            <param name="id">A unique id number.</param>
            <param name="clientRect">Position and size of the window.</param>
            <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
            <param name="image">An image to appear in the title bar of the window, if any.</param>
            <param name="style">Style to apply to the window.</param>
        </member>
        <member name="P:UnityEngine.GUI.mouseTooltip">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
        </member>
        <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,System.Int32)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
        </member>
        <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,UnityEngine.GUIStyle)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,System.String)">
            <summary>Make a button that is active as long as the user holds it down.</summary>
            <returns>True when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="text">Text to display on the button.</param>
        </member>
        <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>Make a button that is active as long as the user holds it down.</summary>
            <returns>True when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="content">Text, image and tooltip for this button.</param>
        </member>
        <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.Texture)">
            <summary>Make a button that is active as long as the user holds it down.</summary>
            <returns>True when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="image">Texture to display on the button.</param>
        </member>
        <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a button that is active as long as the user holds it down.</summary>
            <returns>True when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="text">Text to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a button that is active as long as the user holds it down.</summary>
            <returns>True when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Make a button that is active as long as the user holds it down.</summary>
            <returns>True when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="image">Texture to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.ScrollTo(UnityEngine.Rect)">
            <param name="position">To be added.</param>
            <summary>Scrolls all enclosing scrollviews so they try to make position visible.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.ScrollTowards(UnityEngine.Rect,System.Single)">
            <param name="position">To be added.</param>
            <param name="maxDelta">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,System.String[],System.Int32)">
            <summary>Make a grid of buttons.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the grid.</param>
            <param name="selected">The index of the selected grid button.</param>
            <param name="texts">An array of strings to show on the grid buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
        </member>
        <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32)">
            <param name="content">To be added.</param>
            <summary>Make a grid of buttons.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the grid.</param>
            <param name="selected">The index of the selected grid button.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
        </member>
        <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],System.Int32)">
            <summary>Make a grid of buttons.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the grid.</param>
            <param name="selected">The index of the selected grid button.</param>
            <param name="images">An array of textures on the grid buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
        </member>
        <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,System.String[],System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a grid of buttons.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the grid.</param>
            <param name="selected">The index of the selected grid button.</param>
            <param name="texts">An array of strings to show on the grid buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a grid of buttons.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the grid.</param>
            <param name="selected">The index of the selected grid button.</param>
            <param name="contents">An array of text, image and tooltips for the grid button.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a grid of buttons.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the grid.</param>
            <param name="selected">The index of the selected grid button.</param>
            <param name="images">An array of textures on the grid buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.SetNextControlName(System.String)">
            <param name="name">To be added.</param>
            <summary>Set the name of the next control.</summary>
            <remarks>This makes the following control be registered with a given name. See Also: GetNameOfFocusedControl, FocusControl.</remarks>
        </member>
        <member name="P:UnityEngine.GUI.skin">
            <summary>The global skin to use.</summary>
            <value>To be added.</value>
            <remarks>You can set this at any point to change the look of your GUI. If you set it to null, the skin will revert to the default Unity skin.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.Slider(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,System.Boolean,System.Int32)">
            <param name="position">To be added.</param>
            <param name="value">To be added.</param>
            <param name="size">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="slider">To be added.</param>
            <param name="thumb">To be added.</param>
            <param name="horiz">To be added.</param>
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String)">
            <summary>Make a Multi-line text area where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,System.Int32)">
            <summary>Make a Multi-line text area where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a Multi-line text area where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="style">The style to use. If left out, the textArea style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a Multi-line text area where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="style">The style to use. If left out, the textArea style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String)">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,System.Int32)">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the text field.</param>
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,System.String)">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="value">Is this button on or off?</param>
            <param name="text">Text to display on the button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="value">Is this button on or off?</param>
            <param name="content">Text, image and tooltip for this button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.Texture)">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="value">Is this button on or off?</param>
            <param name="image">Texture to display on the button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="value">Is this button on or off?</param>
            <param name="text">Text to display on the button.</param>
            <param name="style">The style to use. If left out, the toggle style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="value">Is this button on or off?</param>
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="style">The style to use. If left out, the toggle style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the button.</param>
            <param name="value">Is this button on or off?</param>
            <param name="image">Texture to display on the button.</param>
            <param name="style">The style to use. If left out, the toggle style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,System.String[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toolbar.</param>
            <param name="selected">The index of the selected button.</param>
            <param name="texts">An array of strings to show on the toolbar buttons.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
            <param name="content">To be added.</param>
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toolbar.</param>
            <param name="selected">The index of the selected button.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.Texture[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toolbar.</param>
            <param name="selected">The index of the selected button.</param>
            <param name="images">An array of textures on the toolbar buttons.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toolbar.</param>
            <param name="selected">The index of the selected button.</param>
            <param name="texts">An array of strings to show on the toolbar buttons.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toolbar.</param>
            <param name="selected">The index of the selected button.</param>
            <param name="contents">An array of text, image and tooltips for the toolbar buttons.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],UnityEngine.GUIStyle)">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the toolbar.</param>
            <param name="selected">The index of the selected button.</param>
            <param name="images">An array of textures on the toolbar buttons.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
        </member>
        <member name="P:UnityEngine.GUI.tooltip">
            <summary>The tooltip of the control the mouse is currently over, or which has keyboard focus. (Read Only).</summary>
            <value>To be added.</value>
            <remarks>When you create GUI controls, you can pass in a tooltip for them. This is done by changing the content parameter  to take a custom-made GUIContent object, rather than just passing in a string to display. When the mouse is over a control with a tooltip, it sets the global GUI.tooltip value to the tooltip you pass in. If the mouse is not hovering over any control, the value is set to the control which has keyboard focus. At the end of the OnGUI code, you can make a label showing the value of GUI.tooltipYou can use the ordering of elements to create 'hierarchical' tooltips:Tooltips can also be used to implement an OnMouseOver / OnMouseOut messaging system:</remarks>
        </member>
        <member name="P:UnityEngine.GUI.tooltipRect">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.UnfocusWindow">
            <summary>Remove focus from all windows.</summary>
            <remarks>See Also: GUI.FocusWindow.</remarks>
        </member>
        <member name="M:UnityEngine.GUI.VerticalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
            <summary>Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>Finding extra elements:  The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "upbutton" and "downbutton" to the style name.  The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyVertScrollbarupbutton  - Name of style used for the up button.  // MyVertScrollbardownbutton - Name of style used for the down button.  // MyVertScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUI.VerticalScrollbar(Rect(0,0,100,20), scrollPos, 1, 0, 100, "Scroll");  }</example>
            <param name="position">Rectangle on the screen to use for the scrollbar.</param>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="topValue">The value at the top of the scrollbar.</param>
            <param name="bottomValue">The value at the bottom of the scrollbar.</param>
        </member>
        <member name="M:UnityEngine.GUI.VerticalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
            <summary>Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>Finding extra elements:  The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "upbutton" and "downbutton" to the style name.  The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyVertScrollbarupbutton  - Name of style used for the up button.  // MyVertScrollbardownbutton - Name of style used for the down button.  // MyVertScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUI.VerticalScrollbar(Rect(0,0,100,20), scrollPos, 1, 0, 100, "Scroll");  }</example>
            <param name="position">Rectangle on the screen to use for the scrollbar.</param>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="topValue">The value at the top of the scrollbar.</param>
            <param name="bottomValue">The value at the bottom of the scrollbar.</param>
            <param name="style">The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.VerticalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
            <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="topValue">The value at the top end of the slider.</param>
            <param name="bottomValue">The value at the bottom end of the slider.</param>
        </member>
        <member name="M:UnityEngine.GUI.VerticalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
            <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="position">Rectangle on the screen to use for the slider.</param>
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="topValue">The value at the top end of the slider.</param>
            <param name="bottomValue">The value at the bottom end of the slider.</param>
            <param name="slider">The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.</param>
            <param name="thumb">The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,System.String)">
            <summary>Make a popup window.</summary>
            <returns>Onscreen rectangle denoting the window's position and size.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.You can use the same function to create multiple windows. Just make sure that each window has its own ID. Example:To stop showing a window, simply stop calling GUI.Window from inside your main OnGUI function:To make a window that gets its size from automatic GUI layouting, use GUILayout.Window. Call Ordering Windows need to be drawn back-to-front; windows on top of other windows need to be drawn later than the ones below them. This means that you can not count on your DoWindow functions to  be called in any particular order. In order for this to work seamlessly, the following values are stored when you create your window (using the Window function), and retrieved when your DoWindow gets called:   GUI.skin, GUI.enabled, GUI.color, GUI.backgroundColor, GUI.contentColor, GUI.matrix.Note that you can use the alpha component of GUI.color to fade windows in and out. See Also: DragWindow, BringWindowToFront, BringWindowToBack.</remarks>
            <example />
            <param name="id">ID number for the window (can be any value as long as it is unique).</param>
            <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
            <param name="func">Script function to display the window's contents.</param>
            <param name="text">Text to render inside the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.GUIContent)">
            <summary>Make a popup window.</summary>
            <returns>Onscreen rectangle denoting the window's position and size.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.You can use the same function to create multiple windows. Just make sure that each window has its own ID. Example:To stop showing a window, simply stop calling GUI.Window from inside your main OnGUI function:To make a window that gets its size from automatic GUI layouting, use GUILayout.Window. Call Ordering Windows need to be drawn back-to-front; windows on top of other windows need to be drawn later than the ones below them. This means that you can not count on your DoWindow functions to  be called in any particular order. In order for this to work seamlessly, the following values are stored when you create your window (using the Window function), and retrieved when your DoWindow gets called:   GUI.skin, GUI.enabled, GUI.color, GUI.backgroundColor, GUI.contentColor, GUI.matrix.Note that you can use the alpha component of GUI.color to fade windows in and out. See Also: DragWindow, BringWindowToFront, BringWindowToBack.</remarks>
            <example />
            <param name="id">ID number for the window (can be any value as long as it is unique).</param>
            <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
            <param name="func">Script function to display the window's contents.</param>
            <param name="content">GUIContent to render inside the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.Texture)">
            <summary>Make a popup window.</summary>
            <returns>Onscreen rectangle denoting the window's position and size.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.You can use the same function to create multiple windows. Just make sure that each window has its own ID. Example:To stop showing a window, simply stop calling GUI.Window from inside your main OnGUI function:To make a window that gets its size from automatic GUI layouting, use GUILayout.Window. Call Ordering Windows need to be drawn back-to-front; windows on top of other windows need to be drawn later than the ones below them. This means that you can not count on your DoWindow functions to  be called in any particular order. In order for this to work seamlessly, the following values are stored when you create your window (using the Window function), and retrieved when your DoWindow gets called:   GUI.skin, GUI.enabled, GUI.color, GUI.backgroundColor, GUI.contentColor, GUI.matrix.Note that you can use the alpha component of GUI.color to fade windows in and out. See Also: DragWindow, BringWindowToFront, BringWindowToBack.</remarks>
            <example />
            <param name="id">ID number for the window (can be any value as long as it is unique).</param>
            <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
            <param name="func">Script function to display the window's contents.</param>
            <param name="image">Image to render inside the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,System.String,UnityEngine.GUIStyle)">
            <summary>Make a popup window.</summary>
            <returns>Onscreen rectangle denoting the window's position and size.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.You can use the same function to create multiple windows. Just make sure that each window has its own ID. Example:To stop showing a window, simply stop calling GUI.Window from inside your main OnGUI function:To make a window that gets its size from automatic GUI layouting, use GUILayout.Window. Call Ordering Windows need to be drawn back-to-front; windows on top of other windows need to be drawn later than the ones below them. This means that you can not count on your DoWindow functions to  be called in any particular order. In order for this to work seamlessly, the following values are stored when you create your window (using the Window function), and retrieved when your DoWindow gets called:   GUI.skin, GUI.enabled, GUI.color, GUI.backgroundColor, GUI.contentColor, GUI.matrix.Note that you can use the alpha component of GUI.color to fade windows in and out. See Also: DragWindow, BringWindowToFront, BringWindowToBack.</remarks>
            <example />
            <param name="id">ID number for the window (can be any value as long as it is unique).</param>
            <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
            <param name="func">Script function to display the window's contents.</param>
            <param name="text">Text to render inside the window.</param>
            <param name="style">Style information for the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Make a popup window.</summary>
            <returns>Onscreen rectangle denoting the window's position and size.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.You can use the same function to create multiple windows. Just make sure that each window has its own ID. Example:To stop showing a window, simply stop calling GUI.Window from inside your main OnGUI function:To make a window that gets its size from automatic GUI layouting, use GUILayout.Window. Call Ordering Windows need to be drawn back-to-front; windows on top of other windows need to be drawn later than the ones below them. This means that you can not count on your DoWindow functions to  be called in any particular order. In order for this to work seamlessly, the following values are stored when you create your window (using the Window function), and retrieved when your DoWindow gets called:   GUI.skin, GUI.enabled, GUI.color, GUI.backgroundColor, GUI.contentColor, GUI.matrix.Note that you can use the alpha component of GUI.color to fade windows in and out. See Also: DragWindow, BringWindowToFront, BringWindowToBack.</remarks>
            <example />
            <param name="id">ID number for the window (can be any value as long as it is unique).</param>
            <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
            <param name="func">Script function to display the window's contents.</param>
            <param name="title">Text displayed in the window's title bar.</param>
            <param name="style">Style information for the window.</param>
        </member>
        <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <summary>Make a popup window.</summary>
            <returns>Onscreen rectangle denoting the window's position and size.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.You can use the same function to create multiple windows. Just make sure that each window has its own ID. Example:To stop showing a window, simply stop calling GUI.Window from inside your main OnGUI function:To make a window that gets its size from automatic GUI layouting, use GUILayout.Window. Call Ordering Windows need to be drawn back-to-front; windows on top of other windows need to be drawn later than the ones below them. This means that you can not count on your DoWindow functions to  be called in any particular order. In order for this to work seamlessly, the following values are stored when you create your window (using the Window function), and retrieved when your DoWindow gets called:   GUI.skin, GUI.enabled, GUI.color, GUI.backgroundColor, GUI.contentColor, GUI.matrix.Note that you can use the alpha component of GUI.color to fade windows in and out. See Also: DragWindow, BringWindowToFront, BringWindowToBack.</remarks>
            <example />
            <param name="id">ID number for the window (can be any value as long as it is unique).</param>
            <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
            <param name="func">Script function to display the window's contents.</param>
            <param name="image">Image to render inside the window.</param>
            <param name="style">Style information for the window.</param>
        </member>
        <member name="T:UnityEngine.GUI+WindowFunction">
            <param name="id">To be added.</param>
            <summary>Callback to draw GUI within a window (used with GUI.Window).</summary>
            <remarks>This function takes the ID number of the window to be drawn. Its body should contains GUI calls to display the window, much like a standard OnGUI function. This function can then be passed as a parameter to GUI.Window to draw the appropriate contents.</remarks>
        </member>
        <member name="T:UnityEngine.GUIContent">
            <summary>The contents of a GUI element.</summary>
            <remarks>This works closely in relation with GUIStyle. GUIContent defines what to render and GUIStyle defines how to render it. See Also: GUIStyle.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(System.String)">
            <param name="text">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(UnityEngine.GUIContent)">
            <param name="src">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(UnityEngine.Texture)">
            <param name="image">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(System.String,System.String)">
            <param name="text">To be added.</param>
            <param name="tooltip">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(System.String,UnityEngine.Texture)">
            <param name="text">To be added.</param>
            <param name="image">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(UnityEngine.Texture,System.String)">
            <param name="image">To be added.</param>
            <param name="tooltip">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIContent(System.String,UnityEngine.Texture,System.String)">
            <param name="text">To be added.</param>
            <param name="image">To be added.</param>
            <param name="tooltip">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIContent.image">
            <summary>The icon image contained.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.GUIContent.none">
            <summary>Shorthand for empty content.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIContent.text">
            <summary>The text contained.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIContent.tooltip">
            <summary>The tooltip of this element.</summary>
            <value>To be added.</value>
            <remarks>The tooltip associated with this content. Read GUItooltip to get the tooltip of the gui element the user is currently over.</remarks>
        </member>
        <member name="T:UnityEngine.GUIElement">
            <summary>Base class for images &amp;amp; text strings displayed in a GUI.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIElement">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIElement.GetScreenRect">
            <summary>Returns bounding rectangle of GUIElement in screen coordinates.</summary>
            <returns>To be added.</returns>
            <remarks>If no camera is given a camera filling the entire game window will be assumed.</remarks>
        </member>
        <member name="M:UnityEngine.GUIElement.GetScreenRect(UnityEngine.Camera)">
            <param name="camera">To be added.</param>
            <summary>Returns bounding rectangle of GUIElement in screen coordinates.</summary>
            <returns>To be added.</returns>
            <remarks>If no camera is given a camera filling the entire game window will be assumed.</remarks>
        </member>
        <member name="M:UnityEngine.GUIElement.HitTest(UnityEngine.Vector3)">
            <param name="screenPosition">To be added.</param>
            <summary>Is a point on screen inside the element.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if the screenPosition is contained in this GUIElement. screenPosition is specified in screen coordinates, like the values returned by Input.mousePosition property. If no camera is given a camera filling the entire game window will be assumed. Note that if the position is inside the element, true will be returned even if the GameObject belongs to Ignore Raycast layer (normally mouse events are not sent to Ignore Raycast objects). See Also: GUILayer.HitTest.</remarks>
        </member>
        <member name="M:UnityEngine.GUIElement.HitTest(UnityEngine.Vector3,UnityEngine.Camera)">
            <param name="screenPosition">To be added.</param>
            <param name="camera">To be added.</param>
            <summary>Is a point on screen inside the element.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if the screenPosition is contained in this GUIElement. screenPosition is specified in screen coordinates, like the values returned by Input.mousePosition property. If no camera is given a camera filling the entire game window will be assumed. Note that if the position is inside the element, true will be returned even if the GameObject belongs to Ignore Raycast layer (normally mouse events are not sent to Ignore Raycast objects). See Also: GUILayer.HitTest.</remarks>
        </member>
        <member name="T:UnityEngine.GUILayer">
            <summary>Component added to a camera to make it render 2D GUI elements.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUILayer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayer.HitTest(UnityEngine.Vector3)">
            <param name="screenPosition">To be added.</param>
            <summary>Get the GUI element at a specific screen position.</summary>
            <returns>To be added.</returns>
            <remarks>Returns the GUIElement at a specific point on screen. If screenPosition is inside some GUIElement, that element is returned. Returns null if the position is not inside any GUI element. GUI elements that belong to Ignore Raycast layer will be ignored, as if they would not exist. screenPosition is measured in screen coordinates, like the values returned by Input.mousePosition property. Note: GUILayer.HitTest only finds old-school GUI components (made up of the classes GUIElement, GUITexture, GUIText, GUILayer), and will not work with the "new" one (referred to as "UnityGUI" and made up of all the other GUIAnything classes, and the OnGUI() call). So if you're using UnityGUI, HitTest won't find anything. See Also: GUIElement.HitTest, Input.mousePosition.</remarks>
        </member>
        <member name="T:UnityEngine.GUILayout">
            <summary>The GUILayout class is the interface for Unity gui with automatic layout.</summary>
            <remarks>See Also: GUI Layout tutorial.</remarks>
        </member>
        <member name="C:UnityEngine.GUILayout">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,System.String)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="text">Optional text to display in the area.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIContent)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="content">Optional text, image and tooltip top display for this area.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="style">The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.Texture)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="image">Optional texture to display in the area.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="text">Optional text to display in the area.</param>
            <param name="style">The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="content">Optional text, image and tooltip top display for this area.</param>
            <param name="style">The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
            <param name="screenRect">To be added.</param>
            <summary>Begin a GUILayout block of GUI controls in a fixed screen area.</summary>
            <remarks>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen.  If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. See Also: EndAreaThis function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</remarks>
            <param name="image">Optional texture to display in the area.</param>
            <param name="style">The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
            <summary>Begin a Horizontal control group.</summary>
            <remarks>All controls rendered inside this element will be placed horiztonally next to each other. The group must be closed with a call to EndHorizontal.</remarks>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a Horizontal control group.</summary>
            <remarks>All controls rendered inside this element will be placed horiztonally next to each other. The group must be closed with a call to EndHorizontal.</remarks>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginHorizontal(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a Horizontal control group.</summary>
            <remarks>All controls rendered inside this element will be placed horiztonally next to each other. The group must be closed with a call to EndHorizontal.</remarks>
            <param name="text">Text to display on group.</param>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a Horizontal control group.</summary>
            <remarks>All controls rendered inside this element will be placed horiztonally next to each other. The group must be closed with a call to EndHorizontal.</remarks>
            <param name="content">Text, image, and tooltip for this group.</param>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a Horizontal control group.</summary>
            <remarks>All controls rendered inside this element will be placed horiztonally next to each other. The group must be closed with a call to EndHorizontal.</remarks>
            <param name="image">Texture to display on group.</param>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle)">
            <param name="style">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="style">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="alwaysShowHorizontal">To be added.</param>
            <param name="alwaysShowVertical">To be added.</param>
            <param name="background">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Begin an automatically laid out scrollview.</summary>
            <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
            <remarks>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.</remarks>
            <example />
            <param name="scrollPosition">The position to use display.</param>
            <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical control group.</summary>
            <remarks>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.</remarks>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical control group.</summary>
            <remarks>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.</remarks>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginVertical(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical control group.</summary>
            <remarks>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.</remarks>
            <param name="text">Text to display on group.</param>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical control group.</summary>
            <remarks>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.</remarks>
            <param name="content">Text, image, and tooltip for this group.</param>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Begin a vertical control group.</summary>
            <remarks>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.</remarks>
            <param name="image">Texture to display on group.</param>
            <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Box(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout box.</summary>
            <remarks>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions ( BeginHorizontal, BeginVertical, BeginArea, etc...).</remarks>
            <param name="text">Text to display on the box.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Box(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout box.</summary>
            <remarks>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions ( BeginHorizontal, BeginVertical, BeginArea, etc...).</remarks>
            <param name="content">Text, image and tooltip for this box.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Box(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout box.</summary>
            <remarks>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions ( BeginHorizontal, BeginVertical, BeginArea, etc...).</remarks>
            <param name="image">Texture to display on the box.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Box(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout box.</summary>
            <remarks>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions ( BeginHorizontal, BeginVertical, BeginArea, etc...).</remarks>
            <param name="text">Text to display on the box.</param>
            <param name="style">The style to use. If left out, the box style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Box(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout box.</summary>
            <remarks>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions ( BeginHorizontal, BeginVertical, BeginArea, etc...).</remarks>
            <param name="content">Text, image and tooltip for this box.</param>
            <param name="style">The style to use. If left out, the box style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Box(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout box.</summary>
            <remarks>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions ( BeginHorizontal, BeginVertical, BeginArea, etc...).</remarks>
            <param name="image">Texture to display on the box.</param>
            <param name="style">The style to use. If left out, the box style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Button(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to display on the button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Button(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Button(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="image">Texture to display on the button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Button(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Button(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Button(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
            <returns>when the users clicks the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="image">Texture to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.EndArea">
            <summary>Close a GUILayout block started with BeginArea.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.EndHorizontal">
            <summary>Close a group started with BeginHorizontal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.EndScrollView">
            <summary>End a scroll view begun with a call to BeginScrollView.</summary>
            <remarks>See Also: GUILayout.BeginScrollView</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.EndVertical">
            <summary>Close a group started with BeginVertical.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
            <param name="expand">To be added.</param>
            <summary>Option passed to a control to allow or disallow vertical expansion.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
            <param name="expand">To be added.</param>
            <summary>Option passed to a control to allow or disallow horizontal expansion.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.FlexibleSpace">
            <summary>Insert a flexible space element.</summary>
            <remarks>Flexible spaces use up any leftover space in a layout. Note: This will override the GUILayout.ExpandWidth and GUILayout.ExpandHeight</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.Height(System.Single)">
            <param name="height">To be added.</param>
            <summary>Option passed to a control to give it an absolute height.</summary>
            <returns>To be added.</returns>
            <remarks>Note: This option will override the Automatic height Layout parameter</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a horiztonal scrollbar.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "leftbutton" and "rightbutton" to the style name.  The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.See Also: BeginScrollView, VerticalScrollbar.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyScrollbarleftbutton  - Name of style used for the left button.  // MyScrollbarrightbutton - Name of style used for the right button.  // MyScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUILayout.HorizontalScrollbar (scrollPos, 1, 0, 100, "MyScrollbar");  }</example>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="leftValue">The value at the left end of the scrollbar.</param>
            <param name="rightValue">The value at the right end of the scrollbar.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a horiztonal scrollbar.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "leftbutton" and "rightbutton" to the style name.  The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.See Also: BeginScrollView, VerticalScrollbar.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyScrollbarleftbutton  - Name of style used for the left button.  // MyScrollbarrightbutton - Name of style used for the right button.  // MyScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUILayout.HorizontalScrollbar (scrollPos, 1, 0, 100, "MyScrollbar");  }</example>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="leftValue">The value at the left end of the scrollbar.</param>
            <param name="rightValue">The value at the right end of the scrollbar.</param>
            <param name="style">The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.HorizontalSlider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.HorizontalSlider(System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="leftValue">The value at the left end of the slider.</param>
            <param name="rightValue">The value at the right end of the slider.</param>
            <param name="slider">The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.</param>
            <param name="thumb">The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Label(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout label.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control</remarks>
            <param name="text">Text to display on the label.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Label(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout label.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control</remarks>
            <param name="content">Text, image and tooltip for this label.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Label(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout label.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control</remarks>
            <param name="image">Texture to display on the label.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Label(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout label.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control</remarks>
            <param name="text">Text to display on the label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Label(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout label.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control</remarks>
            <param name="content">Text, image and tooltip for this label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Label(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an auto-layout label.</summary>
            <remarks>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control</remarks>
            <param name="image">Texture to display on the label.</param>
            <param name="style">The style to use. If left out, the label style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
            <param name="maxHeight">To be added.</param>
            <summary>Option passed to a control to specify a maximum height.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
            <param name="maxWidth">To be added.</param>
            <summary>Option passed to a control to specify a maximum width.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.MinHeight(System.Single)">
            <param name="minHeight">To be added.</param>
            <summary>Option passed to a control to specify a minimum height.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.MinWidth(System.Single)">
            <param name="minWidth">To be added.</param>
            <summary>Option passed to a control to specify a minimum width.</summary>
            <returns>To be added.</returns>
            <remarks>Note: This option will override the Automatic width Layout parameter</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,System.Int32,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="options">To be added.</param>
            <summary>Make a text field where the user can enter a password.</summary>
            <returns>The edited password.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maskChar">Character to mask the password with.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.RepeatButton(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
            <returns>when the holds down the mouse.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to display on the button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
            <returns>when the holds down the mouse.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
            <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
            <returns>when the holds down the mouse.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="image">Texture to display on the button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.RepeatButton(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
            <returns>when the holds down the mouse.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
            <returns>when the holds down the mouse.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
            <returns>when the holds down the mouse.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="image">Texture to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,System.String[],System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a Selection Grid.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="texts">An array of strings to show on the buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUILayoutOption[])">
            <param name="content">To be added.</param>
            <summary>Make a Selection Grid.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a Selection Grid.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="images">An array of textures on the buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,System.String[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a Selection Grid.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="texts">An array of strings to show on the buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a Selection Grid.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="contents">An array of text, image and tooltips for the button.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a Selection Grid.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="images">An array of textures on the buttons.</param>
            <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Space(System.Single)">
            <param name="pixels">To be added.</param>
            <summary>Insert a space in the current layout group.</summary>
            <remarks>The direction of the space is dependent on the layout group you're currently in when issuing the command. If in a vertical group, the space will be vertical: Note: This will override the GUILayout.ExpandWidth and GUILayout.ExpandHeightIn horizontal groups, the pixels are measured horizontally:</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a multi-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextArea(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a multi-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a multi-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextArea(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a multi-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="style">The style to use. If left out, the textField style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="style">The style to use. If left out, the textArea style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.TextField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a single-line text field where the user can edit a string.</summary>
            <returns>The edited string.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
            <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
            <param name="style">The style to use. If left out, the textArea style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">Is the button on or off?</param>
            <param name="text">Text to display on the button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">Is the button on or off?</param>
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">Is the button on or off?</param>
            <param name="image">Texture to display on the button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">Is the button on or off?</param>
            <param name="text">Text to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">Is the button on or off?</param>
            <param name="content">Text, image and tooltip for this button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make an on/off toggle button.</summary>
            <returns>The new value of the button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">Is the button on or off?</param>
            <param name="image">Texture to display on the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="texts">An array of strings to show on the buttons.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
            <param name="content">To be added.</param>
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.Texture[],UnityEngine.GUILayoutOption[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="images">An array of textures on the buttons.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="texts">An array of strings to show on the buttons.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="contents">An array of text, image and tooltips for the button.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.Texture[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a toolbar.</summary>
            <returns>The index of the selected button.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="selected">The index of the selected button.</param>
            <param name="images">An array of textures on the buttons.</param>
            <param name="style">The style to use. If left out, the button style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Make a vertical scrollbar.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "upbutton" and "downbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.See Also: BeginScrollView, HorizontalScrollbar.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyVerticalScrollbarupbutton  - Name of style used for the up button.  // MyVerticalScrollbardownbutton - Name of style used for the down button.  // MyVerticalScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUILayout.HorizontalScrollbar (scrollPos, 1, 0, 100, "MyVerticalScrollbar");  }</example>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="topValue">The value at the top end of the scrollbar.</param>
            <param name="bottomValue">The value at the bottom end of the scrollbar.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a vertical scrollbar.</summary>
            <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
            <remarks>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "upbutton" and "downbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.See Also: BeginScrollView, HorizontalScrollbar.</remarks>
            <example>var scrollPos : float = 0.5;  // This will use the following style names to determine the size / placement of the buttons  // MyVerticalScrollbarupbutton  - Name of style used for the up button.  // MyVerticalScrollbardownbutton - Name of style used for the down button.  // MyVerticalScrollbarthumb     - Name of style used for the draggable thumb.  function OnGUI() {  scrollPos = GUILayout.HorizontalScrollbar (scrollPos, 1, 0, 100, "MyVerticalScrollbar");  }</example>
            <param name="value">The position between min and max.</param>
            <param name="size">How much can we see?</param>
            <param name="topValue">The value at the top end of the scrollbar.</param>
            <param name="bottomValue">The value at the bottom end of the scrollbar.</param>
            <param name="style">The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.VerticalSlider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <param name="leftValue">To be added.</param>
            <param name="rightValue">To be added.</param>
            <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.VerticalSlider(System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <param name="leftValue">To be added.</param>
            <param name="rightValue">To be added.</param>
            <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
            <returns>The value that has been set by the user.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
            <param name="slider">The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.</param>
            <param name="thumb">The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Width(System.Single)">
            <param name="width">To be added.</param>
            <summary>Option passed to a control to give it an absolute width.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,System.String,UnityEngine.GUILayoutOption[])">
            <summary>Make a popup window that layouts its contents automatically.</summary>
            <returns>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:</remarks>
            <example />
            <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
            <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
            <param name="func">The function that creates the GUI inside the window. This function must take one parameter - the id of the window it's currently making GUI for.</param>
            <param name="text">Text to display as a title for the window.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style or the screenRect you pass in. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>Make a popup window that layouts its contents automatically.</summary>
            <returns>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:</remarks>
            <example />
            <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
            <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
            <param name="func">The function that creates the GUI inside the window. This function must take one parameter - the id of the window it's currently making GUI for.</param>
            <param name="content">Text, image and tooltip for this window.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style or the screenRect you pass in. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
            <summary>Make a popup window that layouts its contents automatically.</summary>
            <returns>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:</remarks>
            <example />
            <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
            <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
            <param name="func">The function that creates the GUI inside the window. This function must take one parameter - the id of the window it's currently making GUI for.</param>
            <param name="image">Texture to display an image in the titlebar.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style or the screenRect you pass in. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a popup window that layouts its contents automatically.</summary>
            <returns>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:</remarks>
            <example />
            <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
            <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
            <param name="func">The function that creates the GUI inside the window. This function must take one parameter - the id of the window it's currently making GUI for.</param>
            <param name="text">Text to display as a title for the window.</param>
            <param name="style">An optional style to use for the window. If left out, the window style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style or the screenRect you pass in. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a popup window that layouts its contents automatically.</summary>
            <returns>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:</remarks>
            <example />
            <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
            <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
            <param name="func">The function that creates the GUI inside the window. This function must take one parameter - the id of the window it's currently making GUI for.</param>
            <param name="content">Text, image and tooltip for this window.</param>
            <param name="style">An optional style to use for the window. If left out, the window style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style or the screenRect you pass in. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI+WindowFunction,UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Make a popup window that layouts its contents automatically.</summary>
            <returns>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</returns>
            <remarks>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:</remarks>
            <example />
            <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
            <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
            <param name="func">The function that creates the GUI inside the window. This function must take one parameter - the id of the window it's currently making GUI for.</param>
            <param name="image">Texture to display an image in the titlebar.</param>
            <param name="style">An optional style to use for the window. If left out, the window style from the current GUISkin is used.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style or the screenRect you pass in. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="T:UnityEngine.GUILayoutOption">
            <summary>Class internally used to pass layout options into GUILayout functions. You don't use these directly, but construct them with the layouting functions in the GUILayout class.</summary>
            <remarks>See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</remarks>
        </member>
        <member name="T:UnityEngine.GUILayoutUtility">
            <summary>Utility functions for implementing and extending the GUILayout class.</summary>
            <remarks>Use this class to make your own GUI layouting code.</remarks>
        </member>
        <member name="C:UnityEngine.GUILayoutUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.BeginGroup(System.String)">
            <param name="GroupName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.EndGroup(System.String)">
            <param name="groupName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single)">
            <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
            <returns>The rect for the control.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="aspect">The aspect ratio of the element (width / height).</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
            <returns>The rect for the control.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="aspect">The aspect ratio of the element (width / height).</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUIStyle)">
            <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
            <returns>The rect for the control.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="aspect">The aspect ratio of the element (width / height).</param>
            <param name="style" />
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
            <returns>The rect for the control.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="aspect">The aspect ratio of the element (width / height).</param>
            <param name="style" />
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetLastRect">
            <summary>Get the rectangle last used by GUILayout for a control.</summary>
            <returns>The last used rectangle.</returns>
            <remarks>Note that this only works during the Repaint event.</remarks>
            <example />
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single)">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="width">The width of the area you want.</param>
            <param name="height">The height of the area you want.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="content">The content to make room for displaying.</param>
            <param name="style" />
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="width">The width of the area you want.</param>
            <param name="height">The height of the area you want.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUIStyle)">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="width">The width of the area you want.</param>
            <param name="height">The height of the area you want.</param>
            <param name="style" />
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="content">The content to make room for displaying.</param>
            <param name="style" />
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="minWidth">The minimum width of the area passed back.</param>
            <param name="maxWidth">The maximum width of the area passed back.</param>
            <param name="minHeight">The minimum width of the area passed back.</param>
            <param name="maxHeight">The maximum width of the area passed back.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="width">The width of the area you want.</param>
            <param name="height">The height of the area you want.</param>
            <param name="style" />
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="minWidth">The minimum width of the area passed back.</param>
            <param name="maxWidth">The maximum width of the area passed back.</param>
            <param name="minHeight">The minimum width of the area passed back.</param>
            <param name="maxHeight">The maximum width of the area passed back.</param>
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="minWidth">The minimum width of the area passed back.</param>
            <param name="maxWidth">The maximum width of the area passed back.</param>
            <param name="minHeight">The minimum width of the area passed back.</param>
            <param name="maxHeight">The maximum width of the area passed back.</param>
            <param name="style" />
        </member>
        <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.Reserve layout space for a rectangle with a fixed content area.Reserve layout space for a flexible rect.</summary>
            <returns>A rectangle that is large enough to contain content when rendered in style. The rectanlge to put your control in. A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="minWidth">The minimum width of the area passed back.</param>
            <param name="maxWidth">The maximum width of the area passed back.</param>
            <param name="minHeight">The minimum width of the area passed back.</param>
            <param name="maxHeight">The maximum width of the area passed back.</param>
            <param name="style" />
            <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,  GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
        </member>
        <member name="T:UnityEngine.GUISettings">
            <summary>General settings for how the GUI behaves.</summary>
            <remarks>These are shared by all elements in a GUISkin.</remarks>
        </member>
        <member name="C:UnityEngine.GUISettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISettings.cursorColor">
            <summary>The color of the cursor in text fields.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISettings.cursorFlashSpeed">
            <summary>The speed of text field cursor flashes.</summary>
            <value>To be added.</value>
            <remarks>This is how many flashes / second. If you set it to 0, flashing will be disabled. If you set it to -1, the flashing speed will match the system default of the end user.</remarks>
        </member>
        <member name="P:UnityEngine.GUISettings.doubleClickSelectsWord">
            <summary>Should double-clicking select words in text fields.</summary>
            <value>To be added.</value>
            <remarks>By default is set to true.</remarks>
        </member>
        <member name="P:UnityEngine.GUISettings.selectionColor">
            <summary>The color of the selection rect in text fields.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISettings.tripleClickSelectsLine">
            <summary>Should triple-clicking select whole text in text fields.</summary>
            <value>To be added.</value>
            <remarks>Bu default is set to true.</remarks>
        </member>
        <member name="T:UnityEngine.GUISkin">
            <summary>Defines how GUI looks and behaves.</summary>
            <remarks>GUISkin contains GUI settings and a collection of GUIStyle objects that together specify GUI skin. Active GUI skin is get and set through GUI.skin.</remarks>
        </member>
        <member name="C:UnityEngine.GUISkin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.box">
            <summary>Style used by default for GUI.Box controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.button">
            <summary>Style used by default for GUI.Button controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.customStyles">
            <summary>Array of GUI styles for specific needs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUISkin.FindStyle(System.String)">
            <param name="styleName">To be added.</param>
            <summary>Try to search for a GUIStyle. This functions returns NULL and does not give an error.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.font">
            <summary>The default font to use for all styles.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUISkin.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUISkin.GetStyle(System.String)">
            <param name="styleName">To be added.</param>
            <summary>Get a named GUIStyle.</summary>
            <returns>To be added.</returns>
            <remarks>Another example:And the script attached to this editor script:</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.horizontalScrollbar">
            <summary>Style used by default for the background part of GUI.HorizontalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.horizontalScrollbarLeftButton">
            <summary>Style used by default for the left button on GUI.HorizontalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.horizontalScrollbarRightButton">
            <summary>Style used by default for the right button on GUI.HorizontalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.horizontalScrollbarThumb">
            <summary>Style used by default for the thumb that is dragged in GUI.HorizontalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.horizontalSlider">
            <summary>Style used by default for the background part of GUI.HorizontalSlider controls.</summary>
            <value>To be added.</value>
            <remarks>The padding property is used to determine the size of the area the thumb can be dragged within.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.horizontalSliderThumb">
            <summary>Style used by default for the thumb that is dragged in GUI.HorizontalSlider controls.</summary>
            <value>To be added.</value>
            <remarks>The padding property is used to determine the size of the thumb.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.label">
            <summary>Style used by default for GUI.Label controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.scrollView">
            <summary>Style used by default for the background of ScrollView controls (see GUI.BeginScrollView).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.settings">
            <summary>Generic settings for how controls should behave with this skin.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.textArea">
            <summary>Style used by default for GUI.TextArea controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.textField">
            <summary>Style used by default for GUI.TextField controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.toggle">
            <summary>Style used by default for GUI.Toggle controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.verticalScrollbar">
            <summary>Style used by default for the background part of GUI.VerticalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.verticalScrollbarDownButton">
            <summary>Style used by default for the down button on GUI.VerticalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.verticalScrollbarThumb">
            <summary>Style used by default for the thumb that is dragged in GUI.VerticalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.verticalScrollbarUpButton">
            <summary>Style used by default for the up button on GUI.VerticalScrollbar controls.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.verticalSlider">
            <summary>Style used by default for the background part of GUI.VerticalSlider controls.</summary>
            <value>To be added.</value>
            <remarks>The padding property is used to determine the size of the area the thumb can be dragged within.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.verticalSliderThumb">
            <summary>Style used by default for the thumb that is dragged in GUI.VerticalSlider controls.</summary>
            <value>To be added.</value>
            <remarks>The padding property is used to determine the size of the thumb.</remarks>
        </member>
        <member name="P:UnityEngine.GUISkin.window">
            <summary>Style used by default for Window controls (SA GUI.Window).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GUIStyle">
            <summary>Styling information for GUI elements.</summary>
            <remarks>Most GUI functions accept an optional GUIStyle parameter to override the default style. This allows coloring, fonts and other details to be changed and switched for different states (eg, when the mouse is hovering over the control). Where a consistent look-and-feel is required over a whole GUI design, the GUISkin class is a useful way to collect a set of GUIStyle settings and apply them all at once.</remarks>
        </member>
        <member name="C:UnityEngine.GUIStyle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIStyle(UnityEngine.GUIStyle)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.active">
            <summary>Rendering settings for when the control is pressed down.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.alignment">
            <summary>Text alignment.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.border">
            <summary>The borders of all background images.</summary>
            <value>To be added.</value>
            <remarks>This corresponds to the border settings for GUITextures. It only affects the rendering of the background image and has no effect on positioning.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.CalcHeight(UnityEngine.GUIContent,System.Single)">
            <param name="content">To be added.</param>
            <param name="width">To be added.</param>
            <summary>How tall this element will be when rendered with content and a specific width.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.CalcMinMaxWidth(UnityEngine.GUIContent,System.Single@,System.Single@)">
            <param name="content">To be added.</param>
            <param name="minWidth">To be added.</param>
            <param name="maxWidth">To be added.</param>
            <summary>Calculate the minimum and maximum widths for this style rendered with content.</summary>
            <remarks>Used by GUILayout to handle word-wrapping elements correctly.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.CalcScreenSize(UnityEngine.Vector2)">
            <param name="contentSize">To be added.</param>
            <summary>Calculate the size of an element formatted with this style, and a given space to content.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.CalcSize(UnityEngine.GUIContent)">
            <param name="content">To be added.</param>
            <summary>Calculate the size of a some content if it is rendered with this style.</summary>
            <returns>To be added.</returns>
            <remarks>This function does not take wordwrapping into account. To do that, you need to determine the allocated width and then call CalcHeight to figure out the wordwrapped height.And the script attached to this editor script:</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.clipOffset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.clipping">
            <summary>What to do when the contents to be rendered is too large to fit within the area given.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.contentOffset">
            <summary>Pixel offset to apply to the content of this GUIstyle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="controlID">To be added.</param>
            <summary>Draw this GUIStyle on to the screen, internal version.Draw the GUIStyle with a text string inside.Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="controlID">To be added.</param>
            <param name="on">To be added.</param>
            <summary>Draw this GUIStyle on to the screen, internal version.Draw the GUIStyle with a text string inside.Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="isHover">To be added.</param>
            <param name="isActive">To be added.</param>
            <param name="on">To be added.</param>
            <param name="hasKeyboardFocus">To be added.</param>
            <summary>Draw this GUIStyle on to the screen, internal version.Draw the GUIStyle with a text string inside.Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="text">To be added.</param>
            <param name="isHover">To be added.</param>
            <param name="isActive">To be added.</param>
            <param name="on">To be added.</param>
            <param name="hasKeyboardFocus">To be added.</param>
            <summary>Draw this GUIStyle on to the screen, internal version.Draw the GUIStyle with a text string inside.Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="isHover">To be added.</param>
            <param name="isActive">To be added.</param>
            <param name="on">To be added.</param>
            <param name="hasKeyboardFocus">To be added.</param>
            <summary>Draw this GUIStyle on to the screen, internal version.Draw the GUIStyle with a text string inside.Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.Texture,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="position">To be added.</param>
            <param name="image">To be added.</param>
            <param name="isHover">To be added.</param>
            <param name="isActive">To be added.</param>
            <param name="on">To be added.</param>
            <param name="hasKeyboardFocus">To be added.</param>
            <summary>Draw this GUIStyle on to the screen, internal version.Draw the GUIStyle with a text string inside.Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.DrawCursor(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="controlID">To be added.</param>
            <param name="Character">To be added.</param>
            <summary>Draw this GUIStyle with selected content.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.DrawWithTextSelection(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="controlID">To be added.</param>
            <param name="firstSelectedCharacter">To be added.</param>
            <param name="lastSelectedCharacter">To be added.</param>
            <summary>Draw this GUIStyle with selected content.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.fixedHeight">
            <summary>If non-0, any GUI elements rendered with this style will have the height specified here.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.fixedWidth">
            <summary>If non-0, any GUI elements rendered with this style will have the width specified here.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.focused">
            <summary>Rendering settings for when the element has keyboard focus.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.font">
            <summary>The font to use for rendering. If null, the default font for the current GUISkin is used instead.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.fontSize">
            <summary>The font size to use (for dynamic fonts).</summary>
            <value>To be added.</value>
            <remarks>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size. This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.fontStyle">
            <summary>The font style to use (for dynamic fonts).</summary>
            <value>To be added.</value>
            <remarks>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style. This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.GetCursorPixelPosition(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="cursorStringIndex">To be added.</param>
            <summary>Get the pixel position of a given string index.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.GetCursorStringIndex(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
            <param name="position">To be added.</param>
            <param name="content">To be added.</param>
            <param name="cursorPixelPosition">To be added.</param>
            <summary>Get the cursor position (indexing into contents.text) when the user clicked at cursorPixelPosition.</summary>
            <returns>To be added.</returns>
            <remarks>This does not respect any images inside content.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.hover">
            <summary>Rendering settings for when the mouse is hovering over the control.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.imagePosition">
            <summary>How image and text of the GUIContent is combined.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.isHeightDependantOnWidth">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.lineHeight">
            <summary>The height of one line of text with this style, measured in pixels. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.margin">
            <summary>The margins between elements rendered in this style and any other GUI elements.</summary>
            <value>To be added.</value>
            <remarks>This only has effect when using automatic layout (See Also: GUILayout ).</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.name">
            <summary>The name of this GUIStyle. Used for getting them based on name.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.none">
            <summary>Shortcut for an empty GUIStyle.</summary>
            <value>To be added.</value>
            <remarks>This style contains no decoration and just renders everything in the default font.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.normal">
            <summary>Rendering settings for when the component is displayed normally.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.onActive">
            <summary>Rendering settings for when the element is turned on and pressed down.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.onFocused">
            <summary>Rendering settings for when the element has keyboard and is turned on.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.onHover">
            <summary>Rendering settings for when the control is turned on and the mouse is hovering it.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.onNormal">
            <summary>Rendering settings for when the control is turned on.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.op_Implicit(System.String)~UnityEngine.GUIStyle">
            <param name="str">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.overflow">
            <summary>Extra space to be added to the background image.</summary>
            <value>To be added.</value>
            <remarks>This is used if your image has a drop shadow and you want to extend the background image beyond the rectangles specified for gui elements that use this style.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.padding">
            <summary>Space from the edge of GUIStyle to the start of the contents.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.richText">
            <summary>Enable HTML-style tags for Text Formatting Markup.</summary>
            <value>To be added.</value>
            <remarks>Supported tags are: &amp;lt;color="htmlcolor"&amp;gt;colored text&amp;lt;/color&amp;gt;, where "htmlcolor" is a html color string, like "#ff0000" or "red". &amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;italic text&amp;lt;/i&amp;gt; &amp;lt;size=20&amp;gt;sized text&amp;lt;/size&amp;gt; These are only supported for fonts set to use dynamic font rendering, except for the 'color' tag.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.stretchHeight">
            <summary>Can GUI elements of this style be stretched vertically for better layout?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.stretchWidth">
            <summary>Can GUI elements of this style be stretched horizontally for better layouting?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyle.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyle.wordWrap">
            <summary>Should the text be wordwrapped?</summary>
            <value>To be added.</value>
            <remarks>This will cause any text contrained to be wordwrapped to fit within the width of a control.</remarks>
        </member>
        <member name="T:UnityEngine.GUIStyleState">
            <summary>Specialized values for the given states used by GUIStyle objects.</summary>
            <remarks>The GUIStyle contains all values for displaying GUI elements.</remarks>
        </member>
        <member name="C:UnityEngine.GUIStyleState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyleState.background">
            <summary>The background image used by GUI elements in this given state.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIStyleState.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIStyleState.textColor">
            <summary>The text color used by GUI elements in this state.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GUIText">
            <summary>A text string displayed in a GUI.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUIText">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.alignment">
            <summary>The alignment of the text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.anchor">
            <summary>The anchor of the text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.color">
            <summary>The color used to render the text.</summary>
            <value>To be added.</value>
            <remarks>This is the base color used to render the text. tags in rich text markup will override this.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.font">
            <summary>The font used for the text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.fontSize">
            <summary>The font size to use (for dynamic fonts).</summary>
            <value>To be added.</value>
            <remarks>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size. This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.fontStyle">
            <summary>The font style to use (for dynamic fonts).</summary>
            <value>To be added.</value>
            <remarks>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style. This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.lineSpacing">
            <summary>The line spacing multiplier.</summary>
            <value>To be added.</value>
            <remarks>This is multiplied with the line spacing defined in the font.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.material">
            <summary>The Material to use for rendering.</summary>
            <value>To be added.</value>
            <remarks>Assing a new material to change how the rendering is handled. Change this material to change the font used for all rendering. If you assign null to material, the built-in basic font is selected.See Also: font variable.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.pixelOffset">
            <summary>The pixel offset of the text.</summary>
            <value>To be added.</value>
            <remarks>The text is offset from its original position by this amount.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.richText">
            <summary>Enable HTML-style tags for Text Formatting Markup.</summary>
            <value>To be added.</value>
            <remarks>Supported tags are: &amp;lt;color="htmlcolor"&amp;gt;colored text&amp;lt;/color&amp;gt;, where "htmlcolor" is a html color string, like "#ff0000" or "red". &amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;italic text&amp;lt;/i&amp;gt; &amp;lt;size=20&amp;gt;sized text&amp;lt;/size&amp;gt; These are only supported for fonts set to use dynamic font rendering, except for the 'color' tag.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.tabSize">
            <summary>The tab width multiplier.</summary>
            <value>To be added.</value>
            <remarks>This is multiplied with the tab width defined in the font.</remarks>
        </member>
        <member name="P:UnityEngine.GUIText.text">
            <summary>The text to display.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GUITexture">
            <summary>A texture image used in a 2D GUI.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.GUITexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUITexture.border">
            <summary>The border defines the number of pixels from the edge that are not affected by scale.</summary>
            <value>To be added.</value>
            <remarks>See Also: RectOffset, GUI texture component.</remarks>
        </member>
        <member name="P:UnityEngine.GUITexture.color">
            <summary>The color of the GUI texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUITexture.pixelInset">
            <summary>Pixel inset used for pixel adjustments for size and position.</summary>
            <value>To be added.</value>
            <remarks>You can set the transform.localScale to Vector3.zero in order to make the GUI texture always the same pixel size.</remarks>
        </member>
        <member name="P:UnityEngine.GUITexture.texture">
            <summary>The texture used for drawing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.GUIUtility">
            <summary>Utility class for making new GUI controls.</summary>
            <remarks>Unless you are creating your own GUI controls from scratch, you should not use these functions.</remarks>
        </member>
        <member name="C:UnityEngine.GUIUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.ExitGUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.FocusType)">
            <param name="focus">To be added.</param>
            <summary>Get a unique ID for a control.Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetControlID(System.Int32,UnityEngine.FocusType)">
            <param name="hint">To be added.</param>
            <param name="focus">To be added.</param>
            <summary>Get a unique ID for a control.Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.FocusType,UnityEngine.Rect)">
            <param name="focus">To be added.</param>
            <param name="position">To be added.</param>
            <summary>Get a unique ID for a control.Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.GUIContent,UnityEngine.FocusType)">
            <param name="contents">To be added.</param>
            <param name="focus">To be added.</param>
            <summary>Get a unique ID for a control.Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetControlID(System.Int32,UnityEngine.FocusType,UnityEngine.Rect)">
            <param name="hint">To be added.</param>
            <param name="focus">To be added.</param>
            <param name="position">To be added.</param>
            <summary>Get a unique ID for a control.Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.GUIContent,UnityEngine.FocusType,UnityEngine.Rect)">
            <param name="contents">To be added.</param>
            <param name="focus">To be added.</param>
            <param name="position">To be added.</param>
            <summary>Get a unique ID for a control.Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GetStateObject(System.Type,System.Int32)">
            <param name="t">To be added.</param>
            <param name="controlID">To be added.</param>
            <summary>Get a state object from a controlID.</summary>
            <returns>To be added.</returns>
            <remarks>This will return a recycled state object that is unique for controlID. If there is none already, A new one will be created and hooked up to the ControlID.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.GUIToScreenPoint(UnityEngine.Vector2)">
            <param name="guiPoint">To be added.</param>
            <summary>Convert a point from GUI position to screen space.</summary>
            <returns>To be added.</returns>
            <remarks>Note: In Unity the screen space y coordinate varies from zero at the top edge of the window to a maximum at the bottom edge of the window. This is different from what you might expect. See Also: GUIUtility.ScreenToGUIPoint.</remarks>
        </member>
        <member name="P:UnityEngine.GUIUtility.hasModalWindow">
            <summary>A global property, which is true if a ModalWindow is being displayed, false otherwise.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.GUIUtility.hotControl">
            <summary>The controlID of the current hot control.</summary>
            <value>To be added.</value>
            <remarks>The hot control is one that is temporarily active. When the user mousedown's on a button, it becomes hot. No other controls are allowed to respond to mouse events while some other control is hot. once the user mouseup's, the control sets hotControl to 0 in order to indicate that other controls can now respond to user input.</remarks>
        </member>
        <member name="P:UnityEngine.GUIUtility.keyboardControl">
            <summary>The controlID of the control that has keyboard focus.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.QueryStateObject(System.Type,System.Int32)">
            <param name="t">To be added.</param>
            <param name="controlID">To be added.</param>
            <summary>Get an existing state object from a controlID.</summary>
            <returns>To be added.</returns>
            <remarks>This will return a recycled state object that is unique for controlID. If there is none already, this funtion will return null.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.RotateAroundPivot(System.Single,UnityEngine.Vector2)">
            <param name="angle">To be added.</param>
            <param name="pivotPoint">To be added.</param>
            <summary>Helper function to rotate the GUI around a point.</summary>
            <remarks>Modifies GUI.matrix to rotate all GUI elements angle degrees around pivotPoint. See Also: GUI.matrix, ScaleAroundPivot.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.ScaleAroundPivot(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="scale">To be added.</param>
            <param name="pivotPoint">To be added.</param>
            <summary>Helper function to scale the GUI around a point.</summary>
            <remarks>Modifies GUI.matrix to rotate all GUI elements angle degrees around pivotPoint. See Also: GUI.matrix, RotateAroundPivot.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.ScreenToGUIPoint(UnityEngine.Vector2)">
            <param name="screenPoint">To be added.</param>
            <summary>Convert a point from screen space to GUI position.</summary>
            <returns>To be added.</returns>
            <remarks>Used for reconverting values calculated from GUIToScreenPoint Note: In Unity the screen space y coordinate varies from zero at the top edge of the window to a maximum at the bottom edge of the window. This is different from what you might expect. See Also: GUIUtility.GUIToScreenPoint.</remarks>
        </member>
        <member name="M:UnityEngine.GUIUtility.ScreenToGUIRect(UnityEngine.Rect)">
            <param name="screenRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Gyroscope">
            <summary>Interface into the Gyroscope.</summary>
            <remarks>Use this class to access gyroscope.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.attitude">
            <summary>Returns the attitude (ie, orientation in space) of the device.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.enabled">
            <summary>Sets or retrieves the enabled status of this gyroscope.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.gravity">
            <summary>Returns the gravity acceleration vector expressed in the device's reference frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.rotationRate">
            <summary>Returns rotation rate as measured by the device's gyroscope.</summary>
            <value>To be added.</value>
            <remarks>The rotation rate is given as a Vector3 representing the speed of rotation around each of the three  axes in radians per second. This is the value as it is reported by the gyroscope hardware - a more  accurate measurement that has been processed to remove "bias" can be obtained with the rotationRateUnbiased property.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.rotationRateUnbiased">
            <summary>Returns unbiased rotation rate as measured by the device's gyroscope.</summary>
            <value>To be added.</value>
            <remarks>The rotation rate is given as a Vector3 representing the speed of rotation around each of the three  axes in radians per second. This value has been processed to remove "bias" and give a more accurate  measurement. The raw value reported by the gyroscope hardware can be obtained with the rotationRate property.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.updateInterval">
            <summary>Sets or retrieves gyroscope interval in seconds.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Gyroscope.userAcceleration">
            <summary>Returns the acceleration that the user is giving to the device.</summary>
            <value>To be added.</value>
            <remarks>The significance of this value is that the effect of gravity (which is also detected by the accelerometer)  has been removed to leave just the acceleration from the user's movements.</remarks>
        </member>
        <member name="T:UnityEngine.Handheld">
            <summary>Interface into functionality unique to handheld devices.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Handheld">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.ClearShaderCache">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.GetActivityIndicatorStyle">
            <summary>Gets the current activity indicator style.</summary>
            <returns>To be added.</returns>
            <remarks>See iOSActivityIndicatorStyle and AndroidActivityIndicatorStyle for the set of style options available.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String)">
            <summary>Plays a full-screen movie (pro only feature).</summary>
            <returns>To be added.</returns>
            <remarks>Note that player will stream movie directly from the device storage, therefore you have to provide movie as a separate files and not as a usual asset. You will have to create a folder named StreamingAssets inside your Unity project (inside your Assets folder). Store your movies inside that folder. Unity will automatically copy contents of that folder into the application bundle. Calling this function will pause Unity during movie playback. When playback finishes Unity will resume. The first parameter, path, can be a network-based URL. The function will detect that by looking for a "://" substring that follows the protocol name. On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController object to play movies. Therefore, you should expect the same behavior and the same supported formats. MPMoviePlayerController supports any movie or audio files that already play correctly on an iPod or iPhone. For movie files, this typically means files with the extensions .mov, .mp4, .mpv, and .3gp and using one of the following compression standards: H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps. Note that B frames are not supported in the Baseline profile. MPEG-4 Part 2 video (Simple Profile). Calling this function will initiate a transition that fades the screen from your current content to the designated background color of the player. When playback finishes, the player uses another fade effect to transition back to your content. You can find Apple's MPMoviePlayerController documentation here: MPMoviePlayerController Class Reference</remarks>
            <param name="path">Filesystem path to the movie file.</param>
        </member>
        <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color)">
            <summary>Plays a full-screen movie (pro only feature).</summary>
            <returns>To be added.</returns>
            <remarks>Note that player will stream movie directly from the device storage, therefore you have to provide movie as a separate files and not as a usual asset. You will have to create a folder named StreamingAssets inside your Unity project (inside your Assets folder). Store your movies inside that folder. Unity will automatically copy contents of that folder into the application bundle. Calling this function will pause Unity during movie playback. When playback finishes Unity will resume. The first parameter, path, can be a network-based URL. The function will detect that by looking for a "://" substring that follows the protocol name. On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController object to play movies. Therefore, you should expect the same behavior and the same supported formats. MPMoviePlayerController supports any movie or audio files that already play correctly on an iPod or iPhone. For movie files, this typically means files with the extensions .mov, .mp4, .mpv, and .3gp and using one of the following compression standards: H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps. Note that B frames are not supported in the Baseline profile. MPEG-4 Part 2 video (Simple Profile). Calling this function will initiate a transition that fades the screen from your current content to the designated background color of the player. When playback finishes, the player uses another fade effect to transition back to your content. You can find Apple's MPMoviePlayerController documentation here: MPMoviePlayerController Class Reference</remarks>
            <param name="path">Filesystem path to the movie file.</param>
            <param name="bgColor">Background color.</param>
        </member>
        <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color,UnityEngine.FullScreenMovieControlMode)">
            <summary>Plays a full-screen movie (pro only feature).</summary>
            <returns>To be added.</returns>
            <remarks>Note that player will stream movie directly from the device storage, therefore you have to provide movie as a separate files and not as a usual asset. You will have to create a folder named StreamingAssets inside your Unity project (inside your Assets folder). Store your movies inside that folder. Unity will automatically copy contents of that folder into the application bundle. Calling this function will pause Unity during movie playback. When playback finishes Unity will resume. The first parameter, path, can be a network-based URL. The function will detect that by looking for a "://" substring that follows the protocol name. On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController object to play movies. Therefore, you should expect the same behavior and the same supported formats. MPMoviePlayerController supports any movie or audio files that already play correctly on an iPod or iPhone. For movie files, this typically means files with the extensions .mov, .mp4, .mpv, and .3gp and using one of the following compression standards: H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps. Note that B frames are not supported in the Baseline profile. MPEG-4 Part 2 video (Simple Profile). Calling this function will initiate a transition that fades the screen from your current content to the designated background color of the player. When playback finishes, the player uses another fade effect to transition back to your content. You can find Apple's MPMoviePlayerController documentation here: MPMoviePlayerController Class Reference</remarks>
            <param name="path">Filesystem path to the movie file.</param>
            <param name="bgColor">Background color.</param>
            <param name="controlMode">How the playback controls are to be displayed.</param>
        </member>
        <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color,UnityEngine.FullScreenMovieControlMode,UnityEngine.FullScreenMovieScalingMode)">
            <summary>Plays a full-screen movie (pro only feature).</summary>
            <returns>To be added.</returns>
            <remarks>Note that player will stream movie directly from the device storage, therefore you have to provide movie as a separate files and not as a usual asset. You will have to create a folder named StreamingAssets inside your Unity project (inside your Assets folder). Store your movies inside that folder. Unity will automatically copy contents of that folder into the application bundle. Calling this function will pause Unity during movie playback. When playback finishes Unity will resume. The first parameter, path, can be a network-based URL. The function will detect that by looking for a "://" substring that follows the protocol name. On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController object to play movies. Therefore, you should expect the same behavior and the same supported formats. MPMoviePlayerController supports any movie or audio files that already play correctly on an iPod or iPhone. For movie files, this typically means files with the extensions .mov, .mp4, .mpv, and .3gp and using one of the following compression standards: H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps. Note that B frames are not supported in the Baseline profile. MPEG-4 Part 2 video (Simple Profile). Calling this function will initiate a transition that fades the screen from your current content to the designated background color of the player. When playback finishes, the player uses another fade effect to transition back to your content. You can find Apple's MPMoviePlayerController documentation here: MPMoviePlayerController Class Reference</remarks>
            <param name="path">Filesystem path to the movie file.</param>
            <param name="bgColor">Background color.</param>
            <param name="controlMode">How the playback controls are to be displayed.</param>
            <param name="scalingMode">How the movie is to be scaled to fit the screen.</param>
        </member>
        <member name="M:UnityEngine.Handheld.SetActivityIndicatorStyle(UnityEngine.AndroidActivityIndicatorStyle)">
            <param name="style">To be added.</param>
            <summary>Sets the desired activity indicator style.</summary>
            <remarks>Note that the change will take effect on next call to StartActivityIndicator.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.SetActivityIndicatorStyle(UnityEngine.iOSActivityIndicatorStyle)">
            <param name="style">To be added.</param>
            <summary>Sets the desired activity indicator style.</summary>
            <remarks>Note that the change will take effect on next call to StartActivityIndicator.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.StartActivityIndicator">
            <summary>Starts os activity indicator.</summary>
            <remarks>Please be warned that this informs os ui system to start. For actual animation to take effect you usually need to wait till the end of this frame. So if you want activity indicator to be animated during synced operation, please use coroutines.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.StopActivityIndicator">
            <summary>Stops os activity indicator.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Handheld.use32BitDisplayBuffer">
            <summary>Determines whether or not a 32-bit display buffer will be used.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Handheld.Vibrate">
            <summary>Triggers device vibration.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.HideFlags">
            <summary>Bit mask that controls object destruction and visibility in inspectors.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.HideFlags.DontSave">
            <summary>The object will not be saved to the scene. It will not be destroyed when a new scene is loaded.</summary>
            <remarks>It is your responsibility to cleanup the object manually using DestroyImmediate, otherwise it will leak.</remarks>
        </member>
        <member name="F:UnityEngine.HideFlags.HideAndDontSave">
            <summary>A combination of not shown in the hierarchy and not saved to to scenes.</summary>
            <remarks>This is most commonly used for objects which are created by scripts and are purely under their control.</remarks>
        </member>
        <member name="F:UnityEngine.HideFlags.HideInHierarchy">
            <summary>The object will not appear in the hierarchy.</summary>
        </member>
        <member name="F:UnityEngine.HideFlags.HideInInspector">
            <summary>It is not possible to view it in the inspector.</summary>
        </member>
        <member name="F:UnityEngine.HideFlags.None">
            <summary>A normal, visible object. This is the default.</summary>
        </member>
        <member name="F:UnityEngine.HideFlags.NotEditable">
            <summary>The object is not be editable in the inspector.</summary>
        </member>
        <member name="T:UnityEngine.HideInInspector">
            <summary>Makes a variable not show up in the inspector but be serialized.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.HideInInspector">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.HingeJoint">
            <summary>The HingeJoint groups together 2 rigid bodies, constraining them to move like connected by a hinge.</summary>
            <remarks>This joint is great for, well, doors, but can also be used to model chains, etc... The HingeJoint has a motor which can be used to make the hinge spin around the joints axis. A spring which attempts to reach for a target angle by spinning around the joints axis. And a limit which constrains the joint angle.</remarks>
        </member>
        <member name="C:UnityEngine.HingeJoint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.angle">
            <summary>The current angle in degrees of the joint relative to its rest position. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The rest angle between the bodies is always zero at the beginning of the simulation.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.limits">
            <summary>Limit of angular rotation on the hinge joint.</summary>
            <value>To be added.</value>
            <remarks>The joint will be limited so that the angle is always between /limits.min/ and /limits.max/. The joint angle is in degrees relative to the rest angle. The rest angle between the bodies is always zero at the beginning of the simulation.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.motor">
            <summary>The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.</summary>
            <value>To be added.</value>
            <remarks>The motor tries to reach /motor.targetVelocity/ angular velocity in degrees per second. The motor will only be able to reach /motor.targetVelocity/, if /motor.force/ is sufficiently large. If the joint is spinning faster than /motor.targetVelocity/ the motor will break. A negative /motor.targetVelocity/ will make the motor spin in the opposite direction. The /motor.force/ is the maximum torque the motor can exert. If it is zero the motor is disabled. The motor will brake when it is spinning faster than /motor.targetVelocity/ only, if /motor.freeSpin/ is false. If /motor.freeSpin/ is true the motor will not brake.Modifying the motor automatically enables the motor by setting HingeJoint.useMotor to true.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.spring">
            <summary>The spring attempts to reach a target angle by adding spring and damping forces.</summary>
            <value>To be added.</value>
            <remarks>The /spring.spring/ force attempts to reach the target angle. A larger value makes the spring reach the target position faster. The /spring.damper/ force dampens the angular velocity. A larger value makes the spring reach the goal slower. The spring reaches for the /spring.targetPosition/ angle in degrees relative to the rest angle. The rest angle between the bodies is always zero at the beginning of the simulation.Modifying the spring automatically enables it.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.useLimits">
            <summary>Enables the joint's limits.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.useMotor">
            <summary>Enables the joint's motor.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.useSpring">
            <summary>Enables the joint's spring.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint.velocity">
            <summary>The angular velocity of the joint in degrees per second.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.HingeJoint2D">
            <summary>Joint that allows a Rigidbody2D object to rotate around a point in space or a point on another object.</summary>
            <remarks>See Also: DistanceJoint2D class, SliderJoint2D class, SpringJoint2D class,.</remarks>
        </member>
        <member name="C:UnityEngine.HingeJoint2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint2D.anchor">
            <summary>The joint's anchor point on the object that has the HingeJoint2D component.</summary>
            <value>To be added.</value>
            <remarks>See Also: connectedAnchor.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint2D.connectedAnchor">
            <summary>The joint's anchor point on the second object (ie, the one which doesn't have the component).</summary>
            <value>To be added.</value>
            <remarks>See Also: anchor.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint2D.limits">
            <summary>Limit of angular rotation on the joint.</summary>
            <value>To be added.</value>
            <remarks>See Also: useLimits.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint2D.motor">
            <summary>Parameters for the motor force applied to the joint.</summary>
            <value>To be added.</value>
            <remarks>See Also: useMotor.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint2D.useLimits">
            <summary>Should limits be placed on the range of rotation?</summary>
            <value>To be added.</value>
            <remarks>See Also: limits.</remarks>
        </member>
        <member name="P:UnityEngine.HingeJoint2D.useMotor">
            <summary>Should the joint be rotated automatically by a motor torque?</summary>
            <value>To be added.</value>
            <remarks>See Also: motor.</remarks>
        </member>
        <member name="T:UnityEngine.HostData">
            <summary>This is the data structure for holding individual host information.</summary>
            <remarks>The host list retreived from a master server uses this class to represent individual hosts.</remarks>
        </member>
        <member name="C:UnityEngine.HostData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.comment">
            <summary>A miscellaneous comment (can hold data).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.connectedPlayers">
            <summary>Currently connected players.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.gameName">
            <summary>The name of the game (like John Doe's Game).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.gameType">
            <summary>The type of the game (like "MyUniqueGameType").</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.guid">
            <summary>The GUID of the host, needed when connecting with NAT punchthrough.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.ip">
            <summary>Server IP address.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.passwordProtected">
            <summary>Does the server require a password?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.playerLimit">
            <summary>Maximum players limit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.port">
            <summary>Server port.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HostData.useNat">
            <summary>Does this server require NAT punchthrough?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.HumanBodyBones">
            <summary>Human Body Bones.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.Chest">
            <summary>This is the Chest bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.Head">
            <summary>This is the Head bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.Hips">
            <summary>This is the Hips bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.Jaw">
            <summary>This is the Jaw bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LastBone">
            <summary>This is the Last bone index delimiter.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftEye">
            <summary>This is the Left Eye bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftFoot">
            <summary>This is the Left Ankle bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftHand">
            <summary>This is the Left Wrist bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftLowerArm">
            <summary>This is the Left Elbow bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftLowerLeg">
            <summary>This is the Left Knee bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftShoulder">
            <summary>This is the Left Shoulder bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftToes">
            <summary>This is the Left Toes bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftUpperArm">
            <summary>This is the Left Upper Arm bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.LeftUpperLeg">
            <summary>This is the Left Upper Leg bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.Neck">
            <summary>This is the Neck bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightEye">
            <summary>This is the Right Eye bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightFoot">
            <summary>This is the Right Ankle bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightHand">
            <summary>This is the Right Wrist bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightLowerArm">
            <summary>This is the Right Elbow bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightLowerLeg">
            <summary>This is the Right Knee bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightShoulder">
            <summary>This is the Right Shoulder bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightToes">
            <summary>This is the Right Toes bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightUpperArm">
            <summary>This is the Right Upper Arm bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.RightUpperLeg">
            <summary>This is the Right Upper Leg bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBodyBones.Spine">
            <summary>This is the first Spine bone.</summary>
            <remarks>See Also: Animator.GetBoneTransform.</remarks>
        </member>
        <member name="T:UnityEngine.HumanBone">
            <summary>The mapping between a bone in the model and the conceptual bone in the Mecanim human anatomy.</summary>
            <remarks>The names of the Mecanim human bone and the bone in the model are stored along with the limiting muscle values that constrain the bone's rotation during animation.</remarks>
        </member>
        <member name="P:UnityEngine.HumanBone.boneName">
            <summary>The name of the bone to which the Mecanim human bone is mapped.</summary>
            <value>To be added.</value>
            <remarks>This is the name of the bone in the original model and also of the Transform that represents it in the Unity GameObject. See Also: humanName.</remarks>
        </member>
        <member name="P:UnityEngine.HumanBone.humanName">
            <summary>The name of the Mecanim human bone to which the bone from the model is mapped.</summary>
            <value>To be added.</value>
            <remarks>To get a list of all the available human bones from code, you should use HumanTrait.BoneName. See Also: boneName.</remarks>
        </member>
        <member name="F:UnityEngine.HumanBone.limit">
            <summary>The rotation limits that define the muscle for this bone.</summary>
            <remarks>The muscle contains the default orientation of the bone alone with the allowed limits of rotation away from the default around all three axes.</remarks>
        </member>
        <member name="T:UnityEngine.HumanDescription">
            <summary>Class that holds humanoid avatar parameters to pass to the AvatarBuilder.BuildHumanAvatar function.</summary>
            <remarks>See Also: AvatarBuilder.BuildHumanAvatar.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.armStretch">
            <summary>Amount by which the arm's length is allowed to stretch when using IK.</summary>
            <value>To be added.</value>
            <remarks>Inverse Kinematics (IK) can often be handled more smoothly if a small amount of "slack" is allowed in the positions of bones relative to each other. This property controls how much slack is available in the arm joints. The value is given in world distance units in the range 0..1. For example, with the default setting of 0.05, the arm will begin to stretch when the IK goal is at 95% of the target and will stretch by 5%. The stretch is carried out by translating both the elbow and wrist transforms. The ideal value will depend on the rig and the animation but in general, a larger value will make for a smoother IK computation at the expense of more unrealistic stretching of the arm. See Also: legStretch.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.feetSpacing">
            <summary>Modification to the minimum distance between the feet of a humanoid model.</summary>
            <value>To be added.</value>
            <remarks>When a humanoid model has unusually large feet (a cartoon-like character, say) the meshes for the feet can sometimes interpenetrate during IK movement. The default value for feetSpacing is zero, but using a larger value will increase the minimum distance that is maintained between the feet and avoid interpenetration.</remarks>
        </member>
        <member name="F:UnityEngine.HumanDescription.human">
            <summary>Mapping between Mecanim bone names and bone names in the rig.</summary>
            <remarks>Each item in the array is a HumanBone object that contains a Mecanim avatar bone name, a bone name in the model (to which the Mecanim bone is mapped) and a "muscle" that specifies the bone's limits of motion. The bones can be listed in any order but there are a certain number of bones that Mecanim requires you to define; use HumanTrait.RequiredBone to get a list of all required bones. See Also: HumanTrait.BoneName, HumanTrait.RequiredBone.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.legStretch">
            <summary>Amount by which the leg's length is allowed to stretch when using IK.</summary>
            <value>To be added.</value>
            <remarks>Inverse Kinematics (IK) can often be handled more smoothly if a small amount of "slack" is allowed in the positions of bones relative to each other. This property controls how much slack is available in the leg joints. The value is given in world distance units in the range 0..1. For example, with the default setting of 0.05, the leg will begin to stretch when the IK goal is at 95% of the target and will stretch by 5%. The stretch is carried out by translating both the knee and ankle transforms. The ideal value will depend on the rig and the animation but in general, a larger value will make for a smoother IK computation at the expense of more unrealistic stretching of the leg. See Also: armStretch.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.lowerArmTwist">
            <summary>Defines how the lower arm's roll/twisting is distributed between the elbow and wrist joints.</summary>
            <value>To be added.</value>
            <remarks>When the lower arm needs to twist or "roll" for the IK, the rotation can be applied at the wrist or elbow joints or some twist can be applied at both. The lowerArmTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the elbow and wrist. For example, a value of zero means the twist should be handled entirely at the elbow, while a value of one means it should be applied entirely at the wrist. The default value of 0.5 distributes the twisting evenly between elbow and wrist. See Also: upperArmTwist, lowerLegTwist, upperLegTwist.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.lowerLegTwist">
            <summary>Defines how the lower leg's roll/twisting is distributed between the knee and ankle.</summary>
            <value>To be added.</value>
            <remarks>When the lower leg needs to twist or "roll" for the IK, the rotation can be applied at the knee or ankle joints or some twist can be applied at both. The lowerLegTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the knee and ankle. For example, a value of zero means the twist should be handled entirely at the knee, while a value of one means it should be applied entirely at the ankle. The default value of 0.5 distributes the twisting evenly between knee and ank;e. See Also: upperArmTwist, lowerArmTwist, upperLegTwist.</remarks>
        </member>
        <member name="F:UnityEngine.HumanDescription.skeleton">
            <summary>List of bone Transforms to include in the model.</summary>
            <remarks>This list define which transforms to include in the final avatar skeleton. Strange results can occur if a parent transform (ie, one with children in the hierarchy) is omitted from the list. See Also: SkeletonBone.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.upperArmTwist">
            <summary>Defines how the lower arm's roll/twisting is distributed between the shoulder and elbow joints.</summary>
            <value>To be added.</value>
            <remarks>When the upper arm needs to twist or "roll" for the IK, the rotation can be applied at the shoulder or elbow joints or some twist can be applied at both. The upperArmTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the shoulder and elbow. For example, a value of zero means the twist should be handled entirely at the shoulder, while a value of one means it should be applied entirely at the elbow. The default value of 0.5 distributes the twisting evenly between shoulder and elbow. See Also: lowerArmTwist, lowerLegTwist, upperLegTwist.</remarks>
        </member>
        <member name="P:UnityEngine.HumanDescription.upperLegTwist">
            <summary>Defines how the upper leg's roll/twisting is distributed between the thigh and knee joints.</summary>
            <value>To be added.</value>
            <remarks>When the upper leg needs to twist or "roll" for the IK, the rotation can be applied at the thigh or knee joints or some twist can be applied at both. The upperLegTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the thigh and knee. For example, a value of zero means the twist should be handled entirely at the thigh, while a value of one means it should be applied entirely at the knee. The default value of 0.5 distributes the twisting evenly between thigh and knee. See Also: lowerArmTwist, lowerLegTwist, upperArmTwist.</remarks>
        </member>
        <member name="T:UnityEngine.HumanLimit">
            <summary>This class stores the rotation limits that define the muscle for a single human bone.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HumanLimit.axisLength">
            <summary>Length of the bone to which the limit is applied.</summary>
            <value>To be added.</value>
            <remarks>See Also: HumanLimit.useDefaultValues.</remarks>
        </member>
        <member name="P:UnityEngine.HumanLimit.center">
            <summary>The default orientation of a bone when no muscle action is applied.</summary>
            <value>To be added.</value>
            <remarks>The vector value represents the bone's rotation in degrees around the X, Y and Z axes relative to the initial position of the bone in the skeleton. Any muscle rotation subsequently applied to the bone will be relative to this value. If useDefaultValues is enabled, the value of center will be [0, 0, 0]. See Also: HumanLimit.useDefaultValues.</remarks>
        </member>
        <member name="P:UnityEngine.HumanLimit.max">
            <summary>The maximum rotation away from the initial value that this muscle can apply.</summary>
            <value>To be added.</value>
            <remarks>The center property specifies the rotation of the bone when the muscle is at "rest". The max value specfies the maximum rotation in degrees away from the rest value that the muscle can apply. The min value specifies a similar limit but in the negative direction of rotation. The allowed range for the maximum is 0..180 degrees. See Also: HumanLimit.useDefaultValues.</remarks>
        </member>
        <member name="P:UnityEngine.HumanLimit.min">
            <summary>The maximum negative rotation away from the initial value that this muscle can apply.</summary>
            <value>To be added.</value>
            <remarks>The center property specifies the rotation of the bone when the muscle is at "rest". The min value specfies the maximum negative rotation in degrees away from the rest value that the muscle can apply. The max value specifies a similar limit but in the positive direction of rotation. The allowed range for the minimum is -180..0 degrees. See Also: HumanLimit.useDefaultValues.</remarks>
        </member>
        <member name="P:UnityEngine.HumanLimit.useDefaultValues">
            <summary>Should this limit use the default values?</summary>
            <value>To be added.</value>
            <remarks>You should set useDefaultValues to false if you want to use your own limit values, otherwise the defaults will override your settings.</remarks>
        </member>
        <member name="T:UnityEngine.HumanTrait">
            <summary>Details of all the human bone and muscle types defined by Mecanim.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.HumanTrait">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.HumanTrait.BoneCount">
            <summary>The number of human bone types defined by Mecanim.</summary>
            <value>To be added.</value>
            <remarks>See Also: BoneName.</remarks>
        </member>
        <member name="M:UnityEngine.HumanTrait.BoneFromMuscle(System.Int32)">
            <summary>Return the bone to which a particular muscle is connected.</summary>
            <returns>To be added.</returns>
            <remarks>The bone and muscle indices used by this function are the same as those of the BoneName and MuscleName arrays respectively.</remarks>
            <param name="i">Muscle index.</param>
        </member>
        <member name="P:UnityEngine.HumanTrait.BoneName">
            <summary>Array of the names of all human bone types defined by Mecanim.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.HumanTrait.GetMuscleDefaultMax(System.Int32)">
            <summary>Get the default maximum value of rotation for a muscle in degrees.</summary>
            <returns>To be added.</returns>
            <remarks>The default maximum applies to all three axes of rotation for the muscle. The indexing order for the muscles is the same as that of the MuscleName array.See Also: HumanLimit.max, GetMuscleDefaultMin.</remarks>
            <param name="i">Muscle index.</param>
        </member>
        <member name="M:UnityEngine.HumanTrait.GetMuscleDefaultMin(System.Int32)">
            <summary>Get the default minimum value of rotation for a muscle in degrees.</summary>
            <returns>To be added.</returns>
            <remarks>The default minimum applies to all three axes of rotation for the muscle. The indexing order for the muscles is the same as that of the MuscleName array.See Also: HumanLimit.min, GetMuscleDefaultMax.</remarks>
            <param name="i">Muscle index.</param>
        </member>
        <member name="P:UnityEngine.HumanTrait.MuscleCount">
            <summary>The number of human muscle types defined by Mecanim.</summary>
            <value>To be added.</value>
            <remarks>See Also: MuscleName.</remarks>
        </member>
        <member name="M:UnityEngine.HumanTrait.MuscleFromBone(System.Int32,System.Int32)">
            <summary>Obtain the muscle index for a particular bone index and "degree of freedom".</summary>
            <returns>To be added.</returns>
            <remarks>The indexing order of the bones is the same as that of the BoneName array. See Also: BoneName, BoneCount, MuscleName, MuscleCount.</remarks>
            <param name="i">Bone index.</param>
            <param name="dofIndex">Number representing a "degree of freedom": 0 for X-Axis, 1 for Y-Axis, 2 for Z-Axis.</param>
        </member>
        <member name="P:UnityEngine.HumanTrait.MuscleName">
            <summary>Array of the names of all human muscle types defined by Mecanim.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.HumanTrait.RequiredBone(System.Int32)">
            <summary>Is the bone a member of the minimal set of bones that Mecanim requires for a human model?</summary>
            <returns>To be added.</returns>
            <remarks>The indexing order of the bones is the same as that used for the BoneName array.</remarks>
            <param name="i">Index of the bone to test.</param>
        </member>
        <member name="P:UnityEngine.HumanTrait.RequiredBoneCount">
            <summary>The number of bone types that are required by Mecanim for any human model.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ImageEffectOpaque">
            <summary>Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.</summary>
            <remarks>This allows for effects which extensively use the depth buffer (SSAO ect) to only affect opaque pixels. This Attribute can be used to reduce the amount of visual artifacts in a scene with post processing.</remarks>
        </member>
        <member name="C:UnityEngine.ImageEffectOpaque">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ImageEffectTransformsToLDR">
            <summary>When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.</summary>
            <remarks>Using this Attribute on an image effect will cause the destination buffer to be an LDR buffer, and switch the rest of the Image Effect pipeline into LDR mode. It is the responsibility of the Image Effect that this Attribute is associated to ensure that the output is in the LDR range.</remarks>
        </member>
        <member name="C:UnityEngine.ImageEffectTransformsToLDR">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ImagePosition">
            <summary>How image and text is placed inside GUIStyle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ImagePosition.ImageAbove">
            <summary>Image is above the text.</summary>
        </member>
        <member name="F:UnityEngine.ImagePosition.ImageLeft">
            <summary>Image is to the left of the text.</summary>
        </member>
        <member name="F:UnityEngine.ImagePosition.ImageOnly">
            <summary>Only the image is displayed.</summary>
        </member>
        <member name="F:UnityEngine.ImagePosition.TextOnly">
            <summary>Only the text is displayed.</summary>
        </member>
        <member name="T:UnityEngine.IMECompositionMode">
            <summary>Controls IME input.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.IMECompositionMode.Auto">
            <summary>Enable IME input only when a text field is selected (default).</summary>
        </member>
        <member name="F:UnityEngine.IMECompositionMode.Off">
            <summary>Disable IME input.</summary>
        </member>
        <member name="F:UnityEngine.IMECompositionMode.On">
            <summary>Enable IME input.</summary>
        </member>
        <member name="T:UnityEngine.ImplementedInActionScriptAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ImplementedInActionScriptAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Input">
            <summary>Interface into the Input system.</summary>
            <remarks>Use this class to read the axes set up in the Input Manager, and to access multi-touch/accelerometer data on mobile devices. To read an axis use Input.GetAxis with one of the following default axes: "Horizontal" and "Vertical" are mapped to joystick, A, W, S, D and the arrow keys. "Mouse X" and "Mouse Y" are mapped to the mouse delta. "Fire1", "Fire2" "Fire3" are mapped to Ctrl, Alt, Cmd keys and three mouse or joystick buttons. New input axes can be added in the Input Manager. If you are using input for any kind of movement behaviour use Input.GetAxis. It gives you smoothed and configurable input that can be mapped to keyboard, joystick or mouse. Use Input.GetButton for action like events only. Don't use it for movement, Input.GetAxis will make the script code smaller and simpler. Note also that the Input flags are not reset until "Update()", so its suggested you make all the Input Calls in the Update Loop. Mobile Devices: iOS and Android devices are capable of tracking multiple fingers touching the screen simultaneously. You can access data on the status of each finger touching screen during the last frame by accessing the Input.touches property array. As a device moves, its accelerometer hardware reports linear acceleration changes along the three primary axes in three-dimensional space. You can use this data to detect both the current orientation of the device (relative to the ground) and any immediate changes to that orientation. Acceleration along each axis is reported directly by the hardware as G-force values. A value of 1.0 represents a load of about +1g along a given axis while a value of -1.0 represents -1g. If you hold the device upright (with the home button at the bottom) in front of you, the X axis is positive along the right, the Y axis is positive directly up, and the Z axis is positive pointing toward you. You can read the Input.acceleration property to get the accelerometer reading. You can also use the Input.deviceOrientation property to get a discrete evaluation of the device's orientation in three-dimensional space. Detecting a change in orientation can be useful if you want to create game behaviors when the user rotates the device to hold it differently. Note that the accelerometer hardware can be polled more than once per frame. To access all accelerometer samples since the last frame, you can read the Input.accelerationEvents property array. This can be useful when reconstructing player motions, feeding acceleration data into a predictor, or implementing other precise motion analysis.</remarks>
        </member>
        <member name="C:UnityEngine.Input">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.acceleration">
            <summary>Last measured linear acceleration of a device in three-dimensional space. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.accelerationEventCount">
            <summary>Number of acceleration measurements which occurred during last frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.accelerationEvents">
            <summary>Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.anyKey">
            <summary>Is any key or mouse button currently held down? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.anyKeyDown">
            <summary>Returns true the first frame the user hits any key or mouse button. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>You should be polling this variable from the Update function, since the state gets reset each frame. It will not return true until the user has released all keys / buttons and pressed any key / buttons again.</remarks>
        </member>
        <member name="P:UnityEngine.Input.compass">
            <summary>Property for accessing compass (handheld devices only). (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.compensateSensors">
            <summary>This property controls if input sensors should be compensated for screen orientation.</summary>
            <value>To be added.</value>
            <remarks>Compensated sensors are accelerometer, compass, gyroscope. Note : currently it fully affects iOS platform and partially Android platform (on Android compensation can't be turned off at the moment).</remarks>
        </member>
        <member name="P:UnityEngine.Input.compositionCursorPos">
            <summary>The current text input position used by IMEs to open windows.</summary>
            <value>To be added.</value>
            <remarks>Some language IMEs such as Japanese will open windows while the user is typing text, to aid the user in picking the correct input strings. These windows are expected to pop up at the current cursor position, so the IME needs to know where input is displayed. When using Unity's built in GUI system for text input, Unity will take care of setting the cursor position for the IME. However, if you wish to implement your  own GUI for text input, you need to set this to the current text input position for IME windows to  show up correctly. See Also: Input.imeCompositionMode, Input.compositionString.</remarks>
        </member>
        <member name="P:UnityEngine.Input.compositionString">
            <summary>The current IME composition string being typed by the user.</summary>
            <value>To be added.</value>
            <remarks>In some languages such as Chinese, Japanese or Korean, text is input by typing multiple keys to generate one or multiple characters. These characters are visually composed on the screen as the user types. When using Unity's built in GUI system for text input, Unity will take care of displaying the composition strings as the users types. If you want to implement your own GUI, however, you need to take care of displaying the string at the current cursor position. The composition string is only updated when IME compositing is used. See Input.imeCompositionMode for more info. See Also: Input.imeCompositionMode, Input.compositionCursorPos.</remarks>
        </member>
        <member name="P:UnityEngine.Input.deviceOrientation">
            <summary>Device physical orientation as reported by OS. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.eatKeyPressOnTextFieldFocus">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetAccelerationEvent(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns specific acceleration measurement which occurred during last frame. (Does not allocate temporary variables).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetAxis(System.String)">
            <param name="axisName">To be added.</param>
            <summary>Returns the value of the virtual axis identified by axisName.</summary>
            <returns>To be added.</returns>
            <remarks>The value will be in the range -1...1 for keyboard and joystick input. If the axis is setup to be delta mouse movement, the mouse delta is multiplied by the axis sensitivity and the range is not -1...1. This is frame-rate independent; you do not need to be concerned about varying frame-rates when using this value.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetAxisRaw(System.String)">
            <param name="axisName">To be added.</param>
            <summary>Returns the value of the virtual axis identified by axisName with no smoothing filtering applied.</summary>
            <returns>To be added.</returns>
            <remarks>The value will be in the range -1...1 for keyboard and joystick input. Since input is not smoothed, keyboard input will always be either -1, 0 or 1. This is useful if you want to do all smoothing of keyboard input processing yourself.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetButton(System.String)">
            <param name="buttonName">To be added.</param>
            <summary>Returns true while the virtual button identified by buttonName is held down.</summary>
            <returns>To be added.</returns>
            <remarks>Think auto fire - this will return true as long as the button is held down. Use this only when implementing action like events IE: shooting a weapon. Use Input.GetAxis for any kind of movement behaviour.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetButtonDown(System.String)">
            <param name="buttonName">To be added.</param>
            <summary>Returns true during the frame the user pressed down the virtual button identified by buttonName.</summary>
            <returns>To be added.</returns>
            <remarks>You need to call this function from the Update function, since the state gets reset each frame. It will not return true until the user has released the key and pressed it again. Use this only when implementing action like events IE: shooting a weapon. Use Input.GetAxis for any kind of movement behaviour.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetButtonUp(System.String)">
            <param name="buttonName">To be added.</param>
            <summary>Returns true the first frame the user releases the virtual button identified by buttonName.</summary>
            <returns>To be added.</returns>
            <remarks>You need to call this function from the Update function, since the state gets reset each frame.  It will not return true until the user has pressed the button and released it again. Use this only when implementing action like events IE: shooting a weapon. Use Input.GetAxis for any kind of movement behaviour.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetJoystickNames">
            <summary>Returns an array of strings describing the connected joysticks.</summary>
            <returns>To be added.</returns>
            <remarks>This can be useful in user input configuration screens - this way, instead of showing labels like "Joystick 1", you can show more meaningful names like "Logitech WingMan". To read values from different joysticks, you need to assign respective axes for the number of joysticks you  want to support in the input manager.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetKey(System.String)">
            <param name="name">To be added.</param>
            <summary>Returns true while the user holds down the key identified by name. Think auto fire.Returns true while the user holds down the key identified by the key KeyCode enum parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetKey(UnityEngine.KeyCode)">
            <param name="key">To be added.</param>
            <summary>Returns true while the user holds down the key identified by name. Think auto fire.Returns true while the user holds down the key identified by the key KeyCode enum parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetKeyDown(System.String)">
            <param name="name">To be added.</param>
            <summary>Returns true during the frame the user starts pressing down the key identified by name.Returns true during the frame the user starts pressing down the key identified by the key KeyCode enum parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)">
            <param name="key">To be added.</param>
            <summary>Returns true during the frame the user starts pressing down the key identified by name.Returns true during the frame the user starts pressing down the key identified by the key KeyCode enum parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetKeyUp(System.String)">
            <param name="name">To be added.</param>
            <summary>Returns true during the frame the user releases the key identified by name.Returns true during the frame the user releases the key identified by the key KeyCode enum parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetKeyUp(UnityEngine.KeyCode)">
            <param name="key">To be added.</param>
            <summary>Returns true during the frame the user releases the key identified by name.Returns true during the frame the user releases the key identified by the key KeyCode enum parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetMouseButton(System.Int32)">
            <param name="button">To be added.</param>
            <summary>Returns whether the given mouse button is held down.</summary>
            <returns>To be added.</returns>
            <remarks>button values are 0 for left button, 1 for right button, 2 for the middle button.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetMouseButtonDown(System.Int32)">
            <param name="button">To be added.</param>
            <summary>Returns true during the frame the user pressed the given mouse button.</summary>
            <returns>To be added.</returns>
            <remarks>You need to call this function from the Update function, since the state gets reset each frame. It will not return true until the user has released the mouse button and pressed it again. button values are 0 for left button, 1 for right button, 2 for the middle button.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetMouseButtonUp(System.Int32)">
            <param name="button">To be added.</param>
            <summary>Returns true during the frame the user releases the given mouse button.</summary>
            <returns>To be added.</returns>
            <remarks>You need to call this function from the Update function, since the state gets reset each frame.  It will not return true until the user has pressed the mouse button and released it again. button values are 0 for left button, 1 for right button, 2 for the middle button.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetPosition(System.Int32)">
            <param name="deviceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetRotation(System.Int32)">
            <param name="deviceID">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.GetTouch(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns object representing status of a specific touch. (Does not allocate temporary variables).</summary>
            <returns>To be added.</returns>
            <remarks>Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Input.gyro">
            <summary>Returns default gyroscope.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.imeCompositionMode">
            <summary>Controls enabling and disabling of IME input composition.</summary>
            <value>To be added.</value>
            <remarks>Some languages use complex input methods which involve opening windows to insert characters. Typically, this is not desirable while playing a game, as games may just interpret key strokes as game input, not as text. By default, Unity will enable IME composition when in text fields, and disable it otherwise. However, when you want to implement your own input GUI, you may want to have control over this yourself, which is possible using the imeCompositionMode property. Set it to Auto for the default behavior, or On or Off to explicitly enable or disable IME composition.</remarks>
        </member>
        <member name="P:UnityEngine.Input.imeIsSelected">
            <summary>Does the user have an IME keyboard input source selected?</summary>
            <value>To be added.</value>
            <remarks>This returns true if the users keyboard is currently configured for IME input, and false otherwise. Since users of asian languages can typically turn IME conversion on or off using a keystroke, it is useful to provide some visual indication of IME being enabled. This can be done by checking Input.imeIsSelected.</remarks>
        </member>
        <member name="P:UnityEngine.Input.inputString">
            <summary>Returns the keyboard input entered this frame. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Only ASCII characters are contained in the inputString. The string can contain two special characters which should be handled: Character "\b" represents backspace. Character "\n" represents return or enter.</remarks>
        </member>
        <member name="P:UnityEngine.Input.isGyroAvailable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.location">
            <summary>Property for accessing device location (handheld devices only). (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.mousePosition">
            <summary>The current mouse position in pixel coordinates. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>The bottom-left of the screen or window is at (0, 0). The top-right of the screen or window is at (Screen.width, Screen.height).</remarks>
        </member>
        <member name="P:UnityEngine.Input.mousePresent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.multiTouchEnabled">
            <summary>Property indicating whether the system handles multiple touches.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Input.ResetInputAxes">
            <summary>Resets all input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame.</summary>
            <remarks>This can be useful when respawning the player and you don't want any input from keys that might still be held down.</remarks>
        </member>
        <member name="P:UnityEngine.Input.simulateMouseWithTouches">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.touchCount">
            <summary>Number of touches. Guaranteed not to change throughout the frame. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Input.touches">
            <summary>Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).</summary>
            <value>To be added.</value>
            <remarks>Each entry represents a status of a finger touching the screen.</remarks>
        </member>
        <member name="T:UnityEngine.InteractiveCloth">
            <summary>The InteractiveCloth component is used to simulate objects with cloth physics.</summary>
            <remarks>This is used together with the ClothRenderer component to visualize cloth objects in the scene.</remarks>
        </member>
        <member name="C:UnityEngine.InteractiveCloth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.InteractiveCloth.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="force">To be added.</param>
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Adds force force to all vertices of the cloth mesh which are with radius distance of position.</summary>
            <remarks>See Also: Cloth.externalAcceleration, Cloth.randomAcceleration.</remarks>
        </member>
        <member name="M:UnityEngine.InteractiveCloth.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.ForceMode)">
            <param name="force">To be added.</param>
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds force force to all vertices of the cloth mesh which are with radius distance of position.</summary>
            <remarks>See Also: Cloth.externalAcceleration, Cloth.randomAcceleration.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.attachmentResponse">
            <summary>How much force will be applied to attached rigidbodies?</summary>
            <value>To be added.</value>
            <remarks>The higher this value is, the greater the forces applied to attached rigidbodies are.  It is recommended to start out with small values (like 0.2) for best results. Only has an affect for rigid bodies which have been attached with the twoWayInteraction parameter set. See Also: AttachToCollider function.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.attachmentTearFactor">
            <summary>How far attached rigid bodies need to be stretched, before they will tear off.</summary>
            <value>To be added.</value>
            <remarks>Must be larger then zero. Larger values make the cloth stretch further without tearing. Only has an affect for rigid bodies which have been attached with the tearable parameter set. See Also: AttachToCollider function.</remarks>
        </member>
        <member name="M:UnityEngine.InteractiveCloth.AttachToCollider(UnityEngine.Collider)">
            <param name="collider">To be added.</param>
            <summary>Attaches a collider to the cloth object.</summary>
            <remarks>Only has an effect if some vertices of the cloth are intersecting the collider.  These vertices will then become static in their position with respect to the collider. If tearable is true, attachments can tear of, depending on the value of attachmentTearFactor. If twoWayInteraction is true, the cloth will apply forces back to the attached rigidbody, depending on the value of attachmentResponse. See Also: DetachFromCollider function.</remarks>
        </member>
        <member name="M:UnityEngine.InteractiveCloth.AttachToCollider(UnityEngine.Collider,System.Boolean)">
            <param name="collider">To be added.</param>
            <param name="tearable">To be added.</param>
            <summary>Attaches a collider to the cloth object.</summary>
            <remarks>Only has an effect if some vertices of the cloth are intersecting the collider.  These vertices will then become static in their position with respect to the collider. If tearable is true, attachments can tear of, depending on the value of attachmentTearFactor. If twoWayInteraction is true, the cloth will apply forces back to the attached rigidbody, depending on the value of attachmentResponse. See Also: DetachFromCollider function.</remarks>
        </member>
        <member name="M:UnityEngine.InteractiveCloth.AttachToCollider(UnityEngine.Collider,System.Boolean,System.Boolean)">
            <param name="collider">To be added.</param>
            <param name="tearable">To be added.</param>
            <param name="twoWayInteraction">To be added.</param>
            <summary>Attaches a collider to the cloth object.</summary>
            <remarks>Only has an effect if some vertices of the cloth are intersecting the collider.  These vertices will then become static in their position with respect to the collider. If tearable is true, attachments can tear of, depending on the value of attachmentTearFactor. If twoWayInteraction is true, the cloth will apply forces back to the attached rigidbody, depending on the value of attachmentResponse. See Also: DetachFromCollider function.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.collisionResponse">
            <summary>How much force will be applied to colliding rigidbodies?</summary>
            <value>To be added.</value>
            <remarks>If this is greater then zero, interaction of the cloth with colliding rigidbodies is enabled. The higher this value is, the greater the forces applied to rigidbodies are.  It is recommended to start out with small values (like 0.2) for best results.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.density">
            <summary>The density of the cloth.</summary>
            <value>To be added.</value>
            <remarks>This sets the mass of the cloth per area. Must be greater than zero. Changing this property causes the cloth simulation to reset.</remarks>
        </member>
        <member name="M:UnityEngine.InteractiveCloth.DetachFromCollider(UnityEngine.Collider)">
            <param name="collider">To be added.</param>
            <summary>Detaches a collider from the cloth object.</summary>
            <remarks>See Also: AttachToCollider function.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.friction">
            <summary>The friction of the cloth.</summary>
            <value>To be added.</value>
            <remarks>Must be between zero and one.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.isTeared">
            <summary>Did the cloth tear? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: tearFactor variable.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.mesh">
            <summary>The mesh used as base for the cloth object.</summary>
            <value>To be added.</value>
            <remarks>Changing this property causes the cloth simulation to reset. For best performance, pick a mesh which does not have UV or color seams (ie, duplicated vertices with the same  position but two or more texture coordinates or color values), as this requires some additional vertex mapping to be performed when rendering the results of the cloth simulation.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.pressure">
            <summary>The pressure inside the cloth.</summary>
            <value>To be added.</value>
            <remarks>Pressure simulation only gives reasonable results for closed mesh shapes.  Pressure simulation is disabled when this value is set to zero. When it is set to values greater then zero, the cloth is simulated to be a closed shape containing air. A value of 1 sets the air pressure to be the same as the atmosphere outside the cloth mesh. Values smaller then one make the cloth shape contract, values larger then one make it expand.</remarks>
        </member>
        <member name="P:UnityEngine.InteractiveCloth.tearFactor">
            <summary>How far cloth vertices need to be stretched, before the cloth will tear.</summary>
            <value>To be added.</value>
            <remarks>If this is set to zero, tearing is disabled. For values greater than zero,  larger values make the cloth stretch further without tearing. This property can be changed dynamically, but turning it on or off completely  (by setting it to zero or non-zero), will cause the cloth simulation to reset. See Also: isTeared variable.</remarks>
        </member>
        <member name="T:UnityEngine.iOSActivityIndicatorStyle">
            <summary>ActivityIndicator Style (iOS Specific).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iOSActivityIndicatorStyle.DontShow">
            <summary>Do not show ActivityIndicator.</summary>
        </member>
        <member name="F:UnityEngine.iOSActivityIndicatorStyle.Gray">
            <summary>The standard gray style of indicator (UIActivityIndicatorViewStyleGray).</summary>
        </member>
        <member name="F:UnityEngine.iOSActivityIndicatorStyle.White">
            <summary>The standard white style of indicator (UIActivityIndicatorViewStyleWhite).</summary>
        </member>
        <member name="F:UnityEngine.iOSActivityIndicatorStyle.WhiteLarge">
            <summary>The large white style of indicator (UIActivityIndicatorViewStyleWhiteLarge).</summary>
        </member>
        <member name="T:UnityEngine.iPhone">
            <summary>Interface into iPhone specific functionality.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.iPhone">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone.advertisingIdentifier">
            <summary>Advertising ID.</summary>
            <value>To be added.</value>
            <remarks>ASIdentifierManager advertisingIdentifier.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone.advertisingTrackingEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone.generation">
            <summary>The generation of the device. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See iPhoneGeneration enumeration for possible return values.</remarks>
        </member>
        <member name="M:UnityEngine.iPhone.ResetNoBackupFlag(System.String)">
            <param name="path">To be added.</param>
            <summary>Reset "no backup" file flag: file will be synced with iCloud/iTunes backup and can be deleted by OS in low storage situations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhone.SetNoBackupFlag(System.String)">
            <param name="path">To be added.</param>
            <summary>Set file flag to be excluded from iCloud/iTunes backup.</summary>
            <remarks>As a side-effect, if it was located in Caches folder, it won't be deleted by OS.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone.vendorIdentifier">
            <summary>Vendor ID.</summary>
            <value>To be added.</value>
            <remarks>UIDevice identifierForVendor.</remarks>
        </member>
        <member name="T:UnityEngine.iPhone+NSError">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone+NSError.code">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhone+NSError.CreateNSError(System.IntPtr)">
            <param name="nativeError">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone+NSError.description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhone+NSError.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone+NSError.reason">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhone+NSNotification">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhone+NSNotification.CreateNSNotification(System.IntPtr)">
            <param name="nativeNotification">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhone+NSNotification.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhone+NSNotification.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhoneAccelerationEvent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneAccelerationEvent.acceleration">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneAccelerationEvent.deltaTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneAccelerationEvent.timeDelta">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhoneGeneration">
            <summary>iPhone device generation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPad1Gen">
            <summary>iPad, first generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPad2Gen">
            <summary>iPad, second generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPad3Gen">
            <summary>iPad, third generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPad4Gen">
            <summary>iPad, fourth generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPadMini1Gen">
            <summary>iPadMini, first generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPadUnknown">
            <summary>Yet unknown iPad.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone">
            <summary>First generation device.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone3G">
            <summary>Second generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone3GS">
            <summary>Third generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone4">
            <summary>Fourth generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone4S">
            <summary>Fifth generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone5">
            <summary>iPhone5.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone5C">
            <summary>iPhone 5C.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhone5S">
            <summary>iPhone 5S.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPhoneUnknown">
            <summary>Yet unknown iPhone.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPodTouch1Gen">
            <summary>iPod Touch, first generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPodTouch2Gen">
            <summary>iPod Touch, second generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPodTouch3Gen">
            <summary>iPod Touch, third generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPodTouch4Gen">
            <summary>iPod Touch, fourth generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPodTouch5Gen">
            <summary>iPod Touch, fifth generation.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.iPodTouchUnknown">
            <summary>Yet unknown iPodTouch.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneGeneration.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneInput">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.iPhoneInput">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.acceleration">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.accelerationEventCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.accelerationEvents">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneInput.GetAccelerationEvent(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneInput.GetTouch(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.lastLocation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.multiTouchEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.orientation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.touchCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneInput.touches">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhoneKeyboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.iPhoneKeyboard(System.String,UnityEngine.iPhoneKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <param name="multiline">To be added.</param>
            <param name="secure">To be added.</param>
            <param name="alert">To be added.</param>
            <param name="textPlaceholder">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneKeyboard.active">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneKeyboard.area">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneKeyboard.done">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneKeyboard.hideInput">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String)">
            <param name="text">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String,UnityEngine.iPhoneKeyboardType)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String,UnityEngine.iPhoneKeyboardType,System.Boolean)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String,UnityEngine.iPhoneKeyboardType,System.Boolean,System.Boolean)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <param name="multiline">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String,UnityEngine.iPhoneKeyboardType,System.Boolean,System.Boolean,System.Boolean)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <param name="multiline">To be added.</param>
            <param name="secure">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String,UnityEngine.iPhoneKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <param name="multiline">To be added.</param>
            <param name="secure">To be added.</param>
            <param name="alert">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneKeyboard.Open(System.String,UnityEngine.iPhoneKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <param name="multiline">To be added.</param>
            <param name="secure">To be added.</param>
            <param name="alert">To be added.</param>
            <param name="textPlaceholder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneKeyboard.text">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneKeyboard.visible">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhoneKeyboardType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.ASCIICapable">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.EmailAddress">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.NamePhonePad">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.NumberPad">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.NumbersAndPunctuation">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.PhonePad">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneKeyboardType.URL">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneMovieControlMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneMovieControlMode.CancelOnTouch">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieControlMode.Full">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieControlMode.Hidden">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieControlMode.Minimal">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieControlMode.VolumeOnly">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneMovieScalingMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneMovieScalingMode.AspectFill">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieScalingMode.AspectFit">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieScalingMode.Fill">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneMovieScalingMode.None">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneNetworkReachability">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneNetworkReachability.NotReachable">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneNetworkReachability.ReachableViaCarrierDataNetwork">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneNetworkReachability.ReachableViaWiFiNetwork">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneOrientation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.FaceDown">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.FaceUp">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.LandscapeLeft">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.LandscapeRight">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.Portrait">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.PortraitUpsideDown">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneOrientation.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneScreenOrientation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneScreenOrientation.Landscape">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneScreenOrientation.LandscapeLeft">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneScreenOrientation.LandscapeRight">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneScreenOrientation.Portrait">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneScreenOrientation.PortraitUpsideDown">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneScreenOrientation.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.iPhoneSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.generation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.internetReachability">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.locationServiceEnabledByUser">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.locationServiceStatus">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.model">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.screenCanDarken">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.screenOrientation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneSettings.StartLocationServiceUpdates">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneSettings.StartLocationServiceUpdates(System.Single)">
            <param name="desiredAccuracyInMeters">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneSettings.StartLocationServiceUpdates(System.Single,System.Single)">
            <param name="desiredAccuracyInMeters">To be added.</param>
            <param name="updateDistanceInMeters">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneSettings.StopLocationServiceUpdates">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.systemName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.systemVersion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.uniqueIdentifier">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneSettings.verticalOrientation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhoneTouch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.deltaPosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.deltaTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.fingerId">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.phase">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.position">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.positionDelta">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.tapCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneTouch.timeDelta">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.iPhoneTouchPhase">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.iPhoneTouchPhase.Began">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneTouchPhase.Canceled">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneTouchPhase.Ended">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneTouchPhase.Moved">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.iPhoneTouchPhase.Stationary">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.iPhoneUtils">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.iPhoneUtils">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneUtils.isApplicationGenuine">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.iPhoneUtils.isApplicationGenuineAvailable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovie(System.String,UnityEngine.Color)">
            <param name="path">To be added.</param>
            <param name="bgColor">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovie(System.String,UnityEngine.Color,UnityEngine.iPhoneMovieControlMode)">
            <param name="path">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="controlMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovie(System.String,UnityEngine.Color,System.Int32,System.Int32)">
            <param name="path">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="controlMode">To be added.</param>
            <param name="scalingMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovie(System.String,UnityEngine.Color,UnityEngine.iPhoneMovieControlMode,UnityEngine.iPhoneMovieScalingMode)">
            <param name="path">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="controlMode">To be added.</param>
            <param name="scalingMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovieURL(System.String,UnityEngine.Color)">
            <param name="url">To be added.</param>
            <param name="bgColor">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovieURL(System.String,UnityEngine.Color,UnityEngine.iPhoneMovieControlMode)">
            <param name="url">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="controlMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovieURL(System.String,UnityEngine.Color,System.Int32,System.Int32)">
            <param name="url">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="controlMode">To be added.</param>
            <param name="scalingMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.PlayMovieURL(System.String,UnityEngine.Color,UnityEngine.iPhoneMovieControlMode,UnityEngine.iPhoneMovieScalingMode)">
            <param name="url">To be added.</param>
            <param name="bgColor">To be added.</param>
            <param name="controlMode">To be added.</param>
            <param name="scalingMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.iPhoneUtils.Vibrate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Joint">
            <summary>Joint is the base class for all joints.</summary>
            <remarks>See Also: CharacterJoint, HingeJoint, SpringJoint, FixedJoint, ConfigurableJoint.</remarks>
        </member>
        <member name="C:UnityEngine.Joint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.anchor">
            <summary>The Position of the anchor around which the joints motion is constrained.</summary>
            <value>To be added.</value>
            <remarks>The Position is defined in local space.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.autoConfigureConnectedAnchor">
            <summary>Should the connectedAnchor be calculated automatically?</summary>
            <value>To be added.</value>
            <remarks>If this is enabled, then the connectedAnchor property will be calculated automatically to match the global position of the anchor property. This is the default behavior. If this is disabled, you can configure the position of the connected anchor using the connectedAnchor property.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.axis">
            <summary>The Direction of the axis around which the body is constrained.</summary>
            <value>To be added.</value>
            <remarks>The Axis is defined in local space.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.breakForce">
            <summary>The force that needs to be applied for this joint to break.</summary>
            <value>To be added.</value>
            <remarks>The force might come from collisions with other objects, forces applied with rigidbody.AddTorque or from other joints. See Also: Joint.OnJointBreak.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.breakTorque">
            <summary>The torque that needs to be applied for this joint to break.</summary>
            <value>To be added.</value>
            <remarks>The torque might come from collisions with other objects, forces applied with rigidbody.AddTorque or from other joints. See Also: Joint.OnJointBreak.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.connectedAnchor">
            <summary>Position of the anchor relative to the connected Rigidbody.</summary>
            <value>To be added.</value>
            <remarks>If /Joint.autoConfigureConnectedAnchor/ is not enabled, then this will be used to set the position of the anchor on the connected rigidbody. The position is given in local coordinates of the connected rigidbody, or in world coordinates if there is no connected rigidbody.</remarks>
        </member>
        <member name="P:UnityEngine.Joint.connectedBody">
            <summary>A reference to another rigidbody this joint connects to.</summary>
            <value>To be added.</value>
            <remarks>If not set, the joint connects the object to the world.</remarks>
        </member>
        <member name="T:UnityEngine.Joint2D">
            <summary>Parent class for joints to connect Rigidbody2D objects.</summary>
            <remarks>See Also: DistanceJoint2D class, HingeJoint2D class, SliderJoint2D class, SpringJoint2D class.</remarks>
        </member>
        <member name="C:UnityEngine.Joint2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Joint2D.collideConnected">
            <summary>Can the joint collide with the other Rigidbody2D object to which it is attached?</summary>
            <value>To be added.</value>
            <remarks>See Also: Rigidbody2D class, connectedBody.</remarks>
        </member>
        <member name="P:UnityEngine.Joint2D.connectedBody">
            <summary>The Rigidbody2D object to which the other end of the joint is attached (ie, the object without the joint component).</summary>
            <value>To be added.</value>
            <remarks>If this property is set to null then the joint attaches to a fixed point in space rather than another Rigidbody2D. See Also: Rigidbody2D class, collideConnected.</remarks>
        </member>
        <member name="T:UnityEngine.JointAngleLimits2D">
            <summary>Angular limits on the rotation of a Rigidbody2D object around a HingeJoint2D.</summary>
            <remarks>See Also: Rigidbody2D class, HingeJoint2D class.</remarks>
        </member>
        <member name="P:UnityEngine.JointAngleLimits2D.max">
            <summary>Upper angular limit of rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointAngleLimits2D.min">
            <summary>Lower angular limit of rotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.JointDrive">
            <summary>How the joint's movement will behave along its local X axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointDrive.maximumForce">
            <summary>Amount of force applied to push the object toward the defined direction.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointDrive.mode">
            <summary>Whether the drive should attempt to reach position, velocity, both or nothing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointDrive.positionDamper">
            <summary>Resistance strength against the Position Spring. Only used if mode includes Position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointDrive.positionSpring">
            <summary>Strength of a rubber-band pull toward the defined direction. Only used if mode includes Position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.JointDriveMode">
            <summary>The ConfigurableJoint attempts to attain position / velocity targets based on this flag.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.JointDriveMode.None">
            <summary>Don't apply any forces to reach the target.</summary>
        </member>
        <member name="F:UnityEngine.JointDriveMode.Position">
            <summary>Try to reach the specified target position.</summary>
        </member>
        <member name="F:UnityEngine.JointDriveMode.PositionAndVelocity">
            <summary>Try to reach the specified target position and velocity.</summary>
        </member>
        <member name="F:UnityEngine.JointDriveMode.Velocity">
            <summary>Try to reach the specified target velocity.</summary>
        </member>
        <member name="T:UnityEngine.JointLimits">
            <summary>JointLimits is used by the HingeJoint to limit the joints angle.</summary>
            <remarks>See Also: HingeJoint.</remarks>
        </member>
        <member name="P:UnityEngine.JointLimits.max">
            <summary>The upper limit of the joint.</summary>
            <value>To be added.</value>
            <remarks>When the joint angle or position is above it, the joint will excert forces to constrain it.</remarks>
        </member>
        <member name="P:UnityEngine.JointLimits.maxBounce">
            <summary>The bounciness of the joint when hitting the upper limit of the joint.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointLimits.min">
            <summary>The lower limit of the joint.</summary>
            <value>To be added.</value>
            <remarks>When the joint angle or position is below it, the joint will excert forces to constrain it.</remarks>
        </member>
        <member name="P:UnityEngine.JointLimits.minBounce">
            <summary>The bounciness of the joint when hitting the lower limit of the joint.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.JointMotor">
            <summary>The JointMotor is used to motorize a joint.</summary>
            <remarks>For example the HingeJoint can be told to rotate at a given speed and force. The joint will then attempt to reach the velocity with the given maximum force. See Also: HingeJoint.</remarks>
        </member>
        <member name="P:UnityEngine.JointMotor.force">
            <summary>The motor will apply a force.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointMotor.freeSpin">
            <summary>If freeSpin is enabled the motor will only accelerate but never slow down.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.JointMotor.targetVelocity">
            <summary>The motor will apply a force up to force to achieve targetVelocity.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.JointMotor2D">
            <summary>Parameters for the optional motor force applied to a Joint2D.</summary>
            <remarks>See Also: HingeJoint2D class, SliderJoint class.</remarks>
        </member>
        <member name="P:UnityEngine.JointMotor2D.maxMotorTorque">
            <summary>The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.</summary>
            <value>To be added.</value>
            <remarks>See Also: Rigidbody2D class, motorSpeed.</remarks>
        </member>
        <member name="P:UnityEngine.JointMotor2D.motorSpeed">
            <summary>The desired speed for the Rigidbody2D to reach as it moves with the joint.</summary>
            <value>To be added.</value>
            <remarks>See Also: Rigidbody2D class, maxMotorTorque.</remarks>
        </member>
        <member name="T:UnityEngine.JointProjectionMode">
            <summary>Determines how to snap physics joints back to its constrained position when it drifts off too much.</summary>
            <remarks>See Also: ConfigurableJoint.</remarks>
        </member>
        <member name="F:UnityEngine.JointProjectionMode.None">
            <summary>Don't snap at all.</summary>
        </member>
        <member name="F:UnityEngine.JointProjectionMode.PositionAndRotation">
            <summary>Snap both position and rotation.</summary>
        </member>
        <member name="F:UnityEngine.JointProjectionMode.PositionOnly">
            <summary>Snap Position only.</summary>
        </member>
        <member name="T:UnityEngine.JointSpring">
            <summary>JointSpring is used add a spring force to HingeJoint and PhysicMaterial.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.JointSpring.damper">
            <summary>The damper force uses to dampen the spring.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.JointSpring.spring">
            <summary>The spring forces used to reach the target position.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.JointSpring.targetPosition">
            <summary>The target position the joint attempts to reach.</summary>
            <remarks>In the case of a HingeJoint the target position is the target angle in degrees.</remarks>
        </member>
        <member name="T:UnityEngine.JointTranslationLimits2D">
            <summary>Motion limits of a Rigidbody2D object along a SliderJoint2D.</summary>
            <remarks>See Also: Rigidbody2D class, SliderJoint2D class.</remarks>
        </member>
        <member name="P:UnityEngine.JointTranslationLimits2D.max">
            <summary>Maximum distance the Rigidbody2D object can move from the Slider Joint's anchor.</summary>
            <value>To be added.</value>
            <remarks>See Also: Rigidbody2D class, SliderJoint.connectedAnchor.</remarks>
        </member>
        <member name="P:UnityEngine.JointTranslationLimits2D.min">
            <summary>Minimum distance the Rigidbody2D object can move from the Slider Joint's anchor.</summary>
            <value>To be added.</value>
            <remarks>See Also: Rigidbody2D class, SliderJoint.connectedAnchor.</remarks>
        </member>
        <member name="T:UnityEngine.jvalue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.b">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.c">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.d">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.f">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.i">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.j">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.l">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.s">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.jvalue.z">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.KeyCode">
            <summary>Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.KeyCode.A">
            <summary>'a' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha0">
            <summary>The '0' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha1">
            <summary>The '1' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha2">
            <summary>The '2' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha3">
            <summary>The '3' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha4">
            <summary>The '4' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha5">
            <summary>The '5' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha6">
            <summary>The '6' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha7">
            <summary>The '7' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha8">
            <summary>The '8' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Alpha9">
            <summary>The '9' key on the top of the alphanumeric keyboard.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.AltGr">
            <summary>Alt Gr key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Ampersand">
            <summary>Ampersand key '&amp;amp;'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Asterisk">
            <summary>Asterisk key '*'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.At">
            <summary>At key '@'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.B">
            <summary>'b' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.BackQuote">
            <summary>Back quote key '`'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Backslash">
            <summary>Backslash key '\'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Backspace">
            <summary>The backspace key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Break">
            <summary>Break key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.C">
            <summary>'c' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.CapsLock">
            <summary>Capslock key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Caret">
            <summary>Caret key '^'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Clear">
            <summary>The Clear key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Colon">
            <summary>Colon ':' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Comma">
            <summary>Comma ',' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.D">
            <summary>'d' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Delete">
            <summary>The forward delete key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Dollar">
            <summary>Dollar sign key '$'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.DoubleQuote">
            <summary>Double quote key '"'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.DownArrow">
            <summary>Down arrow key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.E">
            <summary>'e' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.End">
            <summary>End key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Equals">
            <summary>Equals '=' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Escape">
            <summary>Escape key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Exclaim">
            <summary>Exclamation mark key '!'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F">
            <summary>'f' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F1">
            <summary>F1 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F10">
            <summary>F10 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F11">
            <summary>F11 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F12">
            <summary>F12 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F13">
            <summary>F13 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F14">
            <summary>F14 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F15">
            <summary>F15 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F2">
            <summary>F2 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F3">
            <summary>F3 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F4">
            <summary>F4 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F5">
            <summary>F5 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F6">
            <summary>F6 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F7">
            <summary>F7 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F8">
            <summary>F8 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.F9">
            <summary>F9 function key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.G">
            <summary>'g' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Greater">
            <summary>Greater than '&amp;gt;' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.H">
            <summary>'h' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Hash">
            <summary>Hash key '#'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Help">
            <summary>Help key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Home">
            <summary>Home key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.I">
            <summary>'i' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Insert">
            <summary>Insert key key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.J">
            <summary>'j' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button0">
            <summary>Button 0 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button1">
            <summary>Button 1 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button10">
            <summary>Button 10 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button11">
            <summary>Button 11 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button12">
            <summary>Button 12 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button13">
            <summary>Button 13 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button14">
            <summary>Button 14 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button15">
            <summary>Button 15 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button16">
            <summary>Button 16 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button17">
            <summary>Button 17 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button18">
            <summary>Button 18 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button19">
            <summary>Button 19 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button2">
            <summary>Button 2 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button3">
            <summary>Button 3 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button4">
            <summary>Button 4 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button5">
            <summary>Button 5 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button6">
            <summary>Button 6 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button7">
            <summary>Button 7 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button8">
            <summary>Button 8 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick1Button9">
            <summary>Button 9 on first joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button0">
            <summary>Button 0 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button1">
            <summary>Button 1 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button10">
            <summary>Button 10 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button11">
            <summary>Button 11 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button12">
            <summary>Button 12 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button13">
            <summary>Button 13 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button14">
            <summary>Button 14 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button15">
            <summary>Button 15 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button16">
            <summary>Button 16 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button17">
            <summary>Button 17 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button18">
            <summary>Button 18 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button19">
            <summary>Button 19 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button2">
            <summary>Button 2 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button3">
            <summary>Button 3 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button4">
            <summary>Button 4 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button5">
            <summary>Button 5 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button6">
            <summary>Button 6 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button7">
            <summary>Button 7 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button8">
            <summary>Button 8 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick2Button9">
            <summary>Button 9 on second joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button0">
            <summary>Button 0 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button1">
            <summary>Button 1 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button10">
            <summary>Button 10 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button11">
            <summary>Button 11 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button12">
            <summary>Button 12 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button13">
            <summary>Button 13 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button14">
            <summary>Button 14 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button15">
            <summary>Button 15 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button16">
            <summary>Button 16 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button17">
            <summary>Button 17 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button18">
            <summary>Button 18 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button19">
            <summary>Button 19 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button2">
            <summary>Button 2 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button3">
            <summary>Button 3 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button4">
            <summary>Button 4 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button5">
            <summary>Button 5 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button6">
            <summary>Button 6 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button7">
            <summary>Button 7 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button8">
            <summary>Button 8 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick3Button9">
            <summary>Button 9 on third joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button0">
            <summary>Button 0 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button1">
            <summary>Button 1 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button10">
            <summary>Button 10 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button11">
            <summary>Button 11 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button12">
            <summary>Button 12 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button13">
            <summary>Button 13 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button14">
            <summary>Button 14 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button15">
            <summary>Button 15 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button16">
            <summary>Button 16 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button17">
            <summary>Button 17 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button18">
            <summary>Button 18 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button19">
            <summary>Button 19 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button2">
            <summary>Button 2 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button3">
            <summary>Button 3 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button4">
            <summary>Button 4 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button5">
            <summary>Button 5 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button6">
            <summary>Button 6 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button7">
            <summary>Button 7 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button8">
            <summary>Button 8 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Joystick4Button9">
            <summary>Button 9 on forth joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton0">
            <summary>Button 0 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton1">
            <summary>Button 1 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton10">
            <summary>Button 10 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton11">
            <summary>Button 11 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton12">
            <summary>Button 12 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton13">
            <summary>Button 13 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton14">
            <summary>Button 14 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton15">
            <summary>Button 15 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton16">
            <summary>Button 16 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton17">
            <summary>Button 17 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton18">
            <summary>Button 18 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton19">
            <summary>Button 19 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton2">
            <summary>Button 2 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton3">
            <summary>Button 3 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton4">
            <summary>Button 4 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton5">
            <summary>Button 5 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton6">
            <summary>Button 6 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton7">
            <summary>Button 7 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton8">
            <summary>Button 8 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.JoystickButton9">
            <summary>Button 9 on any joystick.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.K">
            <summary>'k' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad0">
            <summary>Numeric keypad 0.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad1">
            <summary>Numeric keypad 1.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad2">
            <summary>Numeric keypad 2.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad3">
            <summary>Numeric keypad 3.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad4">
            <summary>Numeric keypad 4.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad5">
            <summary>Numeric keypad 5.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad6">
            <summary>Numeric keypad 6.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad7">
            <summary>Numeric keypad 7.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad8">
            <summary>Numeric keypad 8.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Keypad9">
            <summary>Numeric keypad 9.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadDivide">
            <summary>Numeric keypad '/'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadEnter">
            <summary>Numeric keypad enter.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadEquals">
            <summary>Numeric keypad '='.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadMinus">
            <summary>Numeric keypad '-'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadMultiply">
            <summary>Numeric keypad '*'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadPeriod">
            <summary>Numeric keypad '.'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.KeypadPlus">
            <summary>Numeric keypad '+'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.L">
            <summary>'l' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftAlt">
            <summary>Left Alt key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftApple">
            <summary>Left Command key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftArrow">
            <summary>Left arrow key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftBracket">
            <summary>Left square bracket key '['.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftCommand">
            <summary>Left Command key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftControl">
            <summary>Left Control key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftParen">
            <summary>Left Parenthesis key '('.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftShift">
            <summary>Left shift key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.LeftWindows">
            <summary>Left Windows key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Less">
            <summary>Less than '&amp;lt;' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.M">
            <summary>'m' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Menu">
            <summary>Menu key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Minus">
            <summary>Minus '-' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse0">
            <summary>First (primary) mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse1">
            <summary>Second (secondary) mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse2">
            <summary>Third mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse3">
            <summary>Fourth mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse4">
            <summary>Fifth mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse5">
            <summary>Sixth mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Mouse6">
            <summary>Seventh mouse button.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.N">
            <summary>'n' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.None">
            <summary>Not assigned (never returned as the result of a keystroke).</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Numlock">
            <summary>Numlock key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.O">
            <summary>'o' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.P">
            <summary>'p' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.PageDown">
            <summary>Page down.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.PageUp">
            <summary>Page up.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Pause">
            <summary>Pause on PC machines.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Period">
            <summary>Period '.' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Plus">
            <summary>Plus key '+'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Print">
            <summary>Print key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Q">
            <summary>'q' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Question">
            <summary>Question mark '?' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Quote">
            <summary>Quote key '.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.R">
            <summary>'r' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Return">
            <summary>Return key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightAlt">
            <summary>Right Alt key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightApple">
            <summary>Right Command key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightArrow">
            <summary>Right arrow key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightBracket">
            <summary>Right square bracket key ']'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightCommand">
            <summary>Right Command key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightControl">
            <summary>Right Control key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightParen">
            <summary>Right Parenthesis key ')'.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightShift">
            <summary>Right shift key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.RightWindows">
            <summary>Right Windows key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.S">
            <summary>'s' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.ScrollLock">
            <summary>Scroll lock key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Semicolon">
            <summary>Semicolon ';' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Slash">
            <summary>Slash '/' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Space">
            <summary>Space key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.SysReq">
            <summary>Sys Req key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.T">
            <summary>'t' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Tab">
            <summary>The tab key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.U">
            <summary>'u' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Underscore">
            <summary>Underscore '_' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.UpArrow">
            <summary>Up arrow key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.V">
            <summary>'v' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.W">
            <summary>'w' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.X">
            <summary>'x' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Y">
            <summary>'y' key.</summary>
        </member>
        <member name="F:UnityEngine.KeyCode.Z">
            <summary>'z' key.</summary>
        </member>
        <member name="T:UnityEngine.Keyframe">
            <summary>A single keyframe that can be injected into an animation curve.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Keyframe(System.Single,System.Single)">
            <param name="time">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Keyframe(System.Single,System.Single,System.Single,System.Single)">
            <param name="time">To be added.</param>
            <param name="value">To be added.</param>
            <param name="inTangent">To be added.</param>
            <param name="outTangent">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Keyframe.inTangent">
            <summary>Describes the tangent when approaching this point from the previous point in the curve.</summary>
            <value>To be added.</value>
            <remarks>See Also: outTangent.</remarks>
        </member>
        <member name="P:UnityEngine.Keyframe.outTangent">
            <summary>Describes the tangent when leaving this point towards the next point in the curve.</summary>
            <value>To be added.</value>
            <remarks>See Also: inTangent.</remarks>
        </member>
        <member name="P:UnityEngine.Keyframe.tangentMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Keyframe.time">
            <summary>The time of the keyframe.</summary>
            <value>To be added.</value>
            <remarks>In a 2D graph you could think of this as the x-value. See Also: value.</remarks>
        </member>
        <member name="P:UnityEngine.Keyframe.value">
            <summary>The value of the curve at keyframe.</summary>
            <value>To be added.</value>
            <remarks>In a 2D graph you could think of this as the y-value. See Also: time.</remarks>
        </member>
        <member name="T:UnityEngine.LayerMask">
            <summary>LayerMask allow you to display the LayerMask popup menu in the inspector.</summary>
            <remarks>Similar to those in the camera.cullingMask. Layer masks can be used selectively filter GameObjects for example when casting rays.</remarks>
        </member>
        <member name="M:UnityEngine.LayerMask.LayerToName(System.Int32)">
            <param name="layer">To be added.</param>
            <summary>Given a layer number, returns the name of the layer as defined in either a Builtin or a User Layer in the Tag Manager.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LayerMask.NameToLayer(System.String)">
            <param name="layerName">To be added.</param>
            <summary>Given a layer name, returns the layer index as defined by either a Builtin or a User Layer in the Tag Manager.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LayerMask.op_Implicit(System.Int32)~UnityEngine.LayerMask">
            <param name="intVal">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LayerMask.op_Implicit(UnityEngine.LayerMask)~System.Int32">
            <param name="mask">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LayerMask.value">
            <summary>Converts a layer mask value to an integer value.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LensFlare">
            <summary>Script interface for a Lens flare component.</summary>
            <remarks>This allows you to change the brightness and color of lens flares at runtime.</remarks>
        </member>
        <member name="C:UnityEngine.LensFlare">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LensFlare.brightness">
            <summary>The strength of the flare.</summary>
            <value>To be added.</value>
            <remarks>This controls the size and brightness of the flare elements. See Also: Lens flare component, flare assets.</remarks>
        </member>
        <member name="P:UnityEngine.LensFlare.color">
            <summary>The color of the flare.</summary>
            <value>To be added.</value>
            <remarks>This controls the color of some flare elements (the ones that have use light color enabled). See Also: Lens flare component, flare assets.</remarks>
        </member>
        <member name="P:UnityEngine.LensFlare.fadeSpeed">
            <summary>The fade speed of the flare.</summary>
            <value>To be added.</value>
            <remarks>See Also: Lens flare component, flare assets.</remarks>
        </member>
        <member name="P:UnityEngine.LensFlare.flare">
            <summary>The flare asset to use.</summary>
            <value>To be added.</value>
            <remarks>See Also: Lens flare component, flare assets.</remarks>
        </member>
        <member name="T:UnityEngine.Light">
            <summary>Script interface for light components.</summary>
            <remarks>Use this to control all aspects of Unity's lights. The properties are an exact match for the values shown in the Inspector. Usually lights are just created in the editor but sometimes you want to create a light from a script:</remarks>
        </member>
        <member name="C:UnityEngine.Light">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Light.alreadyLightmapped">
            <summary>Has the light already been lightmapped.</summary>
            <value>To be added.</value>
            <remarks>When manually assembling a lightmapped scene set this property appropriately, so that the light doesn't affect lightmapped objects twice, but at the same time affects dynamic objects. See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.areaSize">
            <summary>The size of the area light. Editor only.</summary>
            <value>To be added.</value>
            <remarks>See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.attenuate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Light.color">
            <summary>The color of the light.</summary>
            <value>To be added.</value>
            <remarks>To modify the light intensity you change light's color luminance. Lights always add illumination, so a light with a black color is the same as no light at all. See Also: Light component .Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Light.cookie">
            <summary>The cookie texture projected by the light.</summary>
            <value>To be added.</value>
            <remarks>If the cookie is a cube map, the light will become a Point light. Note that cookies are only displayed for pixel lights. See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.cookieSize">
            <summary>The size of a directional light's cookie.</summary>
            <value>To be added.</value>
            <remarks>See Also: cookie.</remarks>
        </member>
        <member name="P:UnityEngine.Light.cullingMask">
            <summary>This is used to light certain objects in the scene selectively.</summary>
            <value>To be added.</value>
            <remarks>A GameObject will only be illuminated by a light if that light's cullingMask includes the layer chosen for the GameObject (ie, the mask bit for the layer must be set to 1 for the object to receive any light). See Layers for more information about layer masking. See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.flare">
            <summary>The flare asset to use for this light.</summary>
            <value>To be added.</value>
            <remarks>See Also: LensFlare.flare, Light component and flare asset.</remarks>
        </member>
        <member name="M:UnityEngine.Light.GetLights(UnityEngine.LightType,System.Int32)">
            <param name="type">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Light.intensity">
            <summary>The Intensity of a light is multiplied with the Light color.</summary>
            <value>To be added.</value>
            <remarks>The value can be between 0 and 8. This allows you to create over bright lights.</remarks>
        </member>
        <member name="P:UnityEngine.Light.pixelLightCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Light.range">
            <summary>The range of the light.</summary>
            <value>To be added.</value>
            <remarks>See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.renderMode">
            <summary>How to render the light.</summary>
            <value>To be added.</value>
            <remarks>This can be LightRenderMode.Auto, LightRenderMode.ForceVertex or LightRenderMode.ForcePixel. Pixel lights render slower but look better, especially on not very highly tesselated geometry. Some effects (e.g. bumpmapping) are only displayed for pixel lights. See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadowBias">
            <summary>Shadow mapping bias.</summary>
            <value>To be added.</value>
            <remarks>See Also: shadows property.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadowConstantBias">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadowObjectSizeBias">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadows">
            <summary>How this light casts shadows?</summary>
            <value>To be added.</value>
            <remarks>See Also: LightShadows, shadowStrength property, Renderer.castShadows, Renderer.receiveShadows.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadowSoftness">
            <summary>Softness of directional light's soft shadows.</summary>
            <value>To be added.</value>
            <remarks>See Also: shadows, shadowSoftnessFade properties.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadowSoftnessFade">
            <summary>Fadeout speed of directional light's soft shadows.</summary>
            <value>To be added.</value>
            <remarks>See Also: shadows, shadowSoftness properties.</remarks>
        </member>
        <member name="P:UnityEngine.Light.shadowStrength">
            <summary>Strength of light's shadows.</summary>
            <value>To be added.</value>
            <remarks>See Also: shadows property, Renderer.castShadows, Renderer.receiveShadows.</remarks>
        </member>
        <member name="P:UnityEngine.Light.spotAngle">
            <summary>The angle of the light's spotlight cone in degrees.</summary>
            <value>To be added.</value>
            <remarks>This is used primarily for Spot lights and has no effect for Point lights See Also: Light component.</remarks>
        </member>
        <member name="P:UnityEngine.Light.type">
            <summary>The type of the light.</summary>
            <value>To be added.</value>
            <remarks>Can be LightType.Spot, LightType.Directional, LightType.Point.See Also: Light component.</remarks>
        </member>
        <member name="T:UnityEngine.LightmapData">
            <summary>Data of a lightmap.</summary>
            <remarks>A scene can have several lightmaps stored in it, and Renderer components can use those lightmaps. This makes it possible to use the same material on multiple objects, while each object can refer to a different lightmap or different portion of the same lightmap. See Also: LightmapSettings class, Renderer.lightmapIndex property.</remarks>
        </member>
        <member name="C:UnityEngine.LightmapData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapData.lightmap">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapData.lightmapFar">
            <summary>Lightmap storing the full incoming light.</summary>
            <value>To be added.</value>
            <remarks>See Also: LightmapSettings class, Renderer.lightmapIndex property.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapData.lightmapNear">
            <summary>Lightmap storing only the indirect incoming light.</summary>
            <value>To be added.</value>
            <remarks>See Also: LightmapSettings class, Renderer.lightmapIndex property.</remarks>
        </member>
        <member name="T:UnityEngine.LightmapSettings">
            <summary>Stores lightmaps of the scene.</summary>
            <remarks>A scene can have several lightmaps stored in it, and Renderer components can use those lightmaps. This makes it possible to use the same material on multiple objects, while each object can refer to a different lightmap or different portion of the same lightmap. See Also: LightmapData class, Renderer.lightmapIndex property.</remarks>
        </member>
        <member name="C:UnityEngine.LightmapSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapSettings.bakedColorSpace">
            <summary>Color space of the lightmap.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapSettings.lightmaps">
            <summary>Lightmap array.</summary>
            <value>To be added.</value>
            <remarks>See Also: LightmapData class, Renderer.lightmapIndex property.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapSettings.lightmapsMode">
            <summary>Single, Dual or Directional lightmaps rendering mode.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightmapSettings.lightProbes">
            <summary>Holds all data needed by the light probes.</summary>
            <value>To be added.</value>
            <remarks>It can be swapped to a different pre-baked one at runtime.</remarks>
        </member>
        <member name="T:UnityEngine.LightmapsMode">
            <summary>Single, dual, or directional lightmaps rendering mode.</summary>
            <remarks>See Also: LightmapSettings.lightmapsMode.</remarks>
        </member>
        <member name="F:UnityEngine.LightmapsMode.Directional">
            <summary>Directional rendering mode.</summary>
            <remarks>See Also: LightmapSettings.lightmapsMode.</remarks>
        </member>
        <member name="F:UnityEngine.LightmapsMode.Dual">
            <summary>Dual lightmap rendering mode.</summary>
            <remarks>See Also: LightmapSettings.lightmapsMode.</remarks>
        </member>
        <member name="F:UnityEngine.LightmapsMode.Single">
            <summary>Single, traditional lightmap rendering mode.</summary>
            <remarks>See Also: LightmapSettings.lightmapsMode.</remarks>
        </member>
        <member name="T:UnityEngine.LightProbeGroup">
            <summary>Light Probe Group.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.LightProbeGroup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightProbeGroup.probePositions">
            <summary>Editor only function to access and modify probe positions.</summary>
            <value>To be added.</value>
            <remarks>Probe positions are specified in local space relative to the parent object. At runtime this function will return an empty Vector3 array and setting it will have no effect.</remarks>
        </member>
        <member name="T:UnityEngine.LightProbes">
            <summary>Stores light probes for the scene.</summary>
            <remarks>The baked data includes: probe positions, SH coefficients and the tetrahedral tesselation. You can modify the coefficients at runtime. You can also swap the entire LightProbes object to a different pre-baked one using LightmapSettings.lightProbes. See Also: LightmapSettings class, Renderer.useLightProbes property.</remarks>
        </member>
        <member name="C:UnityEngine.LightProbes">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightProbes.cellCount">
            <summary>The number of cells (tetrahedra + outer cells) the space is divided to.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightProbes.coefficients">
            <summary>Coefficients of the baked light probes. The coefficients represent a 3-band RGB spherical harmonics probe, with a total of 27 floats per light probe, laid out: rgbrgbrgb...</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LightProbes.count">
            <summary>The number of light probes.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LightProbes.GetInterpolatedLightProbe(UnityEngine.Vector3,UnityEngine.Renderer,System.Single[])">
            <param name="position">To be added.</param>
            <param name="renderer">To be added.</param>
            <param name="coefficients">To be added.</param>
            <summary>Returns spherical harmonics coefficients of a light probe at the given position. The light probe is interpolated from the light probes baked.</summary>
            <remarks>For the scene. The coefficients represent a 3-band RGB spherical harmonics probe, with a total of 27 floats laid out: rgbrgbrgb... Renderer is only needed to speed up the search for the current tetrahedron, as it caches the index of the tetrahedron it was in the last frame.</remarks>
        </member>
        <member name="P:UnityEngine.LightProbes.positions">
            <summary>Positions of the baked light probes.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LightRenderMode">
            <summary>How the Light is rendered.</summary>
            <remarks>See Also: light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightRenderMode.Auto">
            <summary>Automatically choose the render mode.</summary>
            <remarks>This chooses whether to render the Light as a pixel or vertex light (recommended and default). See Also: light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightRenderMode.ForcePixel">
            <summary>Force the Light to be a pixel light.</summary>
            <remarks>Use this only for really important lights, like a player flashlight. See Also: light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightRenderMode.ForceVertex">
            <summary>Force the Light to be a vertex light.</summary>
            <remarks>This option is good for background or distant lighting. See Also: light component.</remarks>
        </member>
        <member name="T:UnityEngine.LightShadows">
            <summary>Shadow casting options for a Light.</summary>
            <remarks>See Also: light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightShadows.Hard">
            <summary>Cast "hard" shadows (with no shadow filtering).</summary>
            <remarks>See Also: light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightShadows.None">
            <summary>Do not cast shadows (default).</summary>
            <remarks>See Also: light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightShadows.Soft">
            <summary>Cast "soft" shadows (with 4x PCF filtering).</summary>
            <remarks>See Also: light component.</remarks>
        </member>
        <member name="T:UnityEngine.LightType">
            <summary>The type of a Light.</summary>
            <remarks>See Also: Light.type, light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightType.Area">
            <summary>The light is an area light. It affects only lightmaps and lightprobes.</summary>
            <remarks>See Also: Light.type, light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightType.Directional">
            <summary>The light is a directional light.</summary>
            <remarks>See Also: Light.type, light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightType.Point">
            <summary>The light is a point light.</summary>
            <remarks>See Also: Light.type, light component.</remarks>
        </member>
        <member name="F:UnityEngine.LightType.Spot">
            <summary>The light is a spot light.</summary>
            <remarks>See Also: Light.type, light component.</remarks>
        </member>
        <member name="T:UnityEngine.LineRenderer">
            <summary>The line renderer is used to draw free-floating lines in 3D space.</summary>
            <remarks>This class is a script interface for a line renderer component.</remarks>
        </member>
        <member name="C:UnityEngine.LineRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LineRenderer.SetColors(UnityEngine.Color,UnityEngine.Color)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <summary>Set the line color at the start and at the end.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LineRenderer.SetPosition(System.Int32,UnityEngine.Vector3)">
            <param name="index">To be added.</param>
            <param name="position">To be added.</param>
            <summary>Set the position of the vertex in the line.</summary>
            <remarks>See Also: SetVertexCount function.</remarks>
        </member>
        <member name="M:UnityEngine.LineRenderer.SetVertexCount(System.Int32)">
            <param name="count">To be added.</param>
            <summary>Set the number of line segments.</summary>
            <remarks>See Also: SetPosition function.</remarks>
        </member>
        <member name="M:UnityEngine.LineRenderer.SetWidth(System.Single,System.Single)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <summary>Set the line width at the start and at the end.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LineRenderer.useWorldSpace">
            <summary>If enabled, the lines are defined in world space.</summary>
            <value>To be added.</value>
            <remarks>This means the object's position is ignored, and the lines are rendered around world origin.</remarks>
        </member>
        <member name="T:UnityEngine.LocalNotification">
            <summary>LocalNotification is a wrapper around the UILocalNotification class found in the Apple UIKit framework and is only available on iPhoneiPadiPod Touch.</summary>
            <remarks>It represents notifications that an application can schedule for presentation to its user at specific dates and times.  The operating system is responsible for delivering the notification at the specified time.  Local notifications are similar to remote notifications but are scheduled and delivered locally and do not require connection with remote servers. Local notifications are scheduled and handled using NotificationServices class.</remarks>
        </member>
        <member name="C:UnityEngine.LocalNotification">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.alertAction">
            <summary>The title of the action button or slider.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.alertBody">
            <summary>The message displayed in the notification alert.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.alertLaunchImage">
            <summary>Identifies the image used as the launch image when the user taps the action button.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.applicationIconBadgeNumber">
            <summary>The number to display as the application's icon badge.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.defaultSoundName">
            <summary>The default system sound. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LocalNotification.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.fireDate">
            <summary>The date and time when the system should deliver the notification.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.hasAction">
            <summary>A boolean value that controls whether the alert action is visible or not.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.repeatCalendar">
            <summary>The calendar type (Gregorian, Chinese, etc) to use for rescheduling the notification.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.repeatInterval">
            <summary>The calendar interval at which to reschedule the notification.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.soundName">
            <summary>The name of the sound file to play when an alert is displayed.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.timeZone">
            <summary>The time zone of the notification's fire date.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocalNotification.userInfo">
            <summary>A dictionary for passing custom information to the notified application.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LocationInfo">
            <summary>Structure describing device location.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationInfo.altitude">
            <summary>Geographical device location altitude.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationInfo.horizontalAccuracy">
            <summary>Horizontal accuracy of the location.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationInfo.latitude">
            <summary>Geographical device location latitude.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationInfo.longitude">
            <summary>Geographical device location latitude.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationInfo.timestamp">
            <summary>Timestamp (in seconds since 1970) when location was last time updated.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationInfo.verticalAccuracy">
            <summary>Vertical accuracy of the location.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LocationService">
            <summary>Interface into location functionality.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.LocationService">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LocationService.isEnabledByUser">
            <summary>Specifies whether location service is enabled in user settings.</summary>
            <value>To be added.</value>
            <remarks>You should check this property before starting location updates to determine if the user has location services enabled for the current device. On iOS, if this property is false and you start location updates anyway, the CoreLocation framework prompts the user with a confirmation panel asking whether location services should be reenabled. The user can enable or disable location services altogether from the Settings application by toggling the switch in Settings&gt;General&gt;LocationServices.</remarks>
        </member>
        <member name="P:UnityEngine.LocationService.lastData">
            <summary>Last measured device geographical location.</summary>
            <value>To be added.</value>
            <remarks>Before accessing this property, make sure location service was started via Input.location.Start().</remarks>
        </member>
        <member name="M:UnityEngine.LocationService.Start">
            <summary>Starts location service updates. Last location coordinates could be.</summary>
            <remarks>Retrieved via Input.location.lastData. Service does not start to send location data immediately. Code should check Input.location.status for current service status. desiredAccuracyInMeters - desired service accuracy in meters. Using higher value like 500 usually does not require to turn GPS chip on and thus saves battery power. Values like 5-10 could be used for getting best accuracy. Default value is 10 meters. updateDistanceInMeters - the minimum distance (measured in meters) a device must move laterally before Input.location property is updated. Higher values like 500 imply less overhead. Default is 10 meters.</remarks>
        </member>
        <member name="M:UnityEngine.LocationService.Start(System.Single)">
            <param name="desiredAccuracyInMeters">To be added.</param>
            <summary>Starts location service updates. Last location coordinates could be.</summary>
            <remarks>Retrieved via Input.location.lastData. Service does not start to send location data immediately. Code should check Input.location.status for current service status. desiredAccuracyInMeters - desired service accuracy in meters. Using higher value like 500 usually does not require to turn GPS chip on and thus saves battery power. Values like 5-10 could be used for getting best accuracy. Default value is 10 meters. updateDistanceInMeters - the minimum distance (measured in meters) a device must move laterally before Input.location property is updated. Higher values like 500 imply less overhead. Default is 10 meters.</remarks>
        </member>
        <member name="M:UnityEngine.LocationService.Start(System.Single,System.Single)">
            <param name="desiredAccuracyInMeters">To be added.</param>
            <param name="updateDistanceInMeters">To be added.</param>
            <summary>Starts location service updates. Last location coordinates could be.</summary>
            <remarks>Retrieved via Input.location.lastData. Service does not start to send location data immediately. Code should check Input.location.status for current service status. desiredAccuracyInMeters - desired service accuracy in meters. Using higher value like 500 usually does not require to turn GPS chip on and thus saves battery power. Values like 5-10 could be used for getting best accuracy. Default value is 10 meters. updateDistanceInMeters - the minimum distance (measured in meters) a device must move laterally before Input.location property is updated. Higher values like 500 imply less overhead. Default is 10 meters.</remarks>
        </member>
        <member name="P:UnityEngine.LocationService.status">
            <summary>Returns location service status.</summary>
            <value>To be added.</value>
            <remarks>For the details about the return value please refer to documentation of LocationServiceStatus enumeration.</remarks>
        </member>
        <member name="M:UnityEngine.LocationService.Stop">
            <summary>Stops location service updates. This could be useful for saving battery life.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LocationServiceStatus">
            <summary>Describes location service status.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.LocationServiceStatus.Failed">
            <summary>Location service failed (user denied access to location service).</summary>
        </member>
        <member name="F:UnityEngine.LocationServiceStatus.Initializing">
            <summary>Location service is initializing, some time later it will switch to.</summary>
            <remarks>Running or Failed.</remarks>
        </member>
        <member name="F:UnityEngine.LocationServiceStatus.Running">
            <summary>Location service is running and locations could be queried.</summary>
        </member>
        <member name="F:UnityEngine.LocationServiceStatus.Stopped">
            <summary>Location service is stopped.</summary>
        </member>
        <member name="T:UnityEngine.LOD">
            <summary>Structure for building a LOD for passing to the SetLODs function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.LOD(System.Single,UnityEngine.Renderer[])">
            <param name="screenRelativeTransitionHeight">To be added.</param>
            <param name="renderers">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.LOD.renderers">
            <summary>List of renderers for this LOD level.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.LOD.screenRelativeTransitionHeight">
            <summary>The screen relative height to use for the transition [0-1].</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LODGroup">
            <summary>LODGroup lets you group multiple Renderers into LOD levels.</summary>
            <remarks>This can be used to switch between different LOD levels at runtime based on size on screen.</remarks>
        </member>
        <member name="C:UnityEngine.LODGroup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LODGroup.enabled">
            <summary>Enable / Disable the LODGroup - Disabling will turn off all renderers.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LODGroup.ForceLOD(System.Int32)">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
            <param name="index">The LOD level to use. Passing index &lt; 0 will return to standard LOD processing.</param>
        </member>
        <member name="P:UnityEngine.LODGroup.localReferencePoint">
            <summary>The local reference point against which the LOD distance is calculated.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.LODGroup.lodCount">
            <summary>The number of LOD levels.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LODGroup.RecalculateBounds">
            <summary>Recalculate the bounding region for the LODGroup (Relatively slow, do not call often).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.LODGroup.SetLODS(UnityEngine.LOD[])">
            <summary>Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.</summary>
            <remarks>To be added.</remarks>
            <param name="scriptingLODs">The LODs to use for this group.</param>
        </member>
        <member name="P:UnityEngine.LODGroup.size">
            <summary>The size of the LOD object in local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.LogType">
            <summary>The type of the log message in the delegate registered with Application.RegisterLogCallback.</summary>
            <remarks>See Also: Application.RegisterLogCallback.</remarks>
        </member>
        <member name="F:UnityEngine.LogType.Assert">
            <summary>LogType used for Asserts. (These indicate an error inside Unity itself.)</summary>
        </member>
        <member name="F:UnityEngine.LogType.Error">
            <summary>LogType used for Errors.</summary>
        </member>
        <member name="F:UnityEngine.LogType.Exception">
            <summary>LogType used for Exceptions.</summary>
        </member>
        <member name="F:UnityEngine.LogType.Log">
            <summary>LogType used for regular log messages.</summary>
        </member>
        <member name="F:UnityEngine.LogType.Warning">
            <summary>LogType used for Warnings.</summary>
        </member>
        <member name="T:UnityEngine.MasterServer">
            <summary>The Master Server is used to make matchmaking between servers and clients easy.</summary>
            <remarks>You can advertise game hosts or fetch host lists for you game type. The functions here are used to communicate with the Master Server itself which resides on a  separate server. If necessary the server itself can be customized. For an overview of the Master Server as well as a technical description see the Master Server manual page.</remarks>
        </member>
        <member name="C:UnityEngine.MasterServer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MasterServer.ClearHostList">
            <summary>Clear the host list which was received by MasterServer.PollHostList.</summary>
            <remarks>Useful if you want to update the list and want to make sure you don't use the older data.</remarks>
        </member>
        <member name="P:UnityEngine.MasterServer.dedicatedServer">
            <summary>Report this machine as a dedicated server.</summary>
            <value>To be added.</value>
            <remarks>If running as a server the connection count defines the player count and this is reported when registering on the master server. By default the master server assumes this instance is not a dedicated server and thus the player count is incremented by one (to account for the \"client\" running on the server). If this is not desired this variable can be set to false and then only the connection count is reported in the host data as the player count.</remarks>
        </member>
        <member name="P:UnityEngine.MasterServer.ipAddress">
            <summary>The IP address of the master server.</summary>
            <value>To be added.</value>
            <remarks>By default this is a server run by Unity Technologies.</remarks>
        </member>
        <member name="M:UnityEngine.MasterServer.PollHostList">
            <summary>Check for the latest host list received by using MasterServer.RequestHostList.</summary>
            <returns>To be added.</returns>
            <remarks>You can clear the current host list with MasterServer.ClearHostList. That way you can be sure that the list returned by is up to date.</remarks>
        </member>
        <member name="P:UnityEngine.MasterServer.port">
            <summary>The connection port of the master server.</summary>
            <value>To be added.</value>
            <remarks>By default this is a server run by Unity Technologies.</remarks>
        </member>
        <member name="M:UnityEngine.MasterServer.RegisterHost(System.String,System.String)">
            <param name="gameTypeName">To be added.</param>
            <param name="gameName">To be added.</param>
            <summary>Register this server on the master server.</summary>
            <remarks>If the master server address information has not been changed the default Unity master server will be used.</remarks>
        </member>
        <member name="M:UnityEngine.MasterServer.RegisterHost(System.String,System.String,System.String)">
            <param name="gameTypeName">To be added.</param>
            <param name="gameName">To be added.</param>
            <param name="comment">To be added.</param>
            <summary>Register this server on the master server.</summary>
            <remarks>If the master server address information has not been changed the default Unity master server will be used.</remarks>
        </member>
        <member name="M:UnityEngine.MasterServer.RequestHostList(System.String)">
            <param name="gameTypeName">To be added.</param>
            <summary>Request a host list from the master server.</summary>
            <remarks>The list is available through MasterServer.PollHostList when it has arrived.</remarks>
        </member>
        <member name="M:UnityEngine.MasterServer.UnregisterHost">
            <summary>Unregister this server from the master server.</summary>
            <remarks>Does nothing if the server is not registered or has already unregistered.</remarks>
        </member>
        <member name="P:UnityEngine.MasterServer.updateRate">
            <summary>Set the minimum update rate for master server host information update.</summary>
            <value>To be added.</value>
            <remarks>Normally host updates are only sent if something in the host information has changed (like connected players). The update rate defines the minimum amount of time which may elapse between host updates. The default value is 60 seconds minimum update rate (where a check is made for changes). So if one host update is sent and  then some field changes 10 seconds later then the update will possibly sent 50 seconds later (at the next change check). If this is set to 0 then no updates are sent, only initial registration information.</remarks>
        </member>
        <member name="T:UnityEngine.MasterServerEvent">
            <summary>Describes status messages from the master server as returned in OnMasterServerEvent.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.MasterServerEvent.HostListReceived">
            <summary>Received a host list from the master server.</summary>
        </member>
        <member name="F:UnityEngine.MasterServerEvent.RegistrationFailedGameName">
            <summary>Registration failed because an empty game name was given.</summary>
        </member>
        <member name="F:UnityEngine.MasterServerEvent.RegistrationFailedGameType">
            <summary>Registration failed because an empty game type was given.</summary>
        </member>
        <member name="F:UnityEngine.MasterServerEvent.RegistrationFailedNoServer">
            <summary>Registration failed because no server is running.</summary>
        </member>
        <member name="F:UnityEngine.MasterServerEvent.RegistrationSucceeded">
            <summary>Registration to master server succeeded, received confirmation.</summary>
        </member>
        <member name="T:UnityEngine.MatchTargetWeightMask">
            <summary>To specify position and rotation weight mask for Animator::MatchTarget.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MatchTargetWeightMask(UnityEngine.Vector3,System.Single)">
            <param name="positionXYZWeight">To be added.</param>
            <param name="rotationWeight">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MatchTargetWeightMask.positionXYZWeight">
            <summary>Position XYZ weight.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MatchTargetWeightMask.rotationWeight">
            <summary>Rotation weight.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Material">
            <summary>The material class.</summary>
            <remarks>This class exposes all properties from a material, allowing you to animate them. You can also use it to set custom shader properties that can't be accessed through the inspector (e.g. matrices). In order to get the material used by an object, use the Renderer.material property: See Also: Materials, ShaderLab documentation.</remarks>
        </member>
        <member name="C:UnityEngine.Material(System.String)">
            <param name="contents">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Material(UnityEngine.Material)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Material(UnityEngine.Shader)">
            <param name="shader">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Material.color">
            <summary>The main material's color.</summary>
            <value>To be added.</value>
            <remarks>The same as using GetColor or SetColor with "_Color" name. See Also: SetColor, GetColor.</remarks>
        </member>
        <member name="M:UnityEngine.Material.CopyPropertiesFromMaterial(UnityEngine.Material)">
            <param name="mat">To be added.</param>
            <summary>Copy properties from other material into this material.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Material.Create(System.String)">
            <param name="scriptContents">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Material.DisableKeyword(System.String)">
            <param name="keyword">To be added.</param>
            <summary>Unset a shader keyword.</summary>
            <remarks>See Also: EnableKeyword, shaderKeywords.</remarks>
        </member>
        <member name="M:UnityEngine.Material.EnableKeyword(System.String)">
            <param name="keyword">To be added.</param>
            <summary>Set a shader keyword that is enabled by this material.</summary>
            <remarks>See Also: DisableKeyword, shaderKeywords.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetColor(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a named color value.</summary>
            <returns>To be added.</returns>
            <remarks>Many shaders use more than one color. Use GetColor to get the propertyName color. Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular glossy vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders). See Also: color property, SetColor, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetColor(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Get a named color value.</summary>
            <returns>To be added.</returns>
            <remarks>Many shaders use more than one color. Use GetColor to get the propertyName color. Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular glossy vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders). See Also: color property, SetColor, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetFloat(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a named float value.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SetFloat, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetFloat(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Get a named float value.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SetFloat, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetInt(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a named integer value.</summary>
            <returns>To be added.</returns>
            <remarks>This function is just an alias to GetFloat that casts the resulting value to an integer.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetInt(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Get a named integer value.</summary>
            <returns>To be added.</returns>
            <remarks>This function is just an alias to GetFloat that casts the resulting value to an integer.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetMatrix(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a named matrix value from the shader.</summary>
            <returns>To be added.</returns>
            <remarks>This is mostly used with custom shaders that need extra matrix parameters. Matrix parameters are not exposed in the material inspector, but can be set and queried with SetMatrix and GetMatrix from scripts. See Also: SetMatrix, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetMatrix(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Get a named matrix value from the shader.</summary>
            <returns>To be added.</returns>
            <remarks>This is mostly used with custom shaders that need extra matrix parameters. Matrix parameters are not exposed in the material inspector, but can be set and queried with SetMatrix and GetMatrix from scripts. See Also: SetMatrix, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetTag(System.String,System.Boolean)">
            <param name="tag">To be added.</param>
            <param name="searchFallbacks">To be added.</param>
            <summary>Get the value of material's shader tag.</summary>
            <returns>To be added.</returns>
            <remarks>If the material's shader does not define the tag, defaultValue is returned. If searchFallbacks is true then this function will look for tag in all subshaders and all fallbacks. If seachFallbacks is false then only the currently used subshader will be queried for the tag. Using GetTag without searching through fallbacks makes it possible to detect which subshader is currently being used: add a custom tag to each subshader with different value, and query the value at run time. For example, Unity Pro's water uses this function to detect when the shader falls back to non-reflective one, and turns off reflection camera in that case.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetTag(System.String,System.Boolean,System.String)">
            <param name="tag">To be added.</param>
            <param name="searchFallbacks">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Get the value of material's shader tag.</summary>
            <returns>To be added.</returns>
            <remarks>If the material's shader does not define the tag, defaultValue is returned. If searchFallbacks is true then this function will look for tag in all subshaders and all fallbacks. If seachFallbacks is false then only the currently used subshader will be queried for the tag. Using GetTag without searching through fallbacks makes it possible to detect which subshader is currently being used: add a custom tag to each subshader with different value, and query the value at run time. For example, Unity Pro's water uses this function to detect when the shader falls back to non-reflective one, and turns off reflection camera in that case.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetTexture(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a named texture.</summary>
            <returns>To be added.</returns>
            <remarks>Many shaders use more than one texture. Use GetTexture to get the propertyName texture. Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTexture property, SetTexture, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetTexture(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Get a named texture.</summary>
            <returns>To be added.</returns>
            <remarks>Many shaders use more than one texture. Use GetTexture to get the propertyName texture. Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTexture property, SetTexture, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetTextureOffset(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Gets the placement offset of texture propertyName.</summary>
            <returns>To be added.</returns>
            <remarks>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureOffset property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTextureOffset property, SetTextureOffset.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetTextureScale(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Gets the placement scale of texture propertyName.</summary>
            <returns>To be added.</returns>
            <remarks>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureScale property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTextureScale property, SetTextureScale.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetVector(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a named vector value.</summary>
            <returns>To be added.</returns>
            <remarks>Four component vectors and colors are the same in Unity shaders. GetVector does exactly the same as GetColor just the input data type is different ( xyzw in the vector becomes rgba in the color). See Also: GetColor, SetVector, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.GetVector(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Get a named vector value.</summary>
            <returns>To be added.</returns>
            <remarks>Four component vectors and colors are the same in Unity shaders. GetVector does exactly the same as GetColor just the input data type is different ( xyzw in the vector becomes rgba in the color). See Also: GetColor, SetVector, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.HasProperty(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Checks if material's shader has a property of a given name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Materials, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Material.HasProperty(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Checks if material's shader has a property of a given name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Materials, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Material.Lerp(UnityEngine.Material,UnityEngine.Material,System.Single)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Interpolate properties between two materials.</summary>
            <remarks>Makes all color and float values of a material be interpolated from start to end, based on t. When t is 0, all values are taken from start. When t is 1, all values are taken from end. Most often you want the materials that are interpolated between to be the same (use the same shaders and textures) except for colors and floats. Then you use Lerp to blend between them. See Also: Materials.</remarks>
        </member>
        <member name="P:UnityEngine.Material.mainTexture">
            <summary>The material's texture.</summary>
            <value>To be added.</value>
            <remarks>The same as using GetTexture or SetTexture with "_MainTex" name. See Also: SetTexture, GetTexture .Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Material.mainTextureOffset">
            <summary>The texture offset of the main texture.</summary>
            <value>To be added.</value>
            <remarks>The same as using GetTextureOffset or SetTextureOffset with "_MainTex" name. See Also: SetTextureOffset, GetTextureOffset.</remarks>
        </member>
        <member name="P:UnityEngine.Material.mainTextureScale">
            <summary>The texture scale of the main texture.</summary>
            <value>To be added.</value>
            <remarks>The same as using GetTextureScale or SetTextureScale with "_MainTex" name. See Also: SetTextureScale, GetTextureScale.</remarks>
        </member>
        <member name="P:UnityEngine.Material.passCount">
            <summary>How many passes are in this material (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is mostly used in direct drawing code using GL class. For example, Image Effects use materials for implementing screen post-processing. For each pass in the material they activate the pass (see SetPass ) and draw a fullscreen quad. Here is an example of a full image effect that inverts the colors. Add this script to the camera and see it in play mode.See Also: SetPass function, GL class, ShaderLab documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Material.renderQueue">
            <summary>Render queue of this material.</summary>
            <value>To be added.</value>
            <remarks>By default materials use render queue of the shader it uses. You can override the render queue used using this variable. Note that once render queue is set on the material, it stays at that value, even if shader is later changed to be different. Render queue number should be positive to work properly. See Also: Shader.renderQueue, RenderQueue tag.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetBuffer(System.String,UnityEngine.ComputeBuffer)">
            <param name="propertyName">To be added.</param>
            <param name="buffer">To be added.</param>
            <summary>Set a ComputeBuffer value.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetColor(System.Int32,UnityEngine.Color)">
            <param name="nameID">To be added.</param>
            <param name="color">To be added.</param>
            <summary>Set a named color value.</summary>
            <remarks>Many shaders use more than one color. Use SetColor to change the propertyName color. Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular/vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders). See Also: color property, GetColor, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetColor(System.String,UnityEngine.Color)">
            <param name="propertyName">To be added.</param>
            <param name="color">To be added.</param>
            <summary>Set a named color value.</summary>
            <remarks>Many shaders use more than one color. Use SetColor to change the propertyName color. Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular/vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders). See Also: color property, GetColor, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetFloat(System.Int32,System.Single)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named float value.</summary>
            <remarks>See Also: GetFloat, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetFloat(System.String,System.Single)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named float value.</summary>
            <remarks>See Also: GetFloat, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetInt(System.Int32,System.Int32)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named integer value.</summary>
            <remarks>This function is just an alias to SetFloat that casts the passed value to a float.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetInt(System.String,System.Int32)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named integer value.</summary>
            <remarks>This function is just an alias to SetFloat that casts the passed value to a float.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
            <param name="nameID">To be added.</param>
            <param name="matrix">To be added.</param>
            <summary>Set a named matrix for the shader.</summary>
            <remarks>This is mostly used with custom shaders that need extra matrix parameters. Matrix parameters are not exposed in the material inspector, but can be set and queried with SetMatrix and GetMatrix from scripts. See Also: GetMatrix, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetMatrix(System.String,UnityEngine.Matrix4x4)">
            <param name="propertyName">To be added.</param>
            <param name="matrix">To be added.</param>
            <summary>Set a named matrix for the shader.</summary>
            <remarks>This is mostly used with custom shaders that need extra matrix parameters. Matrix parameters are not exposed in the material inspector, but can be set and queried with SetMatrix and GetMatrix from scripts. See Also: GetMatrix, Materials, ShaderLab documentation, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetPass(System.Int32)">
            <param name="pass">To be added.</param>
            <summary>Activate the given pass for rendering.</summary>
            <returns>To be added.</returns>
            <remarks>Pass indices start from zero and go up to (but not including) passCount. This is mostly used in direct drawing code using GL class. For example, Image Effects use materials for implementing screen post-processing. For each pass in the material they activate the pass and draw a fullscreen quad. If SetPass returns false, you should not render anything. Here is an example of a full image effect that inverts the colors. Add this script to the camera and see it in play mode.See Also: passCount property, GL class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetTexture(System.Int32,UnityEngine.Texture)">
            <param name="nameID">To be added.</param>
            <param name="texture">To be added.</param>
            <summary>Set a named texture.</summary>
            <remarks>Many shaders use more than one texture. Use SetTexture to change the propertyName texture. Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTexture property, GetTexture, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetTexture(System.String,UnityEngine.Texture)">
            <param name="propertyName">To be added.</param>
            <param name="texture">To be added.</param>
            <summary>Set a named texture.</summary>
            <remarks>Many shaders use more than one texture. Use SetTexture to change the propertyName texture. Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTexture property, GetTexture, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetTextureOffset(System.String,UnityEngine.Vector2)">
            <param name="propertyName">To be added.</param>
            <param name="offset">To be added.</param>
            <summary>Sets the placement offset of texture propertyName.</summary>
            <remarks>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureOffset property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTextureOffset property, GetTextureOffset.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetTextureScale(System.String,UnityEngine.Vector2)">
            <param name="propertyName">To be added.</param>
            <param name="scale">To be added.</param>
            <summary>Sets the placement scale of texture propertyName.</summary>
            <remarks>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureScale property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap. See Also: mainTextureScale property, GetTextureScale.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetVector(System.Int32,UnityEngine.Vector4)">
            <param name="nameID">To be added.</param>
            <param name="vector">To be added.</param>
            <summary>Set a named vector value.</summary>
            <remarks>Four component vectors and colors are the same in Unity shaders. SetVector does exactly the same as SetColor just the input data type is different ( xyzw in the vector becomes rgba in the color). See Also: SetColor, GetVector, Shader.PropertyToID.</remarks>
        </member>
        <member name="M:UnityEngine.Material.SetVector(System.String,UnityEngine.Vector4)">
            <param name="propertyName">To be added.</param>
            <param name="vector">To be added.</param>
            <summary>Set a named vector value.</summary>
            <remarks>Four component vectors and colors are the same in Unity shaders. SetVector does exactly the same as SetColor just the input data type is different ( xyzw in the vector becomes rgba in the color). See Also: SetColor, GetVector, Shader.PropertyToID.</remarks>
        </member>
        <member name="P:UnityEngine.Material.shader">
            <summary>The shader used by the material.</summary>
            <value>To be added.</value>
            <remarks>See Also: Shader.Find method, Materials, ShaderLab documentation .ad.</remarks>
        </member>
        <member name="P:UnityEngine.Material.shaderKeywords">
            <summary>Additional shader keywords set by this material.</summary>
            <value>To be added.</value>
            <remarks>See Also: EnableKeyword, DisableKeyword.</remarks>
        </member>
        <member name="T:UnityEngine.MaterialPropertyBlock">
            <summary>A block of material values to apply.</summary>
            <remarks>MaterialPropertyBlock is used by Graphics.DrawMesh and Renderer.SetPropertyBlock. Use it in situations where you want to draw multiple objects with the same material, but slightly different properties. For example, if you want to slightly change the color of each mesh drawn. Unity's terrain engine uses MaterialPropertyBlock to draw trees; all of them use the same material, but each tree has different color, scale &amp; wind factor. The block passed to Graphics.DrawMesh or Renderer.SetPropertyBlock is copied, so the most efficient way of using it is to create one block and reuse it for all DrawMesh calls. Use Clear to clear block's values, and AddFloat, AddVector, AddColor, AddMatrix to add values. See Also: Graphics.DrawMesh, Material.</remarks>
        </member>
        <member name="C:UnityEngine.MaterialPropertyBlock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddColor(System.Int32,UnityEngine.Color)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a color material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddColor.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddColor(System.String,UnityEngine.Color)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a color material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddColor.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddFloat(System.Int32,System.Single)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a float material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddFloat.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddFloat(System.String,System.Single)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a float material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddFloat.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddMatrix(System.Int32,UnityEngine.Matrix4x4)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a matrix material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddMatrix(System.String,UnityEngine.Matrix4x4)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a matrix material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddMatrix.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddTexture(System.Int32,UnityEngine.Texture)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a texture material property.</summary>
            <remarks>Note that texture properties in the MaterialPropertyBlock will not work with fixed-function shaders.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddTexture(System.String,UnityEngine.Texture)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a texture material property.</summary>
            <remarks>Note that texture properties in the MaterialPropertyBlock will not work with fixed-function shaders.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddVector(System.Int32,UnityEngine.Vector4)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a vector material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddVector.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.AddVector(System.String,UnityEngine.Vector4)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a vector material property.</summary>
            <remarks>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly, use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddVector.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.Clear">
            <summary>Clear material property values.</summary>
            <remarks>Graphics.DrawMesh copies the passed property block, so the most efficient way of using it is to create one block and reuse it for all DrawMesh calls. Use Clear to clear block's values, and AddFloat, AddVector, AddColor, AddMatrix to add values.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetFloat(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a float from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns zero if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetFloat(System.String)">
            <param name="name">To be added.</param>
            <summary>Get a float from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns zero if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrix(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a matrix from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns identity matrix if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrix(System.String)">
            <param name="name">To be added.</param>
            <summary>Get a matrix from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns identity matrix if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetTexture(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a texture from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns null if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetTexture(System.String)">
            <param name="name">To be added.</param>
            <summary>Get a texture from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns null if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetVector(System.Int32)">
            <param name="nameID">To be added.</param>
            <summary>Get a vector from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns zero vector if not found.</remarks>
        </member>
        <member name="M:UnityEngine.MaterialPropertyBlock.GetVector(System.String)">
            <param name="name">To be added.</param>
            <summary>Get a vector from the property block.</summary>
            <returns>To be added.</returns>
            <remarks>Returns zero vector if not found.</remarks>
        </member>
        <member name="T:UnityEngine.Mathf">
            <summary>A collection of common math functions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Abs(System.Int32)">
            <param name="value">To be added.</param>
            <summary>Returns the absolute value of f.Returns the absolute value of value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Abs(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the absolute value of f.Returns the absolute value of value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Acos(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the arc-cosine of f - the angle in radians whose cosine is f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Approximately(System.Single,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Compares two floating point values if they are similar.</summary>
            <returns>To be added.</returns>
            <remarks>Due to floating point imprecision it is not recommended to compare floats using the equal operator. eg. 1.0 == 10.0 / 10.0 might not return true.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Asin(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the arc-sine of f - the angle in radians whose sine is f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Atan(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the arc-tangent of f - the angle in radians whose tangent is f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Atan2(System.Single,System.Single)">
            <param name="y">To be added.</param>
            <param name="x">To be added.</param>
            <summary>Returns the angle in radians whose Tan is y/x.</summary>
            <returns>To be added.</returns>
            <remarks>Return value is the angle between the x-axis and a 2D vector starting at zero and terminating at (x,y). Note that this function takes account of the cases where x is zero and returns the correct angle rather than throwing a division by zero exception.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Ceil(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the smallest integer greater to or equal to f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.CeilToInt(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the smallest integer greater to or equal to f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <param name="value">To be added.</param>
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>Clamps a value between a minimum float and maximum float value.Clamps value between min and max and returns value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <param name="value">To be added.</param>
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>Clamps a value between a minimum float and maximum float value.Clamps value between min and max and returns value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Clamp01(System.Single)">
            <param name="value">To be added.</param>
            <summary>Clamps value between 0 and 1 and returns value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.ClosestPowerOfTwo(System.Int32)">
            <param name="value">To be added.</param>
            <summary>Returns the closest power of two value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Cos(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the cosine of angle f in radians.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Mathf.Deg2Rad">
            <summary>Degrees-to-radians conversion constant (Read Only).</summary>
            <remarks>This is equal to (PI * 2) / 360. See Also: Rad2Deg constant.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.DeltaAngle(System.Single,System.Single)">
            <param name="current">To be added.</param>
            <param name="target">To be added.</param>
            <summary>Calculates the shortest difference between two given angles.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Mathf.Epsilon">
            <summary>A tiny floating point value (Read Only).</summary>
            <remarks>The smallest value that a float can have different from zero. With the following rules: - anyValue + Epsilon = anyValue - anyValue - Epsilon = anyValue - 0 + Epsilon = Epsilon - 0 - Epsilon = -Epsilon  A value Between any number and Epsilon will result in an arbitrary number due to truncating errors. See Also: Mathf.Approximately.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Exp(System.Single)">
            <param name="power">To be added.</param>
            <summary>Returns e raised to the specified power.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Floor(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the largest integer smaller to or equal to f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.FloorToInt(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the largest integer smaller to or equal to f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Gamma(System.Single,System.Single,System.Single)">
            <param name="value">To be added.</param>
            <param name="absmax">To be added.</param>
            <param name="gamma">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.GammaToLinearSpace(System.Single)">
            <param name="value">To be added.</param>
            <summary>Converts the given value from gamma to linear color space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Mathf.Infinity">
            <summary>A representation of positive infinity (Read Only).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Calculates the Lerp parameter between of two values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.IsPowerOfTwo(System.Int32)">
            <param name="value">To be added.</param>
            <summary>Returns true if the value is power of two.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Interpolates between a and b by t. t is clamped between 0 and 1.</summary>
            <returns>To be added.</returns>
            <remarks>When t = 0 returns from. When t = 1 return to. When t = 0.5 returns the average of a and b.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.</summary>
            <returns>To be added.</returns>
            <remarks>Variables a and b are assumed to be in degrees.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.LinearToGammaSpace(System.Single)">
            <param name="value">To be added.</param>
            <summary>Converts the given value from linear to gamma color space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Log(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the logarithm of a specified number in a specified base.Returns the natural (base e) logarithm of a specified number.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Log(System.Single,System.Single)">
            <param name="f">To be added.</param>
            <param name="p">To be added.</param>
            <summary>Returns the logarithm of a specified number in a specified base.Returns the natural (base e) logarithm of a specified number.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Log10(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the base 10 logarithm of a specified number.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Max(System.Int32[])">
            <param name="values">To be added.</param>
            <summary>Returns largest of two or more values.Returns the largest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Max(System.Single[])">
            <param name="values">To be added.</param>
            <summary>Returns largest of two or more values.Returns the largest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Max(System.Int32,System.Int32)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns largest of two or more values.Returns the largest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Max(System.Single,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns largest of two or more values.Returns the largest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Min(System.Int32[])">
            <param name="values">To be added.</param>
            <summary>Returns the smallest of two or more values.Returns the smallest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Min(System.Single[])">
            <param name="values">To be added.</param>
            <summary>Returns the smallest of two or more values.Returns the smallest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Min(System.Int32,System.Int32)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns the smallest of two or more values.Returns the smallest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Min(System.Single,System.Single)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns the smallest of two or more values.Returns the smallest of two or more values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>Moves a value current towards target.</summary>
            <returns>To be added.</returns>
            <remarks>This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta. Negative values of maxDelta pushes the value away from target.</remarks>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:UnityEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <param name="current">To be added.</param>
            <param name="target">To be added.</param>
            <param name="maxDelta">To be added.</param>
            <summary>Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.</summary>
            <returns>To be added.</returns>
            <remarks>Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.</remarks>
        </member>
        <member name="F:UnityEngine.Mathf.NegativeInfinity">
            <summary>A representation of negative infinity (Read Only).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.NextPowerOfTwo(System.Int32)">
            <param name="value">To be added.</param>
            <summary>Returns the next power of two value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.PerlinNoise(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Generate 2D Perlin noise.</summary>
            <returns>Value between 0.0 and 1.0.</returns>
            <remarks>Perlin noise is a pseudo-random pattern of float values generated across a 2D plane (although the technique does generalise to three or more dimensions, this is not implemented in Unity). The noise does not contain a completely random value at each point but rather consists of "waves" whose values gradually increase and decrease across the pattern. The noise can be used as the basis for texture effects but also for animation, generating terrain heightmaps and many other things.Although the noise plane is two-dimensional, it is easy to use just a single one-dimensional line through the pattern, say for animation effects.</remarks>
            <example />
        </member>
        <member name="F:UnityEngine.Mathf.PI">
            <summary>The infamous 3.14159265358979... value (Read Only).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.PingPong(System.Single,System.Single)">
            <param name="t">To be added.</param>
            <param name="length">To be added.</param>
            <summary>PingPongs the value t, so that it is never larger than length and never smaller than 0.</summary>
            <returns>To be added.</returns>
            <remarks>The returned value will move back and forth between 0 and length.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Pow(System.Single,System.Single)">
            <param name="f">To be added.</param>
            <param name="p">To be added.</param>
            <summary>Returns f raised to power p.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Mathf.Rad2Deg">
            <summary>Radians-to-degrees conversion constant (Read Only).</summary>
            <remarks>This is equal to 360 / (PI * 2). See Also: Deg2Rad constant.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Repeat(System.Single,System.Single)">
            <param name="t">To be added.</param>
            <param name="length">To be added.</param>
            <summary>Loops the value t, so that it is never larger than length and never smaller than 0.</summary>
            <returns>To be added.</returns>
            <remarks>This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Round(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns f rounded to the nearest integer.</summary>
            <returns>To be added.</returns>
            <remarks>If the number ends in .5 so it is halfway between two integers, one of which is even and the other odd, the even number is returned.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.RoundToInt(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns f rounded to the nearest integer.</summary>
            <returns>To be added.</returns>
            <remarks>If the number ends in .5 so it is halfway between two integers, one of which is even and the other odd, the even number is returned.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Sign(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the sign of f.</summary>
            <returns>To be added.</returns>
            <remarks>Return value is 1 when f is positive or zero, -1 when f is negative.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Sin(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the sine of angle f in radians.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single)">
            <summary>Gradually changes a value towards a desired goal over time.</summary>
            <returns>To be added.</returns>
            <remarks>The value is smoothed by some spring-damper like function, which will never overshoot. The function can be used to smooth any kind of value, positions, colors, scalars.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>Gradually changes a value towards a desired goal over time.</summary>
            <returns>To be added.</returns>
            <remarks>The value is smoothed by some spring-damper like function, which will never overshoot. The function can be used to smooth any kind of value, positions, colors, scalars.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
            <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>Gradually changes a value towards a desired goal over time.</summary>
            <returns>To be added.</returns>
            <remarks>The value is smoothed by some spring-damper like function, which will never overshoot. The function can be used to smooth any kind of value, positions, colors, scalars.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
            <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
            <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single)">
            <summary>Gradually changes an angle given in degrees towards a desired goal angle over time.</summary>
            <returns>To be added.</returns>
            <remarks>The value is smoothed by some spring-damper like function. The function can be used to smooth any kind of value, positions, colors, scalars. The most common use is for smoothing a follow camera.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>Gradually changes an angle given in degrees towards a desired goal angle over time.</summary>
            <returns>To be added.</returns>
            <remarks>The value is smoothed by some spring-damper like function. The function can be used to smooth any kind of value, positions, colors, scalars. The most common use is for smoothing a follow camera.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
            <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>Gradually changes an angle given in degrees towards a desired goal angle over time.</summary>
            <returns>To be added.</returns>
            <remarks>The value is smoothed by some spring-damper like function. The function can be used to smooth any kind of value, positions, colors, scalars. The most common use is for smoothing a follow camera.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
            <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
            <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
        </member>
        <member name="M:UnityEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Interpolates between min and max with smoothing at the limits.</summary>
            <returns>To be added.</returns>
            <remarks>This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Sqrt(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns square root of f.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mathf.Tan(System.Single)">
            <param name="f">To be added.</param>
            <summary>Returns the tangent of angle f in radians.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Matrix4x4">
            <summary>A standard 4x4 transformation matrix.</summary>
            <remarks>A transformation matrix can perform arbitrary linear 3D transformations (i.e. translation, rotation, scale, shear etc.) and perspective transformations using homogenous coordinates. You rarely use matrices in scripts; most often using Vector3 s, Quaternion s and functionality of Transform class is more straightforward. Plain matrices are used in special cases like setting up nonstandard camera projection. Consult any graphics textbook for in depth explanation of transformation matrices. In Unity, Matrix4x4 is used by several Transform, Camera, Material and GL functions. Matrices in unity are column major. Data is accessed as: row + (column*4). Matrices can be indexed like 2D arrays but in an expression like mat[a, b], a refers to the row index, while b refers to the column index (note that this is the opposite way round to Cartesian coordinates).</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.GetColumn(System.Int32)">
            <param name="i">To be added.</param>
            <summary>Get a column of the matrix.</summary>
            <returns>To be added.</returns>
            <remarks>The i-th column is returned as a Vector4. i must be from 0 to 3 inclusive. See Also: SetColumn.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.GetRow(System.Int32)">
            <param name="i">To be added.</param>
            <summary>Returns a row of the matrix.</summary>
            <returns>To be added.</returns>
            <remarks>The i-th row is returned as a Vector4. i must be from 0 to 3 inclusive. See Also: SetRow.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.identity">
            <summary>Returns the identity matrix (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is a matrix that effectively does nothing when applied. It has 1s in the main diagonal and 0s in all other elements:See Also: zero variable.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.inverse">
            <summary>The inverse of this matrix (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Inverted matrix is such that if multiplied by the original would result in identity matrix. If some matrix transforms vectors in a particular way, then the inverse matrix can transform them back. For example, Transform's worldToLocalMatrix and localToWorldMatrix are inverses of each other.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.Inverse(UnityEngine.Matrix4x4)">
            <param name="m">To be added.</param>
            <summary>The inverse of this matrix (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>Inverted matrix is such that if multiplied by the original would result in identity matrix. If some matrix transforms vectors in a particular way, then the inverse matrix can transform them back. For example, Transform's worldToLocalMatrix and localToWorldMatrix are inverses of each other.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.isIdentity">
            <summary>Is this the identity matrix?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.Item(System.Int32,System.Int32)">
            <param name="row">To be added.</param>
            <param name="column">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m00">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m01">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m02">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m03">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m10">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m11">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m12">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m13">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m20">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m21">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m22">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m23">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m30">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m31">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m32">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Matrix4x4.m33">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.MultiplyPoint(UnityEngine.Vector3)">
            <param name="v">To be added.</param>
            <summary>Transforms a position by this matrix (generic).</summary>
            <returns>To be added.</returns>
            <remarks>Returns a position v transformed by the current fully arbitrary matrix. If the matrix is a regular 3D transformation matrix, it is much faster to use MultiplyPoint3x4 instead. MultiplyPoint is slower, but can handle projective transformations as well. See Also: MultiplyPoint3x4, MultiplyVector.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.MultiplyPoint3x4(UnityEngine.Vector3)">
            <param name="v">To be added.</param>
            <summary>Transforms a position by this matrix (fast).</summary>
            <returns>To be added.</returns>
            <remarks>Returns a position v transformed by the current transformation matrix. This function is a faster version of MultiplyPoint ; but it can only handle regular 3D transformations. MultiplyPoint is slower, but can handle projective transformations as well. See Also: MultiplyPoint, MultiplyVector.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.MultiplyVector(UnityEngine.Vector3)">
            <param name="v">To be added.</param>
            <summary>Transforms a direction by this matrix.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to MultiplyPoint ; but it transforms directions and not positions. When transforming a direction, only the rotation part of the matrix is taken into account. See Also: MultiplyPoint, MultiplyPoint3x4.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.op_Equality(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.op_Inequality(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.op_Multiply(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.op_Multiply(UnityEngine.Matrix4x4,UnityEngine.Vector4)">
            <param name="lhs">To be added.</param>
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <param name="top">To be added.</param>
            <param name="zNear">To be added.</param>
            <param name="zFar">To be added.</param>
            <summary>Creates an orthogonal projection matrix.</summary>
            <returns>To be added.</returns>
            <remarks>The returned matrix is such that views left to right, bottom to top area, with zNear and zFar depth clipping planes. If you want to use orthogonal for pixel-correct rendering, it is better to use GL.LoadPixelMatrix, as that would apply proper half-texel offsets for Direct3D renderer. See Also: GL.LoadPixelMatrix, GL.LoadProjectionMatrix, GUI.matrix.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <param name="fov">To be added.</param>
            <param name="aspect">To be added.</param>
            <param name="zNear">To be added.</param>
            <param name="zFar">To be added.</param>
            <summary>Creates a perspective projection matrix.</summary>
            <returns>To be added.</returns>
            <remarks>fov is the vertical field-of-view in degrees of the perspective matrix, aspect is the aspect ratio (width divided by height). zNear and zFar set up the depth clipping planes. See Also: GL.LoadPixelMatrix, GL.LoadProjectionMatrix, GUI.matrix.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.Scale(UnityEngine.Vector3)">
            <param name="v">To be added.</param>
            <summary>Creates a scaling matrix.</summary>
            <returns>To be added.</returns>
            <remarks>Returned matrix is such that scales along coordinate axes by a vector v. The matrix looks like this:See Also: TRS function.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.SetColumn(System.Int32,UnityEngine.Vector4)">
            <param name="i">To be added.</param>
            <param name="v">To be added.</param>
            <summary>Sets a column of the matrix.</summary>
            <remarks>You use this to build transformation matrices using right, up and forward vectors:The i-th column is set from v. i must be from 0 to 3 inclusive. See Also: GetColumn.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.SetRow(System.Int32,UnityEngine.Vector4)">
            <param name="i">To be added.</param>
            <param name="v">To be added.</param>
            <summary>Sets a row of the matrix.</summary>
            <remarks>The i-th row is set from v. i must be from 0 to 3 inclusive. See Also: GetRow.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.SetTRS(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <param name="pos">To be added.</param>
            <param name="q">To be added.</param>
            <param name="s">To be added.</param>
            <summary>Sets this matrix to a translation, rotation and scaling matrix.</summary>
            <remarks>The current matrix is modified so that places things at position pos, oriented in rotation q and scaled by s.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.ToString">
            <summary>Returns a nicely formatted string for this matrix.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for this matrix.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.transpose">
            <summary>Returns the transpose of this matrix (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The transposed matrix is the one that has columns exchanged with rows of the original (i.e. flipped along main diagonal). So, if the original matrix looks like....the transposed matrix will be.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.Transpose(UnityEngine.Matrix4x4)">
            <param name="m">To be added.</param>
            <summary>Returns the transpose of this matrix (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The transposed matrix is the one that has columns exchanged with rows of the original (i.e. flipped along main diagonal). So, if the original matrix looks like....the transposed matrix will be.</remarks>
        </member>
        <member name="M:UnityEngine.Matrix4x4.TRS(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <param name="pos">To be added.</param>
            <param name="q">To be added.</param>
            <param name="s">To be added.</param>
            <summary>Creates a translation, rotation and scaling matrix.</summary>
            <returns>To be added.</returns>
            <remarks>The returned matrix is such that places things at position pos, oriented in rotation q and scaled by s.</remarks>
        </member>
        <member name="P:UnityEngine.Matrix4x4.zero">
            <summary>Returns a matrix with all elements set to zero (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The matrix looks like this:See Also: identity variable.</remarks>
        </member>
        <member name="T:UnityEngine.Mesh">
            <summary>A class that allows creating or modifying meshes from scripts.</summary>
            <remarks>Meshes contain vertices and multiple triangle arrays. See the Procedural example project for examples of using the mesh interface. The triangle arrays are simply indices into the vertex arrays; three indices for each triangle. For every vertex there can be a normal, two texture coordinates, color and tangent. These are optional though and can be removed at will. All vertex information is stored in separate arrays of the same size, so if your mesh has 10 vertices, you would also have 10-size arrays for normals and other attributes. There are probably 3 things you might want to use the modifyable mesh interface for: 1. Building a mesh from scratch : should always be done in the following order: 1) assign vertices 2) assign triangles .2. Modifying vertex attributes every frame : 1) get vertices, 2) modify them, 3) assign them back to the mesh.3. Continously changing the mesh triangles and vertices : 1) call Clear to start fresh, 2) assign vertices and other attributes, 3) assign triangle indices. It is important to call Clear before assigning new vertices or triangles. Unity always checks the supplied triangle indices whether they don't reference out of bounds vertices. Calling Clear then assigning vertices then triangles makes sure you never have out of bounds data.</remarks>
        </member>
        <member name="C:UnityEngine.Mesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.bindposes">
            <summary>The bind poses. The bind pose at each index refers to the bone with the same index.</summary>
            <value>To be added.</value>
            <remarks>The bind pose is the inverse of inverse transformation matrix of the bone, when the bone is in the bind pose.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.blendShapeCount">
            <summary>Returns BlendShape count on this mesh.</summary>
            <value>To be added.</value>
            <remarks>See Also: blendShapes.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.boneWeights">
            <summary>The bone weights of each vertex.</summary>
            <value>To be added.</value>
            <remarks>The size of the array is either the same as vertexCount or empty. Each vertex can be affected by up to 4 different bones. All 4 bone weights should sum up to 1.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.bounds">
            <summary>The bounding volume of the mesh.</summary>
            <value>To be added.</value>
            <remarks>This is the axis-aligned bounding box of the mesh in its local space (that is, not affected by the transform). See also Renderer.bounds property that returns bounds in world space. See Also: Bounds class, Renderer.bounds property.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.Clear">
            <summary>Clears all vertex data and all triangle indices.</summary>
            <remarks>You should call this function before rebuilding triangles array.Default behaviour of this function keeps the existing vertex layout: if the mesh had tangent vectors and vertex colors, for example, then the tangents and colors will be part of mesh data once you fill in new vertex data. If you want to completely clear the mesh and start with an empty vertex layout, pass false for keepVertexLayout parameter. Alternatively, assigning an empty array to any mesh component will also remove it from the vertex layout.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.Clear(System.Boolean)">
            <param name="keepVertexLayout">To be added.</param>
            <summary>Clears all vertex data and all triangle indices.</summary>
            <remarks>You should call this function before rebuilding triangles array.Default behaviour of this function keeps the existing vertex layout: if the mesh had tangent vectors and vertex colors, for example, then the tangents and colors will be part of mesh data once you fill in new vertex data. If you want to completely clear the mesh and start with an empty vertex layout, pass false for keepVertexLayout parameter. Alternatively, assigning an empty array to any mesh component will also remove it from the vertex layout.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.colors">
            <summary>Vertex colors of the mesh.</summary>
            <value>To be added.</value>
            <remarks>If no vertex colors are available an empty array will be returned.For performance reasons, consider using colors32 instead. This will avoid byte-to-float conversions in colors, as well as use less temporary memory.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.colors32">
            <summary>Vertex colors of the mesh.</summary>
            <value>To be added.</value>
            <remarks>Same as colors, except using Color32 structure which is better for performance.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[])">
            <summary>Combines several meshes into this mesh.</summary>
            <remarks>Combining meshes is useful for performance optimization. If mergeSubMeshes is true, all the meshes will be combined to a single submesh. Otherwise each mesh will go into a different submesh. If all meshes share the same material, set this to true. If useMatrices is false, the transform matrices in CombineInstance structs will be ignored.</remarks>
            <param name="combine">Descriptions of the meshes to combine.</param>
        </member>
        <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean)">
            <summary>Combines several meshes into this mesh.</summary>
            <remarks>Combining meshes is useful for performance optimization. If mergeSubMeshes is true, all the meshes will be combined to a single submesh. Otherwise each mesh will go into a different submesh. If all meshes share the same material, set this to true. If useMatrices is false, the transform matrices in CombineInstance structs will be ignored.</remarks>
            <param name="combine">Descriptions of the meshes to combine.</param>
            <param name="mergeSubMeshes">Should all meshes be combined into a single submesh?</param>
        </member>
        <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean,System.Boolean)">
            <summary>Combines several meshes into this mesh.</summary>
            <remarks>Combining meshes is useful for performance optimization. If mergeSubMeshes is true, all the meshes will be combined to a single submesh. Otherwise each mesh will go into a different submesh. If all meshes share the same material, set this to true. If useMatrices is false, the transform matrices in CombineInstance structs will be ignored.</remarks>
            <param name="combine">Descriptions of the meshes to combine.</param>
            <param name="mergeSubMeshes">Should all meshes be combined into a single submesh?</param>
            <param name="useMatrices">Should the transforms supplied in the CombineInstance array be used or ignored?</param>
        </member>
        <member name="M:UnityEngine.Mesh.GetBlendShapeIndex(System.String)">
            <param name="blendShapeName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.GetBlendShapeName(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns name of BlendShape by given index.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: blendShapes, blendShapeCount.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.GetIndices(System.Int32)">
            <param name="submesh">To be added.</param>
            <summary>Returns the index buffer for the submesh.</summary>
            <returns>To be added.</returns>
            <remarks>The layout of indices depends on the topology of a submesh, for example for triangular mesh each triangle will result in three indices. See Also: subMeshCount, GetTopology, MeshTopology enum.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.GetTopology(System.Int32)">
            <param name="submesh">To be added.</param>
            <summary>Gets the topology of a submesh.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: MeshTopology enum, SetIndices function.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.GetTriangles(System.Int32)">
            <param name="submesh">To be added.</param>
            <summary>Returns the triangle list for the submesh.</summary>
            <returns>To be added.</returns>
            <remarks>A submesh is simply a separate triangle list. When the mesh renderer uses multiple materials, you should ensure that there are as many submeshes as materials. See Also: subMeshCount.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.GetTriangleStrip(System.Int32)">
            <param name="submesh">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.isReadable">
            <summary>Returns state of the Read/Write Enabled checkbox when model was imported.</summary>
            <value>To be added.</value>
            <remarks>For a dynamic Mesh created from script, always returns true. Meshes not marked readable will throw an error on accessing any data arrays from script at runtime. Access is allowed in Unity's editor outside of the game and rendering loop.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.MarkDynamic">
            <summary>Optimize mesh for frequent updates.</summary>
            <remarks>Call this before assigning vertices to get better performance when continually updating mesh.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.normals">
            <summary>The normals of the mesh.</summary>
            <value>To be added.</value>
            <remarks>If the mesh contains no normals an empty array will be returned.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.Optimize">
            <summary>Optimizes the mesh for display.</summary>
            <remarks>This operation might take a while but will make the geometry displayed be faster. You should use it if you generate a mesh from scratch procedurally and you want to trade better runtime performance against higher load time. Internally it optimizes the triangles for vertex cache locality. For imported models you should never call this as the import pipeline already does it for you.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.RecalculateBounds">
            <summary>Recalculate the bounding volume of the mesh from the vertices.</summary>
            <remarks>After modifying vertices you should call this function to ensure the bounding volume is correct. Assigning triangles will automatically Recalculate the bounding volume.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.RecalculateNormals">
            <summary>Recalculates the normals of the mesh from the triangles and vertices.</summary>
            <remarks>After modifying the vertices it is often useful to update the normals to reflect the change. Normals are calculated from all shared vertices. Imported meshes sometimes don't share all vertices. For example a vertex at a uv seam will be split into two vertices. Thus the RecalculateNormals function will create normals that are not smooth at the uv seam. Also note that RecalculateNormals does not generate tangents automatically thus bumpmap shaders will not work with the mesh after calling RecalculateNormals. You can provide your own tangents however.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.SetIndices(System.Int32[],UnityEngine.MeshTopology,System.Int32)">
            <param name="indices">To be added.</param>
            <param name="topology">To be added.</param>
            <param name="submesh">To be added.</param>
            <summary>Sets the index buffer for the submesh.</summary>
            <remarks>A submesh is simply a separate indices array. When the mesh renderer uses multiple materials, you should ensure that there are as many submeshes as materials. SetTriangles and ::triangles always make the mesh be composed of triangles faces. Using SetIndices you can create a mesh that's made out of lines or points, see MeshTopology enum. See Also: subMeshCount, MeshTopology enum.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.SetTriangles(System.Int32[],System.Int32)">
            <param name="triangles">To be added.</param>
            <param name="submesh">To be added.</param>
            <summary>Sets the triangle list for the submesh.</summary>
            <remarks>A submesh is simply a separate triangle list. When the mesh renderer uses multiple materials, you should ensure that there are as many submeshes as materials. It is recommended to assign a the triangle array after assigning the vertex array in order to avoid out of bounds errors. See Also: subMeshCount.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.SetTriangleStrip(System.Int32[],System.Int32)">
            <param name="triangles">To be added.</param>
            <param name="submesh">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.subMeshCount">
            <summary>The number of submeshes. Every material has a separate triangle list.</summary>
            <value>To be added.</value>
            <remarks>See Also: GetTriangles, SetTriangles.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.tangents">
            <summary>The tangents of the mesh.</summary>
            <value>To be added.</value>
            <remarks>Tangents are mostly used in bump-mapped shaders. A tangent is a unit length vector that follows mesh surface along horizontal (U) texture direction. Tangents in Unity are represented as Vector4, with x,y,z components defining the vector, and w used to flip the binormal if needed. Unity calculates the other surface vector (binormal) by taking a cross product between normal and tangent, and multiplying result by tangent.w. Thus w should always be 1 or -1. You should calculate tangents yourself if you plan to use bump-mapped shaders on the mesh. Assign tangents after assigning normals or using RecalculateNormals.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.triangles">
            <summary>An array containing all triangles in the mesh.</summary>
            <value>To be added.</value>
            <remarks>The array is a list of triangles that contains indices into the vertex array. The size of the triangle array must always be a multiple of 3. Vertices can be shared by simply indexing into the same vertex. If the mesh contains multiple sub meshes (materials) the triangle list will contain all triangles of all submeshes. When you assign triangle array, subMeshCount is set to 1. If you want to have multiple sub meshes, use subMeshCount and SetTriangles. It is recommended to assign a the triangle array after assigning the vertex array in order to avoid out of bounds errors.</remarks>
        </member>
        <member name="M:UnityEngine.Mesh.UploadMeshData(System.Boolean)">
            <param name="markNoLogerReadable">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.uv">
            <summary>The base texture coordinates of the mesh.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.uv1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.uv2">
            <summary>The second texture coordinate set of the mesh, if present.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.vertexCount">
            <summary>Returns the number of vertices in the mesh (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Mesh.vertices">
            <summary>Returns a copy of the vertex positions or assigns a new vertex positions array.</summary>
            <value>To be added.</value>
            <remarks>The number of vertices in the mesh is changed by assigning a vertex array with a different number of vertices. Note that if you resize the vertex array then all other vertex attributes (normals, colors, tangents, UVs) will be automatically resized too. RecalculateBounds will automatically be invoked if no vertices have been assigned to the mesh when setting the vertices.</remarks>
        </member>
        <member name="T:UnityEngine.MeshCollider">
            <summary>A mesh collider allows you to do collision detection between meshes and primitives.</summary>
            <remarks>See Also: BoxCollider, CapsuleCollider, PhysicMaterial, Rigidbody.</remarks>
        </member>
        <member name="C:UnityEngine.MeshCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MeshCollider.convex">
            <summary>Use a convex collider from the mesh.</summary>
            <value>To be added.</value>
            <remarks>This means that if you have this set to true, your mesh collider wont have Holes or entrances. Convex meshes can collide with other convex colliders and non-convex meshes. Thus convex mesh colliders are suitable on rigidibodies, if you really need more detailed colliders than what the primitive colliders provide you with.</remarks>
        </member>
        <member name="P:UnityEngine.MeshCollider.mesh">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MeshCollider.sharedMesh">
            <summary>The mesh object used for collision detection.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MeshCollider.smoothSphereCollisions">
            <summary>Uses interpolated normals for sphere collisions instead of flat polygonal normals.</summary>
            <value>To be added.</value>
            <remarks>This smoothes out bumps for sphere's rolling over smooth surfaces. The downside is that rolling over steep corners can behave really strangely and appears like it is pulling the sphere in some direction.</remarks>
        </member>
        <member name="T:UnityEngine.MeshFilter">
            <summary>A class to access the Mesh of the mesh filter.</summary>
            <remarks>Use this with a procedural mesh interface. See Also: Mesh class.</remarks>
        </member>
        <member name="C:UnityEngine.MeshFilter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MeshFilter.mesh">
            <summary>Returns the instantiated Mesh assigned to the mesh filter.</summary>
            <value>To be added.</value>
            <remarks>If no mesh is assigned to the mesh filter a new mesh will be created and assigned. If a mesh is assigned to the mesh filter already, then first query of mesh property will create a duplicate of it, and this copy will be returned. Further queries of mesh property will return this duplicated mesh instance. If you want to avoid this automatic mesh duplication, use MeshFilter.sharedMesh instead. By using mesh property you can modify the mesh for a single object only. The other objects that used the same mesh will not be modified.See Also: Mesh class.</remarks>
        </member>
        <member name="P:UnityEngine.MeshFilter.sharedMesh">
            <summary>Returns the shared mesh of the mesh filter.</summary>
            <value>To be added.</value>
            <remarks>It is recommended to use this function only for reading mesh data and not for writing, since you might modify imported assets and all objects that use this mesh will be affected. Also, be aware that is not possible to undo the changes done to this mesh.</remarks>
        </member>
        <member name="T:UnityEngine.MeshRenderer">
            <summary>Renders meshes inserted by the MeshFilter or TextMesh.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MeshRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.MeshTopology">
            <summary>Topology of Mesh faces.</summary>
            <remarks>Normally meshes are composed of triangles (three vertex indices per face), but in some cases you might want to render complex things that are made up from lines or points. Creating a Mesh with that topology and using it to render is usually the most efficient way. See Also: Mesh.SetIndices function.</remarks>
        </member>
        <member name="F:UnityEngine.MeshTopology.Lines">
            <summary>Mesh is made from lines.</summary>
            <remarks>Each two indices in the mesh index buffer form a line. See Also: Mesh.SetIndices function.</remarks>
        </member>
        <member name="F:UnityEngine.MeshTopology.LineStrip">
            <summary>Mesh is a line strip.</summary>
            <remarks>First two indices form a line, and then each new index connects a new vertex to the existing line strip. See Also: Mesh.SetIndices function.</remarks>
        </member>
        <member name="F:UnityEngine.MeshTopology.Points">
            <summary>Mesh is made from points.</summary>
            <remarks>In most of use cases, mesh index buffer should be "indendity": 0, 1, 2, 3, 4, 5, ... See Also: Mesh.SetIndices function.</remarks>
        </member>
        <member name="F:UnityEngine.MeshTopology.Quads">
            <summary>Mesh is made from quads.</summary>
            <remarks>Each four indices in the mesh index buffer form a quadrangular face. Note that quad topology is emulated on many platforms, so it's more efficient to use a triangular mesh. Unless you really need quads, for example if using DirectX 11 tessellation shaders that operate on quad patches. See Also: Mesh.SetIndices function.</remarks>
        </member>
        <member name="F:UnityEngine.MeshTopology.Triangles">
            <summary>Mesh is made from triangles.</summary>
            <remarks>Each three indices in the mesh index buffer form a triangular face. See Also: Mesh.SetIndices function.</remarks>
        </member>
        <member name="T:UnityEngine.Microphone">
            <summary>Use this class to record to an AudioClip using a connected microphone.</summary>
            <remarks>You can get a list of connected microphone(s) from the devices property and then use the Start and End functions to start or end a recording session using one of the available devices.</remarks>
        </member>
        <member name="C:UnityEngine.Microphone">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Microphone.devices">
            <summary>A list of available microphone devices, identified by name.</summary>
            <value>To be added.</value>
            <remarks>You can use the name with the Start and End functions to specify which microphone you wish to start/stop recording.See Also: Start, End, IsRecording.</remarks>
        </member>
        <member name="M:UnityEngine.Microphone.End(System.String)">
            <summary>Stops recording.</summary>
            <remarks>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property.</remarks>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:UnityEngine.Microphone.GetDeviceCaps(System.String,System.Int32@,System.Int32@)">
            <summary>Get the frequency capabilities of a device.</summary>
            <remarks>Passing null or an empty string for the device name will select the default device. You can use the devices property to get a list of all available microphones. When a value of zero is returned in the minFreq and maxFreq parameters, this indicates that the device supports any frequency.</remarks>
            <param name="deviceName">The name of the device.</param>
            <param name="minFreq">Returns the minimum sampling frequency of the device.</param>
            <param name="maxFreq">Returns the maximum sampling frequency of the device.</param>
        </member>
        <member name="M:UnityEngine.Microphone.GetPosition(System.String)">
            <summary>Get the position in samples of the recording.</summary>
            <returns>To be added.</returns>
            <remarks>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property. You can use this to control latency. If you want a 30ms latency, poll getRecordPosition() until 30ms (in samples) has gone and then start the audio.</remarks>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:UnityEngine.Microphone.IsRecording(System.String)">
            <summary>Query if a device is currently recording.</summary>
            <returns>To be added.</returns>
            <remarks>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property.</remarks>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:UnityEngine.Microphone.Start(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>Start Recording with device.</summary>
            <returns>The function returns null if the recording fails to start.</returns>
            <remarks>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property. You can find the range of sample rates supported by a microphone using the GetDeviceCaps property. Note that if you want to use the Microphone class in the web player, you need to get the user's permission to do so. Call Application.RequestUserAuthorization before calling any Microphone methods.</remarks>
            <example />
            <param name="deviceName">The name of the device.</param>
            <param name="loop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="lengthSec">Is the length of the AudioClip produced by the recording.</param>
            <param name="frequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="T:UnityEngine.MissingComponentException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingComponentException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingComponentException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingComponentException(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">To be added.</param>
            <param name="context">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingComponentException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.MissingReferenceException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingReferenceException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingReferenceException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingReferenceException(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">To be added.</param>
            <param name="context">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MissingReferenceException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.MonoBehaviour">
            <summary>MonoBehaviour is the base class every script derives from.</summary>
            <remarks>Using Javascript every script automatically derives from MonoBehaviour. When using C# or Boo you have to explicitly derive from MonoBehaviour. Note: The checkbox for disabling a MonoBehavior (on the editor) will only  prevent Start(), Awake(), Update(), FixedUpdate(), and OnGUI() from executing.  If none of these functions are present, the checkbox is not displayed. See Also: The chapter on scripting in the manual.</remarks>
        </member>
        <member name="C:UnityEngine.MonoBehaviour">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.CancelInvoke">
            <summary>Cancels all Invoke calls on this MonoBehaviour.Cancels all Invoke calls with name methodName on this behaviour.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.CancelInvoke(System.String)">
            <param name="methodName">To be added.</param>
            <summary>Cancels all Invoke calls on this MonoBehaviour.Cancels all Invoke calls with name methodName on this behaviour.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.Invoke(System.String,System.Single)">
            <param name="methodName">To be added.</param>
            <param name="time">To be added.</param>
            <summary>Invokes the method methodName in time seconds.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.InvokeRepeating(System.String,System.Single,System.Single)">
            <param name="methodName">To be added.</param>
            <param name="time">To be added.</param>
            <param name="repeatRate">To be added.</param>
            <summary>Invokes the method methodName in time seconds.</summary>
            <remarks>After the first invocation repeats calling that function every repeatRate seconds.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.IsInvoking">
            <summary>Is any invoke on methodName pending?Is any invoke pending on this MonoBehaviour?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.IsInvoking(System.String)">
            <param name="methodName">To be added.</param>
            <summary>Is any invoke on methodName pending?Is any invoke pending on this MonoBehaviour?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.print(System.Object)">
            <param name="message">To be added.</param>
            <summary>Logs message to the Unity Console. This function is identical to Debug.Log.</summary>
            <remarks>See Also: Debug.Log, Debug.LogWarning, Debug.LogError.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)">
            <param name="routine">To be added.</param>
            <summary>Starts a coroutine.Starts a coroutine named methodName.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.String)">
            <param name="methodName">To be added.</param>
            <summary>Starts a coroutine.Starts a coroutine named methodName.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.String,System.Object)">
            <param name="methodName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Starts a coroutine.Starts a coroutine named methodName.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator)">
            <param name="routine">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.StopAllCoroutines">
            <summary>Stops all coroutines running on this behaviour.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MonoBehaviour.StopCoroutine(System.String)">
            <param name="methodName">To be added.</param>
            <summary>Stops all coroutines named methodName running on this behaviour.</summary>
            <remarks>Please note that only StartCoroutine using a string method name can be stopped using StopCoroutine.</remarks>
        </member>
        <member name="P:UnityEngine.MonoBehaviour.useGUILayout">
            <summary>Disabling this lets you skip the GUI layout phase.</summary>
            <value>To be added.</value>
            <remarks>It can only be used if you do not use GUI.Window and GUILayout inside of this OnGUI call.</remarks>
        </member>
        <member name="T:UnityEngine.Motion">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Motion">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.apparentSpeed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.averageAngularSpeed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.averageDuration">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.averageSpeed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.isAnimatorMotion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.isHumanMotion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Motion.isLooping">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Motion.ValidateIfRetargetable(System.Boolean)">
            <param name="showWarning">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.MovieTexture">
            <summary>Movie Textures (Pro only) are textures onto which movies are played back.</summary>
            <remarks>They can be used for cutscene movie sequences, or to render movies into the scene itself.</remarks>
        </member>
        <member name="C:UnityEngine.MovieTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MovieTexture.audioClip">
            <summary>Returns the AudioClip belonging to the MovieTexture.</summary>
            <value>To be added.</value>
            <remarks>Note that this is a special AudioClip which will always play its audio synchronized to the movie. If you attach a Movie's audioClip to a source in the editor, it will start playing automatically when the movie is playing, Otherwise you'll have to start it manually when you start the movie. The clip can only be attached to one single AudioSource. See Also: Play, WWW.movie.</remarks>
        </member>
        <member name="P:UnityEngine.MovieTexture.duration">
            <summary>The time, in seconds, that the movie takes to play back completely.</summary>
            <value>To be added.</value>
            <remarks>Note that duration is only available once the movie has started. Until then duration will return -1. If you need to know the duration of a movie before it is played, consider extracting this information offline and creating a text asset. You can then look up the duration given the movie name.</remarks>
        </member>
        <member name="P:UnityEngine.MovieTexture.isPlaying">
            <summary>Returns whether the movie is playing or not.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.MovieTexture.isReadyToPlay">
            <summary>If the movie is downloading from a web site, this returns if enough data has been downloaded so playback should be able to start without interruptions.</summary>
            <value>To be added.</value>
            <remarks>For movies not associated with a web stream, this value always returns true.</remarks>
        </member>
        <member name="P:UnityEngine.MovieTexture.loop">
            <summary>Set this to true to make the movie loop.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MovieTexture.Pause">
            <summary>Pauses playing the movie.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.MovieTexture.Play">
            <summary>Starts playing the movie.</summary>
            <remarks>Note that a running MovieTexture will use a lot of CPU power, and it will continue running until it is manually stopped or a new level is loaded. Also note that MovieTextures does not behave exactly the same as for example audio clips. When you call the Play() method on a MovieTexture, it is the Asset that will start playing, and not a particular instance of the movie. This means that if you have for example several planes in your scene, all having the same MovieTexture set as their materials texture, when you call Play() on one of them, every instance of the Movie will start playing. MovieTextures are a pro-only feature. See Also: Stop, audioClip.</remarks>
        </member>
        <member name="M:UnityEngine.MovieTexture.Stop">
            <summary>Stops playing the movie, and rewinds it to the beginning.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.MultilineAttribute">
            <summary>Attribute to make a string be edited with a multi-line textfield.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MultilineAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.MultilineAttribute(System.Int32)">
            <param name="lines">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.MultilineAttribute.lines">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NavMesh">
            <summary>Navigation mesh.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.NavMesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.AddOffMeshLinks">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.CalculatePath(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,UnityEngine.NavMeshPath)">
            <summary>Calculate a path between two points and store the resulting path.</summary>
            <returns>True if a path is found.</returns>
            <remarks>This function can be used to plan a path ahead of time to avoid a delay in gameplay when the path is needed. Another use is to check if a target  position is reachable before moving the agent.</remarks>
            <example />
            <param name="sourcePosition">The initial postion of the path requested.</param>
            <param name="targetPosition">The final position of the path requested.</param>
            <param name="passableMask">A mask specifying which NavMesh layers can be passed when calculating a path.</param>
            <param name="path">The resulting path.</param>
        </member>
        <member name="M:UnityEngine.NavMesh.CalculateTriangulation">
            <summary>Triangulation of the current navmesh.</summary>
            <returns>To be added.</returns>
            <remarks>Calculates and returns a simple triangulation of the current navmesh - containing the vertices, triangle indices and navmesh layers.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.FindClosestEdge(UnityEngine.Vector3,UnityEngine.NavMeshHit@,System.Int32)">
            <summary>Locate the closest NavMesh edge from a point on the NavMesh.</summary>
            <returns>True if a nearest edge is found.</returns>
            <remarks>The returned NavMeshHit object contains the position and details of the nearest point on the nearest edge of the navmesh. Since an edge typically corresponds to a wall or other large object, this could be used to make a character take cover as close to the wall as possible.</remarks>
            <example />
            <param name="sourcePosition">The origin of the distance query.</param>
            <param name="hit">Holds the properties of the resulting location.</param>
            <param name="passableMask">A mask specifying which NavMesh layers can be passed when finding the nearest edge.</param>
        </member>
        <member name="M:UnityEngine.NavMesh.GetLayerCost(System.Int32)">
            <param name="layer">To be added.</param>
            <summary>Gets the cost for traversing over geometry of the layer type on all agents.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.GetNavMeshLayerFromName(System.String)">
            <param name="layerName">To be added.</param>
            <summary>Returns the layer index for a named layer.</summary>
            <returns>To be added.</returns>
            <remarks>If the named layer does not exist returns -1.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.NavMeshHit@,System.Int32)">
            <summary>Trace a line between two points on the NavMesh.</summary>
            <returns>True if the ray is terminated before reaching target position. Otherwise returns false.</returns>
            <remarks>This function follows the path of a "ray" between the specified source and target positions on the navmesh. If an obstruction is  encountered along the line then a true value is returned and the position and other details of the obstructing object are stored in the hit parameter. This can be used to check if there is a clear shot or line of sight between a character and a target object. This function is preferable to the similar Physics .Raycast because the line tracing is performed in a simpler way using the navmesh  and has a lower processing overhead.</remarks>
            <example />
            <param name="sourcePosition">The origin of the ray.</param>
            <param name="targetPosition">The end of the ray.</param>
            <param name="hit">Holds the properties of the ray cast resulting location.</param>
            <param name="passableMask">A mask specifying which NavMesh layers can be passed when tracing the ray.</param>
        </member>
        <member name="M:UnityEngine.NavMesh.RestoreNavMesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.SamplePosition(UnityEngine.Vector3,UnityEngine.NavMeshHit@,System.Single,System.Int32)">
            <summary>Sample the NavMesh closest to the point specified.</summary>
            <returns>True if a nearest point is found.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="sourcePosition">The origin of the sample query.</param>
            <param name="hit">Holds the properties of the resulting location.</param>
            <param name="maxDistance">Sample within this distance from sourcePosition.</param>
            <param name="allowedMask">A mask specifying which NavMesh layers are allowed when finding the nearest point.</param>
        </member>
        <member name="M:UnityEngine.NavMesh.SetLayerCost(System.Int32,System.Single)">
            <param name="layer">To be added.</param>
            <param name="cost">To be added.</param>
            <summary>Sets the cost for traversing over geometry of the layer type on all agents.</summary>
            <remarks>This will replace any custom layer costs on all agents.</remarks>
        </member>
        <member name="M:UnityEngine.NavMesh.Triangulate(UnityEngine.Vector3[]@,System.Int32[]@)">
            <param name="vertices">To be added.</param>
            <param name="indices">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NavMeshAgent">
            <summary>Navigation mesh agent.</summary>
            <remarks>This component is attached to a mobile character in the game to allow it to navigate the scene using the NavMesh. See the NavMesh and Pathfinding section of the manual for further details.</remarks>
        </member>
        <member name="C:UnityEngine.NavMeshAgent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.acceleration">
            <summary>The maximum acceleration of an agent as it follows a path, given in units / sec^2.</summary>
            <value>To be added.</value>
            <remarks>An agent does not follow precisely the line segments of the path calculated by the navigation system but rather uses the waypoints along the path as intermediate destinations. This value is the maximum amount by which the agent can accelerate while moving towards the next waypoint.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.ActivateCurrentOffMeshLink(System.Boolean)">
            <summary>Enables or disables the current off-mesh link.</summary>
            <remarks>This function activates or deactivates the off-mesh link where the agent is currently waiting. This is useful for granting access to newly discovered areas of the game world or simulating the creation or removal of an obstacle to an area.</remarks>
            <param name="activated">Is the link activated?</param>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.angularSpeed">
            <summary>Maximum turning speed in (deg/s) while following a path.</summary>
            <value>To be added.</value>
            <remarks>This is the maximum rate at which the agent can turn as it rounds the "corner" defined by a waypoint. The actual turning circle is also influenced by the speed of the agent on approach and also the maximum acceleration. See Also: acceleration, velocity.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.autoBraking">
            <summary>Should the agent brake automatically to avoid overshooting the destination point?</summary>
            <value>To be added.</value>
            <remarks>If the agent needs to land close to the destination point then it will typically need to brake to avoid overshooting or endless "orbiting" around the target zone. If this property is set to true, the agent will brake automatically as it nears the destination.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.autoRepath">
            <summary>Should the agent attempt to acquire a new path if the existing path becomes invalid?</summary>
            <value>To be added.</value>
            <remarks>A new path calculation is also attempted aquired if the agent reaches the end of a partial and stale path.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.autoTraverseOffMeshLink">
            <summary>Should the agent move via OffMeshLinks automatically?</summary>
            <value>To be added.</value>
            <remarks>Off-mesh links are used to connect disjoint regions of the NavMesh. Usually, a character should be able to pass through or traverse a link automatically, which will happen if this property is set to true. However, it can also be set to false in cases where a link represents a door or other obstacle that a character needs "permission" to cross. See Also: CompleteOffMeshLink.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.avoidancePriority">
            <summary>The avoidance priority level.</summary>
            <value>To be added.</value>
            <remarks>When the agent is performing avoidance, agents of lower priority are ignored. The valid range is from 0 to 99 where: Most important = 0. Least important = 99. Default = 50.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.baseOffset">
            <summary>The relative vertical displacement of the owning GameObject.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.CalculatePath(UnityEngine.Vector3,UnityEngine.NavMeshPath)">
            <summary>Calculate a path to a specified point and store the resulting path.</summary>
            <returns>True if a path is found.</returns>
            <remarks>This function can be used to plan a path ahead of time to avoid a delay in gameplay when the path is needed. Another use is to check if a target  position is reachable before moving the agent.</remarks>
            <example />
            <param name="targetPosition">The final position of the path requested.</param>
            <param name="path">The resulting path.</param>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.CompleteOffMeshLink">
            <summary>Follow the current OffMeshLink.</summary>
            <remarks>When the autoTraverseOffMeshLink property is switched off an agent will pause at an off-mesh link until this function is called to let it pass. This can be used to allow characters access selectively (eg, to simulate openable doors or obstacles that only certain characters  can pass, etc).</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.currentOffMeshLinkData">
            <summary>The current OffMeshLinkData.</summary>
            <value>To be added.</value>
            <remarks>In the case that this agent is not on an OffMeshLink the OffMeshLinkData is marked as invalid. See also isOnOffMeshLink</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.desiredVelocity">
            <summary>The desired velocity of the agent including any potential contribution from avoidance. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.destination">
            <summary>Destination point for the agent to navigate towards.</summary>
            <value>To be added.</value>
            <remarks>When the value of this property is set, the effect is much the same as using the SetDestination function - a path will be plotted to the newly set destination and by default, the agent will start to move toward it. The destination point can also be read while the agent is moving.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.FindClosestEdge(UnityEngine.NavMeshHit@)">
            <summary>Locate the closest NavMesh edge.</summary>
            <returns>True if a nearest edge is found.</returns>
            <remarks>The returned NavMeshHit object contains the position and details of the nearest point on the nearest edge of the Navmesh. Since an edge typically corresponds to a wall or other large object, this could be used to make a character take cover as close to the wall as possible.</remarks>
            <example />
            <param name="hit">Holds the properties of the resulting location.</param>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.GetLayerCost(System.Int32)">
            <summary>Gets the cost for crossing ground of a particular type.</summary>
            <returns>Current cost of specified layer.</returns>
            <remarks>The cost of a path is the amount of "difficulty" involved in following it - the shortest path may not be the quickest if it passes over difficult ground, such as mud, snow, etc. Different types of ground are denoted by navmesh layers in Unity. The cost of a particular layer is given in cost units per distance unit. Note that the cost of a path applies to the pathfinding only and does not automatically affect the movement speed of the agent when following the path. Indeed, the path's cost may denote other factors such as danger (safe but long path through a minefield) or visibility (long path that keeps a character in the shadows).</remarks>
            <example />
            <param name="layer">Layer index.</param>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.hasPath">
            <summary>Does the agent currently have a path? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This property will be true if the agent has a path calculated to the desired destination and false otherwise. See Also: pathPending.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.height">
            <summary>The height of the agent for purposes of passing under obstacles, etc.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.isOnOffMeshLink">
            <summary>Is the agent currently positioned on an OffMeshLink? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This property is used when autoTraverseOffMeshLink is false and the script is making its own decision about letting the agent cross the link. See CompleteOffMeshLInk for an example that uses this property to allow only certain agents to cross a link.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.isPathStale">
            <summary>Is the current path stale. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>When true, the path may no longer be valid or optimal. This flag will be set if: there are any changes to the walkableMask, if any OffMeshLink is enabled or disabled, or if the costs for the NavMeshLayers have been changed.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.Move(UnityEngine.Vector3)">
            <summary>Apply relative movement to current position.</summary>
            <remarks>If the agent has a path it will be adjusted.</remarks>
            <param name="offset">The relative movement vector.</param>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.nextOffMeshLinkData">
            <summary>The next OffMeshLinkData on the current path.</summary>
            <value>To be added.</value>
            <remarks>In the case that the current path does not contain an OffMeshLink the OffMeshLinkData is marked as invalid.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.nextPosition">
            <summary>The next position on the path.</summary>
            <value>To be added.</value>
            <remarks>A path consists of waypoints that are aimed for in succession by the agent as it navigates. This property contains the position of the waypoint the agent is currently heading for. When this point is reached, the target will be advanced to the next waypoint, and so on until the agent lands at the destination point.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.obstacleAvoidanceType">
            <summary>The level of quality of avoidance.</summary>
            <value>To be added.</value>
            <remarks>This property lets you trade off the precision of obstacle avoidance againt the processor load required to achieve it. The exact quality/performance values will depend heavily on the complexity of the scene but as a general rule, faster performance can be achieved at the cost of quality and vice versa.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.path">
            <summary>Property to get and set the current path.</summary>
            <value>To be added.</value>
            <remarks>This property can be useful for GUI, debugging and other purposes to get the points of the path calculated by the navigation system. Additionally, a path created from user code can be set for the agent to follow in the usual way. An example of this might be a patrol route designed for coverage rather than optimal distance between two points.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.pathEndPosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.pathPending">
            <summary>Is a path in the process of being computed but not yet ready? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.pathStatus">
            <summary>The status of the current path (complete, partial or invalid).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.radius">
            <summary>The avoidance radius for the agent.</summary>
            <value>To be added.</value>
            <remarks>This is the agent's "personal space" within which obstacles and other agents should not pass.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.Raycast(UnityEngine.Vector3,UnityEngine.NavMeshHit@)">
            <summary>Trace a straight path towards a target postion in the NavMesh without moving the agent.</summary>
            <returns>True if there is an obstacle between the agent and the target position, otherwise false.</returns>
            <remarks>This function follows the path of a "ray" between the agent's position and the specified target position. If an obstruction is  encountered along the line then a true value is returned and the position and other details of the obstructing object are stored in the hit parameter. This can be used to check if there is a clear shot or line of sight between a character and a target object. This function is preferable to the similar Physics .Raycast because the line tracing is performed in a simpler way using the navmesh  and has a lower processing overhead.</remarks>
            <example />
            <param name="targetPosition">The desired end position of movement.</param>
            <param name="hit">Properties of the obstacle detected by the ray (if any).</param>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.remainingDistance">
            <summary>The distance between the agent's position and the destination on the current path. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>If the remaining distance is unknown then this will have a value of infinity.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.ResetPath">
            <summary>Clears the current path.</summary>
            <remarks>When the path is cleared, the agent will not start looking for a new path until SetDestination is called. Note that if the agent is on an OffMeshLink when this function is called, it will complete the link immediately.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.Resume">
            <summary>Resumes the movement along the current path after a pause.</summary>
            <remarks>See Also: Stop.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.SamplePathPosition(System.Int32,System.Single,UnityEngine.NavMeshHit@)">
            <summary>Sample a position along the current path.</summary>
            <returns>True if terminated before reaching the position at maxDistance, false otherwise.</returns>
            <remarks>This function looks ahead a specified distance along the current path. Details of the mesh  at that position are then returned in a NavMeshHit object. This could be used, for example,  to check the type of surface that lies ahead before the character gets there - a character could  raise his gun above his head if he is about to wade through water, say.</remarks>
            <example />
            <param name="passableMask">A mask specifying which NavMesh layers can be passed when tracing the path.</param>
            <param name="maxDistance">Terminate scanning the path at this distance.</param>
            <param name="hit">Holds the properties of the resulting location.</param>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.SetDestination(UnityEngine.Vector3)">
            <summary>Sets or updates the destination thus triggering the calculation for a new path.</summary>
            <returns>To be added.</returns>
            <remarks>Note that the path may not become available until after a few frames later. While the path is being computed, pathPending will be true. If a valid path becomes available then the agent will resume movement.</remarks>
            <param name="target">The target point to navigate to.</param>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.SetLayerCost(System.Int32,System.Single)">
            <summary>Sets the cost for traversing over geometry of the layer type.</summary>
            <remarks>If you enable or disable the agent then the cost will be reset to the default layer cost.</remarks>
            <param name="layer">Layer index.</param>
            <param name="cost">New cost for the specified layer.</param>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.SetPath(UnityEngine.NavMeshPath)">
            <summary>Assign a new path to this agent.</summary>
            <returns>True if the path is succesfully assigned.</returns>
            <remarks>If the path is succesfully assigned the agent will resume movement toward the new target. If the path cannot be assigned the path will be cleared (see ResetPath ).</remarks>
            <example />
            <param name="path">New path to follow.</param>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.speed">
            <summary>Maximum movement speed when following a path.</summary>
            <value>To be added.</value>
            <remarks>An agent will typically need to speed up and slow down as it follows a path (eg, it will slow down to make a tight turn). The speed is often limited by the length of a path segment and the time taken to accelerate and brake, but the speed will not exceed the value set by this property even on a long, straight path. See Also: desiredVelocity.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.steeringTarget">
            <summary>The current steering target - usually the next corner or end point of the current path. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.Stop">
            <summary>Stop movement of this agent along its current path.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.Stop(System.Boolean)">
            <summary>Stop movement of this agent along its current path.</summary>
            <remarks>To be added.</remarks>
            <param name="stopUpdates">If true, the GameObject is stopped immediately and not affected by the avoidance system. If false, the NavMeshAgent controls the deceleration.</param>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.stoppingDistance">
            <summary>Stop within this distance from the target position.</summary>
            <value>To be added.</value>
            <remarks>It is seldom possible to land exactly at the target point, so this property can be used to set an acceptable radius within which the agent should stop. A larger stopping distance will give the agent more room for manoeuvre at the end of the path and might avoid sudden braking, turning or other unconvincing AI behaviour.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.updatePosition">
            <summary>Should the agent update the transform position?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.updateRotation">
            <summary>Should the agent update the transform orientation?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.velocity">
            <summary>The current velocity of the NavMeshAgent component.</summary>
            <value>To be added.</value>
            <remarks>Setting the velocity is not constrained by the maximum acceleration.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshAgent.walkableMask">
            <summary>Specifies which NavMesh layers are passable (bitfield). Changing walkableMask will make the path stale (see isPathStale).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshAgent.Warp(UnityEngine.Vector3)">
            <summary>Warps agent to the provided position.</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if successful, otherwise returns false.</remarks>
            <param name="newPosition">New position to warp the agent to.</param>
        </member>
        <member name="T:UnityEngine.NavMeshHit">
            <summary>Result information for NavMesh queries.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshHit.distance">
            <summary>Distance to the point of hit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshHit.hit">
            <summary>Flag set when hit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshHit.mask">
            <summary>Mask specifying NavMeshLayers at point of hit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshHit.normal">
            <summary>Normal at the point of hit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshHit.position">
            <summary>Position of hit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NavMeshObstacle">
            <summary>An obstacle for NavMeshAgents to avoid.</summary>
            <remarks>A NavMeshObstacle is cylindrical in shape and can move around the surface of the NavMesh with a specified velocity. By default, the obstacle will only affect the agent's avoidance behaviour rather than the pathfinding. This means that the agent will ignore the obstacle when plotting a path but will sidestep around it while moving along the path. If carving is enabled, the obstacle will create a temporary "hole" in the NavMesh. The hole will be recognised by the pathfinding, so paths will be plotted to avoid the obstacle. This means that if, say, an obstacle blocks a narrow gap, the pathfinding will seek an alternative route to the target. Without carving, the agent will head for the gap but won't be able to pass until the obstacle is clear. See Also: NavMeshAgent.</remarks>
        </member>
        <member name="C:UnityEngine.NavMeshObstacle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshObstacle.carving">
            <summary>Should this obstacle make a cut-out in the navmesh.</summary>
            <value>To be added.</value>
            <remarks>When enabled, this changes the navmesh by cutting out a hole. The shape of the hole is based on the bounding volume of the NavMeshObstacle and the navmesh bake settings for radius and height. When the obstacle moves, the carved hole will also move but to reduce CPU overhead the hole is only recalculated when the obstacle is a certain distance from its previous position.- the carvingMoveThreshold property sets this distance.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshObstacle.carvingMoveThreshold">
            <summary>Threshold distance for updating a moving carved hole (when carving is enabled).</summary>
            <value>To be added.</value>
            <remarks>If the NavMeshObstacle has moved a distance shorter than the threshold since last carving then the navmesh will not be updated. See Also: carving.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshObstacle.height">
            <summary>Height of the obstacle's cylinder shape.</summary>
            <value>To be added.</value>
            <remarks>See Also: radius.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshObstacle.radius">
            <summary>Radius of the obstacle's cylinder shape.</summary>
            <value>To be added.</value>
            <remarks>See Also: height.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshObstacle.velocity">
            <summary>Velocity at which the obstacle moves around the NavMesh.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NavMeshPath">
            <summary>A path as calculated by the navigation system.</summary>
            <remarks>The path is represented as a list of waypoints stored in the corners array. These points are not set directly from user scripts but a NavMeshPath with points correctly assigned is returned by the NavMesh.CalculatePath function and the NavMeshAgent.path property.</remarks>
        </member>
        <member name="C:UnityEngine.NavMeshPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshPath.ClearCorners">
            <summary>Erase all corner points from path.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshPath.corners">
            <summary>Corner points of the path. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Also known as "waypoints", the corners define the places along a path where it changes direction (ie, the path consists of a number of straight-line moves between corners).</remarks>
        </member>
        <member name="M:UnityEngine.NavMeshPath.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NavMeshPath.status">
            <summary>Status of the path. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>This reports whether the path reaches to the target, partway to the target or is completely invalid.</remarks>
        </member>
        <member name="T:UnityEngine.NavMeshPathStatus">
            <summary>Status of path.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NavMeshPathStatus.PathComplete">
            <summary>The path terminates at the destination.</summary>
        </member>
        <member name="F:UnityEngine.NavMeshPathStatus.PathInvalid">
            <summary>The path is invalid.</summary>
        </member>
        <member name="F:UnityEngine.NavMeshPathStatus.PathPartial">
            <summary>The path cannot reach the destination.</summary>
        </member>
        <member name="T:UnityEngine.NavMeshTriangulation">
            <summary>Contains data describing a triangulation of a navmesh.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NavMeshTriangulation.indices">
            <summary>Triangle indices for the navmesh triangulation.</summary>
            <remarks>Contains 3 integers for each triangle. These integers refer to the vertices array.</remarks>
        </member>
        <member name="F:UnityEngine.NavMeshTriangulation.layers">
            <summary>NavMeshLayer values for the navmesh triangulation.</summary>
            <remarks>Contains one element for each triangle.</remarks>
        </member>
        <member name="F:UnityEngine.NavMeshTriangulation.vertices">
            <summary>Vertices for the navmesh triangulation.</summary>
            <remarks>Vertices are referenced by the indices.</remarks>
        </member>
        <member name="T:UnityEngine.Network">
            <summary>The network class is at the heart of the network implementation and provides the core functions.</summary>
            <remarks>This class configures the network interface and all the network parameters. You use it to set up a server or connect to one and have a row of helper functions to help you with those tasks.  For more information on what is exposed in the editor see the Network Manger component reference.</remarks>
        </member>
        <member name="C:UnityEngine.Network">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.AllocateViewID">
            <summary>Query for the next available network view ID number and allocate it (reserve).</summary>
            <returns>To be added.</returns>
            <remarks>This number can then be assigned to the network view of an instantiated object. The example below demonstrates a simple method to do this. Note that for this to work there must be a NetworkView attached to the object which has this script and it must have the script as its observed property. There must be a Cube prefab present also with a NetworkView which watches something (like the Transform of the Cube). The cubePrefab variable in the script must be set to that cube prefab. This  is the simplest method of using AllocateViewID intelligently. This get more complicated if there were more than one NetworkView attached to the Cube which is to be instantiated.</remarks>
        </member>
        <member name="M:UnityEngine.Network.CloseConnection(UnityEngine.NetworkPlayer,System.Boolean)">
            <param name="target">To be added.</param>
            <param name="sendDisconnectionNotification">To be added.</param>
            <summary>Close the connection to another system.</summary>
            <remarks>target defines which system to close the connection to. If we are a client the only possible connection to close is the server connection, if we are a server the target player will be kicked off. sendDisconnectionNotification, enables or disables notifications being sent to the other end. If disabled the connection is dropped, if not a disconnect notification is reliably sent to the remote party and there after the connection is dropped.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(System.String)">
            <param name="GUID">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(UnityEngine.HostData)">
            <param name="hostData">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(System.String,System.Int32)">
            <param name="IP">To be added.</param>
            <param name="remotePort">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(System.String,System.String)">
            <param name="GUID">To be added.</param>
            <param name="password">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(System.String[],System.Int32)">
            <param name="IPs">To be added.</param>
            <param name="remotePort">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(UnityEngine.HostData,System.String)">
            <param name="hostData">To be added.</param>
            <param name="password">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(System.String,System.Int32,System.String)">
            <param name="IP">To be added.</param>
            <param name="remotePort">To be added.</param>
            <param name="password">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Connect(System.String[],System.Int32,System.String)">
            <param name="IPs">To be added.</param>
            <param name="remotePort">To be added.</param>
            <param name="password">To be added.</param>
            <summary>Connect to the specified host (ip or domain name) and server port.This function is exactly like Network.Connect but can accept an array of IP addresses.Connect to a server GUID. NAT punchthrough can only be performed this way.Connect to the host represented by a HostData structure returned by the Master Server.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.connections">
            <summary>All connected players.</summary>
            <value>To be added.</value>
            <remarks>On a client this contains only the server.</remarks>
        </member>
        <member name="P:UnityEngine.Network.connectionTesterIP">
            <summary>The IP address of the connection tester used in Network.TestConnection.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.connectionTesterPort">
            <summary>The port of the connection tester used in Network.TestConnection.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Destroy(UnityEngine.GameObject)">
            <param name="gameObject">To be added.</param>
            <summary>Destroy the object associated with this view ID across the network.Destroy the object across the network.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Destroy(UnityEngine.NetworkViewID)">
            <param name="viewID">To be added.</param>
            <summary>Destroy the object associated with this view ID across the network.Destroy the object across the network.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.DestroyPlayerObjects(UnityEngine.NetworkPlayer)">
            <param name="playerID">To be added.</param>
            <summary>Destroy all the objects based on view IDs belonging to this player.</summary>
            <remarks>This should only be called when running as a server. It is, for example, meant to to clean up networked objects left by a disconnected player.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Disconnect">
            <summary>Close all open connections and shuts down the network interface.</summary>
            <remarks>The timeout parameter indicates how much time in milliseconds the network interface gets to signal to others that it is disconnecting. The network state, like security and password, is also reset. Note that if you set the timeout to 0 the network interface will shut down before the disconnect notification can be sent to the remote party. For a client this could mean he cannot reconnect to the server as the server thinks he is still connected (after a certain interval the connection will be detected as dropped).</remarks>
        </member>
        <member name="M:UnityEngine.Network.Disconnect(System.Int32)">
            <param name="timeout">To be added.</param>
            <summary>Close all open connections and shuts down the network interface.</summary>
            <remarks>The timeout parameter indicates how much time in milliseconds the network interface gets to signal to others that it is disconnecting. The network state, like security and password, is also reset. Note that if you set the timeout to 0 the network interface will shut down before the disconnect notification can be sent to the remote party. For a client this could mean he cannot reconnect to the server as the server thinks he is still connected (after a certain interval the connection will be detected as dropped).</remarks>
        </member>
        <member name="M:UnityEngine.Network.GetAveragePing(UnityEngine.NetworkPlayer)">
            <param name="player">To be added.</param>
            <summary>The last average ping time to the given player in milliseconds.</summary>
            <returns>To be added.</returns>
            <remarks>If the player can't be found -1 will be returned. Pings are automatically sent out every couple of seconds.</remarks>
        </member>
        <member name="M:UnityEngine.Network.GetLastPing(UnityEngine.NetworkPlayer)">
            <param name="player">To be added.</param>
            <summary>The last ping time to the given player in milliseconds.</summary>
            <returns>To be added.</returns>
            <remarks>If the player can't be found -1 will be returned. Pings are automatically sent out every couple of seconds.</remarks>
        </member>
        <member name="M:UnityEngine.Network.HavePublicAddress">
            <summary>Check if this machine has a public IP address.</summary>
            <returns>To be added.</returns>
            <remarks>It checks all the network interfaces for IPv4 public addresses and returns true if one address is found.</remarks>
        </member>
        <member name="P:UnityEngine.Network.incomingPassword">
            <summary>Set the password for the server (for incoming connections).</summary>
            <value>To be added.</value>
            <remarks>This must be matched in the Network.Connect routine on the clients. Pass "" to specify no password (this is default).</remarks>
        </member>
        <member name="M:UnityEngine.Network.InitializeSecurity">
            <summary>Initializes security layer.</summary>
            <remarks>You need to call this function on the server before calling Network.InitializeServer. Don't call this function on the client. Once your online game reaches a certain popularity people will try to cheat. You will need to account for this both at the game layer and at the network layer. Unity handles the network layer by providing secure connections if you wish to use them. * Uses AES encryption. Prevents unauthorized reads and blocks replay attacks * Adds CRCs so that data tampering can be detected. * Uses randomized, encrypted SYNCookies to prevent unauthorized logins. * Uses RSA encryption to protect the AES key. Most games will want to use secure connections. However, they add up to 15 bytes per packet and take time to compute so you may wish to limit usage to deployed games only.</remarks>
        </member>
        <member name="M:UnityEngine.Network.InitializeServer(System.Int32,System.Int32)">
            <param name="connections">To be added.</param>
            <param name="listenPort">To be added.</param>
            <summary>Initialize the server.</summary>
            <returns>To be added.</returns>
            <remarks>connections is the number of allowed incoming connections (note that this is generally not the same as the number of players). listenPort is the port number we want to listen to. useNat sets the NAT punchthrough functionality. If you want this server to be able to accept  connections using NAT punchthrough, using the facilitator, set this to true.</remarks>
        </member>
        <member name="M:UnityEngine.Network.InitializeServer(System.Int32,System.Int32,System.Boolean)">
            <param name="connections">To be added.</param>
            <param name="listenPort">To be added.</param>
            <param name="useNat">To be added.</param>
            <summary>Initialize the server.</summary>
            <returns>To be added.</returns>
            <remarks>connections is the number of allowed incoming connections (note that this is generally not the same as the number of players). listenPort is the port number we want to listen to. useNat sets the NAT punchthrough functionality. If you want this server to be able to accept  connections using NAT punchthrough, using the facilitator, set this to true.</remarks>
        </member>
        <member name="M:UnityEngine.Network.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
            <param name="prefab">To be added.</param>
            <param name="position">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="group">To be added.</param>
            <summary>Network instantiate a prefab.</summary>
            <returns>To be added.</returns>
            <remarks>The given prefab will be instanted on all clients in the game. Synchronization is automatically set up so there is no extra work involved. The position, rotation and network group number are given as parameters. Note that in the example below there must be something set to the playerPrefab in the Editor. You can read more about instantiations in the object reference Object.Instantiate. Internally this is a buffered RPC call. You can use Network.RemoveRPCs is with the group number to  remove the call from the buffer. Alternatively you can call Network.RemoveRPCs on the first NetworkViewID in the instantiated prefab. When the instantiation occurs internally the buffered RPC message is linked to the first NetworkView of the prefab which makes this possible.Example of removing an instantiation from the RPC buffer:</remarks>
        </member>
        <member name="P:UnityEngine.Network.isClient">
            <summary>Returns true if your peer type is client.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.isMessageQueueRunning">
            <summary>Enable or disable the processing of network messages.</summary>
            <value>To be added.</value>
            <remarks>If this is disabled no RPC call execution or network view synchronization takes place. The Network level loading page has an example of how to use this function.</remarks>
        </member>
        <member name="P:UnityEngine.Network.isServer">
            <summary>Returns true if your peer type is server.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.logLevel">
            <summary>Set the log level for network messages (default is Off).</summary>
            <value>To be added.</value>
            <remarks>For a description of the different log levels have a look at the NetworkLogLevel enum.</remarks>
        </member>
        <member name="P:UnityEngine.Network.maxConnections">
            <summary>Set the maximum amount of connections/players allowed.</summary>
            <value>To be added.</value>
            <remarks>Setting it to 0 means no new connections can be made but the existing ones stay connected. Setting it to -1 means the maximum connections count is set to the same number of current open connections. In that case, if a players drops then the slot is still open for him. This cannot be set higher than the connection count given in Network.InitializeServer.</remarks>
        </member>
        <member name="P:UnityEngine.Network.minimumAllocatableViewIDs">
            <summary>Get or set the minimum number of ViewID numbers in the ViewID pool given to clients by the server.</summary>
            <value>To be added.</value>
            <remarks>The ViewID pools are given to each player as he connects and are refreshed with new numbers if the player runs out. The server and clients should be in sync regarding this value. Setting  this higher only on the server has the effect that he sends more view ID numbers to clients, than they really want. Setting this higher only on clients means they request more view IDs more often,  for example twice in a row, as the pools received from the server don't contain enough numbers.  The default value is 100. If a game instantiates a lot of new objects over the network on each client, like more than 100 network intantiations per minute, then this value should be set higher.</remarks>
        </member>
        <member name="P:UnityEngine.Network.natFacilitatorIP">
            <summary>The IP address of the NAT punchthrough facilitator.</summary>
            <value>To be added.</value>
            <remarks>Usually this is the same as the Master Server.</remarks>
        </member>
        <member name="P:UnityEngine.Network.natFacilitatorPort">
            <summary>The port of the NAT punchthrough facilitator.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.peerType">
            <summary>The status of the peer type, i.e. if it is disconnected, connecting, server or client.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.player">
            <summary>Get the local NetworkPlayer instance.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.proxyIP">
            <summary>The IP address of the proxy server.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.proxyPassword">
            <summary>Set the proxy server password.</summary>
            <value>To be added.</value>
            <remarks>It is possible to make your own custom proxy server. In that case you  might want to password protect it and then your Unity players must set this value appropriately.</remarks>
        </member>
        <member name="P:UnityEngine.Network.proxyPort">
            <summary>The port of the proxy server.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkPlayer)">
            <param name="playerID">To be added.</param>
            <summary>Remove all RPC functions which belong to this player ID.Remove all RPC functions which belong to this player ID and were sent based on the given group.Remove the RPC function calls accociated with this view ID number.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkViewID)">
            <param name="viewID">To be added.</param>
            <summary>Remove all RPC functions which belong to this player ID.Remove all RPC functions which belong to this player ID and were sent based on the given group.Remove the RPC function calls accociated with this view ID number.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkPlayer,System.Int32)">
            <param name="playerID">To be added.</param>
            <param name="group">To be added.</param>
            <summary>Remove all RPC functions which belong to this player ID.Remove all RPC functions which belong to this player ID and were sent based on the given group.Remove the RPC function calls accociated with this view ID number.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.RemoveRPCsInGroup(System.Int32)">
            <param name="group">To be added.</param>
            <summary>Remove all RPC functions which belong to given group number.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.sendRate">
            <summary>The default send rate of network updates for all Network Views.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.SetLevelPrefix(System.Int32)">
            <param name="prefix">To be added.</param>
            <summary>Set the level prefix which will then be prefixed to all network ViewID numbers.</summary>
            <remarks>This offers protection to prevent old network updates from straying from into a new level from the previous level. This can be set to any number and then incremented with each new level load. This doesn't add overhead to network traffic but just diminishes the pool of network ViewID numbers a little bit. The Network level loading page has an example of how to use this function.</remarks>
        </member>
        <member name="M:UnityEngine.Network.SetReceivingEnabled(UnityEngine.NetworkPlayer,System.Int32,System.Boolean)">
            <param name="player">To be added.</param>
            <param name="group">To be added.</param>
            <param name="enabled">To be added.</param>
            <summary>Enable or disables the reception of messages in a specific group number from a specific player.</summary>
            <remarks>You can use the when you do not want any network messages coming in for processing at the moment, and then enable it later when you are ready. This is useful to stop network messages until a level is loaded, for example.</remarks>
        </member>
        <member name="M:UnityEngine.Network.SetSendingEnabled(System.Int32,System.Boolean)">
            <param name="group">To be added.</param>
            <param name="enabled">To be added.</param>
            <summary>Enables or disables transmission of messages and RPC calls on a specific network group number.Enable or disable transmission of messages and RPC calls based on target network player as well as the network group.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.SetSendingEnabled(UnityEngine.NetworkPlayer,System.Int32,System.Boolean)">
            <param name="player">To be added.</param>
            <param name="group">To be added.</param>
            <param name="enabled">To be added.</param>
            <summary>Enables or disables transmission of messages and RPC calls on a specific network group number.Enable or disable transmission of messages and RPC calls based on target network player as well as the network group.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Network.TestConnection">
            <summary>Test this machines network connection.</summary>
            <returns>To be added.</returns>
            <remarks>Two types of tests are performed depending on if the machine has a public IP address present or if it only has a private address (or addresses). The public IP address test is primarily for when running a server as no tests are needed for clients with public addresses. In order for the public IP test to succeed a server instance must be started. A test server will try to connect to the IP and port of the local server and thus it is shown in the server is connectable. If not then a firewall is most likely blocking the server port. A server instance needs to be running so that the test server has something to connect to. The other test is for checking NAT punchthrough capabilities. This is a valid test for both servers and clients and can be performed without any prior setup. There are 4 types of NAT test results (see ConnectionTesterStatus ):  Full Cone Address Restricted Cone Port restricted Symmetric First two types offer full NAT punchthrough support and can connect to any type. Port restricted type cannot connect to or receive a connection from symmetric type. Symmetric if worst and cannot connect to other symmetric types or port restricted type. The latter two are labelled as offering limited NAT punchthrough support. This function is asynchronous and might not return a valid result right away because the tests needs some time to complete (1-2 seconds). After test completion the test result is only returned when the function is called again,  a full network test is not redone. That way it is safe to poll the function frequently. If another test is desired,  like if the network connection has been altered, then the forceTest parameter should be passed as true. The function returns a ConnectionTesterStatus enum.If you know both server and client NAT types you could use the following function to determine if the client can connect to the server or not.</remarks>
        </member>
        <member name="M:UnityEngine.Network.TestConnection(System.Boolean)">
            <param name="forceTest">To be added.</param>
            <summary>Test this machines network connection.</summary>
            <returns>To be added.</returns>
            <remarks>Two types of tests are performed depending on if the machine has a public IP address present or if it only has a private address (or addresses). The public IP address test is primarily for when running a server as no tests are needed for clients with public addresses. In order for the public IP test to succeed a server instance must be started. A test server will try to connect to the IP and port of the local server and thus it is shown in the server is connectable. If not then a firewall is most likely blocking the server port. A server instance needs to be running so that the test server has something to connect to. The other test is for checking NAT punchthrough capabilities. This is a valid test for both servers and clients and can be performed without any prior setup. There are 4 types of NAT test results (see ConnectionTesterStatus ):  Full Cone Address Restricted Cone Port restricted Symmetric First two types offer full NAT punchthrough support and can connect to any type. Port restricted type cannot connect to or receive a connection from symmetric type. Symmetric if worst and cannot connect to other symmetric types or port restricted type. The latter two are labelled as offering limited NAT punchthrough support. This function is asynchronous and might not return a valid result right away because the tests needs some time to complete (1-2 seconds). After test completion the test result is only returned when the function is called again,  a full network test is not redone. That way it is safe to poll the function frequently. If another test is desired,  like if the network connection has been altered, then the forceTest parameter should be passed as true. The function returns a ConnectionTesterStatus enum.If you know both server and client NAT types you could use the following function to determine if the client can connect to the server or not.</remarks>
        </member>
        <member name="M:UnityEngine.Network.TestConnectionNAT">
            <summary>Test the connecction specifically for NAT punchthrough connectivity.</summary>
            <returns>To be added.</returns>
            <remarks>This is like Network.TestConnection except that a NAT punchthrough test is forced, even through the machine does not have a NAT address (private IP address) but a public address. See Network.TestConnection example code.</remarks>
        </member>
        <member name="M:UnityEngine.Network.TestConnectionNAT(System.Boolean)">
            <param name="forceTest">To be added.</param>
            <summary>Test the connecction specifically for NAT punchthrough connectivity.</summary>
            <returns>To be added.</returns>
            <remarks>This is like Network.TestConnection except that a NAT punchthrough test is forced, even through the machine does not have a NAT address (private IP address) but a public address. See Network.TestConnection example code.</remarks>
        </member>
        <member name="P:UnityEngine.Network.time">
            <summary>Get the current network time (seconds).</summary>
            <value>To be added.</value>
            <remarks>This can, for example, be used to compare with the time returned in NetworkMessageInfo. The example script needs to be attached to an object with a network view and have the network view observe the script. It measures the time it took to send a message which synchronizes the X postion value of the objects transform.</remarks>
        </member>
        <member name="P:UnityEngine.Network.useNat">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Network.useProxy">
            <summary>Indicate if proxy support is needed, in which case traffic is relayed through the proxy server.</summary>
            <value>To be added.</value>
            <remarks>The proxy server is a solution to connectivity problems with servers as well as clients. When a machine has an non NAT punchthrough capable router his connectivity options are limited. A game cannot be hosted as nobody external can connect to him (only clients on the local network can). By using the proxy server the machine can be fully connectable but with the extra cost of having all traffic relayed through another server. A non NAT punchthrough capable client can connect to any server through  the proxy server, as long as the proxy server is set up properly. Unity Technologies does not provide a proxy server for public use, so to use this feature you will need to set up your own proxy server. Of course it is advisable to set up a proxy server with a public IP address and a lot of available bandwidth. When running as a client, just enabling Network.useProxy is all you have to do. Connect to the server as usual with Network.Connect(). All traffic  will be relayed through the proxy server. The servers external IP and internal IP still work as usual. So clients can connect to him directly without the proxy in case they are located on the same network. When running as a server OnServerInitialized(NetworkPlayer) returns a NetworkPlayer structure which indicates what the game servers relayed IP/port is, i.e. what port the proxy server allocated to the game server.  This is the IP/port others can use to connect to. When connecting to the server, the clients don't treat the server any differently than other servers. Technically speaking, they don't need to know at all that the game server is getting help from a proxy server. When using the master server you can no longer only rely on the IP/port he registers for servers when using proxy support. The proxy server IP address and port which the server is using can be placed in the comment field of the data sent to the master server. A client which received host information from the master server can peek into the comment field and find out if he can use an alternative IP/port for that host. IMPORTANT: You should never enable proxy support for both the server and the client connecting to him. Unexpected things are bound to happen.</remarks>
        </member>
        <member name="T:UnityEngine.NetworkConnectionError">
            <summary>Possible status messages returned by Network.Connect and in OnFailedToConnect in case the error was not immediate.</summary>
            <remarks>Also used by the MasterServer in OnFailedToConnectToMasterServer.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.AlreadyConnectedToAnotherServer">
            <summary>Cannot connect to two servers at once. Close the connection before connecting again.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.AlreadyConnectedToServer">
            <summary>We are already connected to this particular server (can happen after fast disconnect/reconnect).</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.ConnectionBanned">
            <summary>We are banned from the system we attempted to connect to (likely temporarily).</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.ConnectionFailed">
            <summary>Connection attempt failed, possibly because of internal connectivity problems.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.CreateSocketOrThreadFailure">
            <summary>Internal error while attempting to initialize network interface. Socket possibly already in use.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.EmptyConnectTarget">
            <summary>No host target given in Connect.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.IncorrectParameters">
            <summary>Incorrect parameters given to Connect function.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.InternalDirectConnectFailed">
            <summary>Client could not connect internally to same network NAT enabled server.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.InvalidPassword">
            <summary>The server is using a password and has refused our connection because we did not set the correct password.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.NATPunchthroughFailed">
            <summary>NAT punchthrough attempt has failed. The cause could be a too restrictive NAT implementation on either endpoints.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.NATTargetConnectionLost">
            <summary>Connection lost while attempting to connect to NAT target.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.NATTargetNotConnected">
            <summary>The NAT target we are trying to connect to is not connected to the facilitator server.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.NoError">
            <summary>No error occurred.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.RSAPublicKeyMismatch">
            <summary>We presented an RSA public key which does not match what the system we connected to is using.</summary>
        </member>
        <member name="F:UnityEngine.NetworkConnectionError.TooManyConnectedPlayers">
            <summary>The server is at full capacity, failed to connect.</summary>
        </member>
        <member name="T:UnityEngine.NetworkDisconnection">
            <summary>The reason a disconnect event occured, like in OnDisconnectedFromServer.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkDisconnection.Disconnected">
            <summary>The connection to the system has been closed.</summary>
        </member>
        <member name="F:UnityEngine.NetworkDisconnection.LostConnection">
            <summary>The connection to the system has been lost, no reliable packets could be delivered.</summary>
        </member>
        <member name="T:UnityEngine.NetworkLogLevel">
            <summary>Describes different levels of log information the network layer supports.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkLogLevel.Full">
            <summary>Full debug level logging down to each individual message being reported.</summary>
        </member>
        <member name="F:UnityEngine.NetworkLogLevel.Informational">
            <summary>Report informational messages like connectivity events.</summary>
        </member>
        <member name="F:UnityEngine.NetworkLogLevel.Off">
            <summary>Only report errors, otherwise silent.</summary>
        </member>
        <member name="T:UnityEngine.NetworkMessageInfo">
            <summary>This data structure contains information on a message just received from the network.</summary>
            <remarks>It reveals where it came from, what time it was send and what network view sent it.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkMessageInfo.networkView">
            <summary>The NetworkView who sent this message.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkMessageInfo.sender">
            <summary>The player who sent this network message (owner).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkMessageInfo.timestamp">
            <summary>The time stamp when the Message was sent in seconds.</summary>
            <value>To be added.</value>
            <remarks>Timestamps can be used to implement interpolation or extrapolation of continous streams of packets The timestamp is passed as a double to avoid overflow when a game is running for a long time. Internally timestamps are sent as 32 bit integers with millisecond accuracy to save bandwidth. Timestamps are automatically adjusted to be relative to Network.time. Thus Network.time - messageInfo.timeStamp is the time the packet spent in transit.</remarks>
        </member>
        <member name="T:UnityEngine.NetworkPeerType">
            <summary>Describes the status of the network interface peer type as returned by Network.peerType.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkPeerType.Client">
            <summary>Running as client.</summary>
        </member>
        <member name="F:UnityEngine.NetworkPeerType.Connecting">
            <summary>Attempting to connect to a server.</summary>
        </member>
        <member name="F:UnityEngine.NetworkPeerType.Disconnected">
            <summary>No client connection running. Server not initialized.</summary>
        </member>
        <member name="F:UnityEngine.NetworkPeerType.Server">
            <summary>Running as server.</summary>
        </member>
        <member name="T:UnityEngine.NetworkPlayer">
            <summary>The NetworkPlayer is a data structure with which you can locate another player over the network.</summary>
            <remarks>With this you can, for example, send a message directly to another player.</remarks>
        </member>
        <member name="C:UnityEngine.NetworkPlayer(System.String,System.Int32)">
            <param name="ip">To be added.</param>
            <param name="port">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkPlayer.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkPlayer.externalIP">
            <summary>Returns the external IP address of the network interface.</summary>
            <value>To be added.</value>
            <remarks>This will only be populated after some external connection has been made.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkPlayer.externalPort">
            <summary>Returns the external port of the network interface.</summary>
            <value>To be added.</value>
            <remarks>This will only be populated after some external connection has been made.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkPlayer.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkPlayer.guid">
            <summary>The GUID for this player, used when connecting with NAT punchthrough.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkPlayer.ipAddress">
            <summary>The IP address of this player.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkPlayer.op_Equality(UnityEngine.NetworkPlayer,UnityEngine.NetworkPlayer)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkPlayer.op_Inequality(UnityEngine.NetworkPlayer,UnityEngine.NetworkPlayer)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkPlayer.port">
            <summary>The port of this player.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkPlayer.ToString">
            <summary>Returns the index number for this network player.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NetworkReachability">
            <summary>Describes network reachability options.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkReachability.NotReachable">
            <summary>Network is not reachable.</summary>
        </member>
        <member name="F:UnityEngine.NetworkReachability.ReachableViaCarrierDataNetwork">
            <summary>Network is reachable via carrier data network.</summary>
        </member>
        <member name="F:UnityEngine.NetworkReachability.ReachableViaLocalAreaNetwork">
            <summary>Network is reachable via WiFi or cable.</summary>
        </member>
        <member name="T:UnityEngine.NetworkStateSynchronization">
            <summary>Different types of synchronization for the NetworkView component.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkStateSynchronization.Off">
            <summary>No state data will be synchronized.</summary>
        </member>
        <member name="F:UnityEngine.NetworkStateSynchronization.ReliableDeltaCompressed">
            <summary>All packets are sent reliable and ordered.</summary>
            <remarks>Delta compression is used to send only the difference between the last sent state and the current state. For example if you synchronize a Transform. Scale x, y, z is most likely going to keep the same value. Unity compares the state received by the client to the new state, if it is changed 1 bit and the data will be sent. If it didn't change only a single bit will be sent. When Unity detects that nothing has changed since the last state, no data will be sent at all.</remarks>
        </member>
        <member name="F:UnityEngine.NetworkStateSynchronization.Unreliable">
            <summary>Brute force unreliable state sending.</summary>
        </member>
        <member name="T:UnityEngine.NetworkView">
            <summary>The network view is the binding material of multiplayer games.</summary>
            <remarks>With this you can define exactly what is to be synchronized over the network and how it should be done. GameObjects can have NetworkView components which can be configured to watch other components for the object.  For more information see the Network View manual page and the component reference page.</remarks>
        </member>
        <member name="C:UnityEngine.NetworkView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkView.Find(UnityEngine.NetworkViewID)">
            <param name="viewID">To be added.</param>
            <summary>Find a network view based on a NetworkViewID.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkView.group">
            <summary>The network group number of this network view.</summary>
            <value>To be added.</value>
            <remarks>All network messages and RPC calls go through this group number.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkView.isMine">
            <summary>Is the network view controlled by this object?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkView.observed">
            <summary>The component the network view is observing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkView.owner">
            <summary>The NetworkPlayer who owns this network view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkView.RPC(System.String,UnityEngine.NetworkPlayer,System.Object[])">
            <param name="name">To be added.</param>
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Call a RPC function on all connected peers.Call a RPC function on a specific player.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkView.RPC(System.String,UnityEngine.RPCMode,System.Object[])">
            <param name="name">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Call a RPC function on all connected peers.Call a RPC function on a specific player.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkView.SetScope(UnityEngine.NetworkPlayer,System.Boolean)">
            <param name="player">To be added.</param>
            <param name="relevancy">To be added.</param>
            <summary>Set the scope of the network view in relation to a specific network player.</summary>
            <returns>To be added.</returns>
            <remarks>This can be used to implement relevant sets. Either set it to true or false depending on if you want the player to receive updates from the network view or not.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkView.stateSynchronization">
            <summary>The type of NetworkStateSynchronization set for this network view.</summary>
            <value>To be added.</value>
            <remarks>It is your repsonsibility to ensure that NetworkView's across all machines use the same reliability method. Do not change state reliability on the fly after state synchronization has already happened.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkView.viewID">
            <summary>The ViewID of this network view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NetworkViewID">
            <summary>The NetworkViewID is a unique identifier for a network view instance in a multiplayer game.</summary>
            <remarks>It is imporatant that this is a unique number accross all clients and that they can generate these numbers themselves, or else network synchronization will break.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkViewID.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkViewID.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkViewID.isMine">
            <summary>True if instantiated by me.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkViewID.op_Equality(UnityEngine.NetworkViewID,UnityEngine.NetworkViewID)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkViewID.op_Inequality(UnityEngine.NetworkViewID,UnityEngine.NetworkViewID)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkViewID.owner">
            <summary>The NetworkPlayer who owns the NetworkView. Could be the server.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NetworkViewID.ToString">
            <summary>Returns a formatted string with details on this NetworkViewID.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NetworkViewID.unassigned">
            <summary>Represents an invalid network view ID.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NotConvertedAttribute">
            <summary>Instructs the build pipeline not to convert a type or member to the target platform.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.NotConvertedAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NotFlashValidatedAttribute">
            <summary>Instructs the build pipeline not to try and validate a type or member for the flash platform.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.NotFlashValidatedAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NotificationServices">
            <summary>NotificationServices is only available on iPhoneiPadiPod Touch.</summary>
            <remarks>It is used for scheduling, registering and handling notifications.</remarks>
        </member>
        <member name="C:UnityEngine.NotificationServices">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.CancelAllLocalNotifications">
            <summary>Cancels the delivery of all scheduled local notifications.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.CancelLocalNotification(UnityEngine.LocalNotification)">
            <param name="notification">To be added.</param>
            <summary>Cancels the delivery of the specified scheduled local notification.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.ClearLocalNotifications">
            <summary>Discards of all received local notifications.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.ClearRemoteNotifications">
            <summary>Discards of all received remote notifications.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.deviceToken">
            <summary>Device token received from Apple Push Service after calling NotificationServices.RegisterForRemoteNotificationTypes. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.enabledRemoteNotificationTypes">
            <summary>The types of notifications the application accepts.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.GetLocalNotification(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns an object representing a specific local notification. (Read Only)</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.GetRemoteNotification(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns an object representing a specific remote notification. (Read Only)</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.localNotificationCount">
            <summary>The number of received local notifications. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.localNotifications">
            <summary>The list of objects representing received local notifications. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.PresentLocalNotificationNow(UnityEngine.LocalNotification)">
            <param name="notification">To be added.</param>
            <summary>Presents a local notification immediately.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.RegisterForRemoteNotificationTypes(UnityEngine.RemoteNotificationType)">
            <param name="notificationTypes">To be added.</param>
            <summary>Register to receive remote notifications of the specified types from a provider via Apple Push Service.</summary>
            <remarks>After an application registers for the specified remote notification types,  the device token is received from Apple Push Service and is available via NotificationServices.deviceToken.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.registrationError">
            <summary>Returns an error that might occur on registration for remote notifications via NotificationServices.RegisterForRemoteNotificationTypes. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.remoteNotificationCount">
            <summary>The number of received remote notifications. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.remoteNotifications">
            <summary>The list of objects representing received remote notifications. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.NotificationServices.scheduledLocalNotifications">
            <summary>All currently scheduled local notifications.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.ScheduleLocalNotification(UnityEngine.LocalNotification)">
            <param name="notification">To be added.</param>
            <summary>Schedules a local notification.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.NotificationServices.UnregisterForRemoteNotifications">
            <summary>Unregister for remote notifications.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NotRenamedAttribute">
            <summary>Prevent name mangling of constructors, methods, fields and properties.</summary>
            <remarks>When applied to a type prevents all its members of being renamed. It can be used to provide stable member names for access from handwritten ActionScript code or to provide .net stubs for ActionScript types when combined with NotConvertedAttribute :</remarks>
        </member>
        <member name="C:UnityEngine.NotRenamedAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.NPOTSupport">
            <summary>NPOT textures support.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.NPOTSupport.Full">
            <summary>Full NPOT support.</summary>
        </member>
        <member name="F:UnityEngine.NPOTSupport.None">
            <summary>NPOT textures are not supported. Will be upscaled/padded at loading time.</summary>
        </member>
        <member name="F:UnityEngine.NPOTSupport.Restricted">
            <summary>Limited NPOT support: no mip-maps and clamp wrap mode will be forced.</summary>
            <remarks>If NPOT Texture do have mip-maps it will be upscaled/padded at loading time.</remarks>
        </member>
        <member name="T:UnityEngine.Object">
            <summary>Base class for all objects Unity can reference.</summary>
            <remarks>Any public variable you make that derives from Object gets shown in the inspector as a drop target,  allowing you to set the value from the GUI.</remarks>
        </member>
        <member name="C:UnityEngine.Object">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.Destroy(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>Removes a gameobject, component or asset.</summary>
            <remarks>The object obj will be destroyed now or if a time is specified t seconds from now. If obj is a Component it will remove the component from the GameObject and destroy it. If obj is a GameObject it will destroy the GameObject, all its components and all transform children of the GameObject. Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.Destroy is inherited from the UnityEngine.Object base class. Javascript users should consider making a call to UnityEngine.Object.Destroy, rather than Object.Destroy to avoid references being resolved to the .Net System.Object class.</remarks>
        </member>
        <member name="M:UnityEngine.Object.Destroy(UnityEngine.Object,System.Single)">
            <param name="obj">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Removes a gameobject, component or asset.</summary>
            <remarks>The object obj will be destroyed now or if a time is specified t seconds from now. If obj is a Component it will remove the component from the GameObject and destroy it. If obj is a GameObject it will destroy the GameObject, all its components and all transform children of the GameObject. Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.Destroy is inherited from the UnityEngine.Object base class. Javascript users should consider making a call to UnityEngine.Object.Destroy, rather than Object.Destroy to avoid references being resolved to the .Net System.Object class.</remarks>
        </member>
        <member name="M:UnityEngine.Object.DestroyImmediate(UnityEngine.Object)">
            <summary>Destroys the object obj immediately. You are strongly recommended to use Destroy instead.</summary>
            <remarks>This function should only be used when writing editor code since the delayed destruction will never be invoked in edit mode. In game code you should use Object.Destroy instead. Destroy is always delayed (but executed within the same frame). Use this function with care since it can destroy assets permanently! Also note that you should never iterate through arrays and destroy the elements you are iterating over. This will cause serious problems (as a general programming practice, not just in Unity).</remarks>
            <param name="obj">Object to be destroyed.</param>
        </member>
        <member name="M:UnityEngine.Object.DestroyImmediate(UnityEngine.Object,System.Boolean)">
            <summary>Destroys the object obj immediately. You are strongly recommended to use Destroy instead.</summary>
            <remarks>This function should only be used when writing editor code since the delayed destruction will never be invoked in edit mode. In game code you should use Object.Destroy instead. Destroy is always delayed (but executed within the same frame). Use this function with care since it can destroy assets permanently! Also note that you should never iterate through arrays and destroy the elements you are iterating over. This will cause serious problems (as a general programming practice, not just in Unity).</remarks>
            <param name="obj">Object to be destroyed.</param>
            <param name="allowDestroyingAssets">Set to true to allow assets to be destoyed.</param>
        </member>
        <member name="M:UnityEngine.Object.DestroyObject(UnityEngine.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.DestroyObject(UnityEngine.Object,System.Single)">
            <param name="obj">To be added.</param>
            <param name="t">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object)">
            <param name="target">To be added.</param>
            <summary>Makes the object target not be destroyed automatically when loading a new scene.</summary>
            <remarks>When loading a new level all objects in the scene are destroyed, then the objects in the new level are loaded. In order to preserve an object during level loading call DontDestroyOnLoad on it. If the object is a component or GameObject then its entire transform hierarchy will not be destroyed either.</remarks>
        </member>
        <member name="M:UnityEngine.Object.Equals(System.Object)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindObjectOfType(System.Type)">
            <param name="type">To be added.</param>
            <summary>Returns the first active loaded object of Type type.</summary>
            <returns>To be added.</returns>
            <remarks>Please note that this function is very slow. It is not recommended to use this function every frame. In most cases you can use the singleton pattern instead. See Also: Object.FindObjectsOfType.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindObjectOfType``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindObjectsOfType(System.Type)">
            <param name="type">To be added.</param>
            <summary>Returns a list of all active loaded objects of Type type.</summary>
            <returns>To be added.</returns>
            <remarks>It will return no assets (meshes, textures, prefabs, ...) or inactive objects. Please note that this function is very slow. It is not recommended to use this function every frame. In most cases you can use the singleton pattern instead.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindObjectsOfType``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindObjectsOfTypeAll(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.FindSceneObjectsOfType(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.GetInstanceID">
            <summary>Returns the instance id of the object.</summary>
            <returns>To be added.</returns>
            <remarks>The instance id of an object is always guaranteed to be unique.</remarks>
        </member>
        <member name="P:UnityEngine.Object.hideFlags">
            <summary>Should the object be hidden, saved with the scene or modifiable by the user?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object)">
            <summary>Clones the object original and returns the clone.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="original">An existing object that you want to make a copy of.</param>
        </member>
        <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>Clones the object original and returns the clone.Generic version. See the Generic Functions page for more details.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="original">An existing object that you want to make a copy of.</param>
            <param name="position">Position for the new object.</param>
            <param name="rotation">Orientation of the new object.</param>
        </member>
        <member name="P:UnityEngine.Object.name">
            <summary>The name of the object.</summary>
            <value>To be added.</value>
            <remarks>Components share the same name with the GameObject and all attached components.</remarks>
        </member>
        <member name="M:UnityEngine.Object.op_Equality(UnityEngine.Object,UnityEngine.Object)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.op_Implicit(UnityEngine.Object)~System.Boolean">
            <param name="exists">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.op_Inequality(UnityEngine.Object,UnityEngine.Object)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Object.ToString">
            <summary>Returns the name of the GameObject.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ObstacleAvoidanceType">
            <summary>Level of obstacle avoidance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ObstacleAvoidanceType.GoodQualityObstacleAvoidance">
            <summary>Good avoidance. High performance impact.</summary>
        </member>
        <member name="F:UnityEngine.ObstacleAvoidanceType.HighQualityObstacleAvoidance">
            <summary>Enable highest precision. Highest performance impact.</summary>
        </member>
        <member name="F:UnityEngine.ObstacleAvoidanceType.LowQualityObstacleAvoidance">
            <summary>Enable simple avoidance. Low performance impact.</summary>
        </member>
        <member name="F:UnityEngine.ObstacleAvoidanceType.MedQualityObstacleAvoidance">
            <summary>Medium avoidance. Medium performance impact.</summary>
        </member>
        <member name="F:UnityEngine.ObstacleAvoidanceType.NoObstacleAvoidance">
            <summary>Disable avoidance.</summary>
        </member>
        <member name="T:UnityEngine.OcclusionArea">
            <summary>OcclusionArea is an area in which occlusion culling is performed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.OcclusionArea">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OcclusionArea.center">
            <summary>Center of the occlusion area relative to the transform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OcclusionArea.size">
            <summary>Size that the occlusion area will have.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.OcclusionPortal">
            <summary>The portal for dynamically changing occlusion at runtime.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.OcclusionPortal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OcclusionPortal.open">
            <summary>Gets / sets the portal's open state.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.OffMeshLink">
            <summary>Link allowing movement outside the planar navigation mesh.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.OffMeshLink">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.activated">
            <summary>Is link active.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.autoUpdatePositions">
            <summary>Automatically update endpoints.</summary>
            <value>To be added.</value>
            <remarks>The OffMeshLink component will try to match endpoint transforms specified by startTransform and endTransform. See also UpdatePositions.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.biDirectional">
            <summary>Can link be traversed in both directions.</summary>
            <value>To be added.</value>
            <remarks>When false the link can only be traversed from start to end.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.costOverride">
            <summary>Modify pathfinding cost for the link.</summary>
            <value>To be added.</value>
            <remarks>When the costOverride value is non-negative the cost of moving over the OffMeshLink is equivalent to the costOverride value times the Euclidean distance between OffMeshLink end points.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.endTransform">
            <summary>The transform representing link end position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.navMeshLayer">
            <summary>NavMeshLayer for this OffMeshLink component.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.occupied">
            <summary>Is link occupied. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLink.startTransform">
            <summary>The transform representing link start position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.OffMeshLink.UpdatePositions">
            <summary>Explicitly update the link endpoints.</summary>
            <remarks>Updates the OffMeshLink endpoints to match the transforms specified by the start and end transforms.</remarks>
        </member>
        <member name="T:UnityEngine.OffMeshLinkData">
            <summary>State of OffMeshLink.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLinkData.activated">
            <summary>Is link active (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLinkData.endPos">
            <summary>Link end world position (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLinkData.linkType">
            <summary>Link type specifier (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLinkData.offMeshLink">
            <summary>The OffMeshLink if the link type is a manually placed Offmeshlink (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Automatically generated Jump and drop links will return null.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLinkData.startPos">
            <summary>Link start world position (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.OffMeshLinkData.valid">
            <summary>Is link valid (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.OffMeshLinkType">
            <summary>Link type specifier.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.OffMeshLinkType.LinkTypeDropDown">
            <summary>Vertical drop.</summary>
        </member>
        <member name="F:UnityEngine.OffMeshLinkType.LinkTypeJumpAcross">
            <summary>Horizontal jump.</summary>
        </member>
        <member name="F:UnityEngine.OffMeshLinkType.LinkTypeManual">
            <summary>Manually specified type of link.</summary>
        </member>
        <member name="T:UnityEngine.Particle">
            <summary>(Legacy Particle system).</summary>
            <remarks>See Also: ParticleEmitter, Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.angularVelocity">
            <summary>The angular velocity of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is particle's angular velocity in degrees per second. See Also: Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.color">
            <summary>The color of the particle.</summary>
            <value>To be added.</value>
            <remarks>Alpha channel of the color is used to fade out particles. See Also: Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.energy">
            <summary>The energy of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is the time in seconds for how long this particle will remain alive. When the energy drops below zero the the Particle will be killed. The energy is also used for UV animation: If energy equals Particle.startEnergy the first tile will be used. If energy equals 0 the last tile will be used. See Also: Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.position">
            <summary>The position of the particle.</summary>
            <value>To be added.</value>
            <remarks>See Also: Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.rotation">
            <summary>The rotation of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is particle's rotation in degrees. See Also: Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.size">
            <summary>The size of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is particle's size in meters in world space. See Also: Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.startEnergy">
            <summary>The starting energy of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is the total lifetime of this particle in seconds. It is set by the particle emitter, when creating the particle. This is used to calculate the color and UV animation for the particle. See Also: Particle.energy Particles documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Particle.velocity">
            <summary>The velocity of the particle.</summary>
            <value>To be added.</value>
            <remarks>If there is a particle animator it will move the particle by the velocity every frame. The velocity is also used by the particle renderer if Stretch Particles is set to ParticleRenderMode.Stretch. See Also: Particles documentation.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleAnimator">
            <summary>(Legacy Particles) Particle animators move your particles over time, you use them to apply wind, drag &amp;amp; color cycling to your particle emitters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ParticleAnimator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.autodestruct">
            <summary>Does the GameObject of this particle animator auto destructs?</summary>
            <value>To be added.</value>
            <remarks>When set to true, the GameObject will be destroyed when all particles disappear.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.colorAnimation">
            <summary>Colors the particles will cycle through over their lifetime.</summary>
            <value>To be added.</value>
            <remarks>Currently you cannot directly modify a single index of this array. Instead, you need to grab the entire array, modify it, and assign it back to the Particle Animator.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.damping">
            <summary>How much particles are slowed down every frame.</summary>
            <value>To be added.</value>
            <remarks>A value of 1 gives no damping, while smaller values makes them slow down.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.doesAnimateColor">
            <summary>Do particles cycle their color over their lifetime?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.force">
            <summary>The force being applied to particles every frame.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.localRotationAxis">
            <summary>Local space axis the particles rotate around.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.rndForce">
            <summary>A random force added to particles every frame.</summary>
            <value>To be added.</value>
            <remarks>Use this to make smoke become more alive.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.sizeGrow">
            <summary>How the particle sizes grow over their lifetime.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleAnimator.worldRotationAxis">
            <summary>World space axis the particles rotate around.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleEmitter">
            <summary>(Legacy Particles) Script interface for particle emitters.</summary>
            <remarks>See Also: Particles documentation.</remarks>
        </member>
        <member name="C:UnityEngine.ParticleEmitter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.angularVelocity">
            <summary>The angular velocity of new particles in degrees per second.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleEmitter.ClearParticles">
            <summary>Removes all particles from the particle emitter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.emit">
            <summary>Emit a number of particles.Emit count particles immediately.Emit a single particle with given parameters.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleEmitter.Emit">
            <summary>Emit a number of particles.Emit count particles immediately.Emit a single particle with given parameters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleEmitter.Emit(System.Int32)">
            <param name="count">To be added.</param>
            <summary>Emit a number of particles.Emit count particles immediately.Emit a single particle with given parameters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleEmitter.Emit(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color)">
            <summary>Emit a number of particles.Emit count particles immediately.Emit a single particle with given parameters.</summary>
            <remarks>To be added.</remarks>
            <param name="pos">The position of the particle.</param>
            <param name="velocity">The velocity of the particle.</param>
            <param name="size">The size of the particle.</param>
            <param name="energy">The remaining lifetime of the particle.</param>
            <param name="color">The color of the particle.</param>
        </member>
        <member name="M:UnityEngine.ParticleEmitter.Emit(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>Emit a number of particles.Emit count particles immediately.Emit a single particle with given parameters.</summary>
            <remarks>To be added.</remarks>
            <param name="pos">The position of the particle.</param>
            <param name="velocity">The velocity of the particle.</param>
            <param name="size">The size of the particle.</param>
            <param name="energy">The remaining lifetime of the particle.</param>
            <param name="color">The color of the particle.</param>
            <param name="rotation">The initial rotation of the particle in degrees.</param>
            <param name="angularVelocity">The angular velocity of the particle in degrees per second.</param>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.emitterVelocityScale">
            <summary>The amount of the emitter's speed that the particles inherit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.enabled">
            <summary>Turns the ParticleEmitter on or off.</summary>
            <value>To be added.</value>
            <remarks>A ParticleEmitter which is not enabled will not emit any particles, and the emitted particles will not animate. So, this value allows you to pause a particle emitter. The default value is true.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.localVelocity">
            <summary>The starting speed of particles along X, Y, and Z, measured in the object's orientation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.maxEmission">
            <summary>The maximum number of particles that will be spawned every second.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.maxEnergy">
            <summary>The maximum lifetime of each particle, measured in seconds.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.maxSize">
            <summary>The maximum size each particle can be at the time when it is spawned.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.minEmission">
            <summary>The minimum number of particles that will be spawned every second.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.minEnergy">
            <summary>The minimum lifetime of each particle, measured in seconds.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.minSize">
            <summary>The minimum size each particle can be at the time when it is spawned.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.particleCount">
            <summary>The current number of particles (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.particles">
            <summary>Returns a copy of all particles and assigns an array of all particles to be the current particles.</summary>
            <value>To be added.</value>
            <remarks>Note that after modifying the particles array you must assign it back to the particleEmitter to see the change. Particles with energy of zero or less will be killed when assigning the particles. Thus when creating a complete new particle array, you need to set the energy of all particles explicitly.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.rndAngularVelocity">
            <summary>A random angular velocity modifier for new particles.</summary>
            <value>To be added.</value>
            <remarks>A random value in the range of [-rndAngularVelocity, rndAngularVelocity] will be applied to all new particles, in addition to ParticleEmitter.angularVelocity See Also: angularVelocity.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.rndRotation">
            <summary>If enabled, the particles will be spawned with random rotations.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.rndVelocity">
            <summary>A random speed along X, Y, and Z that is added to the velocity.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleEmitter.Simulate(System.Single)">
            <param name="deltaTime">To be added.</param>
            <summary>Advance particle simulation by given time.</summary>
            <remarks>This is useful for pre-warming particle emitters.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.useWorldSpace">
            <summary>If enabled, the particles don't move when the emitter moves. If false, when you move the emitter, the particles follow it around.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleEmitter.worldVelocity">
            <summary>The starting speed of particles in world space, along X, Y, and Z.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleRenderer">
            <summary>(Legacy Particles) Renders particles on to the screen.</summary>
            <remarks>This class is a script interface for a particle renderer component.</remarks>
        </member>
        <member name="C:UnityEngine.ParticleRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.animatedTextureCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.cameraVelocityScale">
            <summary>How much are the particles strected depending on the Camera's speed.</summary>
            <value>To be added.</value>
            <remarks>Use this to make particles become large if the viewing camera has a large speed.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.heightCurve">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.lengthScale">
            <summary>How much are the particles stretched in their direction of motion.</summary>
            <value>To be added.</value>
            <remarks>Use this to make particles always be longer than they are wide.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.maxParticleSize">
            <summary>Clamp the maximum particle size.</summary>
            <value>To be added.</value>
            <remarks>Particles can become very heavy on fillrate. Use this setting to make sure they don't use too much perfomance when up close to the viewer.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.maxPartileSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.particleRenderMode">
            <summary>How particles are drawn.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.rotationCurve">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.uvAnimationCycles">
            <summary>Set uv animation cycles.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.uvAnimationXTile">
            <summary>Set horizontal tiling count.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.uvAnimationYTile">
            <summary>Set vertical tiling count.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.uvTiles">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.velocityScale">
            <summary>How much are the particles strectched depending on "how fast they move".</summary>
            <value>To be added.</value>
            <remarks>Use this to make particles get longer as their speed increases.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleRenderer.widthCurve">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleRenderMode">
            <summary>The rendering mode for legacy particles.</summary>
            <remarks>This is used by the ParticleRenderer to determine how to render the particles.</remarks>
        </member>
        <member name="F:UnityEngine.ParticleRenderMode.Billboard">
            <summary>Render the particles as billboards facing the player. (Default)</summary>
        </member>
        <member name="F:UnityEngine.ParticleRenderMode.HorizontalBillboard">
            <summary>Render the particles as billboards always facing up along the y-Axis.</summary>
        </member>
        <member name="F:UnityEngine.ParticleRenderMode.SortedBillboard">
            <summary>Sort the particles back-to-front and render as billboards.</summary>
            <remarks>This looks better with blended particle shaders, but is slower because of the sorting.</remarks>
        </member>
        <member name="F:UnityEngine.ParticleRenderMode.Stretch">
            <summary>Stretch particles in the direction of motion.</summary>
        </member>
        <member name="F:UnityEngine.ParticleRenderMode.VerticalBillboard">
            <summary>Render the particles as billboards always facing the player, but not pitching along the x-Axis.</summary>
        </member>
        <member name="T:UnityEngine.ParticleSystem">
            <summary>Script interface for particle systems (Shuriken).</summary>
            <remarks>See Also: ParticleSystem.Particle.</remarks>
        </member>
        <member name="C:UnityEngine.ParticleSystem">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Clear">
            <summary>Remove all particles in the particle system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Clear(System.Boolean)">
            <summary>Remove all particles in the particle system.</summary>
            <remarks>To be added.</remarks>
            <param name="withChildren">Clear all child particle systems as well.</param>
        </member>
        <member name="P:UnityEngine.ParticleSystem.duration">
            <summary>The duration of the particle system in seconds (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.emissionRate">
            <summary>The rate of emission.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Emit(System.Int32)">
            <param name="count">To be added.</param>
            <summary>Emit count particles immediately.Emit a single particle with given parameters.Emit a single particle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Emit(UnityEngine.ParticleSystem+Particle)">
            <param name="particle">To be added.</param>
            <summary>Emit count particles immediately.Emit a single particle with given parameters.Emit a single particle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Emit(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color32)">
            <summary>Emit count particles immediately.Emit a single particle with given parameters.Emit a single particle.</summary>
            <remarks>To be added.</remarks>
            <param name="position">The position of the particle.</param>
            <param name="velocity">The velocity of the particle.</param>
            <param name="size">The size of the particle.</param>
            <param name="lifetime">The remaining lifetime of the particle.</param>
            <param name="color">The color of the particle.</param>
        </member>
        <member name="P:UnityEngine.ParticleSystem.enableEmission">
            <summary>When set to false, the particle system will not emit particles.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.GetCollisionEvents(UnityEngine.GameObject,UnityEngine.ParticleSystem+CollisionEvent[])">
            <summary>Get the particle collision events for a GameObject. Returns the number of events written to the array.</summary>
            <returns>To be added.</returns>
            <remarks>This method is typically called from MonoBehaviour.OnParticleCollision in response to a collision callback. If the array used is too short events may be truncated. To avoid this use ParticleSystem.safeCollisionEventSize to determine an appropriate array size prior the call. See Also: MonoBehaviour.OnParticleCollision.</remarks>
            <param name="go">The GameObject for which to retrieve collision events.</param>
            <param name="collisionEvents">Array to write collision events to.</param>
        </member>
        <member name="M:UnityEngine.ParticleSystem.GetParticles(UnityEngine.ParticleSystem+Particle[])">
            <param name="particles">To be added.</param>
            <summary>Get the particles of this particle system. Returns the number of particles written to the input particle array.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SetParticles.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.gravityModifier">
            <summary>Scale being applied to the gravity defined by Physics.gravity.</summary>
            <value>To be added.</value>
            <remarks>See Also: Physics.gravity.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.IsAlive">
            <summary>Does the system have any live particles (or will produce more)?</summary>
            <returns>True if the particle system is still "alive", false if the particle system is done emitting particles and all particles are dead.</returns>
            <remarks>To be added.</remarks>
            <example>// Auto destruct script that can be added to the root particle system  // of a particle effect. It will destroy the gameobject and its children.   using UnityEngine; public class AutoDestructParticleSystem : MonoBehaviour  {  void LateUpdate ()   {   if (!particleSystem.IsAlive())   Object.Destroy (this.gameObject);   }  }</example>
        </member>
        <member name="M:UnityEngine.ParticleSystem.IsAlive(System.Boolean)">
            <summary>Does the system have any live particles (or will produce more)?</summary>
            <returns>True if the particle system is still "alive", false if the particle system is done emitting particles and all particles are dead.</returns>
            <remarks>To be added.</remarks>
            <example>// Auto destruct script that can be added to the root particle system  // of a particle effect. It will destroy the gameobject and its children.   using UnityEngine; public class AutoDestructParticleSystem : MonoBehaviour  {  void LateUpdate ()   {   if (!particleSystem.IsAlive())   Object.Destroy (this.gameObject);   }  }</example>
            <param name="withChildren">Check all child particle systems as well.</param>
        </member>
        <member name="P:UnityEngine.ParticleSystem.isPaused">
            <summary>Is the particle system paused right now ?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.isPlaying">
            <summary>Is the particle system playing right now ?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.isStopped">
            <summary>Is the particle system stopped right now ?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.loop">
            <summary>Is the particle system looping?</summary>
            <value>To be added.</value>
            <remarks>If you disable looping on a playing particle system, it will stop after the end of the current loop.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.maxParticles">
            <summary>The maximum number of particles to emit.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.particleCount">
            <summary>The current number of particles (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Pause">
            <summary>Pauses playing the particle system.</summary>
            <remarks>See Also: Play, Stop functions.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
            <summary>Pauses playing the particle system.</summary>
            <remarks>See Also: Play, Stop functions.</remarks>
            <param name="withChildren">Pause all child particle systems as well.</param>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Play">
            <summary>Plays the particle system.</summary>
            <remarks>See Also: Stop, Pause functions.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
            <summary>Plays the particle system.</summary>
            <remarks>See Also: Stop, Pause functions.</remarks>
            <param name="withChildren">Play all child particle systems as well.</param>
        </member>
        <member name="P:UnityEngine.ParticleSystem.playbackSpeed">
            <summary>The playback speed of the particle system. 1 is normal playback speed.</summary>
            <value>To be added.</value>
            <remarks>A negative playback speed is not supported.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.playOnAwake">
            <summary>If set to true, the particle system will automatically start playing on startup.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.randomSeed">
            <summary>Random seed used for the particle system emission. If set to 0, it will be assigned a random value on awake.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.safeCollisionEventSize">
            <summary>Safe array size for use with ParticleSystem.GetCollisionEvents.</summary>
            <value>To be added.</value>
            <remarks>This is guaranteed to be large enough to use with ParticleSystem.GetCollisionEvents for the current frame. GetCollisionEvents may return fewer elements for some GameObjects though.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.SetParticles(UnityEngine.ParticleSystem+Particle[],System.Int32)">
            <param name="particles">To be added.</param>
            <param name="size">To be added.</param>
            <summary>Set the particles of this particle system. size is the number of particles that is set.</summary>
            <remarks>Setting the lifetime of a particle to a negative value will result in Shuriken removing the particle. See Also: GetParticles.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single)">
            <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
            <remarks>See Also: Play, Pause functions.</remarks>
            <param name="t">Time to fastforward the particle system.</param>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean)">
            <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
            <remarks>See Also: Play, Pause functions.</remarks>
            <param name="t">Time to fastforward the particle system.</param>
            <param name="withChildren">Fastforward all child particle systems as well.</param>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean,System.Boolean)">
            <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
            <remarks>See Also: Play, Pause functions.</remarks>
            <param name="t">Time to fastforward the particle system.</param>
            <param name="withChildren">Fastforward all child particle systems as well.</param>
            <param name="restart">Restart and start from the beginning.</param>
        </member>
        <member name="P:UnityEngine.ParticleSystem.simulationSpace">
            <summary>This selects the space in which to simulate particles. It can be either world or local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.startColor">
            <summary>The initial color of particles when emitted.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.startDelay">
            <summary>Start delay in seconds.</summary>
            <value>To be added.</value>
            <remarks>Use this to delay when the playback starts on the system.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.startLifetime">
            <summary>The total lifetime in seconds that particles will have when emitted. When using curves, this values acts as a scale on the curve. This value is set in the particle when it is create by the particle system.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.startRotation">
            <summary>The initial rotation of particles when emitted. When using curves, this values acts as a scale on the curve.</summary>
            <value>To be added.</value>
            <remarks>Note that the value should be given in radians.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.startSize">
            <summary>The initial size of particles when emitted. When using curves, this values acts as a scale on the curve.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem.startSpeed">
            <summary>The initial speed of particles when emitted. When using curves, this values acts as a scale on the curve.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Stop">
            <summary>Stops playing the particle system.</summary>
            <remarks>See Also: Play, Pause functions.</remarks>
        </member>
        <member name="M:UnityEngine.ParticleSystem.Stop(System.Boolean)">
            <summary>Stops playing the particle system.</summary>
            <remarks>See Also: Play, Pause functions.</remarks>
            <param name="withChildren">Stop all child particle systems as well.</param>
        </member>
        <member name="P:UnityEngine.ParticleSystem.time">
            <summary>Playback position in seconds.</summary>
            <value>To be added.</value>
            <remarks>Use this to read current playback time or to seek to a new playback time.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleSystem+CollisionEvent">
            <summary>Information about a particle collision.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+CollisionEvent.collider">
            <summary>The Collider for the GameObject struck by the particles.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+CollisionEvent.intersection">
            <summary>Intersection point of the collision in world coordinates.</summary>
            <value>To be added.</value>
            <remarks>The intersection point is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+CollisionEvent.normal">
            <summary>Geometry normal at the intersection point of the collision.</summary>
            <value>To be added.</value>
            <remarks>The normal is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+CollisionEvent.velocity">
            <summary>Incident velocity at the intersection point of the collision.</summary>
            <value>To be added.</value>
            <remarks>The velocity is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleSystem+Particle">
            <summary>Script interface for a Particle.</summary>
            <remarks>See Also: ParticleSystem, ParticleSystem.GetParticles, ParticleSystem.SetParticles.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.angularVelocity">
            <summary>The angular velocity of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is particle's angular velocity in degrees per second.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.axisOfRotation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.color">
            <summary>The initial color of the particle. The current color of the particle is calculated procedurally based on this value and the active color modules.</summary>
            <value>To be added.</value>
            <remarks>Alpha channel of the color is used to fade out particles.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.lifetime">
            <summary>The lifetime of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is the time in seconds for how long this particle will remain alive. When the lifetime drops below zero the Particle will be killed.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.position">
            <summary>The position of the particle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.randomSeed">
            <summary>The random seed of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is used to create the value used to interpolate between the two curves when random between curves is used.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.randomValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.rotation">
            <summary>The rotation of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is particle's rotation in degrees.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.size">
            <summary>The initial size of the particle. The current size of the particle is calculated procedurally based on this value and the active size modules.</summary>
            <value>To be added.</value>
            <remarks>This is particle's size in meters in world space.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.startLifetime">
            <summary>The starting lifetime of the particle.</summary>
            <value>To be added.</value>
            <remarks>This is the total lifetime of this particle in seconds. It is set by the particle system when creating the particle.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystem+Particle.velocity">
            <summary>The velocity of the particle.</summary>
            <value>To be added.</value>
            <remarks>The particle will move by the velocity every frame. The velocity is also used by the ParticleSystemRenderer if Stretch Particles is set to ParticleSystemRenderMode.Stretch.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleSystemRenderer">
            <summary>Renders particles on to the screen (Shuriken).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ParticleSystemRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystemRenderer.cameraVelocityScale">
            <summary>How much are the particles strected depending on the Camera's speed.</summary>
            <value>To be added.</value>
            <remarks>Use this to make particles become large if the viewing camera has a large speed.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystemRenderer.lengthScale">
            <summary>How much are the particles stretched in their direction of motion.</summary>
            <value>To be added.</value>
            <remarks>Use this to make particles always be longer than they are wide.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystemRenderer.maxParticleSize">
            <summary>Clamp the maximum particle size.</summary>
            <value>To be added.</value>
            <remarks>Particles can become very heavy on fillrate. Use this setting to make sure they don't  use too much perfomance when up close to the viewer.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystemRenderer.mesh">
            <summary>Mesh used as particle instead of billboarded texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystemRenderer.renderMode">
            <summary>How particles are drawn.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ParticleSystemRenderer.velocityScale">
            <summary>How much are the particles strectched depending on "how fast they move".</summary>
            <value>To be added.</value>
            <remarks>Use this to make particles get longer as their speed increases.</remarks>
        </member>
        <member name="T:UnityEngine.ParticleSystemRenderMode">
            <summary>The rendering mode for particle systems (Shuriken).</summary>
            <remarks>This is used by the ParticleSystemRenderer to determine how to render the particles.</remarks>
        </member>
        <member name="F:UnityEngine.ParticleSystemRenderMode.Billboard">
            <summary>Render particles as billboards facing the player. (Default)</summary>
        </member>
        <member name="F:UnityEngine.ParticleSystemRenderMode.HorizontalBillboard">
            <summary>Render particles as billboards always facing up along the y-Axis.</summary>
        </member>
        <member name="F:UnityEngine.ParticleSystemRenderMode.Mesh">
            <summary>Render particles as meshes.</summary>
        </member>
        <member name="F:UnityEngine.ParticleSystemRenderMode.Stretch">
            <summary>Stretch particles in the direction of motion.</summary>
        </member>
        <member name="F:UnityEngine.ParticleSystemRenderMode.VerticalBillboard">
            <summary>Render particles as billboards always facing the player, but not pitching along the x-Axis.</summary>
        </member>
        <member name="T:UnityEngine.ParticleSystemSimulationSpace">
            <summary>The space to simulate particles in.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ParticleSystemSimulationSpace.Local">
            <summary>Simulate particles in local space.</summary>
        </member>
        <member name="F:UnityEngine.ParticleSystemSimulationSpace.World">
            <summary>Simulate particles in world space.</summary>
        </member>
        <member name="T:UnityEngine.PhysicMaterial">
            <summary>Physics material describes how to handle colliding objects (friction, bounciness).</summary>
            <remarks>See Also: Collider.</remarks>
        </member>
        <member name="C:UnityEngine.PhysicMaterial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.PhysicMaterial(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.bounceCombine">
            <summary>Determines how the bounciness is combined.</summary>
            <value>To be added.</value>
            <remarks>Traditionally bounciness properties are dependent on the combination of the two materials in contact. This is however impractical in a game. Instead you can use the combine mode to tune how the bounciness values of two materials are combined.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.bounciness">
            <summary>How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.bouncyness">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.dynamicFriction">
            <summary>The friction used when already moving. This value has to be between 0 and 1.</summary>
            <value>To be added.</value>
            <remarks>A value of 0 feels like ice, 1 feels like rubber.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.dynamicFriction2">
            <summary>If anisotropic friction is enabled, dynamicFriction2 will be applied along frictionDirection2.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.frictionCombine">
            <summary>Determines how the friction is combined.</summary>
            <value>To be added.</value>
            <remarks>Traditionally friction properties are dependent on the combination of the two materials in contact. This is however impractical in a game. Instead you can use the combine mode to tune how the friction values of two materials are combined.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.frictionDirection">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.frictionDirection2">
            <summary>The direction of anisotropy. Anisotropic friction is enabled if the vector is not zero.</summary>
            <value>To be added.</value>
            <remarks>DynamicFriction2 and staticFriction2 will be applied along frictionDirection2. The direction of anisotropy is relative to the colliders local coordinate system.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.staticFriction">
            <summary>The friction coefficient used when an object is lying on a surface.</summary>
            <value>To be added.</value>
            <remarks>Must be &gt;= 0. Natural materials will usually have a friction coefficient between 0 (no friction at all, like slippy ice) and 1 (full friction, like rubber). Values larger then 1 are possible, and may be realistic for sticky materials.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicMaterial.staticFriction2">
            <summary>If anisotropic friction is enabled, staticFriction2 will be applied along frictionDirection2.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.PhysicMaterialCombine">
            <summary>Describes how physic materials of colliding objects are combined.</summary>
            <remarks>See Also: PhysicMaterial.frictionCombine, PhysicMaterial.bounceCombine.</remarks>
        </member>
        <member name="F:UnityEngine.PhysicMaterialCombine.Average">
            <summary>Averages the friction/bounce of the two colliding materials.</summary>
        </member>
        <member name="F:UnityEngine.PhysicMaterialCombine.Maximum">
            <summary>Uses the larger friction/bounce of the two colliding materials.</summary>
        </member>
        <member name="F:UnityEngine.PhysicMaterialCombine.Minimum">
            <summary>Uses the smaller friction/bounce of the two colliding materials.</summary>
        </member>
        <member name="F:UnityEngine.PhysicMaterialCombine.Multiply">
            <summary>Multiplies the friction/bounce of the two colliding materials.</summary>
        </member>
        <member name="T:UnityEngine.Physics">
            <summary>Global physics properties and helper methods.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Physics">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Physics.AllLayers">
            <summary>Layer mask constant to select all layers.</summary>
            <remarks>This can be used in the layermask field of Physics.Raycast and other methods to select all layers. See Also: Physics.DefaultLayers, Physics.IgnoreRaycastLayer.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.bounceThreshold">
            <summary>Two colliding objects with a relative velocity below this will not bounce (default 2). Must be positive.</summary>
            <value>To be added.</value>
            <remarks>This value is usually changed in Edit-&gt;Project Settings-&gt;Physics inspector instead of from scripts.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.bounceTreshold">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Note: If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a CapsuleCast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCastAll, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Note: If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a CapsuleCast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCastAll, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
            <summary>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Note: If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a CapsuleCast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCastAll, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Note: If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a CapsuleCast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCastAll, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
            <summary>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Note: If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a CapsuleCast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCastAll, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32)">
            <summary>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Note: If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a CapsuleCast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCastAll, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>Like Physics.CapsuleCast, but this function will return all hits the capsule sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>Casts a capsule against all colliders in the scene and returns detailed information on each collider which was hit. The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned all colliders which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Notes: The capsule cast does not work against colliders configured as triggers. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a capsule cast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCast, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>Like Physics.CapsuleCast, but this function will return all hits the capsule sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>Casts a capsule against all colliders in the scene and returns detailed information on each collider which was hit. The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned all colliders which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Notes: The capsule cast does not work against colliders configured as triggers. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a capsule cast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCast, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.CapsuleCastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Int32)">
            <param name="layermask">To be added.</param>
            <summary>Like Physics.CapsuleCast, but this function will return all hits the capsule sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>Casts a capsule against all colliders in the scene and returns detailed information on each collider which was hit. The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule. Hits are returned all colliders which would collide against this capsule if the capsule was moved along direction. This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size, such as a character, will be able to move somewhere without colliding with anything on the way. Notes: The capsule cast does not work against colliders configured as triggers. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a capsule cast will hit the collider at it's new position. See Also: Physics.SphereCast, Physics.CapsuleCast, Physics.Raycast, Rigidbody.SweepTest.</remarks>
            <example />
            <param name="point1">The start of the capsule.</param>
            <param name="point2">The end of the capsule.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="direction">The direction into which to sweep the capsule.</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.CheckCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Returns true if there are any colliders overlapping the capsule defined by the axis going from start and end and having radius in world coordinates.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.CheckCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="layermask">To be added.</param>
            <summary>Returns true if there are any colliders overlapping the capsule defined by the axis going from start and end and having radius in world coordinates.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.CheckSphere(UnityEngine.Vector3,System.Single)">
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Returns true if there are any colliders overlapping the sphere defined by position and radius in world coordinates.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.CheckSphere(UnityEngine.Vector3,System.Single,System.Int32)">
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="layerMask">To be added.</param>
            <summary>Returns true if there are any colliders overlapping the sphere defined by position and radius in world coordinates.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Physics.DefaultRaycastLayers">
            <summary>Layer mask constant to select default raycast layers.</summary>
            <remarks>This can be used in the layermask field of Physics.Raycast and other methods to select the default raycast layers. The default layers are all layers execpt for the ignore raycast layer. See Also: Physics.AllLayers, Physics.IgnoreRaycastLayer.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.GetIgnoreLayerCollision(System.Int32,System.Int32)">
            <param name="layer1">To be added.</param>
            <param name="layer2">To be added.</param>
            <summary>Are collisions between layer1 and layer2 being ignored?</summary>
            <returns>To be added.</returns>
            <remarks>Returns the value set by Physics.IgnoreLayerCollision or in the Physics inspector.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.gravity">
            <summary>The gravity applied to all rigid bodies in the scene.</summary>
            <value>To be added.</value>
            <remarks>Gravity can be turned off for an individual rigidbody using its useGravity property.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.IgnoreCollision(UnityEngine.Collider,UnityEngine.Collider)">
            <param name="collider1">To be added.</param>
            <param name="collider2">To be added.</param>
            <summary>Makes the collision detection system ignore all collisions between collider1 and collider2.</summary>
            <remarks>This is most useful for making eg. projectiles not collide with the object shooting them. IgnoreCollision has a few limitations: 1) It is not persistent. This means ignore collision state will not be stored in the editor when saving a scene. 2) You can only apply the ignore collision to colliders in active GameObjects. When deactivating the collider or attached rigidbody the IgnoreCollision state will be lost and you have to call Physics.IgnoreCollision again. See Also: Physics.IgnoreLayerCollision.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.IgnoreCollision(UnityEngine.Collider,UnityEngine.Collider,System.Boolean)">
            <param name="collider1">To be added.</param>
            <param name="collider2">To be added.</param>
            <param name="ignore">To be added.</param>
            <summary>Makes the collision detection system ignore all collisions between collider1 and collider2.</summary>
            <remarks>This is most useful for making eg. projectiles not collide with the object shooting them. IgnoreCollision has a few limitations: 1) It is not persistent. This means ignore collision state will not be stored in the editor when saving a scene. 2) You can only apply the ignore collision to colliders in active GameObjects. When deactivating the collider or attached rigidbody the IgnoreCollision state will be lost and you have to call Physics.IgnoreCollision again. See Also: Physics.IgnoreLayerCollision.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.IgnoreLayerCollision(System.Int32,System.Int32)">
            <param name="layer1">To be added.</param>
            <param name="layer2">To be added.</param>
            <summary>Makes the collision detection system ignore all collisions between any collider in layer1 and any collider in layer2.</summary>
            <remarks>You can set the default values for your project for any layer combinations in the Physics inspector. See Also: Physics.GetIgnoreLayerCollision, Physics.IgnoreCollision.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.IgnoreLayerCollision(System.Int32,System.Int32,System.Boolean)">
            <param name="layer1">To be added.</param>
            <param name="layer2">To be added.</param>
            <param name="ignore">To be added.</param>
            <summary>Makes the collision detection system ignore all collisions between any collider in layer1 and any collider in layer2.</summary>
            <remarks>You can set the default values for your project for any layer combinations in the Physics inspector. See Also: Physics.GetIgnoreLayerCollision, Physics.IgnoreCollision.</remarks>
        </member>
        <member name="F:UnityEngine.Physics.IgnoreRaycastLayer">
            <summary>Layer mask constant to select ignore raycast layer.</summary>
            <remarks>This can be used in the layermask field of Physics.Raycast and other methods to select the "ignore raycast" layer (which does not receive raycasts by default). See Also: Physics.AllLayers, Physics.DefaultLayers.</remarks>
        </member>
        <member name="F:UnityEngine.Physics.kAllLayers">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Physics.kDefaultRaycastLayers">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Physics.kIgnoreRaycastLayer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <summary>Returns true if there is any collider intersecting the line between start and end.Returns true if there is any collider intersecting the line between start and end.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="layerMask">To be added.</param>
            <summary>Returns true if there is any collider intersecting the line between start and end.Returns true if there is any collider intersecting the line between start and end.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="hitInfo">To be added.</param>
            <summary>Returns true if there is any collider intersecting the line between start and end.Returns true if there is any collider intersecting the line between start and end.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Int32)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="hitInfo">To be added.</param>
            <param name="layerMask">To be added.</param>
            <summary>Returns true if there is any collider intersecting the line between start and end.Returns true if there is any collider intersecting the line between start and end.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.maxAngularVelocity">
            <summary>The default maximum angular velocity permitted for any rigid bodies (default 7). Must be positive.</summary>
            <value>To be added.</value>
            <remarks>The angular velocity of rigidbodies is clamped to maxAngularVelocity to avoid numerical instability with fast rotating bodies. Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody using Rigidbody.maxAngularVelocity. This value is usually changed in Edit-&gt;Project Settings-&gt;Physics inspector instead of from scripts.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.minPenetrationForPenalty">
            <summary>The minimum contact penetration value in order to apply a penalty force (default 0.05). Must be positive.</summary>
            <value>To be added.</value>
            <remarks>This value is usually changed in Edit-&gt;Project Settings-&gt;Physics inspector instead of from scripts.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.OverlapSphere(UnityEngine.Vector3,System.Single)">
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <summary>Returns an array with all colliders touching or inside the sphere.</summary>
            <returns>To be added.</returns>
            <remarks>NOTE: Currently this only checks against the bounding volumes of the colliders not against the actual colliders.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.OverlapSphere(UnityEngine.Vector3,System.Single,System.Int32)">
            <param name="position">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="layerMask">To be added.</param>
            <summary>Returns an array with all colliders touching or inside the sphere.</summary>
            <returns>To be added.</returns>
            <remarks>NOTE: Currently this only checks against the bounding volumes of the colliders not against the actual colliders.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.penetrationPenaltyForce">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,System.Single)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The starting point of the ray in world coordinates.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,System.Single,System.Int32)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The starting point of the ray in world coordinates.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The starting point of the ray in world coordinates.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single,System.Int32)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the ray.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The starting point of the ray in world coordinates.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The starting point of the ray in world coordinates.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32)">
            <summary>Casts a ray against all colliders in the scene.Casts a ray against all colliders in the scene and returns detailed information on what was hit.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.Same as above using /ray.origin/ and /ray.direction/ instead of origin and direction.</summary>
            <returns>True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false. True when the ray intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The starting point of the ray in world coordinates.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the ray.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a ray.</param>
        </member>
        <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Ray)">
            <param name="ray">To be added.</param>
            <summary>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</summary>
            <returns>To be added.</returns>
            <remarks>Notes: This function will return false if you cast a ray from inside a sphere to the outside; this in an intended behaviour. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a Raycast will hit the collider at it's new position.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Ray,System.Single)">
            <param name="ray">To be added.</param>
            <param name="distance">To be added.</param>
            <summary>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</summary>
            <returns>To be added.</returns>
            <remarks>Notes: This function will return false if you cast a ray from inside a sphere to the outside; this in an intended behaviour. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a Raycast will hit the collider at it's new position.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="origin">To be added.</param>
            <param name="direction">To be added.</param>
            <summary>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</summary>
            <returns>To be added.</returns>
            <remarks>Notes: This function will return false if you cast a ray from inside a sphere to the outside; this in an intended behaviour. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a Raycast will hit the collider at it's new position.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Ray,System.Single,System.Int32)">
            <param name="ray">To be added.</param>
            <param name="distance">To be added.</param>
            <param name="layerMask">To be added.</param>
            <summary>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</summary>
            <returns>To be added.</returns>
            <remarks>Notes: This function will return false if you cast a ray from inside a sphere to the outside; this in an intended behaviour. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a Raycast will hit the collider at it's new position.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="origin">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="distance">To be added.</param>
            <summary>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</summary>
            <returns>To be added.</returns>
            <remarks>Notes: This function will return false if you cast a ray from inside a sphere to the outside; this in an intended behaviour. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a Raycast will hit the collider at it's new position.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
            <param name="origin">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="distance">To be added.</param>
            <param name="layermask">To be added.</param>
            <summary>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</summary>
            <returns>To be added.</returns>
            <remarks>Notes: This function will return false if you cast a ray from inside a sphere to the outside; this in an intended behaviour. If you move colliders from scripting or by animation, there needs to be at least one FixedUpdate executed so that the physics library can update it's data structures, before a Raycast will hit the collider at it's new position.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.sleepAngularVelocity">
            <summary>The default angular velocity, below which objects start sleeping (default 0.14). Must be positive.</summary>
            <value>To be added.</value>
            <remarks>See Rigidbody Sleeping for more information. This can be overridden per rigidbody using Rigidbody.sleepAngularVelocity. This value is usually changed in Edit-&gt;Project Settings-&gt;Physics inspector instead of from scripts.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.sleepVelocity">
            <summary>The default linear velocity, below which objects start going to sleep (default 0.15). Must be positive.</summary>
            <value>To be added.</value>
            <remarks>See Rigidbody Sleeping for more information. This value can be overridden per rigidbody using Rigidbody.sleepVelocity. This value is usually changed in Edit-&gt;Project Settings-&gt;Physics inspector instead of from scripts.</remarks>
        </member>
        <member name="P:UnityEngine.Physics.solverIterationCount">
            <summary>The default solver iteration count permitted for any rigid bodies (default 7). Must be positive.</summary>
            <value>To be added.</value>
            <remarks>The solverIterationCount determines how accurately joints and contacts are resolved.  If you are having trouble with connected bodies oscillating and behaving erratically setting  a higher solver iteration count may improve their stability (but is slower). Usually a value of 7 works very well for almost all situations. This value is usually changed in Edit-&gt;Project Settings-&gt;Physics inspector instead of from scripts.</remarks>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,System.Single)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,System.Single,System.Int32)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@,System.Single)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The center of the sphere at the start of the sweep.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The direction into which to sweep the sphere.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@,System.Single,System.Int32)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The center of the sphere at the start of the sweep.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The direction into which to sweep the sphere.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32)">
            <summary>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</summary>
            <returns>True when the capsule sweep intersects any collider, otherwise false. True when the capsule sweep intersects any collider, otherwise false.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The center of the sphere at the start of the sweep.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The direction into which to sweep the sphere.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Ray,System.Single)">
            <summary>Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Ray,System.Single,System.Single)">
            <summary>Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The center of the sphere at the start of the sweep.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The direction into which to sweep the sphere.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Ray,System.Single,System.Single,System.Int32)">
            <summary>Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The center of the sphere at the start of the sweep.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The direction into which to sweep the sphere.</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.</summary>
            <returns>An array of all colliders hit in the sweep.</returns>
            <remarks>To be added.</remarks>
            <example />
            <param name="origin">The center of the sphere at the start of the sweep.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The direction into which to sweep the sphere.</param>
            <param name="distance">The length of the sweep.</param>
            <param name="layerMask">A Layer mask that is used to selectively ignore colliders when casting a capsule.</param>
        </member>
        <member name="T:UnityEngine.Physics2D">
            <summary>Global settings and helpers for 2D physics.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Physics2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Physics2D.AllLayers">
            <summary>Layer mask constant that includes all layers.</summary>
            <remarks>See Also: DefaultRaycastLayers, IgnoreRaycastLayer.</remarks>
        </member>
        <member name="F:UnityEngine.Physics2D.DefaultRaycastLayers">
            <summary>Layer mask constant that includes all layers participating in raycasts by default.</summary>
            <remarks>The value of the mask is the bitwise complement of the IgnoreRaycastLayer mask. See Also: Raycast, IgnoreRaycastLayer, AllLayers.</remarks>
        </member>
        <member name="M:UnityEngine.Physics2D.GetIgnoreLayerCollision(System.Int32,System.Int32)">
            <summary>Should collisions between the specified layers be ignored?</summary>
            <returns>To be added.</returns>
            <remarks>See Also: ::IgnoreLayerCollision.</remarks>
            <param name="layer1">ID of first layer.</param>
            <param name="layer2">ID of second layer.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray)">
            <summary>Cast a 3D ray against the colliders in the scene returning the first collider along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. Note that this function will allocate memory for the returned RaycastHit2D object. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally that this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray,System.Single)">
            <summary>Cast a 3D ray against the colliders in the scene returning the first collider along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. Note that this function will allocate memory for the returned RaycastHit2D object. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally that this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray,System.Single,System.Int32)">
            <summary>Cast a 3D ray against the colliders in the scene returning the first collider along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. Note that this function will allocate memory for the returned RaycastHit2D object. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally that this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray)">
            <summary>Cast a 3D ray against the colliders in the scene returning all the colliders along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray,System.Single)">
            <summary>Cast a 3D ray against the colliders in the scene returning all the colliders along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray,System.Single,System.Int32)">
            <summary>Cast a 3D ray against the colliders in the scene returning all the colliders along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[])">
            <summary>Cast a 3D ray against the colliders in the scene returning the colliders along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. This function is similar to the GetRayIntersectionAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the ray (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when such calls are performed frequently. The colliders will be placed in the returned array in order of distance from the start of the ray. Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="results">Array to receive results.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[],System.Single)">
            <summary>Cast a 3D ray against the colliders in the scene returning the colliders along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. This function is similar to the GetRayIntersectionAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the ray (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when such calls are performed frequently. The colliders will be placed in the returned array in order of distance from the start of the ray. Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="results">Array to receive results.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[],System.Single,System.Int32)">
            <summary>Cast a 3D ray against the colliders in the scene returning the colliders along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>This is useful for finding colliders intersecting an arbitrary 3D ray. This function is similar to the GetRayIntersectionAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the ray (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when such calls are performed frequently. The colliders will be placed in the returned array in order of distance from the start of the ray. Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently. Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</remarks>
            <param name="ray">The 3D ray defining origin and direction to test.</param>
            <param name="results">Array to receive results.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect colliders only on certain layers.</param>
        </member>
        <member name="P:UnityEngine.Physics2D.gravity">
            <summary>Acceleration due to gravity.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Physics2D.IgnoreLayerCollision(System.Int32,System.Int32)">
            <summary>Choose whether to detect or ignore collisions between a specified pair of layers.</summary>
            <remarks>See Also: GetIgnoreLayerCollision.</remarks>
            <param name="layer1">ID of the first layer.</param>
            <param name="layer2">ID of the second layer.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.IgnoreLayerCollision(System.Int32,System.Int32,System.Boolean)">
            <summary>Choose whether to detect or ignore collisions between a specified pair of layers.</summary>
            <remarks>See Also: GetIgnoreLayerCollision.</remarks>
            <param name="layer1">ID of the first layer.</param>
            <param name="layer2">ID of the second layer.</param>
            <param name="ignore">Should collisions between these layers be ignored?</param>
        </member>
        <member name="F:UnityEngine.Physics2D.IgnoreRaycastLayer">
            <summary>Layer mask constant for the default layer that ignores raycasts.</summary>
            <remarks>The value of the mask is the bitwise complement of the DefaultRaycastLayers mask. See Also: Raycast, DefaultRaycastLayers, AllLayers.</remarks>
        </member>
        <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and directtion. This function returns a RaycastHit2D object when the line contacts a Collider in the scene. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). The direction of the line is assumed to extend from the start point to the end point. Only the first collider encountered in that direction will be reported. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D object. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, LinecastAll, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and directtion. This function returns a RaycastHit2D object when the line contacts a Collider in the scene. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). The direction of the line is assumed to extend from the start point to the end point. Only the first collider encountered in that direction will be reported. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D object. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, LinecastAll, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and directtion. This function returns a RaycastHit2D object when the line contacts a Collider in the scene. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). The direction of the line is assumed to extend from the start point to the end point. Only the first collider encountered in that direction will be reported. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D object. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, LinecastAll, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and directtion. This function returns a RaycastHit2D object when the line contacts a Collider in the scene. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). The direction of the line is assumed to extend from the start point to the end point. Only the first collider encountered in that direction will be reported. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D object. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, LinecastAll, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This function is similar to the Linecast function except that all colliders that are in contact with the line are reported. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D array. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This function is similar to the Linecast function except that all colliders that are in contact with the line are reported. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D array. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This function is similar to the Linecast function except that all colliders that are in contact with the line are reported. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D array. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This function is similar to the Linecast function except that all colliders that are in contact with the line are reported. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Note that this function will allocate memory for the returned RaycastHit2D array. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastNonAlloc, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[])">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that the raycast specifies the line using an origin and directtion. This function is similar to the LinecastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when linecasts are performed frequently. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastAll, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="results">Returned array of objects that intersect the line.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that the raycast specifies the line using an origin and directtion. This function is similar to the LinecastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when linecasts are performed frequently. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastAll, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="results">Returned array of objects that intersect the line.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32,System.Single)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that the raycast specifies the line using an origin and directtion. This function is similar to the LinecastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when linecasts are performed frequently. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastAll, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="results">Returned array of objects that intersect the line.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32,System.Single,System.Single)">
            <summary>Casts a line against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that the raycast specifies the line using an origin and directtion. This function is similar to the LinecastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when linecasts are performed frequently. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line. Additionally, this will also detect Collider(s) at the start of the line. In this case the line is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Linecast, LinecastAll, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="start">The start point of the line in world space.</param>
            <param name="end">The end point of the line in world space.</param>
            <param name="results">Returned array of objects that intersect the line.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Check if a collider falls within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>The rectangle is defined by two diagonally opposite corner coordinates in world space. You can think of these as top-left and bottom-right but the test will still work if the ordering of the points is reversed. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the area then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the area. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapPoint, OverlapCircleAll, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32)">
            <summary>Check if a collider falls within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>The rectangle is defined by two diagonally opposite corner coordinates in world space. You can think of these as top-left and bottom-right but the test will still work if the ordering of the points is reversed. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the area then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the area. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapPoint, OverlapCircleAll, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
            <summary>Check if a collider falls within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>The rectangle is defined by two diagonally opposite corner coordinates in world space. You can think of these as top-left and bottom-right but the test will still work if the ordering of the points is reversed. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the area then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the area. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapPoint, OverlapCircleAll, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>Check if a collider falls within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>The rectangle is defined by two diagonally opposite corner coordinates in world space. You can think of these as top-left and bottom-right but the test will still work if the ordering of the points is reversed. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the area then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the area. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapPoint, OverlapCircleAll, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Get a list of all colliders that fall within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapArea except that all colliders that fall within the area are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the area. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32)">
            <summary>Get a list of all colliders that fall within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapArea except that all colliders that fall within the area are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the area. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
            <summary>Get a list of all colliders that fall within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapArea except that all colliders that fall within the area are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the area. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>Get a list of all colliders that fall within a rectangular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapArea except that all colliders that fall within the area are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the area. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapAreaNonAlloc.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[])">
            <summary>Get a list of all colliders that fall within a specified area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapAreaAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the area (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapArea, OverlapAreaAll.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="results">Array to receive results.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32)">
            <summary>Get a list of all colliders that fall within a specified area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapAreaAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the area (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapArea, OverlapAreaAll.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specified layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single)">
            <summary>Get a list of all colliders that fall within a specified area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapAreaAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the area (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapArea, OverlapAreaAll.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specified layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
            <summary>Get a list of all colliders that fall within a specified area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapAreaAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the area (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapArea, OverlapAreaAll.</remarks>
            <param name="pointA">One corner of the rectangle.</param>
            <param name="pointB">Diagonally opposite corner of the rectangle.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specified layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single)">
            <summary>Check if a collider falls within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>The circle is defined by its centre coordinate in world space and by its radius. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the circle then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the circle. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapPoint, OverlapCircleAll, OverlapCircleNonAlloc.</remarks>
            <param name="point">Centre of the circle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32)">
            <summary>Check if a collider falls within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>The circle is defined by its centre coordinate in world space and by its radius. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the circle then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the circle. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapPoint, OverlapCircleAll, OverlapCircleNonAlloc.</remarks>
            <param name="point">Centre of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
            <summary>Check if a collider falls within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>The circle is defined by its centre coordinate in world space and by its radius. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the circle then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the circle. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapPoint, OverlapCircleAll, OverlapCircleNonAlloc.</remarks>
            <param name="point">Centre of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>Check if a collider falls within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>The circle is defined by its centre coordinate in world space and by its radius. The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the circle then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the circle. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapPoint, OverlapCircleAll, OverlapCircleNonAlloc.</remarks>
            <param name="point">Centre of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircle except that all colliders that fall within the circle are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the circle. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapCircleNonAlloc.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircle except that all colliders that fall within the circle are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the circle. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapCircleNonAlloc.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="layerMask">Filter to check objects only on specified layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircle except that all colliders that fall within the circle are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the circle. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapCircleNonAlloc.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="layerMask">Filter to check objects only on specified layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircle except that all colliders that fall within the circle are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the circle. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapCircle, OverlapCircleNonAlloc.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="layerMask">Filter to check objects only on specified layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[])">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircleAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapCircle, OverlapCircleAll.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="results">Array to receive results.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircleAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapCircle, OverlapCircleAll.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircleAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapCircle, OverlapCircleAll.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
            <summary>Get a list of all colliders that fall within a circular area.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapCircleAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapCircle, OverlapCircleAll.</remarks>
            <param name="point">Center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2)">
            <summary>Check if a collider overlaps a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider overlaps the point then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapCircle, OverlapPointAll, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in world space.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,System.Int32)">
            <summary>Check if a collider overlaps a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider overlaps the point then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapCircle, OverlapPointAll, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in world space.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,System.Int32,System.Single)">
            <summary>Check if a collider overlaps a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider overlaps the point then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapCircle, OverlapPointAll, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in world space.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>Check if a collider overlaps a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>The optional layerMask allows the test to check only for objects on specific layers. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider overlaps the point then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D object. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapArea, OverlapCircle, OverlapPointAll, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in world space.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPoint except that all colliders that overlap the point are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapPoint, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in space.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2,System.Int32)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPoint except that all colliders that overlap the point are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapPoint, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in space.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2,System.Int32,System.Single)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPoint except that all colliders that overlap the point are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapPoint, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in space.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPoint except that all colliders that overlap the point are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders over the point. Note that this function will allocate memory for the returned Collider2D array. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently. See Also: OverlapPoint, OverlapPointNonAlloc.</remarks>
            <param name="point">A point in space.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[])">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPointAll except that the results are returned in the supplied array. The integer return value is the number of objects that overlap the point (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapPoint, OverlapPointAll.</remarks>
            <param name="point">A point in space.</param>
            <param name="results">Array to receive results.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPointAll except that the results are returned in the supplied array. The integer return value is the number of objects that overlap the point (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapPoint, OverlapPointAll.</remarks>
            <param name="point">A point in space.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPointAll except that the results are returned in the supplied array. The integer return value is the number of objects that overlap the point (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapPoint, OverlapPointAll.</remarks>
            <param name="point">A point in space.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
            <summary>Get a list of all colliders that overlap a point in space.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to OverlapPointAll except that the results are returned in the supplied array. The integer return value is the number of objects that overlap the point (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently. See Also: OverlapPoint, OverlapPointAll.</remarks>
            <param name="point">A point in space.</param>
            <param name="results">Array to receive results.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="P:UnityEngine.Physics2D.positionIterations">
            <summary>The number of iterations of the physics solver when considering objects' positions.</summary>
            <value>To be added.</value>
            <remarks>A higher number of interations will improve accuracy at the expense of processing overhead. See Also: velocityIterations.</remarks>
        </member>
        <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Casts a ray against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function returns a RaycastHit object when a collider is hit by the ray or null otherwise. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, RaycastAll, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>Casts a ray against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function returns a RaycastHit object when a collider is hit by the ray or null otherwise. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, RaycastAll, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32)">
            <summary>Casts a ray against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function returns a RaycastHit object when a collider is hit by the ray or null otherwise. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, RaycastAll, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
            <summary>Casts a ray against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function returns a RaycastHit object when a collider is hit by the ray or null otherwise. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, RaycastAll, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>Casts a ray against colliders in the scene.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function returns a RaycastHit object when a collider is hit by the ray or null otherwise. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, RaycastAll, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Casts a ray against colliders in the scene, returning all colliders that contact with it.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>Casts a ray against colliders in the scene, returning all colliders that contact with it.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32)">
            <summary>Casts a ray against colliders in the scene, returning all colliders that contact with it.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
            <summary>Casts a ray against colliders in the scene, returning all colliders that contact with it.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
            <summary>Casts a ray against colliders in the scene, returning all colliders that contact with it.</summary>
            <returns>To be added.</returns>
            <remarks>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[])">
            <summary>Casts a ray into the scene.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="results">Array to receive results.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single)">
            <summary>Casts a ray into the scene.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="results">Array to receive results.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32)">
            <summary>Casts a ray into the scene.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="results">Array to receive results.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single)">
            <summary>Casts a ray into the scene.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="results">Array to receive results.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
        </member>
        <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
            <summary>Casts a ray into the scene.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently. Additionally, this will also detect Collider(s) at the start of the ray. In this case the ray is starting inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero. See Also: LayerMask::ref:: class, RaycastHit2D::ref:: class, Raycast, Linecast, defaultRaycastLayers, ignoreRaycastLayer, raycastsHitTriggers.</remarks>
            <param name="origin">The point in 2D space where the ray originates.</param>
            <param name="direction">Vector representing the direction of the ray.</param>
            <param name="results">Array to receive results.</param>
            <param name="distance">Maximum distance over which to cast the ray.</param>
            <param name="layerMask">Filter to check objects only on specific layers.</param>
            <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
            <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
        </member>
        <member name="P:UnityEngine.Physics2D.raycastsHitTriggers">
            <summary>Do raycasts detect Colliders configured as triggers?</summary>
            <value>To be added.</value>
            <remarks>A Collider can be set up to act as a trigger which will detect other Colliders entering its volume but won't physically collide with them. Often, it is desirable to avoid detecting trigger Colliders with raycasts because they don't represent solid objects. This property lets you choose whether or not raycasts should detect triggers. See Also: Collider2D.isTrigger, Raycast.</remarks>
        </member>
        <member name="P:UnityEngine.Physics2D.velocityIterations">
            <summary>The number of iterations of the physics solver when considering objects' velocities.</summary>
            <value>To be added.</value>
            <remarks>A higher number of interations will improve accuracy at the expense of processing overhead. See Also: positionIterations.</remarks>
        </member>
        <member name="T:UnityEngine.PhysicsMaterial2D">
            <summary>Asset type that defines the surface properties of a Collider2D.</summary>
            <remarks>Note: the 3D equivalent of this class is spelt as "PhysicMaterial" with no S, but this class is spelt "Physic s Material" with an S. See Also: PhysicMaterial::ref:: class.</remarks>
        </member>
        <member name="C:UnityEngine.PhysicsMaterial2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.PhysicsMaterial2D(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicsMaterial2D.bounciness">
            <summary>The degree of elasticity during collisions.</summary>
            <value>To be added.</value>
            <remarks>A value of zero indicates no elasticity (ie, no bounce at all) while a value of one indicates perfect elasticity. See Also: PhysicMaterial.bounciness.</remarks>
        </member>
        <member name="P:UnityEngine.PhysicsMaterial2D.friction">
            <summary>Coefficient of friction.</summary>
            <value>To be added.</value>
            <remarks>A value of zero indicates a surface with no friction while a value of 1 indicates maximum friction (eg, rubber). See Also: PhysicMaterial.staticFriction.</remarks>
        </member>
        <member name="T:UnityEngine.Ping">
            <summary>Ping any given IP address (given in dot notation).</summary>
            <remarks>The ping operation is asynchronous and a ping object can be polled for status using Ping.isDone.  When a response is received it is in Ping.time.</remarks>
        </member>
        <member name="C:UnityEngine.Ping(System.String)">
            <param name="address">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Ping.DestroyPing">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Ping.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Ping.ip">
            <summary>The IP target of the ping.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Ping.isDone">
            <summary>Has the ping function completed?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Ping.time">
            <summary>This property contains the ping time result after isDone returns true.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Plane">
            <summary>Representation of a plane in 3D space.</summary>
            <remarks>A plane is an infinitely large, flat surface that exists in 3D space and divides the space into two halves known as half-spaces. It is easy to determine which of the two half-spaces a particular point is in and also how far the point is from the plane. Walls, floors and other flat surfaces are common in games, so a plane is sometimes useful for mathematical calculations with these objects. Also, there are cases where a real surface does not exist but it is useful to imagine that one is there. For example, in sports, a goal line or out-of-bounds line is often assumed to extend into the air, effectively defining a plane. When a plane passes through the point in world space, it is defined simply by a normal vector that determines which way it faces. It is easy to visualise this if you imagine looking at the plane edge-on.</remarks>
        </member>
        <member name="C:UnityEngine.Plane(UnityEngine.Vector3,System.Single)">
            <param name="inNormal">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Plane(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="inNormal">To be added.</param>
            <param name="inPoint">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Plane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Plane.distance">
            <summary>Distance from the origin to the plane.</summary>
            <value>To be added.</value>
            <remarks>See Also: normal.</remarks>
        </member>
        <member name="M:UnityEngine.Plane.GetDistanceToPoint(UnityEngine.Vector3)">
            <param name="inPt">To be added.</param>
            <summary>Returns a signed distance from plane to point.</summary>
            <returns>To be added.</returns>
            <remarks>The value returned is positive if the point is on the side of the plane into which the plane's  normal is facing, and negative otherwise.</remarks>
        </member>
        <member name="M:UnityEngine.Plane.GetSide(UnityEngine.Vector3)">
            <param name="inPt">To be added.</param>
            <summary>Is a point on the positive side of the plane?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Plane.normal">
            <summary>Normal vector of the plane.</summary>
            <value>To be added.</value>
            <remarks>See Also: distance.</remarks>
        </member>
        <member name="M:UnityEngine.Plane.Raycast(UnityEngine.Ray,System.Single@)">
            <param name="ray">To be added.</param>
            <param name="enter">To be added.</param>
            <summary>Intersects a ray with the plane.</summary>
            <returns>To be added.</returns>
            <remarks>This function sets enter to the distance along the ray, where it intersects the plane. If the ray is parallel to the plane, function returns false and sets enter to zero. If the ray is pointing in the opposite direction than the plane, function returns false and sets enter to the distance along the ray (negative value).See Also: Physics.Raycast.</remarks>
        </member>
        <member name="M:UnityEngine.Plane.SameSide(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="inPt0">To be added.</param>
            <param name="inPt1">To be added.</param>
            <summary>Are two points on the same side of the plane?</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Plane.Set3Points(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Sets a plane using three points that lie within it. The points go around clockwise as you look down on the top surface of the plane.</summary>
            <remarks>See Also: SetNormalAndPosition.</remarks>
            <param name="a">First point in clockwise order.</param>
            <param name="b">Second point in clockwise order.</param>
            <param name="c">Third point in clockwise order.</param>
        </member>
        <member name="M:UnityEngine.Plane.SetNormalAndPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Sets a plane using a point that lies within it along with a normal to orient it.</summary>
            <remarks>Note that the normal must be a normalised vector.See Also: Set3Points.</remarks>
            <param name="inNormal">The plane's normal vector.</param>
            <param name="inPoint">A point that lies on the plane.</param>
        </member>
        <member name="T:UnityEngine.PlayerPrefs">
            <summary>Stores and accesses player preferences between game sessions.</summary>
            <remarks>Editor/Standalone  On Mac OS X PlayerPrefs are stored in ~ Library Preferences folder, in a file named unity.[company name].[product name].plist, where company and product names are the names set up in Project Settings. The same .plist file is used for both Projects run in the Editor and standalone players. On Windows, PlayerPrefs are stored in the registry under HKCU\Software\[company name]\[product name] key, where company and product names are the names set up in Project Settings. On Linux, PlayerPrefs can be found in ~/.config unity3d [CompanyName]/[ProductName] again using the company and product names specified in the Project Settings.  WebPlayer On Web players, PlayerPrefs are stored in binary files in the following locations: Mac OS X: ~ Library Preferences Unity WebPlayerPrefs Windows: %APPDATA%\Unity\WebPlayerPrefs There is one preference file per Web player URL and the file size is limited to 1 megabyte. If this limit is exceeded, SetInt, SetFloat and SetString will not store the value and throw a PlayerPrefsException.</remarks>
        </member>
        <member name="C:UnityEngine.PlayerPrefs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.DeleteAll">
            <summary>Removes all keys and values from the preferences. Use with caution.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.DeleteKey(System.String)">
            <param name="key">To be added.</param>
            <summary>Removes key and its corresponding value from the preferences.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.GetFloat(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.GetFloat(System.String,System.Single)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.GetInt(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.GetInt(System.String,System.Int32)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.GetString(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.GetString(System.String,System.String)">
            <param name="key">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>Returns the value corresponding to key in the preference file if it exists.</summary>
            <returns>To be added.</returns>
            <remarks>If it doesn't exist, it will return defaultValue.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.HasKey(System.String)">
            <param name="key">To be added.</param>
            <summary>Returns true if key exists in the preferences.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.Save">
            <summary>Writes all modified preferences to disk.</summary>
            <remarks>By default Unity writes preferences to disk on Application Quit. In case when the game crashes or otherwise prematuraly exits, you might want to write the PlayerPrefs at sensible 'checkpoints' in your game. This function will write to disk potentially causing a small hiccup, therefore it is not recommended to call during actual gameplay.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.SetFloat(System.String,System.Single)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.SetInt(System.String,System.Int32)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PlayerPrefs.SetString(System.String,System.String)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of the preference identified by key.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.PlayerPrefsException">
            <summary>An exception thrown by the PlayerPrefs class in a web player build.</summary>
            <remarks>The exception is thrown when writing to a preference file exceeds the allotted storage space. The storage space is 1MB for a web player. This exception is not thrown on other platforms.</remarks>
        </member>
        <member name="C:UnityEngine.PlayerPrefsException(System.String)">
            <param name="error">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.PlayMode">
            <summary>Used by Animation.Play function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.PlayMode.StopAll">
            <summary>Will stop all animations that were started with this component before playing.</summary>
        </member>
        <member name="F:UnityEngine.PlayMode.StopSameLayer">
            <summary>Will stop all animations that were started in the same layer. This is the default when playing animations.</summary>
        </member>
        <member name="T:UnityEngine.PolygonCollider2D">
            <summary>Collider for 2D physics representing an arbitrary polygon defined by its vertices.</summary>
            <remarks>See Also: BoxCollider2D class, CircleCollider2D class.</remarks>
        </member>
        <member name="C:UnityEngine.PolygonCollider2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32)">
            <summary>Creates as regular primitive polygon with the specified number of sides.</summary>
            <remarks>To be added.</remarks>
            <param name="sides">The number of sides in the polygon. This must be greater than two.</param>
        </member>
        <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32,UnityEngine.Vector2)">
            <summary>Creates as regular primitive polygon with the specified number of sides.</summary>
            <remarks>To be added.</remarks>
            <param name="sides">The number of sides in the polygon. This must be greater than two.</param>
            <param name="scale">The X/Y scale of the polygon. These must be greater than zero.</param>
        </member>
        <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Creates as regular primitive polygon with the specified number of sides.</summary>
            <remarks>To be added.</remarks>
            <param name="sides">The number of sides in the polygon. This must be greater than two.</param>
            <param name="scale">The X/Y scale of the polygon. These must be greater than zero.</param>
            <param name="offset">The X/Y offset of the polygon.</param>
        </member>
        <member name="M:UnityEngine.PolygonCollider2D.GetPath(System.Int32)">
            <summary>Get a path from the polygon by its index.</summary>
            <returns>To be added.</returns>
            <remarks>A path is cyclic sequence of line segments between points that define the outline of the polygon. Since the polygon can have holes and discontinuous parts, its shape is not necessarily defined by a single path. The returned value is an ordered array of the points in the path. See Also: pathCount, SetPath.</remarks>
            <param name="index">The index of the path to retrieve.</param>
        </member>
        <member name="M:UnityEngine.PolygonCollider2D.GetTotalPointCount">
            <summary>Return the total number of points in the polygon in all paths.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: points.</remarks>
        </member>
        <member name="P:UnityEngine.PolygonCollider2D.pathCount">
            <summary>The number of paths in the polygon.</summary>
            <value>To be added.</value>
            <remarks>A path is cyclic sequence of line segments between points that define the outline of the polygon. Since the polygon can have holes and discontinuous parts, its shape is not necessarily defined by a single path. See Also: GetPath, SetPath.</remarks>
        </member>
        <member name="P:UnityEngine.PolygonCollider2D.points">
            <summary>Corner points that define the collider's shape in local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.PolygonCollider2D.SetPath(System.Int32,UnityEngine.Vector2[])">
            <summary>Define a path by its constituent points.</summary>
            <remarks>A path is cyclic sequence of line segments between points that define the outline of the polygon. Since the polygon can have holes and discontinuous parts, its shape is not necessarily defined by a single path. See Also: pathCount, GetPath.</remarks>
            <param name="index">Index of the path to set.</param>
            <param name="points">Points that define the path.</param>
        </member>
        <member name="T:UnityEngine.PrimitiveType">
            <summary>The various primitives that can be created using the GameObject.CreatePrimitive function.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="F:UnityEngine.PrimitiveType.Capsule">
            <summary>A capsule primitive.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="F:UnityEngine.PrimitiveType.Cube">
            <summary>A cube primitive.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="F:UnityEngine.PrimitiveType.Cylinder">
            <summary>A cylinder primitive.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="F:UnityEngine.PrimitiveType.Plane">
            <summary>A plane primitive.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="F:UnityEngine.PrimitiveType.Quad">
            <summary>A Quad primitive.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="F:UnityEngine.PrimitiveType.Sphere">
            <summary>A sphere primitive.</summary>
            <remarks>See Also: GameObject.CreatePrimitive.</remarks>
        </member>
        <member name="T:UnityEngine.ProceduralCacheSize">
            <summary>Substance memory budget.</summary>
            <remarks>This also affects the amount of working memory for the generation of the ProceduralMaterial.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralCacheSize.Heavy">
            <summary>A limit of 512MB for the cache or the working memory.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralCacheSize.Medium">
            <summary>A limit of 256MB for the cache or the working memory.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralCacheSize.NoLimit">
            <summary>No limit for the cache or the working memory.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralCacheSize.None">
            <summary>A limit of 1B (one byte) for the cache or the working memory.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralCacheSize.Tiny">
            <summary>A limit of 128MB for the cache or the working memory.</summary>
        </member>
        <member name="T:UnityEngine.ProceduralLoadingBehavior">
            <summary>ProceduralMaterial loading behavior.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralLoadingBehavior.BakeAndDiscard">
            <summary>Bake the textures to speed up loading and discard the ProceduralMaterial data (default on unsupported platform).</summary>
            <remarks>See Also: ProceduralLoadingBehavior.BakeAndKeep.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralLoadingBehavior.BakeAndKeep">
            <summary>Bake the textures to speed up loading and keep the ProceduralMaterial data so that it can still be tweaked and regenerated later on.</summary>
            <remarks>See Also: ProceduralLoadingBehavior.BakeAndDiscard.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralLoadingBehavior.Cache">
            <summary>Generate the textures when loading and cache them to disk/flash to speed up subsequent game/application startups.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralLoadingBehavior.DoNothing">
            <summary>Do not generate the textures. RebuildTextures() or RebuildTexturesImmediately() must be called to generate the textures.</summary>
            <remarks>See Also: ProceduralMaterial.RebuildTextures, ProceduralMaterial.RebuildTexturesImmediately.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralLoadingBehavior.Generate">
            <summary>Generate the textures when loading to favor application's size (default on supported platform).</summary>
        </member>
        <member name="T:UnityEngine.ProceduralMaterial">
            <summary>Class for ProceduralMaterial handling.</summary>
            <remarks>A reference to a ProceduralMaterial is usually assigned using "renderer.sharedMaterial as ProceduralMaterial".Note that accessing a ProceduralMaterial via renderer.material will create a runtime clone of the original ProceduralMaterial and can negatively impact performance.</remarks>
        </member>
        <member name="C:UnityEngine.ProceduralMaterial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.animationUpdateRate">
            <summary>Set or get the update rate in millisecond of the animated substance.</summary>
            <value>To be added.</value>
            <remarks>An animated substance is a ProceduralMaterial containing a $time input which is automatically generated.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.CacheProceduralProperty(System.String,System.Boolean)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Specifies if a named ProceduralProperty should be cached for efficient runtime tweaking.</summary>
            <remarks>Set this to true for all properties that you expect to be tweaking. It will take effect the next time the textures are rebuild, so call RebuildTextures after setting up these flags in order to prepare the cache. The fewer properties have caching enabled, the more efficient rebuilding the textures will be so consider carefully which properties are actually going to be changed. While modified properties are automatically cached for the next rebuild, this cache flag is persistent. See Also: IsProceduralPropertyCached, ClearCache.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.cacheSize">
            <summary>Set or get the Procedural cache budget.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.ClearCache">
            <summary>Clear the Procedural cache.</summary>
            <remarks>This frees up all memory used by the cache and sets all properties to not be cached anymore. Use this when you don't expect to make anymore changes to the ProceduralProperties for now. See Also: CacheProceduralProperty.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetGeneratedTexture(System.String)">
            <summary>This allows to get a reference to a ProceduralTexture generated by a ProceduralMaterial using its name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: GetGeneratedTextures.</remarks>
            <param name="textureName">The name of the ProceduralTexture to get.</param>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetGeneratedTextures">
            <summary>Get generated textures.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralBoolean(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Get a named Procedural boolean property.</summary>
            <returns>To be added.</returns>
            <remarks>Used for ProceduralProperties of type Boolean. See Also: GetProceduralPropertyDescriptions, SetProceduralBoolean.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralColor(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Get a named Procedural color property.</summary>
            <returns>To be added.</returns>
            <remarks>Used for ProceduralProperties of types Color3 and Color4. See Also: GetProceduralPropertyDescriptions, GetProceduralColor.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralEnum(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Get a named Procedural enum property.</summary>
            <returns>To be added.</returns>
            <remarks>Used for ProceduralProperties of type Enum. The function does not return an actual enum but an integer specifying the index of the selected option. The available options are contained in the array ProceduralPropertyDescription.enumOptions. See Also: GetProceduralPropertyDescriptions, SetProceduralEnum.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralFloat(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Get a named Procedural float property.</summary>
            <returns>To be added.</returns>
            <remarks>Used for ProceduralProperties of type Float. See Also: GetProceduralPropertyDescriptions, SetProceduralFloat.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralPropertyDescriptions">
            <summary>Get an array of descriptions of all the ProceduralProperties this ProceduralMaterial has.</summary>
            <returns>To be added.</returns>
            <remarks>This can be used to build generic GUI that can be used to edit the properties of any ProceduralMaterial without knowing its properties in advance.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralTexture(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Get a named Procedural texture property.</summary>
            <returns>To be added.</returns>
            <remarks>Used for ProceduralProperties of type Texture. See Also: GetProceduralPropertyDescriptions, SetProceduralTexture.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.GetProceduralVector(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Get a named Procedural vector property.</summary>
            <returns>To be added.</returns>
            <remarks>Used for ProceduralProperties of types Vector2, Vector3, and Vector4. See Also: GetProceduralPropertyDescriptions, SetProceduralVector.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.HasProceduralProperty(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Checks if the ProceduralMaterial has a ProceduralProperty of a given name.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: GetProceduralPropertyDescriptions.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.isLoadTimeGenerated">
            <summary>Should the ProceduralMaterial be generated at load time?</summary>
            <value>To be added.</value>
            <remarks>If enabled, the ProceduralMaterial will be generated when the scene loads. If disabled, the ProceduralMaterial will not be generated until RebuildTextures or RebuildTexturesImmediately is called. See Also: RebuildTextures, RebuildTexturesImmediately.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.IsProceduralPropertyCached(System.String)">
            <param name="inputName">To be added.</param>
            <summary>Checks if a named ProceduralProperty is cached for efficient runtime tweaking.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: CacheProceduralProperty, ClearCache.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.isProcessing">
            <summary>Check if the ProceduralTextures from this ProceduralMaterial are currently being rebuilt.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.isReadable">
            <summary>Set or get the "Readable" flag for a ProceduralMaterial.</summary>
            <value>To be added.</value>
            <remarks>ProceduralTexture.GetPixels32 can ONLY be used with textures generated from a "Readable" ProceduralMaterial whose texture format is set to RAW. See Also: ProceduralTexture.GetPixels32.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.isSupported">
            <summary>Check if ProceduralMaterials are supported on the current platform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.loadingBehavior">
            <summary>Get ProceduralMaterial loading behavior.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.preset">
            <summary>Set or get an XML string of "input/value" pairs (settings the preset rebuilds the textures).</summary>
            <value>To be added.</value>
            <remarks>This allows to quickly save the set of a ProceduralMaterial's settings and to export them or to re-apply them later on.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.RebuildTextures">
            <summary>Triggers an asynchronous rebuild of this ProceduralMaterial's dirty textures.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.RebuildTexturesImmediately">
            <summary>Triggers an immediate (synchronous) rebuild of this ProceduralMaterial's dirty textures.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.SetProceduralBoolean(System.String,System.Boolean)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named Procedural boolean property.</summary>
            <remarks>Used for ProceduralProperties of type Boolean. See Also: GetProceduralPropertyDescriptions, GetProceduralBoolean.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.SetProceduralColor(System.String,UnityEngine.Color)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named Procedural color property.</summary>
            <remarks>Used for ProceduralProperties of types Color3 and Color4. See Also: GetProceduralPropertyDescriptions, SetProceduralColor.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.SetProceduralEnum(System.String,System.Int32)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named Procedural enum property.</summary>
            <remarks>Used for ProceduralProperties of type Enum. The function does not take an actual enum but an integer specifying the index of the selected option. The available options are contained in the array ProceduralPropertyDescription.enumOptions. See Also: GetProceduralPropertyDescriptions, GetProceduralEnum.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.SetProceduralFloat(System.String,System.Single)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named Procedural float property.</summary>
            <remarks>Used for ProceduralProperties of type Float. See Also: GetProceduralPropertyDescriptions, GetProceduralFloat.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.SetProceduralTexture(System.String,UnityEngine.Texture2D)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named Procedural texture property.</summary>
            <remarks>Used for ProceduralProperties of type Texture. The texture needs to be setup with Advanced texture type and Read-Write enabled. See Also: GetProceduralPropertyDescriptions, GetProceduralTexture.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.SetProceduralVector(System.String,UnityEngine.Vector4)">
            <param name="inputName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Set a named Procedural vector property.</summary>
            <remarks>Used for ProceduralProperties of types Vector2, Vector3, and Vector4. See Also: GetProceduralPropertyDescriptions, GetProceduralVector.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralMaterial.StopRebuilds">
            <summary>Discard all the queued ProceduralMaterial rendering operations that have not started yet.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.ProceduralMaterial.substanceProcessorUsage">
            <summary>Used to specify the Substance engine CPU usage.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ProceduralOutputType">
            <summary>The type of generated image in a ProceduralMaterial.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Diffuse">
            <summary>Diffuse type.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Emissive">
            <summary>Emmisive type.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Height">
            <summary>HeightMap type.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Normal">
            <summary>NormalMap (BumpMap) type.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Opacity">
            <summary>Opacity (Tranparence) type.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Specular">
            <summary>Specular (GlossMap) type.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralOutputType.Unknown">
            <summary>Undefined type.</summary>
        </member>
        <member name="T:UnityEngine.ProceduralProcessorUsage">
            <summary>The global Substance engine processor usage (as used for the ProceduralMaterial.substanceProcessorUsage property).</summary>
            <remarks>The values refer to the number of physical processor cores used for ProceduralMaterial generation. See Also: ProceduralMaterial.substanceProcessorUsage.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralProcessorUsage.All">
            <summary>All physical processor cores are used for ProceduralMaterial generation.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralProcessorUsage.Half">
            <summary>Half of all physical processor cores are used for ProceduralMaterial generation.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralProcessorUsage.One">
            <summary>A single physical processor core is used for ProceduralMaterial generation.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralProcessorUsage.Unsupported">
            <summary>Exact control of processor usage is not available.</summary>
        </member>
        <member name="T:UnityEngine.ProceduralPropertyDescription">
            <summary>Describes a ProceduralProperty.</summary>
            <remarks>See Also: ProceduralMaterial.GetProceduralPropertyDescriptions.</remarks>
        </member>
        <member name="C:UnityEngine.ProceduralPropertyDescription">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.enumOptions">
            <summary>The available options for a ProceduralProperty of type Enum.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.group">
            <summary>The name of the GUI group. Used to display ProceduralProperties in groups.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.hasRange">
            <summary>If true, the Float or Vector property is constrained to values within a specified range.</summary>
            <remarks>For Vector types this applies to all the vector components.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.label">
            <summary>The label of the ProceduralProperty. Can contain space and be overall more user-friendly than the 'name' member.</summary>
            <remarks>Used in the Inspector to display the ProceduralProperty.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.maximum">
            <summary>If hasRange is true, maximum specifies the maximum allowed value for this Float or Vector property.</summary>
            <remarks>For Vector types this applies to all the vector components.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.minimum">
            <summary>If hasRange is true, minimum specifies the minimum allowed value for this Float or Vector property.</summary>
            <remarks>For Vector types this applies to all the vector components.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.name">
            <summary>The name of the ProceduralProperty. Used to get and set the values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.step">
            <summary>Specifies the step size of this Float or Vector property. Zero is no step.</summary>
            <remarks>For Vector types this applies to all the vector components.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyDescription.type">
            <summary>The ProceduralPropertyType describes what type of property this is.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.ProceduralPropertyType">
            <summary>The type of a ProceduralProperty.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Boolean">
            <summary>Procedural boolean property. Use with ProceduralMaterial.GetProceduralBoolean.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Color3">
            <summary>Procedural Color property without alpha. Use with ProceduralMaterial.GetProceduralColor.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Color4">
            <summary>Procedural Color property with alpha. Use with ProceduralMaterial.GetProceduralColor.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Enum">
            <summary>Procedural Enum property. Use with ProceduralMaterial.GetProceduralEnum.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Float">
            <summary>Procedural float property. Use with ProceduralMaterial.GetProceduralFloat.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Texture">
            <summary>Procedural Texture property. Use with ProceduralMaterial.GetProceduralTexture.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Vector2">
            <summary>Procedural Vector2 property. Use with ProceduralMaterial.GetProceduralVector.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Vector3">
            <summary>Procedural Vector3 property. Use with ProceduralMaterial.GetProceduralVector.</summary>
        </member>
        <member name="F:UnityEngine.ProceduralPropertyType.Vector4">
            <summary>Procedural Vector4 property. Use with ProceduralMaterial.GetProceduralVector.</summary>
        </member>
        <member name="T:UnityEngine.ProceduralTexture">
            <summary>Class for ProceduralTexture handling.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ProceduralTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ProceduralTexture.GetPixels32(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Grab pixel values from a ProceduralTexture.</summary>
            <returns>To be added.</returns>
            <remarks>This only works for ProceduralMaterial instances that have been marked as "Readable" and whose texture format is set to RAW.  The correct sequence to use GetPixels32() is: - Set the ProceduralMaterial "Readable" flag using ProceduralMaterial.isReadable - Rebuild the ProceduralMaterial's textures using ProceduralMaterial.RebuildTexturesImmediately - Call GetPixels32().  See Also: ProceduralMaterial.isReadable, ProceduralMaterial.RebuildTexturesImmediately, Texture2D.GetPixels32.</remarks>
            <param name="x">X-coord of the top-left corner of the rectangle to grab.</param>
            <param name="y">Y-coord of the top-left corner of the rectangle to grab.</param>
            <param name="blockWidth">Width of rectangle to grab.</param>
            <param name="blockHeight">Height of the rectangle to grab. Get the pixel values from a rectangular area of a ProceduralTexture into an array. The block is specified by its x,y offset in the texture and by its width and height. The block is "flattened" into the array by scanning the pixel values across rows one by one.</param>
        </member>
        <member name="M:UnityEngine.ProceduralTexture.GetProceduralOutputType">
            <summary>The output type of this ProceduralTexture.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Profiler">
            <summary>Controls the Profiler from script.</summary>
            <remarks>You can add custom Profiler sections in your scripts with Profiler.BeginSample and Profiler.EndSample. In standalone games, Profiler can dump all profiling information using Profiler.logFile and Profiler.enabled. Profiler is only available in Unity Pro.</remarks>
        </member>
        <member name="C:UnityEngine.Profiler">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.AddFramesFromFile(System.String)">
            <param name="file">To be added.</param>
            <summary>Displays the recorded profiledata in the profiler.</summary>
            <remarks>Use the name of the text file, ".data" will be appended.See Also: Profiler.AddFramesFromFile, Profiler.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.BeginSample(System.String)">
            <param name="name">To be added.</param>
            <summary>Begin profiling a piece of code with a custom label.</summary>
            <remarks>This will show up in the Profiler hierarchy. Profiler.BeginSample is conditionally compiled away using ConditionalAttribute. Thus it will have zero overhead, when it is deployed in non-Development Build.See Also: Profiler.EndSample, Profiler.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.BeginSample(System.String,UnityEngine.Object)">
            <param name="name">To be added.</param>
            <param name="targetObject">To be added.</param>
            <summary>Begin profiling a piece of code with a custom label.</summary>
            <remarks>This will show up in the Profiler hierarchy. Profiler.BeginSample is conditionally compiled away using ConditionalAttribute. Thus it will have zero overhead, when it is deployed in non-Development Build.See Also: Profiler.EndSample, Profiler.</remarks>
        </member>
        <member name="P:UnityEngine.Profiler.enableBinaryLog">
            <summary>Sets profiler output file in built players.</summary>
            <value>To be added.</value>
            <remarks>If binary log is enabled, a file is generated named ".data" which holds binary data for the profile This becomes a large file, so only enable it for a few frames on webplayers the file is placed next to the log file See Also: Profiler.enableBinaryLog.</remarks>
        </member>
        <member name="P:UnityEngine.Profiler.enabled">
            <summary>Enables the Profiler.</summary>
            <value>To be added.</value>
            <remarks>Can be used with Profiler.logFile to log profiling information in built players. See Also: Profiler.logFile.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.EndSample">
            <summary>End profiling a piece of code with a custom label.</summary>
            <remarks>This will show up in the Profiler hierarchy.See Also: Profiler.BeginSample, Profiler.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.GetMonoHeapSize">
            <summary>Returns the size of the mono heap.</summary>
            <returns>To be added.</returns>
            <remarks>This is the reserved system memory that Mono is using for allocations.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.GetMonoUsedSize">
            <summary>Returns the used size from mono.</summary>
            <returns>To be added.</returns>
            <remarks>This is the amount of allocated memory for non collected objects in Mono memory always call GC.Collect before this call, as non referenced objects will still take up space untill they are collected. If not Collecting, this will display an ever growing number untill Collect is called elsewhere.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.GetRuntimeMemorySize(UnityEngine.Object)">
            <param name="o">To be added.</param>
            <summary>Returns the runtime memory usage of the resource.</summary>
            <returns>To be added.</returns>
            <remarks>This has been implemented for the following resource types: Mesh, Texture, Audio, Animation and Materials Only available in development players and editor.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.GetTotalAllocatedMemory">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.GetTotalReservedMemory">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Profiler.GetTotalUnusedReservedMemory">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Profiler.logFile">
            <summary>Sets profiler output file in built players.</summary>
            <value>To be added.</value>
            <remarks>Use it with Profiler.enabled to produce profiling information outside of the Unity Editor. Setting this property is not supported in the WebPlayer. The WebPlayer will output the profiling information next to your webplayer logfile. This produces a file with framerate See Also: Profiler.enabled.</remarks>
        </member>
        <member name="P:UnityEngine.Profiler.supported">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Profiler.usedHeapSize">
            <summary>Heap size used by the program.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
            <returns>Size of the used heap in bytes, (or 0 if the profiler is disabled).</returns>
            <example />
        </member>
        <member name="T:UnityEngine.Projector">
            <summary>A script interface for a projector component.</summary>
            <remarks>The Projector can be used to project any material onto the scene - just like a real world projector. The properties exposed by this class are an exact match for the values in the Projector's inspector. It can be used to implement blob or projected shadows. You could also project an animated texture or a render texture that films another part of the scene. The projector will render all objects in its view frustum with the provided material. There is no shortcut property in GameObject or Component to access the Projector, so you must use GetComponent to do it:See Also: projector component.</remarks>
        </member>
        <member name="C:UnityEngine.Projector">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.aspectRatio">
            <summary>The aspect ratio of the projection.</summary>
            <value>To be added.</value>
            <remarks>This is projection width divided by height. An aspect ratio of 1.0 makes the projection square; a ratio of 2.0 makes it twice as wide than high. See Also: projector component.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.farClipPlane">
            <summary>The far clipping plane distance.</summary>
            <value>To be added.</value>
            <remarks>The projector will not affect anything that is further than this distance. See Also: projector component.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.fieldOfView">
            <summary>The field of view of the projection in degrees.</summary>
            <value>To be added.</value>
            <remarks>This is the vertical field of view; horizontal FOV varies depending on the aspectRatio. Field of view is ignored when projector is orthographic (see orthographic ). See Also: projector component.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.ignoreLayers">
            <summary>Which object layers are ignored by the projector.</summary>
            <value>To be added.</value>
            <remarks>See layer mask. By default this is zero - i.e. no layers are ignored. Each set bit in ignoreLayers will make this layer not affected by the projector.See Also: projector component, Layers.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.isOrthoGraphic">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.material">
            <summary>The material that will be projected onto every object.</summary>
            <value>To be added.</value>
            <remarks>Projector does nothing if it has no material set up. The Standard Assets package contains an example of Projector's material in Blob-Shadow folder. See Also: projector component, Material class.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.nearClipPlane">
            <summary>The near clipping plane distance.</summary>
            <value>To be added.</value>
            <remarks>The projector will not affect anything that is nearer than this distance. See Also: projector component.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.orthographic">
            <summary>Is the projection orthographic (true) or perspective (false)?</summary>
            <value>To be added.</value>
            <remarks>When orthographic is true, projection is defined by orthographicSize. When orthographic is false, projection is defined by fieldOfView. See Also: projector component.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.orthographicSize">
            <summary>Projection's half-size when in orthographic mode.</summary>
            <value>To be added.</value>
            <remarks>This is half of the vertical size of the projection volume. Horizontal projection size varies depending on aspectRatio. Orthographic size is ignored when projection is not orthographic (see orthographic ). See Also: projector component.</remarks>
        </member>
        <member name="P:UnityEngine.Projector.orthoGraphicSize">
            <summary>Projection's half-size when in orthographic mode.</summary>
            <value>To be added.</value>
            <remarks>This is half of the vertical size of the projection volume. Horizontal projection size varies depending on aspectRatio. Orthographic size is ignored when projection is not orthographic (see orthographic ). See Also: projector component.</remarks>
        </member>
        <member name="T:UnityEngine.PropertyAttribute">
            <summary>Base class to derive custom property attributes from. Use this to create custom attributes for script variables.</summary>
            <remarks>A custom attributes can be hooked up with a custom PropertyDrawer class to control how a script variable with that attribute is shown in the Inspector. See Also: PropertyDrawer class.</remarks>
        </member>
        <member name="C:UnityEngine.PropertyAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.QualityLevel">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.QualityLevel.Beautiful">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.QualityLevel.Fantastic">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.QualityLevel.Fast">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.QualityLevel.Fastest">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.QualityLevel.Good">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.QualityLevel.Simple">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.QualitySettings">
            <summary>Script interface for Quality Settings.</summary>
            <remarks>There can be an arbitrary number of quality settings. The details of each are set up in the project's Quality Settings. At run time, the current quality level can be changed using this class.</remarks>
        </member>
        <member name="C:UnityEngine.QualitySettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.activeColorSpace">
            <summary>Active color space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.anisotropicFiltering">
            <summary>Global anisotropic filtering mode.</summary>
            <value>To be added.</value>
            <remarks>See Also: AnisotropicFiltering.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.antiAliasing">
            <summary>Set The AA Filtering option.</summary>
            <value>To be added.</value>
            <remarks>The AntiAliazing filter can be set to either 0,2,4 or 8. This coresponds to the number of multisamples used per pixel.See Also: Quality Settings.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.blendWeights">
            <summary>Blend weights.</summary>
            <value>To be added.</value>
            <remarks>The Blend weights can be set to either One Bone, Two Bones or Four Bones.See Also: Quality Settings.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.currentLevel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.QualitySettings.DecreaseLevel">
            <summary>Decrease the current quality level.</summary>
            <remarks>IncreaseLevel and DecreaseLevel functions only apply anti-aliasing if applyExpensiveChanges is true. See Also: IncreaseLevel, Quality Settings.</remarks>
        </member>
        <member name="M:UnityEngine.QualitySettings.DecreaseLevel(System.Boolean)">
            <summary>Decrease the current quality level.</summary>
            <remarks>IncreaseLevel and DecreaseLevel functions only apply anti-aliasing if applyExpensiveChanges is true. See Also: IncreaseLevel, Quality Settings.</remarks>
            <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
        </member>
        <member name="P:UnityEngine.QualitySettings.desiredColorSpace">
            <summary>Desired color space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.QualitySettings.GetQualityLevel">
            <summary>Returns the current graphics quality level.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SetQualityLevel.</remarks>
        </member>
        <member name="M:UnityEngine.QualitySettings.IncreaseLevel">
            <summary>Increase the current quality level.</summary>
            <remarks>IncreaseLevel and DecreaseLevel functions only apply anti-aliasing if applyExpensiveChanges is true. See Also: DecreaseLevel, Quality Settings.</remarks>
        </member>
        <member name="M:UnityEngine.QualitySettings.IncreaseLevel(System.Boolean)">
            <summary>Increase the current quality level.</summary>
            <remarks>IncreaseLevel and DecreaseLevel functions only apply anti-aliasing if applyExpensiveChanges is true. See Also: DecreaseLevel, Quality Settings.</remarks>
            <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
        </member>
        <member name="P:UnityEngine.QualitySettings.lodBias">
            <summary>Global multiplier for the LOD's switching distance.</summary>
            <value>To be added.</value>
            <remarks>A larger value leads to a longer view distance before a lower resolution LOD is picked.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.masterTextureLimit">
            <summary>A texture size limit applied to all textures.</summary>
            <value>To be added.</value>
            <remarks>Setting this to one uses the first mipmap of each texture (so all textures are half size), setting this to two uses the second mipmap of each texture (so all textures are quarter size), etc.. This can be used to decrease video memory requirements on low-end computers. The default value is zero.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.maximumLODLevel">
            <summary>A maximum LOD level. All LOD groups.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.maxQueuedFrames">
            <summary>Maximum number of frames queued up by graphics driver.</summary>
            <value>To be added.</value>
            <remarks>Graphics drivers can queue up frames to be rendered. When CPU has much less work to do than the graphics card, is it possible for this queue to become quite large. In those cases, user's input will "lag behind" what is on the screen. Use QualitySettings.maxQueuedFrames to limit maximum number of frames that are queued. The default value is -1, which does not limit the queue. Note that using a low maxQueuedFrames value can lower your FPS count, because CPU will be waiting until the graphics card will finish rendering previous frames. But you will get lower input latency. Currently maxQueuedFrames is only implemented in Direct3D renderer; it will be ignored in OpenGL.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.names">
            <summary>The indexed list of available Quality Settings.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.particleRaycastBudget">
            <summary>Budget for how many ray casts can be performed per frame for approximate collision testing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.pixelLightCount">
            <summary>The maximum number of pixel lights that should affect any object.</summary>
            <value>To be added.</value>
            <remarks>If there are more lights illuminating an object, the dimmest ones will be rendered as vertex lights. Use this from scripting if you want to have finer control than offered by quality settings levels.See Also: Quality Settings.</remarks>
        </member>
        <member name="M:UnityEngine.QualitySettings.SetQualityLevel(System.Int32)">
            <summary>Sets a new graphics quality level.</summary>
            <remarks>Note that changing the quality level can be an expensive operation if the new level has different anti-aliasing setting. It's fine to change the level when applying in-game quality options, but if you want to dynamically adjustquality level at runtime, pass false to applyExpensiveChanges so that expensive changes are not always applied. When building a player quality levels that are not used for that platform are stripped. You should not expect a given quality setting to be at a given index. It's best to query the available quality settings and use the returned index. See Also: GetQualityLevel.</remarks>
            <param name="index">Quality index to set.</param>
        </member>
        <member name="M:UnityEngine.QualitySettings.SetQualityLevel(System.Int32,System.Boolean)">
            <summary>Sets a new graphics quality level.</summary>
            <remarks>Note that changing the quality level can be an expensive operation if the new level has different anti-aliasing setting. It's fine to change the level when applying in-game quality options, but if you want to dynamically adjustquality level at runtime, pass false to applyExpensiveChanges so that expensive changes are not always applied. When building a player quality levels that are not used for that platform are stripped. You should not expect a given quality setting to be at a given index. It's best to query the available quality settings and use the returned index. See Also: GetQualityLevel.</remarks>
            <param name="index">Quality index to set.</param>
            <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
        </member>
        <member name="P:UnityEngine.QualitySettings.shadowCascades">
            <summary>Number of cascades to use for directional light shadows.</summary>
            <value>To be added.</value>
            <remarks>See Also: Quality Settings.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.shadowDistance">
            <summary>Shadow drawing distance.</summary>
            <value>To be added.</value>
            <remarks>See Also: Quality Settings.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.shadowProjection">
            <summary>Directional light shadow projection.</summary>
            <value>To be added.</value>
            <remarks>See Also: Quality Settings.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.softVegetation">
            <summary>Use a two-pass shader for the vegetation in the terrain engine.</summary>
            <value>To be added.</value>
            <remarks>If enabled, vegetation will have smoothed edges, if disabled all plants will have hard edges but are rendered roughly twice as fast. See Also: Quality Settings.</remarks>
        </member>
        <member name="P:UnityEngine.QualitySettings.vSyncCount">
            <summary>The VSync Count.</summary>
            <value>To be added.</value>
            <remarks>The number of VSyncs that should pass between each frame. Use 'Don't Sync' (0) to not wait for VSync. Value must be 0, 1 or 2.See Also: Quality Settings.</remarks>
        </member>
        <member name="T:UnityEngine.Quaternion">
            <summary>Quaternions are used to represent rotations.</summary>
            <remarks>They are compact, don't suffer from gimbal lock and can easily be interpolated. Unity internally uses Quaternions to represent all rotations. Tthey are based on complex numbers and are not easy to understand intuitively. You almost never access or modify individual Quaternion components (x,y,z,w); most often you would just take existing rotations (e.g. from the Transform ) and use them to construct new rotations (e.g. to smoothly interpolate between two rotations). The Quaternion functions that you use 99% of the time are: Quaternion.LookRotation, Quaternion.Angle, Quaternion.Euler, Quaternion.Slerp, Quaternion.FromToRotation, and Quaternion.identity. (The other functions are only for exotic uses.) You can use the Quaternion.operator * to rotate one rotation by another, or to rotate a vector by a rotation.</remarks>
        </member>
        <member name="C:UnityEngine.Quaternion(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="w">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Angle(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns the angle in degrees between two rotations a and b.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.AngleAxis(System.Single,UnityEngine.Vector3)">
            <param name="angle">To be added.</param>
            <param name="axis">To be added.</param>
            <summary>Creates a rotation which rotates angle degrees around axis.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.AxisAngle(UnityEngine.Vector3,System.Single)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Dot(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>The dot product between two rotations.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Euler(UnityEngine.Vector3)">
            <param name="euler">To be added.</param>
            <summary>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Euler(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Quaternion.eulerAngles">
            <summary>Returns the euler angle representation of the rotation.</summary>
            <value>To be added.</value>
            <remarks>A rotation that rotates euler.z degrees around the z axis, euler.x degrees around the x axis, and euler.y degrees around the y axis (in that order).</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.EulerAngles(UnityEngine.Vector3)">
            <param name="euler">To be added.</param>
            <summary>Returns the euler angle representation of the rotation.</summary>
            <returns>To be added.</returns>
            <remarks>A rotation that rotates euler.z degrees around the z axis, euler.x degrees around the x axis, and euler.y degrees around the y axis (in that order).</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.EulerAngles(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Returns the euler angle representation of the rotation.</summary>
            <returns>To be added.</returns>
            <remarks>A rotation that rotates euler.z degrees around the z axis, euler.x degrees around the x axis, and euler.y degrees around the y axis (in that order).</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.EulerRotation(UnityEngine.Vector3)">
            <param name="euler">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.EulerRotation(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.FromToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="fromDirection">To be added.</param>
            <param name="toDirection">To be added.</param>
            <summary>Creates a rotation which rotates from fromDirection to toDirection.</summary>
            <returns>To be added.</returns>
            <remarks>Usually you use this to rotate a transform so that one of its axes eg. the y-axis - follows a target direction toDirection in world space.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Quaternion.identity">
            <summary>The identity rotation (Read Only). This quaternion corresponds to "no rotation": the object.</summary>
            <value>To be added.</value>
            <remarks>Is perfectly aligned with the world or parent axes.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Inverse(UnityEngine.Quaternion)">
            <param name="rotation">To be added.</param>
            <summary>Returns the Inverse of rotation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Quaternion.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Quaternion.kEpsilon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Lerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Interpolates between from and to by t and normalizes the result afterwards.</summary>
            <returns>To be added.</returns>
            <remarks>This is faster than Slerp but looks worse if the rotations are far apart.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3)">
            <summary>Creates a rotation with the specified forward and upwards directions.</summary>
            <returns>To be added.</returns>
            <remarks>Returns the computed quaternion. If used to orient a Transform, the Z axis will be aligned with forward and the Y axis with upwards if these vectors are orthogonal. Logs an error if the forward direction is zero.See Also: SetLookRotation.</remarks>
            <param name="forward">The direction to look in.</param>
        </member>
        <member name="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Creates a rotation with the specified forward and upwards directions.</summary>
            <returns>To be added.</returns>
            <remarks>Returns the computed quaternion. If used to orient a Transform, the Z axis will be aligned with forward and the Y axis with upwards if these vectors are orthogonal. Logs an error if the forward direction is zero.See Also: SetLookRotation.</remarks>
            <param name="forward">The direction to look in.</param>
            <param name="upwards">The vector that defines in which direction up is.</param>
        </member>
        <member name="M:UnityEngine.Quaternion.op_Equality(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.op_Inequality(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.op_Multiply(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.op_Multiply(UnityEngine.Quaternion,UnityEngine.Vector3)">
            <param name="rotation">To be added.</param>
            <param name="point">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.RotateTowards(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="maxDegreesDelta">To be added.</param>
            <summary>Rotates a rotation from towards to.</summary>
            <returns>To be added.</returns>
            <remarks>The from quaternion is rotated towards to by an angular step of maxDegreesDelta (but note that the rotation will not overshoot). Negative values of maxDegreesDelta will move away from to until the rotation is exactly the opposite direction.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.Set(System.Single,System.Single,System.Single,System.Single)">
            <param name="new_x">To be added.</param>
            <param name="new_y">To be added.</param>
            <param name="new_z">To be added.</param>
            <param name="new_w">To be added.</param>
            <summary>Set x, y, z and w components of an existing Quaternion.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetAxisAngle(UnityEngine.Vector3,System.Single)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetEulerAngles(UnityEngine.Vector3)">
            <param name="euler">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetEulerAngles(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetEulerRotation(UnityEngine.Vector3)">
            <param name="euler">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetEulerRotation(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetFromToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="fromDirection">To be added.</param>
            <param name="toDirection">To be added.</param>
            <summary>Creates a rotation which rotates from fromDirection to toDirection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.SetLookRotation(UnityEngine.Vector3)">
            <summary>Creates a rotation with the specified forward and upwards directions.</summary>
            <remarks>The result is applied to this quaternion If used to orient a Transform, the Z axis will be aligned with forward and the Y axis with upwards, assuming these vectors are orthogonal. Logs an error if the forward direction is zero. See Also: LookRotation.</remarks>
            <param name="view">The direction to look in.</param>
        </member>
        <member name="M:UnityEngine.Quaternion.SetLookRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Creates a rotation with the specified forward and upwards directions.</summary>
            <remarks>The result is applied to this quaternion If used to orient a Transform, the Z axis will be aligned with forward and the Y axis with upwards, assuming these vectors are orthogonal. Logs an error if the forward direction is zero. See Also: LookRotation.</remarks>
            <param name="view">The direction to look in.</param>
            <param name="up">The vector that defines in which direction up is.</param>
        </member>
        <member name="M:UnityEngine.Quaternion.Slerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Spherically interpolates between from and to by t.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToAngleAxis(System.Single@,UnityEngine.Vector3@)">
            <param name="angle">To be added.</param>
            <param name="axis">To be added.</param>
            <summary>Converts a rotation to angle-axis representation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToAxisAngle(UnityEngine.Vector3@,System.Single@)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToEuler">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToEulerAngles">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToEulerAngles(UnityEngine.Quaternion)">
            <param name="rotation">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToString">
            <summary>Returns a nicely formatted string of the Quaternion.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Quaternion.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string of the Quaternion.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Quaternion.w">
            <summary>W component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Quaternion.x">
            <summary>X component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Quaternion.y">
            <summary>Y component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Quaternion.z">
            <summary>Z component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.QueueMode">
            <summary>Used by Animation.Play function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.QueueMode.CompleteOthers">
            <summary>Will start playing after all other animations have stopped playing.</summary>
        </member>
        <member name="F:UnityEngine.QueueMode.PlayNow">
            <summary>Starts playing immediately. This can be used if you just want to quickly create a duplicate animation.</summary>
        </member>
        <member name="T:UnityEngine.Random">
            <summary>Class for generating random data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Random">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Random.insideUnitCircle">
            <summary>Returns a random point inside a circle with radius 1 (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Random.insideUnitSphere">
            <summary>Returns a random point inside a sphere with radius 1 (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Random.onUnitSphere">
            <summary>Returns a random point on the surface of a sphere with radius 1 (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Random.RandomRange(System.Int32,System.Int32)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Random.RandomRange(System.Single,System.Single)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Random.Range(System.Int32,System.Int32)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>Returns a random float number between and min [inclusive] and max [inclusive] (Read Only).Returns a random integer number between min [inclusive] and max [exclusive] (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Random.Range(System.Single,System.Single)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>Returns a random float number between and min [inclusive] and max [inclusive] (Read Only).Returns a random integer number between min [inclusive] and max [exclusive] (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Random.rotation">
            <summary>Returns a random rotation (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Random.rotationUniform">
            <summary>Returns a random rotation with uniform distribution (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Random.seed">
            <summary>Sets the seed for the random number generator.</summary>
            <value>To be added.</value>
            <remarks>The random number generator is not truly random but produces numbers in a preset sequence (the values in the sequence "jump" around the range in such a way that they appear random for most purposes). The point in the sequence where a particular run of pseudo-random values begins is selected using an integer called the seed value. The seed is normally set from some arbitrary value like the system clock before the random number functions are used. This prevents the same run of values from occurring each time a game is played and thus avoids predictable gameplay. However, it is sometimes useful to produce the same run of pseudo-random values on demand by setting the seed yourself. You might set your own seed, for example, when you generate a game level procedurally. You can use randomly-chosen elements to make the scene look arbitrary and natural but set the seed to a preset value before generating. This will make sure that the same "random" pattern is produced each time the game is played. This can often be an effective way to reduce a game's storage requirements - you can generate as many levels as you like procedurally and store each one using nothing more than an integer seed value.</remarks>
        </member>
        <member name="P:UnityEngine.Random.value">
            <summary>Returns a random number between 0.0 [inclusive] and 1.0 [inclusive] (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Both 0.0 and 1.0 may be returned by this property. This behaviour is different to that of many other random number generators which return a value less than but never exactly equal to 1.0.</remarks>
        </member>
        <member name="T:UnityEngine.RangeAttribute">
            <summary>Attribute used to make a float or int variable in a script be restricted to a specific range.</summary>
            <remarks>When this attribute is used, the float or int will be shown as a slider in the Inspector instead of the default number field.</remarks>
        </member>
        <member name="C:UnityEngine.RangeAttribute(System.Single,System.Single)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RangeAttribute.max">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RangeAttribute.min">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Ray">
            <summary>Representation of rays.</summary>
            <remarks>A ray is an infinite line starting at origin and going in some direction.</remarks>
        </member>
        <member name="C:UnityEngine.Ray(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="origin">To be added.</param>
            <param name="direction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Ray.direction">
            <summary>The direction of the ray.</summary>
            <value>To be added.</value>
            <remarks>Direction is always a normalized vector. If you assign a vector of non unit length, it will be normalized.</remarks>
        </member>
        <member name="M:UnityEngine.Ray.GetPoint(System.Single)">
            <param name="distance">To be added.</param>
            <summary>Returns a point at distance units along the ray.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Ray.origin">
            <summary>The origin point of the ray.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Ray.ToString">
            <summary>Returns a nicely formatted string for this ray.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Ray.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for this ray.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Ray2D">
            <summary>A ray in 2D space.</summary>
            <remarks>A ray is a line segment that extends from a point in space in a specified direction. Rays have a number of uses in Unity but the most common is probably raycasting. This technique involves tracing along the path of a ray from its origin to determine if it intersects with any objects. This is useful for plotting the paths of projectiles, determining lines of sight and implementing many common game mechanics. See Also: Physics2D.Raycast, Ray class, RaycastHit2D class.</remarks>
        </member>
        <member name="C:UnityEngine.Ray2D(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="origin">To be added.</param>
            <param name="direction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Ray2D.direction">
            <summary>The direction of the ray in world space.</summary>
            <value>To be added.</value>
            <remarks>See Also: origin.</remarks>
        </member>
        <member name="M:UnityEngine.Ray2D.GetPoint(System.Single)">
            <summary>Get a point that lies a given distance along a ray.</summary>
            <returns>To be added.</returns>
            <remarks>The distance is measured away from the ray's origin along its direction. See Also: origin, direction.</remarks>
            <param name="distance">Distance of the desired point along the path of the ray.</param>
        </member>
        <member name="P:UnityEngine.Ray2D.origin">
            <summary>The starting point of the ray in world space.</summary>
            <value>To be added.</value>
            <remarks>See Also: direction.</remarks>
        </member>
        <member name="M:UnityEngine.Ray2D.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Ray2D.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RaycastCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.RaycastCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastCollider.center">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastCollider.length">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RaycastHit">
            <summary>Structure used to get information back from a raycast.</summary>
            <remarks>See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.barycentricCoordinate">
            <summary>The barycentric coordinate of the triangle we hit.</summary>
            <value>To be added.</value>
            <remarks>This lets you interpolate any of the vertex data along the 3 axes.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.collider">
            <summary>The Collider that was hit.</summary>
            <value>To be added.</value>
            <remarks>This property is null if the ray hit nothing and not-null if it hit a Collider.See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.distance">
            <summary>The distance from the ray's origin to the impact point.</summary>
            <value>To be added.</value>
            <remarks>See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.lightmapCoord">
            <summary>The uv lightmap coordinate at the impact point.</summary>
            <value>To be added.</value>
            <remarks>This can be used for sampling the lightmap and setting the sampled color value as the material color of a moving object to make it roughly match the baked lighting. This is simply the textureCoord2 transformed by lightmapTilingOffset.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.normal">
            <summary>The normal of the surface the ray hit.</summary>
            <value>To be added.</value>
            <remarks>See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.point">
            <summary>The impact point in world space where the ray hit the collider.</summary>
            <value>To be added.</value>
            <remarks>See Also: Physics.Raycast, Physics.Linecast.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.rigidbody">
            <summary>The Rigidbody of the collider that was hit. If the collider is not attached to a rigidbody then it is null.</summary>
            <value>To be added.</value>
            <remarks>See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.textureCoord">
            <summary>The uv texture coordinate at the impact point.</summary>
            <value>To be added.</value>
            <remarks>This can be used for 3D texture painting or drawing bullet marks. If the collider is no mesh collider, zero Vector2 will be returned.See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.textureCoord1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.textureCoord2">
            <summary>The secondary uv texture coordinate at the impact point.</summary>
            <value>To be added.</value>
            <remarks>This can be used for 3D texture painting or drawing bullet marks. If the collider is not a mesh collider, Vector2.zero will be returned. If the mesh contains no secondary uv set, the uv of the primary uv set will be returned.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.transform">
            <summary>The Transform of the rigidbody or collider that was hit.</summary>
            <value>To be added.</value>
            <remarks>See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit.triangleIndex">
            <summary>The index of the triangle that was hit.</summary>
            <value>To be added.</value>
            <remarks>Triangle index is only valid if the collider that was hit is a MeshCollider .See Also: Physics.Raycast, Physics.Linecast, Physics.RaycastAll.</remarks>
        </member>
        <member name="T:UnityEngine.RaycastHit2D">
            <summary>Information returned about an object detected by a raycast in 2D physics.</summary>
            <remarks>A raycast is used to detect objects that lie along the path of a ray and is conceptually like firing a laser beam into the scene and observing which objects are hit by it. The RaycastHit2D class is used by Physics2D.Raycast and other functions to return information about the objects detected by raycasts. See Also: Physics2D.Raycast, Ray2D class.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit2D.collider">
            <summary>The collider hit by the ray.</summary>
            <value>To be added.</value>
            <remarks>This can be useful if the hit object has more than one collider - this property can be used to determine the specific collider rather than just the object. Note that some functions that return a single RaycastHit2D will leave the collider as NULL which indicates nothing hit. RaycastHit2D implements an implicit conversion operator converting to bool which checks this property allowing it to be used as a simple condition check for whether a hit occurred or not.</remarks>
        </member>
        <member name="M:UnityEngine.RaycastHit2D.CompareTo(UnityEngine.RaycastHit2D)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit2D.fraction">
            <summary>Fraction of the distance along the ray that the hit occurred.</summary>
            <value>To be added.</value>
            <remarks>If the ray's direction vector is normalised then this value is simply the distance between the origin and the hit point. If the direction is not normalised then this distance is expressed as a "fraction" (which could be greater than 1) of the vector's magnitude. See Also: point.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit2D.normal">
            <summary>The normal vector of the surface hit by the ray.</summary>
            <value>To be added.</value>
            <remarks>The normal vector of a surface is the vector that points outward perpenidularly at a given point on that surface. This vector can be useful in raycasting as a way to determine reflections or ricochets from projectiles or to align a character so that it stands upright on the surface. Note that if a hit occurs starting inside a collider then the collision normal will be simply the opposite direction of the line/ray query.</remarks>
        </member>
        <member name="M:UnityEngine.RaycastHit2D.op_Implicit(UnityEngine.RaycastHit2D)~System.Boolean">
            <param name="hit">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit2D.point">
            <summary>The point in world space where the ray hit the collider's surface.</summary>
            <value>To be added.</value>
            <remarks>The exact point of contact can be useful for positioning graphic effects (such as explosion or blood splatters) and for determining which specific part of an object was hit. See Also: fraction.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit2D.rigidbody">
            <summary>The Rigidbody2D attached to the object that was hit.</summary>
            <value>To be added.</value>
            <remarks>See Also: Rigidbody2D class.</remarks>
        </member>
        <member name="P:UnityEngine.RaycastHit2D.transform">
            <summary>The Transform of the object that was hit.</summary>
            <value>To be added.</value>
            <remarks>See Also: Transform class.</remarks>
        </member>
        <member name="T:UnityEngine.Rect">
            <summary>A 2D Rectangle defined by x, y position and width, height.</summary>
            <remarks>The Rect structure is mainly used for 2D operations. The UnityGUI system uses it extensively  and it is also to set the onscreen position of a Camera's view. The rectangle can be specified in two different ways. The first way involves  supplying the top-left corner coordinate along with the width and height. This is  done using the x, y, width and height properties.</remarks>
        </member>
        <member name="C:UnityEngine.Rect(UnityEngine.Rect)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Rect(System.Single,System.Single,System.Single,System.Single)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.bottom">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.center">
            <summary>Center coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector2)">
            <summary>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="point">Point to test.</param>
        </member>
        <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3)">
            <summary>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="point">Point to test.</param>
        </member>
        <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3,System.Boolean)">
            <summary>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="point">Point to test.</param>
            <param name="allowInverse">Does the test allow the Rect's width and height to be negative?</param>
        </member>
        <member name="M:UnityEngine.Rect.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.height">
            <summary>Height of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.left">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.MinMaxRect(System.Single,System.Single,System.Single,System.Single)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>Creates a rectangle from min/max coordinate values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.op_Equality(UnityEngine.Rect,UnityEngine.Rect)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.op_Inequality(UnityEngine.Rect,UnityEngine.Rect)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect,System.Boolean)">
            <param name="other">To be added.</param>
            <param name="allowInverse">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.right">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.Set(System.Single,System.Single,System.Single,System.Single)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Set components of an existing Rect.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.top">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.ToString">
            <summary>Returns a nicely formatted string for this Rect.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rect.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for this Rect.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.width">
            <summary>Width of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.x">
            <summary>Left coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.xMax">
            <summary>Right coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>Changing this value will preserve left side of rectangle (so width will change as well).</remarks>
        </member>
        <member name="P:UnityEngine.Rect.xMin">
            <summary>Left coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>Changing this value will preserve right side of rectangle (so width will change as well).</remarks>
        </member>
        <member name="P:UnityEngine.Rect.y">
            <summary>Top coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rect.yMax">
            <summary>Bottom coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>Changing this value will preserve top side of rectangle (so height will change as well).</remarks>
        </member>
        <member name="P:UnityEngine.Rect.yMin">
            <summary>Top coordinate of the rectangle.</summary>
            <value>To be added.</value>
            <remarks>Changing this value will preserve bottom side of rectangle (so height will change as well).</remarks>
        </member>
        <member name="T:UnityEngine.RectOffset">
            <summary>Offsets for rectangles, borders, etc.</summary>
            <remarks>Used all over the place by GUIStyle.</remarks>
        </member>
        <member name="C:UnityEngine.RectOffset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.RectOffset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="top">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RectOffset.Add(UnityEngine.Rect)">
            <param name="rect">To be added.</param>
            <summary>Add the border offsets to a rect.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RectOffset.bottom">
            <summary>Bottom edge size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RectOffset.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RectOffset.horizontal">
            <summary>Shortcut for left + right. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RectOffset.left">
            <summary>Left edge size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RectOffset.Remove(UnityEngine.Rect)">
            <param name="rect">To be added.</param>
            <summary>Remove the border offsets from a rect.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RectOffset.right">
            <summary>Right edge size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RectOffset.top">
            <summary>Top edge size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RectOffset.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RectOffset.vertical">
            <summary>Shortcut for top + bottom. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RemoteNotification">
            <summary>RemoteNotification is only available on iPhoneiPadiPod Touch.</summary>
            <remarks>Remote notifications are sent by an application's remote server (its provider) to Apple Push Notification service  which pushes the notification to devices on which the application is installed. Remote notifications are registered for and handled using NotificationServices class.</remarks>
        </member>
        <member name="P:UnityEngine.RemoteNotification.alertBody">
            <summary>The message displayed in the notification alert. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RemoteNotification.applicationIconBadgeNumber">
            <summary>The number to display as the application's icon badge. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RemoteNotification.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RemoteNotification.hasAction">
            <summary>A boolean value that controls whether the alert action is visible or not. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RemoteNotification.soundName">
            <summary>The name of the sound file to play when an alert is displayed. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RemoteNotification.userInfo">
            <summary>A dictionary for passing custom information to the notified application. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RemoteNotificationType">
            <summary>Specify remote notification types.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RemoteNotificationType.Alert">
            <summary>The application accepts alert messages as notifications.</summary>
        </member>
        <member name="F:UnityEngine.RemoteNotificationType.Badge">
            <summary>The application accepts notifications that badge the application icon.</summary>
        </member>
        <member name="F:UnityEngine.RemoteNotificationType.None">
            <summary>The application accepts no notifications.</summary>
        </member>
        <member name="F:UnityEngine.RemoteNotificationType.Sound">
            <summary>The application accepts alert sounds as notifications.</summary>
        </member>
        <member name="T:UnityEngine.RenderBuffer">
            <summary>Color or depth buffer part of a RenderTexture.</summary>
            <remarks>A single RenderTexture object represents both color and depth buffers, but many complex rendering algorithms require using the same depth buffer with multiple color buffers or vice versa. This class represents either a color or a depth buffer part of a RenderTexture. See Also: RenderTexture.colorBuffer, RenderTexture.depthBuffer, Graphics.activeColorBuffer, Graphics.activeDepthBuffer, Graphics.SetRenderTarget.</remarks>
        </member>
        <member name="T:UnityEngine.Renderer">
            <summary>General functionality for all renderers.</summary>
            <remarks>A renderer is what makes an object appear on the screen. For any GameObject or component its renderer can be accessed trough a renderer property:Use this class to access the renderer of any object, mesh or particle system. Renderers can be disabled to make objects invisible (see enabled ), and the materials can be accessed and modified through them (see material ). See Also: Renderer components for meshes, particles, lines and trails.</remarks>
        </member>
        <member name="C:UnityEngine.Renderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.bounds">
            <summary>The bounding volume of the renderer (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the axis-aligned bounding box fully enclosing the object in world space. Using bounds is convenient to make rough approximations about the object's location and its extents. For example, /renderer.bounds.center/ often is more precise "center of the object" than /transform.position/ - especially if the object is not symmetrical. See also Mesh.bounds property that returns bounds of the mesh in local space.Another example:See Also: Bounds class, Mesh.bounds property.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.castShadows">
            <summary>Does this object cast shadows?</summary>
            <value>To be added.</value>
            <remarks>See Also: receiveShadows, Light.shadows.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.enabled">
            <summary>Makes the rendered 3D object visible if enabled.</summary>
            <value>To be added.</value>
            <remarks>Another example:</remarks>
        </member>
        <member name="M:UnityEngine.Renderer.GetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
            <param name="dest">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.isPartOfStaticBatch">
            <summary>Has this renderer been statically batched with any other renderers?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.isVisible">
            <summary>Is this renderer visible in any camera? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Note that object is considered visible when it needs to be rendered in the scene. It might not be actually visible by any camera, but still need to be rendered for shadows for example. Also, when running in the editor, the scene view cameras will also cause this value to be true. See Also: OnBecameVisible, OnBecameInvisible.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.lightmapIndex">
            <summary>The index of the lightmap applied to this renderer.</summary>
            <value>To be added.</value>
            <remarks>The index refers to lightmaps array in LightmapSettings class. A value of 255 means no lightmap has been assigned, which is the default. A value of 254 is internally used for objects, that have their scale in lightmap set to 0, so behave as lightmapped, but don't have a lightmap assigned. The index can't be larger than 253. A scene can have several lightmaps stored in it, and Renderer can use one of those lightmaps. This makes it possible to use the same material on multiple objects, while each object can refer to a different lightmap or different portion of the same lightmap. See Also: LightmapSettings class, lightmapTilingOffset property, ShaderLab properties.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.lightmapTilingOffset">
            <summary>The tiling &amp;amp; offset used for lightmap.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.lightProbeAnchor">
            <summary>If set, Renderer will use this Transform's position to find the interpolated light probe.</summary>
            <value>To be added.</value>
            <remarks>Otherwise the center of Renderer's AABB will be used.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.localToWorldMatrix">
            <summary>Matrix that transforms a point from local space into world space (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This property MUST be used instead of Transform.localToWorldMatrix, if you're setting shader parameters.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.material">
            <summary>The material of this object.</summary>
            <value>To be added.</value>
            <remarks>Modifying material will change the material for this object only. If the material is used by any other renderers, this will clone the shared material and start using it from now on. Important note: This function automatically instantiates the materials and makes them unique to this renderer. It is your responsibility to destroy the materials when the GameObject is being destroyed. Resources.UnloadUnusedAssets also destroys the materials but it is usually only called when loading a new level.Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.materials">
            <summary>All the materials of this object.</summary>
            <value>To be added.</value>
            <remarks>This is an array of all materials used by the renderer. Unity supports a single object using multiple materials; in this case materials contains all the materials. sharedMaterial and material properties return the first used material if there is more than one. Modifying any material in materials will change the appearance of only that object. Note that like all arrays returned by Unity, this returns a copy of materials array. If you want to change some materials in it, get the value, change an entry and set materials back. Important note: This function automatically instantiates the materials and makes them unique to this renderer. It is your responsibility to destroy the materials when the GameObject is being destroyed. Resources.UnloadUnusedAssets also destroys the materials but it is usually only called when loading a new level.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.receiveShadows">
            <summary>Does this object receive shadows?</summary>
            <value>To be added.</value>
            <remarks>See Also: castShadows.</remarks>
        </member>
        <member name="M:UnityEngine.Renderer.Render(System.Int32)">
            <param name="material">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Renderer.SetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
            <param name="properties">To be added.</param>
            <summary>Lets you add per-renderer material parameters without duplicating a material.</summary>
            <remarks>This is recommended when changing material properties often. With multithreaded rendering, it is more efficient than setting properties directly on the material. See Also: MaterialPropertyBlock.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.sharedMaterial">
            <summary>The shared material of this object.</summary>
            <value>To be added.</value>
            <remarks>Modifying sharedMaterial will change the appearance of all objects using this material, and change material settings that are stored in the project too. It is not recommended to modify materials returned by sharedMaterial. If you want to modify the material of a renderer use material instead. See Also: material property.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.sharedMaterials">
            <summary>All the shared materials of this object.</summary>
            <value>To be added.</value>
            <remarks>This is an array of all materials used by the renderer. Unity supports a single object using multiple materials; in this case sharedMaterials contains all the materials. sharedMaterial and material properties return the first used material if there is more than one. Modifying any material in sharedMaterials will change the appearance of all objects using this material, and change material settings that are stored in the project too. It is not recommended to modify materials returned by sharedMaterials. If you want to modify the material of a renderer use material instead. Note that like all arrays returned by Unity, this returns a copy of materials array. If you want to change some materials in it, get the value, change an entry and set materials back.See Also: material, sharedMaterial properties.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.sortingLayerID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.sortingLayerName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.sortingOrder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.useLightProbes">
            <summary>Use light probes for this Renderer.</summary>
            <value>To be added.</value>
            <remarks>If enabled and baked light probes are present in the scene, an interpolated light probe will be calculated for this object and set as built-in shader uniform variables. Surface shaders use this information automatically. To add light probe contribution to your custom non-surface shaders, use ShadeSH9(worldSpaceNormal) in your vertex or pixel shader.</remarks>
        </member>
        <member name="P:UnityEngine.Renderer.worldToLocalMatrix">
            <summary>Matrix that transforms a point from world space into local space (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This property MUST be used instead of Transform.worldToLocalMatrix, if you're setting shader parameters.</remarks>
        </member>
        <member name="T:UnityEngine.RenderingPath">
            <summary>Rendering path of a Camera.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RenderingPath.DeferredLighting">
            <summary>Deferred Lighting.</summary>
        </member>
        <member name="F:UnityEngine.RenderingPath.Forward">
            <summary>Forward Rendering.</summary>
        </member>
        <member name="F:UnityEngine.RenderingPath.UsePlayerSettings">
            <summary>Use Player Settings.</summary>
        </member>
        <member name="F:UnityEngine.RenderingPath.VertexLit">
            <summary>Vertex Lit.</summary>
        </member>
        <member name="T:UnityEngine.RenderSettings">
            <summary>The Render Settings contain values for a range of visual elements in your scene, like fog and ambient light.</summary>
            <remarks>See Also: Render Settings manager.</remarks>
        </member>
        <member name="C:UnityEngine.RenderSettings">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.ambientLight">
            <summary>Color of the scene's ambient light.</summary>
            <value>To be added.</value>
            <remarks>See Also: Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.flareFadeSpeed">
            <summary>The fade speed of all flares in the scene.</summary>
            <value>To be added.</value>
            <remarks>See Also: Render Settings manager, LensFlare component.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.flareStrength">
            <summary>The intensity of all flares in the scene.</summary>
            <value>To be added.</value>
            <remarks>See Also: Render Settings manager, LensFlare component.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.fog">
            <summary>Is fog enabled?</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.fogColor">
            <summary>The color of the fog.</summary>
            <value>To be added.</value>
            <remarks>See Also: Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.fogDensity">
            <summary>The density of the exponential fog.</summary>
            <value>To be added.</value>
            <remarks>Fog density is used by Exponential and ExponentialSquared modes.See Also: RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.fogEndDistance">
            <summary>The ending distance of linear fog.</summary>
            <value>To be added.</value>
            <remarks>Fog start and end distances are used by Linear fog mode. See Also: RenderSettings.fogStartDistance, RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.fogMode">
            <summary>Fog mode to use.</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderSettings.fog, Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.fogStartDistance">
            <summary>The starting distance of linear fog.</summary>
            <value>To be added.</value>
            <remarks>Fog start and end distances are used by Linear fog mode. See Also: RenderSettings.fogEndDistance, RenderSettings.fogMode, Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.haloStrength">
            <summary>Size of the Light halos.</summary>
            <value>To be added.</value>
            <remarks>For any light, the size of the halo is this value multiplied by Light.range.See Also: Render Settings manager.</remarks>
        </member>
        <member name="P:UnityEngine.RenderSettings.skybox">
            <summary>The global skybox to use.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RenderTexture">
            <summary>Render textures are textures that can be rendered to.</summary>
            <remarks>They can be used to implement image based rendering effects, dynamic shadows, projectors, reflections or surveillance cameras. All rendering goes into the active RenderTexture ( active class property). If the active RenderTexture is null everything is rendered to the main window. For short-lived temporary render textures, use GetTemporary and ReleaseTemporary functions. These are most often useful in image post processing effects. Note that while RenderTexture assets can be only power-of-two size, it is possible to create a non-power-of-two render textures from scripts. These are most often used for image post processing effects. Keep in mind that render texture contents can become "lost" on certain events, like loading a new level, system going to a screensaver mode, in and our of fullscreen and so on. When that happens, your existing render textures will become "not yet created" again, you can check for that with IsCreated function. RenderTexture class is only available in Unity Pro.</remarks>
        </member>
        <member name="C:UnityEngine.RenderTexture(System.Int32,System.Int32,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="depth">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.RenderTexture(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="depth">To be added.</param>
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.RenderTexture(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="depth">To be added.</param>
            <param name="format">To be added.</param>
            <param name="readWrite">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.active">
            <summary>The active render texture.</summary>
            <value>To be added.</value>
            <remarks>All rendering goes into the active RenderTexture. If the active RenderTexture is null everything is rendered in the main window. When a RenderTexture becomes active its hardware rendering context is automatically created if it hasn't been created already.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.antiAliasing">
            <summary>The antialiasing level for the RenderTexture.</summary>
            <value>To be added.</value>
            <remarks>The value is specified as a power of two (0, 1, 2, 4 or 8) indicating the number of multisamples per pixel.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.colorBuffer">
            <summary>Color buffer of the render texture (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderBuffer, depthBuffer, Graphics.SetRenderTarget.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.Create">
            <summary>Actually creates the RenderTexture.</summary>
            <returns>To be added.</returns>
            <remarks>RenderTexture constructor does not actually create the hardware texture; by default the texture is created the first time it is set active. Calling Create lets you create it up front. Create does nothing if the texture is already created. See Also: Release, IsCreated functions.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.depth">
            <summary>The precision of the render texture's depth buffer in bits (0, 16, 24 are supported).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.depthBuffer">
            <summary>Depth buffer of the render texture (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderBuffer, colorBuffer, Graphics.SetRenderTarget.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.DiscardContents">
            <summary>Discards the contents of the RenderTexture.</summary>
            <remarks>On some platforms, it can be good for performance if you indicate when the current contents of a RenderTexture aren't needed anymore. This can save copying it from one kind of memory to another when the texture is reused. Xbox 360 and many mobile GPUs benefit from this. Both the colour buffer and depth buffer are discarded by default but either can be selected individually using the optional boolean parameters.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.DiscardContents(System.Boolean,System.Boolean)">
            <summary>Discards the contents of the RenderTexture.</summary>
            <remarks>On some platforms, it can be good for performance if you indicate when the current contents of a RenderTexture aren't needed anymore. This can save copying it from one kind of memory to another when the texture is reused. Xbox 360 and many mobile GPUs benefit from this. Both the colour buffer and depth buffer are discarded by default but either can be selected individually using the optional boolean parameters.</remarks>
            <param name="discardColor">Should the colour buffer be discarded?</param>
            <param name="discardDepth">Should the depth buffer be discarded?</param>
        </member>
        <member name="P:UnityEngine.RenderTexture.enabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.enableRandomWrite">
            <summary>Enable DX11 random access write into this render texture.</summary>
            <value>To be added.</value>
            <remarks>DirectX 11 pixel or compute shaders can write into arbitrary locations of some textures, called "unordered access views" in DX11. Set this flag before creating your render texture to enable this capability. When a texture has this flag set, it can be written into as one RWTexture* resources in shaders. It can also be set as random access write target for pixel shaders using Graphics.SetRandomWriteTarget. See Also: Graphics.SetRandomWriteTarget, DirectX 11.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.format">
            <summary>The format of the render texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: RenderTextureFormat.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.generateMips">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32)">
            <summary>Allocate a temporary render texture.</summary>
            <returns>To be added.</returns>
            <remarks>This function is optimized for when you need a quick RenderTexture to do some temporary calculations. Release it using ReleaseTemporary as soon as you're done with it, so another call can start reusing it if needed. Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often just returns an already created one (if the size and format matches). These temporary render textures are actually destroyed when they aren't used for a couple of frames. If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally do a DiscardContents call which helps to avoid costly restore operations on the previous render texture contents. You can not depend on any particular contents of the RenderTexture you get from GetTemporary function. It might be garbage, or it might be cleared to some color, depending on the platform.</remarks>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
        </member>
        <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32)">
            <summary>Allocate a temporary render texture.</summary>
            <returns>To be added.</returns>
            <remarks>This function is optimized for when you need a quick RenderTexture to do some temporary calculations. Release it using ReleaseTemporary as soon as you're done with it, so another call can start reusing it if needed. Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often just returns an already created one (if the size and format matches). These temporary render textures are actually destroyed when they aren't used for a couple of frames. If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally do a DiscardContents call which helps to avoid costly restore operations on the previous render texture contents. You can not depend on any particular contents of the RenderTexture you get from GetTemporary function. It might be garbage, or it might be cleared to some color, depending on the platform.</remarks>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
        </member>
        <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat)">
            <summary>Allocate a temporary render texture.</summary>
            <returns>To be added.</returns>
            <remarks>This function is optimized for when you need a quick RenderTexture to do some temporary calculations. Release it using ReleaseTemporary as soon as you're done with it, so another call can start reusing it if needed. Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often just returns an already created one (if the size and format matches). These temporary render textures are actually destroyed when they aren't used for a couple of frames. If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally do a DiscardContents call which helps to avoid costly restore operations on the previous render texture contents. You can not depend on any particular contents of the RenderTexture you get from GetTemporary function. It might be garbage, or it might be cleared to some color, depending on the platform.</remarks>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
            <param name="format">Render texture format.</param>
        </member>
        <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite)">
            <summary>Allocate a temporary render texture.</summary>
            <returns>To be added.</returns>
            <remarks>This function is optimized for when you need a quick RenderTexture to do some temporary calculations. Release it using ReleaseTemporary as soon as you're done with it, so another call can start reusing it if needed. Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often just returns an already created one (if the size and format matches). These temporary render textures are actually destroyed when they aren't used for a couple of frames. If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally do a DiscardContents call which helps to avoid costly restore operations on the previous render texture contents. You can not depend on any particular contents of the RenderTexture you get from GetTemporary function. It might be garbage, or it might be cleared to some color, depending on the platform.</remarks>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
            <param name="format">Render texture format.</param>
            <param name="readWrite">sRGB handling mode.</param>
        </member>
        <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite,System.Int32)">
            <summary>Allocate a temporary render texture.</summary>
            <returns>To be added.</returns>
            <remarks>This function is optimized for when you need a quick RenderTexture to do some temporary calculations. Release it using ReleaseTemporary as soon as you're done with it, so another call can start reusing it if needed. Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often just returns an already created one (if the size and format matches). These temporary render textures are actually destroyed when they aren't used for a couple of frames. If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally do a DiscardContents call which helps to avoid costly restore operations on the previous render texture contents. You can not depend on any particular contents of the RenderTexture you get from GetTemporary function. It might be garbage, or it might be cleared to some color, depending on the platform.</remarks>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
            <param name="format">Render texture format.</param>
            <param name="readWrite">sRGB handling mode.</param>
            <param name="antiAliasing">Anti-aliasing (1,2,4,8).</param>
        </member>
        <member name="M:UnityEngine.RenderTexture.GetTexelOffset">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.height">
            <summary>The height of the render texture in pixels.</summary>
            <value>To be added.</value>
            <remarks>Note that unlike Texture.height property, this is both read and write - setting a value changes size.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.IsCreated">
            <summary>Is the render texture actually created?</summary>
            <returns>To be added.</returns>
            <remarks>RenderTexture constructor does not actually create the hardware texture; by default the texture is created the first time it is set active. IsCreated returns true if the hardware resources for this render are created. See Also: Create, Release functions.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.isCubemap">
            <summary>If enabled, this Render Texture will be used as a Cubemap.</summary>
            <value>To be added.</value>
            <remarks>Cubemap render textures are most often used for dynamic cubemap reflections, see Camera.RenderToCubemap. A cubemap render texture must have the same width and height, and must be power of two size. See Also: Camera.RenderToCubemap, Reflective shaders.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.isPowerOfTwo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.isVolume">
            <summary>If enabled, this Render Texture will be used as a Texture3D.</summary>
            <value>To be added.</value>
            <remarks>Volumetric render textures currently only work on DirectX 11. You can render into them using "random access writes" from a pixel shader or a compute shader. See Also: volumeDepth, enableRandomWrite.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.MarkRestoreExpected">
            <summary>Indicate that there's a RenderTexture restore operation expected.</summary>
            <remarks>When in mobile graphics emulation mode, Unity issues warnings when a RenderTexture "restore" operation is performed. Restore happens when rendering into a texture, without clearing or discarding ( DiscardContents ) it first. This is a costly operation on many mobile GPUs and multi-GPU systems and best should be avoided. However, if your rendering effect absolutely needs a RenderTexture restore, you can call this function to indicate that yes, a restore is expected, and Unity will not issue a warning here.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.Release">
            <summary>Releases the RenderTexture.</summary>
            <remarks>This function releases the hardware resources used by the render texture. The texture itself is not destroyed, and will be automatically created again when being used. See Also: Create, IsCreated functions.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.ReleaseTemporary(UnityEngine.RenderTexture)">
            <param name="temp">To be added.</param>
            <summary>Release a temporary texture allocated with GetTemporary.</summary>
            <remarks>Later calls to GetTemporary will reuse the RenderTexture created earlier if possible. When no one has requested the temporary RenderTexture for a few frames it will be destroyed. See Also: GetTemporary function.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.SetBorderColor(UnityEngine.Color)">
            <param name="color">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.SetGlobalShaderProperty(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Assigns this RenderTexture as a global shader property named propertyName.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.sRGB">
            <summary>Does this render texture use sRGB read / write (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The value of this property is fixed for the life of the RenderTexture but it can be set using the readWrite parameter of the RenderTexture constructor function. See Also: ColorSpace.</remarks>
        </member>
        <member name="M:UnityEngine.RenderTexture.SupportsStencil(UnityEngine.RenderTexture)">
            <param name="rt">To be added.</param>
            <summary>Does the RenderTexture have stencil buffer?</summary>
            <returns>To be added.</returns>
            <remarks>If rt is null, will report the status for the main screen.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.useMipMap">
            <summary>Generate mipmap levels?</summary>
            <value>To be added.</value>
            <remarks>When set to true, rendering into this render texture will create and generate mipmap levels. By default render textures don't have mipmaps. This flag can be used only on render textures that have power-of-two size.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.volumeDepth">
            <summary>Volume extent of a 3D render texture.</summary>
            <value>To be added.</value>
            <remarks>For volumetric render textures (see isVolume ), this variable determines the volume extent. See Also: isVolume.</remarks>
        </member>
        <member name="P:UnityEngine.RenderTexture.width">
            <summary>The width of the render texture in pixels.</summary>
            <value>To be added.</value>
            <remarks>Note that unlike Texture.width property, this is both read and write - setting a value changes size.</remarks>
        </member>
        <member name="T:UnityEngine.RenderTextureFormat">
            <summary>Format of a RenderTexture.</summary>
            <remarks>See Also: RenderTexture.format, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.ARGB1555">
            <summary>Color render texture format, 1 bit for Alpha channel, 5 bits for Red, Green and Blue channels.</summary>
            <remarks>Note that not all graphics cards support 16 bit textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.ARGB32">
            <summary>Color render texture format, 8 bits per channel.</summary>
            <remarks>See Also: RenderTexture.format, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.ARGB4444">
            <summary>Color render texture format, 4 bit per channel.</summary>
            <remarks>Note that not all graphics cards support 16 bit textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.ARGBFloat">
            <summary>Color render texture format, 32 bit floating point per channel.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.ARGBHalf">
            <summary>Color render texture format, 16 bit floating point per channel.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.ARGBInt">
            <summary>Four channel (ARGB) render texture format, 32 bit signed integer per channel.</summary>
            <remarks>Note that not all graphics cards support integer render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.Default">
            <summary>Default color render texture format: will be chosen accordingly to Frame Buffer format and Platform.</summary>
            <remarks>See Also: RenderTexture.format, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.DefaultHDR">
            <summary>Default HDR color render texture format: will be chosen accordingly to Frame Buffer format and Platform.</summary>
            <remarks>See Also: RenderTexture.format, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.Depth">
            <summary>A depth render texture format.</summary>
            <remarks>Depth format is used to render high precision "depth" value into a render texture. Which format is actually used depends on the platform. On OpenGL it is the native "depth component" format (usually 24 or 16 bits), on Direct3D9 it is the 32 bit floating point ("R32F") format. When writing shaders that use or render into a depth texture, care must be taken to ensure that they work both on OpenGL and on Direct3D, see depth textures documentation. Note that not all graphics cards support depth textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.R8">
            <summary>Scalar (R) render texture format, 8 bit fixed point.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RFloat">
            <summary>Scalar (R) render texture format, 32 bit floating point.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RGB565">
            <summary>Color render texture format.</summary>
            <remarks>5 bits for Red channel, 6 bits for Green channel, 5 bits for Blue channel Note that not all graphics cards support 16 bit textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RGFloat">
            <summary>Two color (RG) render texture format, 32 bit floating point per channel.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RGHalf">
            <summary>Two color (RG) render texture format, 16 bit floating point per channel.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RGInt">
            <summary>Two channel (RG) render texture format, 32 bit signed integer per channel.</summary>
            <remarks>Note that not all graphics cards support integer render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RHalf">
            <summary>Scalar (R) render texture format, 16 bit floating point.</summary>
            <remarks>Note that not all graphics cards support floating point render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureFormat.RInt">
            <summary>Scalar (R) render texture format, 32 bit signed integer.</summary>
            <remarks>Note that not all graphics cards support integer render textures. Use SystemInfo.SupportsRenderTextureFormat to check for support. See Also: RenderTexture.format, RenderTexture class, SystemInfo.SupportsRenderTextureFormat.</remarks>
        </member>
        <member name="T:UnityEngine.RenderTextureReadWrite">
            <summary>Read write mode of a RenderTexture.</summary>
            <remarks>See Also: RenderTexture.sRGB, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureReadWrite.Default">
            <summary>The correct color space for the current position in the rendering pipeline.</summary>
            <remarks>See Also: RenderTexture.sRGB, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureReadWrite.Linear">
            <summary>No sRGB reads or writes to this render texture.</summary>
            <remarks>See Also: RenderTexture.sRGB, RenderTexture class.</remarks>
        </member>
        <member name="F:UnityEngine.RenderTextureReadWrite.sRGB">
            <summary>sRGB reads and writes to this render texture.</summary>
            <remarks>See Also: RenderTexture.sRGB, RenderTexture class.</remarks>
        </member>
        <member name="T:UnityEngine.RequireComponent">
            <summary>The RequireComponent attribute lets automatically add required component as a dependency.</summary>
            <remarks>When you add a script which uses RequireComponent, the required component will automatically be added to the GameObject. This is useful to avoid setup errors. For example a script might require that a rigid body is always added to the same GameObject. Using RequireComponent this will be done automatically, thus you can never get the setup wrong.C# Example:</remarks>
        </member>
        <member name="C:UnityEngine.RequireComponent(System.Type)">
            <param name="requiredComponent">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.RequireComponent(System.Type,System.Type)">
            <param name="requiredComponent">To be added.</param>
            <param name="requiredComponent2">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.RequireComponent(System.Type,System.Type,System.Type)">
            <param name="requiredComponent">To be added.</param>
            <param name="requiredComponent2">To be added.</param>
            <param name="requiredComponent3">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RequireComponent.m_Type0">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RequireComponent.m_Type1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RequireComponent.m_Type2">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Resolution">
            <summary>Represents a display resolution.</summary>
            <remarks>Resolution structures are returned by Screen.resolutions property.</remarks>
        </member>
        <member name="P:UnityEngine.Resolution.height">
            <summary>Resolution height in pixels.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Resolution.refreshRate">
            <summary>Resolution's vertical refresh rate in Hz.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Resolution.width">
            <summary>Resolution width in pixels.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Resources">
            <summary>The Resources class allows you to find and access Objects including assets.</summary>
            <remarks>In the editor, Resources.FindObjectsOfTypeAll can be used to locate assets and scene objects. All assets that are in a folder named "Resources" anywhere in the Assets folder can be accessed via the Resources.Load functions. Multiple "Resources" folders may exist and when loading objects each will be examined. In Unity you usually don't use path names to access assets, instead you expose a reference to an asset by declaring a member-variable, and then assign it in the inspector. When using this technique Unity can automatically calculate which assets are used when building a player. This radically minimizes the size of your players to the assets that you actually use in the built game. When you place assets in "Resources" folders this can not be done, thus all assets in the "Resources" folders will be included in a build. Another disadvantage of using path names is that it leads to less reusable code since scripts will have specific hard coded requirements on where the used assets are placed. On the other hand using references that are exposed in the inspector are self-documenting and immediately obvious to the user of your script. However there are situations where it is more convenient to fetch an asset by its name instead of linking to it in the inspector. Essentially whenever it is inconvenient to assign the reference to the object in the inspector. For example you might want to create a GameObject procedurally from a script and for example assign a texture to a procedurally generated mesh. Some loaded assets, most notably textures, can use up memory even when no instance exists in the scene. To reclaim this memory when the asset is no longer needed, you can use Resources.UnloadUnusedAssets.</remarks>
        </member>
        <member name="C:UnityEngine.Resources">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.FindObjectsOfTypeAll(System.Type)">
            <summary>Returns a list of all objects of Type type.Returns a list of all objects of Type T.</summary>
            <returns>An array of objects whose class is or is derived from.</returns>
            <remarks>To be added.</remarks>
            <example>import System.Collections.Generic;// This script finds all the objects in scene, excluding prefabs: function GetAllObjectsInScene(): List.&amp;lt;GameObject&amp;gt; {   var objectsInScene: List.&amp;lt;GameObject&amp;gt; = new List.&amp;lt;GameObject&amp;gt;();      for (var go: GameObject in Resources.FindObjectsOfTypeAll(typeof(GameObject)) as GameObject[]) {     if (go.hideFlags == HideFlags.NotEditable || go.hideFlags == HideFlags.HideAndDontSave)       continue;          var assetPath: String = AssetDatabase.GetAssetPath(go.transform.root.gameObject);     if (!String.IsNullOrEmpty(assetPath))       continue;          objectsInScene.Add(go);   }      return objectsInScene; } import System.Collections.Generic;// This script finds all the objects in scene, excluding prefabs: function GetAllObjectsInScene(): List.&amp;lt;GameObject&amp;gt; {   var objectsInScene: List.&amp;lt;GameObject&amp;gt; = new List.&amp;lt;GameObject&amp;gt;();      for (var go: GameObject in Resources.FindObjectsOfTypeAll.&amp;lt;GameObject&amp;gt;()) {     if (go.hideFlags == HideFlags.NotEditable || go.hideFlags == HideFlags.HideAndDontSave)       continue;          var assetPath: String = AssetDatabase.GetAssetPath(go.transform.root.gameObject);     if (!String.IsNullOrEmpty(assetPath))       continue;          objectsInScene.Add(go);   }      return objectsInScene; }</example>
            <param name="type">Type of the class to match while searching.</param>
        </member>
        <member name="M:UnityEngine.Resources.FindObjectsOfTypeAll``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.GetBuiltinResource(System.Type,System.String)">
            <param name="type">To be added.</param>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.GetBuiltinResource``1(System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.Load(System.String)">
            <summary>Loads an asset stored at path in a Resources folder.Loads an asset stored at path in a Resources folder.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="path">Pathname of the target folder.</param>
        </member>
        <member name="M:UnityEngine.Resources.Load(System.String,System.Type)">
            <summary>Loads an asset stored at path in a Resources folder.Loads an asset stored at path in a Resources folder.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="path">Pathname of the target folder.</param>
            <param name="systemTypeInstance">Type filter for objects returned.</param>
        </member>
        <member name="M:UnityEngine.Resources.Load``1(System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.LoadAll(System.String)">
            <summary>Loads all assets in a folder or file at path in a Resources folder.Loads all assets in a folder or file at path in a Resources folder.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="path">Pathname of the target folder.</param>
        </member>
        <member name="M:UnityEngine.Resources.LoadAll(System.String,System.Type)">
            <summary>Loads all assets in a folder or file at path in a Resources folder.Loads all assets in a folder or file at path in a Resources folder.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="path">Pathname of the target folder.</param>
            <param name="systemTypeInstance">Type filter for objects returned.</param>
        </member>
        <member name="M:UnityEngine.Resources.LoadAll``1(System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.LoadAssetAtPath(System.String,System.Type)">
            <summary>Returns a resource at an asset path (Editor Only).Returns a resource at an asset path (Editor Only).</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="assetPath">Pathname of the target asset.</param>
            <param name="type">Type filter for objects returned.</param>
        </member>
        <member name="M:UnityEngine.Resources.LoadAssetAtPath``1(System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="assetPath">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.UnloadAsset(UnityEngine.Object)">
            <param name="assetToUnload">To be added.</param>
            <summary>Unloads assetToUnload from memory.</summary>
            <remarks>This function can only be called on Assets that are stored on disk. If there are any references from GameObjects in the scene to the asset and it is being used then Unity will reload the asset from disk as soon as it is accessed.</remarks>
        </member>
        <member name="M:UnityEngine.Resources.UnloadUnusedAssets">
            <summary>Unloads assets that are not used.</summary>
            <returns>Object on which you can yield to wait until the operation completes.</returns>
            <remarks>An asset is deemed to be unused if it isn't reached after walking the whole GameObject hierarchy, including script components. Static variables are also examined. The script excecution stack, however, is not examined so an asset referenced only from within the script stack will be unloaded and, if necessary, loaded back in the next time one of its properties or methods is used. This requires extra care for assets which have been modified in memory. Make sure to call EditorUtility.SetDirty before an asset garbage collection is triggered.</remarks>
            <example />
        </member>
        <member name="T:UnityEngine.Rigidbody">
            <summary>Control of an object's position through physics simulation.</summary>
            <remarks>Rigidbody components take control over an object's position - it makes the objects fall down under the influence of gravity,  and can calculate how objects will respond to collisions. When manipulating rigidbody parameters you should work inside the FixedUpdate function. Physics simulation is carried out in discrete timesteps. The FixedUpdate function is called immediately before each step. Things to watch out for when using rigid bodies: 1. If your simulation looks like slow motion and not solid : This is a problem of scale. When your game world is huge everything will appear to be move very slowly. Make sure all your models are in real world sizes. For example a car should be around 4 meters long. A character around 2 meters high. An object falls at the same acceleration no matter big or small, heavy or light. If your game world has a large scale, objects will still fall at the same acceleration. But since everything is larger, objects will appear like they fall slower.</remarks>
        </member>
        <member name="C:UnityEngine.Rigidbody">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddExplosionForce(System.Single,UnityEngine.Vector3,System.Single)">
            <param name="explosionForce">To be added.</param>
            <param name="explosionPosition">To be added.</param>
            <param name="explosionRadius">To be added.</param>
            <summary>Applies a force to the rigidbody that simulates explosion effects. The explosion force will fall off linearly with distance to the rigidbody.</summary>
            <remarks>The function also plays nicely with ragdolls. If radius is 0, the full force will be applied no matter how far away position is from the rigidbody. upwardsModifier applies the force as if it was applied from beneath the object. This is useful since explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position. explosionPosition is the position from which the explosion force is to be applied. explosionRadius is the radius of the explosion. Rigidbodies further away than explosionRadius will not be affected.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddExplosionForce(System.Single,UnityEngine.Vector3,System.Single,System.Single)">
            <param name="explosionForce">To be added.</param>
            <param name="explosionPosition">To be added.</param>
            <param name="explosionRadius">To be added.</param>
            <param name="upwardsModifier">To be added.</param>
            <summary>Applies a force to the rigidbody that simulates explosion effects. The explosion force will fall off linearly with distance to the rigidbody.</summary>
            <remarks>The function also plays nicely with ragdolls. If radius is 0, the full force will be applied no matter how far away position is from the rigidbody. upwardsModifier applies the force as if it was applied from beneath the object. This is useful since explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position. explosionPosition is the position from which the explosion force is to be applied. explosionRadius is the radius of the explosion. Rigidbodies further away than explosionRadius will not be affected.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddExplosionForce(System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.ForceMode)">
            <param name="explosionForce">To be added.</param>
            <param name="explosionPosition">To be added.</param>
            <param name="explosionRadius">To be added.</param>
            <param name="upwardsModifier">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Applies a force to the rigidbody that simulates explosion effects. The explosion force will fall off linearly with distance to the rigidbody.</summary>
            <remarks>The function also plays nicely with ragdolls. If radius is 0, the full force will be applied no matter how far away position is from the rigidbody. upwardsModifier applies the force as if it was applied from beneath the object. This is useful since explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position. explosionPosition is the position from which the explosion force is to be applied. explosionRadius is the radius of the explosion. Rigidbodies further away than explosionRadius will not be affected.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddForce(UnityEngine.Vector3)">
            <param name="force">To be added.</param>
            <summary>Adds a force to the rigidbody. As a result the rigidbody will start moving.Adds a force to the rigidbody. As a result the rigidbody will start moving.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddForce(UnityEngine.Vector3,UnityEngine.ForceMode)">
            <param name="force">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a force to the rigidbody. As a result the rigidbody will start moving.Adds a force to the rigidbody. As a result the rigidbody will start moving.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddForce(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Adds a force to the rigidbody. As a result the rigidbody will start moving.Adds a force to the rigidbody. As a result the rigidbody will start moving.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddForce(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a force to the rigidbody. As a result the rigidbody will start moving.Adds a force to the rigidbody. As a result the rigidbody will start moving.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="force">To be added.</param>
            <param name="position">To be added.</param>
            <summary>Applies force at position. As a result this will apply a torque and force on the object.</summary>
            <remarks>For realistic effects position should be approximately in the range of the surface of the rigidbody. This is most commonly used for explosions. When applying explosions it is best to apply forces over several frames instead of just one. Note that when position is far away from the center of the rigidbody the applied torque will be unrealistically large.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.ForceMode)">
            <param name="force">To be added.</param>
            <param name="position">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Applies force at position. As a result this will apply a torque and force on the object.</summary>
            <remarks>For realistic effects position should be approximately in the range of the surface of the rigidbody. This is most commonly used for explosions. When applying explosions it is best to apply forces over several frames instead of just one. Note that when position is far away from the center of the rigidbody the applied torque will be unrealistically large.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeForce(UnityEngine.Vector3)">
            <param name="force">To be added.</param>
            <summary>Adds a force to the rigidbody relative to its coordinate system.Adds a force to the rigidbody relative to its coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeForce(UnityEngine.Vector3,UnityEngine.ForceMode)">
            <param name="force">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a force to the rigidbody relative to its coordinate system.Adds a force to the rigidbody relative to its coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeForce(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Adds a force to the rigidbody relative to its coordinate system.Adds a force to the rigidbody relative to its coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeForce(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a force to the rigidbody relative to its coordinate system.Adds a force to the rigidbody relative to its coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(UnityEngine.Vector3)">
            <param name="torque">To be added.</param>
            <summary>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(UnityEngine.Vector3,UnityEngine.ForceMode)">
            <param name="torque">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddTorque(UnityEngine.Vector3)">
            <param name="torque">To be added.</param>
            <summary>Adds a torque to the rigidbody.Adds a torque to the rigidbody.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddTorque(UnityEngine.Vector3,UnityEngine.ForceMode)">
            <param name="torque">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a torque to the rigidbody.Adds a torque to the rigidbody.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddTorque(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Adds a torque to the rigidbody.Adds a torque to the rigidbody.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.AddTorque(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>Adds a torque to the rigidbody.Adds a torque to the rigidbody.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.angularDrag">
            <summary>The angular drag of the object.</summary>
            <value>To be added.</value>
            <remarks>Angular drag can be used to slow down the rotation of an object. The higher the drag the more the rotation slows down.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.angularVelocity">
            <summary>The angular velocity vector of the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>In most cases you should not modify it directly, as this can result in unrealistic behaviour.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.centerOfMass">
            <summary>The center of mass relative to the transform's origin.</summary>
            <value>To be added.</value>
            <remarks>If you don't set the center of mass from a script it will be calculated automatically from all colliders attached to the rigidbody. Setting the center of mass is often useful when simulating cars to make them more stable. A car with a lower center of mass is less likely to topple over. Note: centerOfMass is relative to the transform's position and rotation, but will not reflect the transform's scale!</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.ClosestPointOnBounds(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>The closest point to the bounding box of the attached colliders.</summary>
            <returns>To be added.</returns>
            <remarks>This can be used to calculate hit points when applying explosion damage. Or calculating explosion forces that act on a point on the surface of the rigidbody.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.collisionDetectionMode">
            <summary>The Rigidbody's collision detection mode.</summary>
            <value>To be added.</value>
            <remarks>Use this to set up a Rigidbody's for continuous collision detection, which is used to prevent fast moving objects from passing through other objects without detecting collisions. For best results, set this value to CollisionDetectionMode.ContinuousDynamic for fast moving objects, and for other objects which these need to collide with, set it to CollisionDetectionMode.Continuous. This has a big impact on physics performance, so just leave it set to the default value of CollisionDetectionMode.Discrete, if you don't have any issues with collisions of fast objects. Continuous Collision Detection is only supported for Rigidbodies with Sphere-, Capusle- or BoxColliders. See Also: CollisionDetectionMode.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.constraints">
            <summary>Controls which degrees of freedom are allowed for the simulation of this Rigidbody.</summary>
            <value>To be added.</value>
            <remarks>By default this is set to RigidbodyConstraints.None, allowing rotation and movement along all axes. In some cases, you may want to constrain a Rigidbody to only move or rotate along some axes, for  example when developing 2D games. You can use the bitwise OR operator to combine multiple constraints.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.detectCollisions">
            <summary>Should collision detection be enabled? (By default always enabled).</summary>
            <value>To be added.</value>
            <remarks>Disabling collision detections is useful when you have a ragdoll which is setup to be kinematic and you want to avoid heavy collision detection calculations on that rigidbody. detectCollisions is not serialized. This means it doesn't show up in the Inspector and when Instantiating the rigidbody or saving it in a scene, it will not be saved.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.drag">
            <summary>The drag of the object.</summary>
            <value>To be added.</value>
            <remarks>Drag can be used to slow down an object. The higher the drag the more the object slows down.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.freezeRotation">
            <summary>Controls whether physics will change the rotation of the object.</summary>
            <value>To be added.</value>
            <remarks>If freezeRotation is enabled, the rotation is not modified by the physics simulation. This is useful for creating first person shooters, because the player needs full control of the rotation using the mouse. See Also: Rigidbody.constraints.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.GetPointVelocity(UnityEngine.Vector3)">
            <param name="worldPoint">To be added.</param>
            <summary>The velocity of the rigidbody at the point worldPoint in global space.</summary>
            <returns>To be added.</returns>
            <remarks>GetPointVelocity will take the angularVelocity of the rigidbody into account when calculating the velocity.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.GetRelativePointVelocity(UnityEngine.Vector3)">
            <param name="relativePoint">To be added.</param>
            <summary>The velocity relative to the rigidbody at the point relativePoint.</summary>
            <returns>To be added.</returns>
            <remarks>GetRelativePointVelocity will take the angularVelocity of the rigidbody into account when calculating the velocity.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.inertiaTensor">
            <summary>The diagonal inertia tensor of mass relative to the center of mass.</summary>
            <value>To be added.</value>
            <remarks>The inertia tensor is rotated by the inertiaTensorRotation. If you don't set intertia tensor from a script it will be calculated automatically from all colliders attached to the rigidbody.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.inertiaTensorRotation">
            <summary>The rotation of the inertia tensor.</summary>
            <value>To be added.</value>
            <remarks>If you don't set intertia tensor rotation from a script it will be calculated automatically from all colliders attached to the rigidbody.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.interpolation">
            <summary>Interpolation allows you to smooth out the effect of running physics at a fixed frame rate.</summary>
            <value>To be added.</value>
            <remarks>By default interpolation is turned off. Commonly rigidbody interpolation is used on the player's character. Physics is running at discrete timesteps, while graphics is renderered at variable frame rates. This can lead to jittery looking objects, because physics and graphics are not completely in sync. The effect is subtle but often visible on the player character, especially if a camera follows the main character. It is recommended to turn on interpolation for the main character but disable it for everything else.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.isKinematic">
            <summary>Controls whether physics affects the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>If isKinematic is enabled, Forces, collisions or joints will not affect the rigidbody anymore. The rigidbody will be under full control of animation or script control by changing transform.position. Kinematic bodies also affect the motion of other rigidbodies through collisions or joints. Eg. can connect a kinematic rigidbody to a normal rigidbody with a joint  and the rigidbody will be constrained with the motion of the kinematic body. Kinematic rigidbodies are also particularly useful for making characters which are normally driven by an animation, but on certain events can be quickly turned into a ragdoll by setting isKinematic to false.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.IsSleeping">
            <summary>Is the rigidbody sleeping?</summary>
            <returns>To be added.</returns>
            <remarks>See Rigidbody Sleeping for more information.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.mass">
            <summary>The mass of the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>You should strive to keep mass close to 0.1 and never more than 10. Large masses make physics simulation unstable. Higher mass objects push lower mass objects more when colliding. Think of a big truck, hitting a small car. A common mistake is to assume that heavy objects fall faster than light ones. This is not true as the speed is dependent on gravity and drag.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.maxAngularVelocity">
            <summary>The maximimum angular velocity of the rigidbody. (Default 7) range { 0, infinity }.</summary>
            <value>To be added.</value>
            <remarks>The angular velocity of rigidbodies is clamped to maxAngularVelocity to avoid numerical instability with fast rotating bodies. Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.MovePosition(UnityEngine.Vector3)">
            <summary>Moves the rigidbody to position.</summary>
            <remarks>Changing the position of a Rigidbody object by setting its transform.position value will cause it to "teleport" directly to the new position (ie, it doesn't move through any intermediate positions along the way). Any other Rigidbodies lying between the old position and the new one will be unaffected by the movement. Also, any colliders at the target position will react immediately with the moved rigidbody on the next update. If you use MovePosition instead, the physics engine will trace a straight line path between the object's old position and the new one and behave as though it rapidly moved along that path between updates. Objects lying along the path will be pushed aside if necessary. This often gives a more acceptable result than changing transform.position. However, if the movements are small and frequent then the two techniques behave very similarly.</remarks>
            <param name="position">The new position for the Rigidbody object.</param>
        </member>
        <member name="M:UnityEngine.Rigidbody.MoveRotation(UnityEngine.Quaternion)">
            <param name="rot">To be added.</param>
            <summary>Rotates the rigidbody to rotation.</summary>
            <remarks>For kinematic rigidbodies it applies friction based on the motion of the rigidbody. This lets you simulate moving / rotating platforms with rigidbodies sitting on top of the elevator. If you want other rigidbodies to interact with the kinematic rigidbody you need to move it in the FixedUpdate function.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.position">
            <summary>The position of the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>This is similar to setting transform.position, however the position will only be applied to the transform at the end of the physics step. If you want to continously move a rigidbody or kinematic rigidbody use MovePosition and MoveRotation instead.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.rotation">
            <summary>The rotation of the rigdibody.</summary>
            <value>To be added.</value>
            <remarks>This is similar to setting transform.rotation, however the rotation will only be applied to the transform at the end of the physics step. If you want to continously move a rigidbody or kinematic rigidbody use MovePosition and MoveRotation instead.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.SetDensity(System.Single)">
            <param name="density">To be added.</param>
            <summary>Sets the mass based on the attached colliders assuming a constant density.</summary>
            <remarks>This is useful to set the mass to a value which scales with the size of the colliders.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.SetMaxAngularVelocity(System.Single)">
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.Sleep">
            <summary>Forces a rigidbody to sleep at least one frame.</summary>
            <remarks>A common use is to call this from Awake in order to make a rigidbody sleep at startup. See Rigidbody Sleeping for more information.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.sleepAngularVelocity">
            <summary>The angular velocity, below which objects start going to sleep. (Default 0.14) range { 0, infinity }.</summary>
            <value>To be added.</value>
            <remarks>See Rigidbody Sleeping for more information.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.sleepVelocity">
            <summary>The linear velocity, below which objects start going to sleep. (Default 0.14) range { 0, infinity }.</summary>
            <value>To be added.</value>
            <remarks>See Rigidbody Sleeping for more information.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.solverIterationCount">
            <summary>Allows you to override the solver iteration count per rigidbody.</summary>
            <value>To be added.</value>
            <remarks>The solverIterationCount determines how accuratly joints and contacts are resolved.  If you are having trouble with jointed bodies oscillating and behaving erratically setting  a higher solver iteration count may improve their stability.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.SweepTest(UnityEngine.Vector3,UnityEngine.RaycastHit@)">
            <summary>Tests if a rigidbody would collide with anything, if it was moved through the scene.</summary>
            <returns>True when the rigidbody sweep intersects any collider, otherwise false.</returns>
            <remarks>This is similar to doing a Physics.Raycast for all points contained in any of a Rigidbody's colliders and returning the closest of all hits (if any) reported. This is useful for AI code, when you need to know if an object would fit somewhere without colliding with anything. Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep. See Also: Physics.SphereCast, Physics.CapsuleCast, Rigidbody.SweepTestAll.</remarks>
            <example />
            <param name="direction">The direction into which to sweep the rigidbody.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
        </member>
        <member name="M:UnityEngine.Rigidbody.SweepTest(UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
            <summary>Tests if a rigidbody would collide with anything, if it was moved through the scene.</summary>
            <returns>True when the rigidbody sweep intersects any collider, otherwise false.</returns>
            <remarks>This is similar to doing a Physics.Raycast for all points contained in any of a Rigidbody's colliders and returning the closest of all hits (if any) reported. This is useful for AI code, when you need to know if an object would fit somewhere without colliding with anything. Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep. See Also: Physics.SphereCast, Physics.CapsuleCast, Rigidbody.SweepTestAll.</remarks>
            <example />
            <param name="direction">The direction into which to sweep the rigidbody.</param>
            <param name="hitInfo">If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).</param>
            <param name="distance">The length of the sweep.</param>
        </member>
        <member name="M:UnityEngine.Rigidbody.SweepTestAll(UnityEngine.Vector3)">
            <summary>Like Rigidbody.SweepTest, but returns all hits.</summary>
            <returns>To be added.</returns>
            <remarks>The sweep may return multiple hits against the same collider if more then one of the rigidbody's attached colliders would hit it. Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep.</remarks>
            <param name="direction">Direction to sweep the Rigidbody object.</param>
        </member>
        <member name="M:UnityEngine.Rigidbody.SweepTestAll(UnityEngine.Vector3,System.Single)">
            <summary>Like Rigidbody.SweepTest, but returns all hits.</summary>
            <returns>To be added.</returns>
            <remarks>The sweep may return multiple hits against the same collider if more then one of the rigidbody's attached colliders would hit it. Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep.</remarks>
            <param name="direction">Direction to sweep the Rigidbody object.</param>
            <param name="distance">Length of the sweep.</param>
        </member>
        <member name="P:UnityEngine.Rigidbody.useConeFriction">
            <summary>Force cone friction to be used for this rigidbody.</summary>
            <value>To be added.</value>
            <remarks>This insures that all contacts involving the actor will use cone friction. This will however have a negative impact on  performance. By default this is off and a much faster and almost as good approximation called pyramid friction method is used. In most cases it is recommended to leave this value off.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.useGravity">
            <summary>Controls whether gravity affects this rigidbody.</summary>
            <value>To be added.</value>
            <remarks>If set to false the rigidbody will behave as in outer space.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.velocity">
            <summary>The velocity vector of the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>In most cases you should not modify the velocity directly, as this can result in unrealistic behaviour. Don't set the velocity of an object every physics step, this will lead to unrealistic physics simulation. A typical example where you would change the velocity is when jumping in a first person shooter, because you want an immediate change in velocity.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody.WakeUp">
            <summary>Forces a rigidbody to wake up.</summary>
            <remarks>See Rigidbody Sleeping for more information.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody.worldCenterOfMass">
            <summary>The center of mass of the rigidbody in world space (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Rigidbody2D">
            <summary>Rigidbody physics component for 2D sprites.</summary>
            <remarks>The Rigidbody2D class essentially provides the same functionality in 2D that the Rigidbody class provides in 3D. Adding a Rigidbody2D component to a sprite puts in under the control of the physics engine. By itself, this means that the sprite will be affected by gravity and can be controlled from scripts using forces. By adding the appropriate collider component, the sprite will also respond to collisions with other sprites. This behaviour comes entirely from Unity's physics system; very little code is required to get impressive and authentic physical behaviour and allows for "emergent" gameplay that was not explicitly coded into the game. See Also: Rigidbody class, SpriteRenderer class, Collider2D class, Joint2D class.</remarks>
        </member>
        <member name="C:UnityEngine.Rigidbody2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.AddForce(UnityEngine.Vector2)">
            <summary>Apply a force to the rigidbody.</summary>
            <remarks>The force is specified as two separate components in the X and Y directions (there is no Z direction in 2D physics). The object will be accelerated by the force according to the law force = mass x acceleration - the larger the mass, the greater the force required to accelerate to a given speed. See Also: AddForceAtPosition, AddTorque, mass, velocity, Rigidbody.AddForce.</remarks>
            <param name="force">Components of the force in the X and Y axes.</param>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.AddForceAtPosition(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>Apply a force at a given position in space.</summary>
            <remarks>The AddForce function applies a force that acts straight through the rigidbody's centre of mass and so produces only positional movement and no rotation. AddForceAtPosition can apply the force at any position in world space and will typically also apply a torque to the object which will set it rotating. Note that for the purposes of this function, the rigidbody is just a coordinate space of infinite size, so there is no reason why the force needs to be applied within the confines of the object's graphic or colliders. See Also:: AddForce, AddTorque, Rigidbody.AddForceAtPosition.</remarks>
            <param name="force">Components of the force in the X and Y axes.</param>
            <param name="position">Position in world space to apply the force.</param>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.AddTorque(System.Single)">
            <summary>Apply a torque at the rigidbody's centre of mass.</summary>
            <remarks>A torque is conceptually a force being applied at the end of an imaginary lever, with the fulcrum at the centre of mass. A torque of five units could thus be equivalent to a force of five units pushing on the end of a lever one unit long, or a force of one unit on a lever five units long. Unity's units are arbitrary but the principle that torque = force x lever length still applies. Note that unlike a 3D Rigidbody, a Rigidbody2D can only rotate in one axis and so torque is a float value rather than a vector. See Also: AddForce, AddForceAtPosition, Rigidbody.AddTorque.</remarks>
            <param name="torque">Value of torque to apply.</param>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.angularDrag">
            <summary>Coefficient of angular drag.</summary>
            <value>To be added.</value>
            <remarks>Drag is the tendency of an object to slow down due to friction with the air or water that surrounds it. The angular drag applies to rotational movement and is set up separately from the linear drag that affects positional movement. A higher value of angular drag will cause an object's rotation to come to rest more quickly following a collision or torque. See Also: AddTorque, AddForceAtPosition, angularVelocity, drag, Rigidbody.angularDrag.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.angularVelocity">
            <summary>Angular velocity in degrees per second.</summary>
            <value>To be added.</value>
            <remarks>Unlike a 3D Rigidbody, a Rigidbody2D can only rotate around one axis (perpendicular to the plane) so the angular velocity is just a float value rather than a vector. Typically, the value of this property is not set directly but rather by applying torques to the rigidbody. The angular velocity will also decrease automatically under the effect of angular drag. See Also: velocity, AddTorque, AddForceAtPosition, angularDrag, Rigidbody.angularVelocity.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.collisionDetectionMode">
            <summary>The method used by the physics engine to check if two objects have collided.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.drag">
            <summary>Coefficient of drag.</summary>
            <value>To be added.</value>
            <remarks>Drag is the tendency of an object to slow down due to friction with the air or water that surrounds it. The linear drag applies to positional movement and is set up separately from the angular drag that affects rotational movement. A higher value of drag will cause an object's rotation to come to rest more quickly following a collision or force. See Also: velocity, AddForce, angularDrag, Rigidbody.drag.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.fixedAngle">
            <summary>Should the rigidbody be prevented from rotating?</summary>
            <value>To be added.</value>
            <remarks>If this property is set to true, the rigidbody will not rotate in response to collisions and torques. This is useful when you want an object to have restricted rectilinear movement but still be controlled by physics in other aspects. See Also: Rigidbody.freezeRotation.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.gravityScale">
            <summary>The degree to which this object is affected by gravity.</summary>
            <value>To be added.</value>
            <remarks>In 2D physics, the gravity is a global setting in the Physics2D class but you can also control the proportion of that gravity applied to each object individually using gravityScale. For example, it may be easier to implement a flying character by turning off its gravity rather than simulating the forces that keep it aloft. See Also: Physics2D.gravity.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.interpolation">
            <summary>Physics interpolation used between updates.</summary>
            <value>To be added.</value>
            <remarks>Interpolation is used to estimate the position of the Rigidbody between physics updates. It can be useful to switch this on when the graphics update is much more frequent than the physics update because the object can appear to move along in jerky "hops" rather than having smooth motion. With interpolate mode, motion is smoothed based on the object's positions in previous frames. Extrapolate mode smooths motion based on an estimate of its position in the next frame. The choice of mode depends of the dynamics of the object during gameplay. See Also: Rigidbody.interpolation.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.IsAwake">
            <summary>Is the rigidbody "awake"?</summary>
            <returns>To be added.</returns>
            <remarks>Sleeping is an optimisation that is used to temporarily remove an object from physics simulation when it is at rest. This function tells if the rigidbody is currently awake. See Also: Sleep, WakeUp, IsSleeping.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.isKinematic">
            <summary>Should this rigidbody be taken out of physics control?</summary>
            <value>To be added.</value>
            <remarks>If this property is set to true then the rigidbody will stop reacting to collisions and applied forces. This can be useful when an object should usually be controlled "kinematically" (ie, non-physically) but then sometimes needs physics for realism. For example, a human character is usually not implemented using physics but may sometimes be thrown through the air and collide with objects as the result of an impact or explosion. See Also: Rigidbody.isKinematic.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.IsSleeping">
            <summary>Is the rigidbody "sleeping"?</summary>
            <returns>To be added.</returns>
            <remarks>Sleeping is an optimisation that is used to temporarily remove an object from physics simulation when it is at rest. This function tells if the rigidbody is currently sleeping. See Also: Sleep, WakeUp, IsAwake.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.mass">
            <summary>Mass of the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>The mass is given in arbitrary units but the basic physical principles of mass apply. From Newton's classic equation force = mass x accelelation, it is apparent that the larger an object's mass, the more force it requires to accelerate it to a given velocity. Also, mass affects momentum, which is significant during collisions; an object with large mass will be moved less by a collision than an object with lower mass. See Also: AddForce, Rigidbody.mass.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.Sleep">
            <summary>Make the rigidbody "sleep".</summary>
            <remarks>Sleeping is an optimisation that is used to temporarily remove an object from physics simulation when it is at rest. This function makes the rigidbody sleep - it is sometimes desirable to enable this manually rather than allowing automatic sleeping with the sleepMode property. See Also: IsSleeping, WakeUp, sleepMode.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.sleepMode">
            <summary>The sleep state that the rigidbody will initially be in.</summary>
            <value>To be added.</value>
            <remarks>Sleeping is an optimisation that is used to temporarily remove an object from physics simulation when it is at rest. This property chooses whether the rigidbody should start off asleep, awake or have sleeping turned off altogether. See Also: Sleep, isSleeping, WakeUp, Rigidbody.Sleep.</remarks>
        </member>
        <member name="P:UnityEngine.Rigidbody2D.velocity">
            <summary>Linear velocity of the rigidbody.</summary>
            <value>To be added.</value>
            <remarks>The velocity is specified as a vector with components in the X and Y directions (there is no Z direction in 2D physics). The value is not usually set directly but rather by using forces. The velocity can also gradually decay due to the effect of drag if this is enabled. See Also: AddForce, drag, angularVelocity, Rigidbody.velocity.</remarks>
        </member>
        <member name="M:UnityEngine.Rigidbody2D.WakeUp">
            <summary>Disables the "sleeping" state of a rigidbody.</summary>
            <remarks>Sleeping is an optimisation that is used to temporarily remove an object from physics simulation when it is at rest. This function wakes up a rigidbody that is currently sleeping. See Also: IsSleeping, Sleep, sleepMode.</remarks>
        </member>
        <member name="T:UnityEngine.RigidbodyConstraints">
            <summary>Use these flags to constrain motion of Rigidbodies.</summary>
            <remarks>See Also: Rigidbody.constraints.</remarks>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezeAll">
            <summary>Freeze rotation and motion along all axes.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezePosition">
            <summary>Freeze motion along all axes.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezePositionX">
            <summary>Freeze motion along the X-axis.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezePositionY">
            <summary>Freeze motion along the Y-axis.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezePositionZ">
            <summary>Freeze motion along the Z-axis.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotation">
            <summary>Freeze rotation along all axes.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotationX">
            <summary>Freeze rotation along the X-axis.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotationY">
            <summary>Freeze rotation along the Y-axis.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotationZ">
            <summary>Freeze rotation along the Z-axis.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyConstraints.None">
            <summary>No constraints.</summary>
        </member>
        <member name="T:UnityEngine.RigidbodyInterpolation">
            <summary>Rigidbody interpolation mode.</summary>
            <remarks>For the main characters or vehicles that are followed by the camera it is recommended to use interpolation. For any other rigidbodies it is recommended not to use interpolation. See Also: Rigidbody.interpolation variable.</remarks>
        </member>
        <member name="F:UnityEngine.RigidbodyInterpolation.Extrapolate">
            <summary>Extrapolation will predict the position of the rigidbody based on the current velocity.</summary>
            <remarks>If you have fast moving objects this can lead to rigidbodies passing  through colliders for one frame and then snapping back. See Also: Rigidbody.interpolation variable.</remarks>
        </member>
        <member name="F:UnityEngine.RigidbodyInterpolation.Interpolate">
            <summary>Interpolation will always lag a little bit behind but can be smoother than extrapolation.</summary>
            <remarks>See Also: Rigidbody.interpolation variable.</remarks>
        </member>
        <member name="F:UnityEngine.RigidbodyInterpolation.None">
            <summary>No Interpolation.</summary>
            <remarks>See Also: Rigidbody.interpolation variable.</remarks>
        </member>
        <member name="T:UnityEngine.RigidbodyInterpolation2D">
            <summary>Interpolation mode for Rigidbody2D objects.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RigidbodyInterpolation2D.Extrapolate">
            <summary>Smooth an object's movement based on an estimate of its position in the next frame.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyInterpolation2D.Interpolate">
            <summary>Smooth movement based on the object's positions in previous frames.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodyInterpolation2D.None">
            <summary>Do not apply any smoothing to the object's movement.</summary>
        </member>
        <member name="T:UnityEngine.RigidbodySleepMode2D">
            <summary>Settings for a Rigidbody2D's initial sleep state.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RigidbodySleepMode2D.NeverSleep">
            <summary>Rigidbody2D never automatically sleeps.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodySleepMode2D.StartAsleep">
            <summary>Rigidbody2D is initially asleep.</summary>
        </member>
        <member name="F:UnityEngine.RigidbodySleepMode2D.StartAwake">
            <summary>Rigidbody2D is initially awake.</summary>
        </member>
        <member name="T:UnityEngine.RotationDriveMode">
            <summary>Control ConfigurableJoint's rotation with either X &amp;amp; YZ or Slerp Drive.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RotationDriveMode.Slerp">
            <summary>Use Slerp drive.</summary>
        </member>
        <member name="F:UnityEngine.RotationDriveMode.XYAndZ">
            <summary>Use XY &amp;amp; Z Drive.</summary>
        </member>
        <member name="T:UnityEngine.RPC">
            <summary>Attribute for setting up RPC functions.</summary>
            <remarks>Given an @RPC (javascript) or [RPC] attribute (C#) any function can be called remotely through Unity  Networking. The function must exist on both sending and recieving party. See Also: NetworkView.RPC.</remarks>
        </member>
        <member name="C:UnityEngine.RPC">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RPCMode">
            <summary>Option for who will receive an RPC, used by NetworkView.RPC.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.RPCMode.All">
            <summary>Sends to everyone.</summary>
        </member>
        <member name="F:UnityEngine.RPCMode.AllBuffered">
            <summary>Sends to everyone and adds to the buffer.</summary>
        </member>
        <member name="F:UnityEngine.RPCMode.Others">
            <summary>Sends to everyone except the sender.</summary>
        </member>
        <member name="F:UnityEngine.RPCMode.OthersBuffered">
            <summary>Sends to everyone except the sender and adds to the buffer.</summary>
        </member>
        <member name="F:UnityEngine.RPCMode.Server">
            <summary>Sends to the server only.</summary>
        </member>
        <member name="T:UnityEngine.RuntimeAnimatorController">
            <summary>Runtime reprentation of the AnimationController. It can be used to change the Animator's AnimationSource during runtime.</summary>
            <remarks>This class is deprecated, RuntimeAnimationController should be used.</remarks>
        </member>
        <member name="C:UnityEngine.RuntimeAnimatorController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.RuntimePlatform">
            <summary>The platform application is running. Returned by Application.platform.</summary>
            <remarks>Note: The difference between using RuntimePlatform and Platform dependent Compilation is that using RuntimePlatform is evaluated at runtime while Platform dependent Compilation is evaluated at compile time. So if you can use platform dependent compilation, don't hesitate to use it. In most cases, you can get the same functionality using both, and using the defines will produce smaller and faster code, as you don't need to check at runtime. There are some cases where RuntimePlatform is needed, for example: if you need to check which platform you are running a webplayer you may check this at runtime.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.Android">
            <summary>In the player on Android devices.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.BB10Player">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.FlashPlayer">
            <summary>Flash Player.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.IPhonePlayer">
            <summary>In the player on the iPhone.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.LinuxPlayer">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.MetroPlayerARM">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.MetroPlayerX64">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.MetroPlayerX86">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.NaCl">
            <summary>Google Native Client.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.OSXDashboardPlayer">
            <summary>In the Dashboard widget on Mac OS X.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.OSXEditor">
            <summary>In the Unity editor on Mac OS X.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.OSXPlayer">
            <summary>In the player on Mac OS X.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.OSXWebPlayer">
            <summary>In the web player on Mac OS X.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.PS3">
            <summary>In the player on the Play Station 3.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.TizenPlayer">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.WiiPlayer">
            <summary>In the player on Nintendo Wii.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.WindowsEditor">
            <summary>In the Unity editor on Windows.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.WindowsPlayer">
            <summary>In the player on Windows.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.WindowsWebPlayer">
            <summary>In the web player on Windows.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.WP8Player">
            <summary>In the player on Windows Phone 8 device.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="F:UnityEngine.RuntimePlatform.XBOX360">
            <summary>In the player on the XBOX360.</summary>
            <remarks>See Also: Platform dependent Compilation.</remarks>
        </member>
        <member name="T:UnityEngine.ScaleMode">
            <summary>Scaling mode to draw textures with.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ScaleMode.ScaleAndCrop">
            <summary>Scales the texture, maintaining aspect ratio, so it completely covers the position rectangle passed to GUI.DrawTexture. If the texture is being draw to a rectangle with a different aspect ratio than the original, the image is cropped.</summary>
        </member>
        <member name="F:UnityEngine.ScaleMode.ScaleToFit">
            <summary>Scales the texture, maintaining aspect ratio, so it completely fits withing the position rectangle passed to GUI.DrawTexture.</summary>
        </member>
        <member name="F:UnityEngine.ScaleMode.StretchToFill">
            <summary>Stretches the texture to fill the complete rectangle passed in to GUI.DrawTexture.</summary>
        </member>
        <member name="T:UnityEngine.Screen">
            <summary>Access to display information.</summary>
            <remarks>Screen class can be used to get the list of supported resolutions, switch the current resolution, hide or show the system mouse pointer.</remarks>
        </member>
        <member name="C:UnityEngine.Screen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.autorotateToLandscapeLeft">
            <summary>Allow auto-rotation to landscape left?</summary>
            <value>To be added.</value>
            <remarks>This setting is taken into account when orientation is set to AutoRotation.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.autorotateToLandscapeRight">
            <summary>Allow auto-rotation to landscape right?</summary>
            <value>To be added.</value>
            <remarks>This setting is taken into account when orientation is set to AutoRotation.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.autorotateToPortrait">
            <summary>Allow auto-rotation to portrait?</summary>
            <value>To be added.</value>
            <remarks>This setting is taken into account when orientation is set to AutoRotation.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.autorotateToPortraitUpsideDown">
            <summary>Allow auto-rotation to portrait, upside down?</summary>
            <value>To be added.</value>
            <remarks>This setting is taken into account when orientation is set to AutoRotation.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.currentResolution">
            <summary>The current screen resolution (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If the player is running in window mode, this returns the current resolution of the desktop.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.dpi">
            <summary>The current DPI of the screen / device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the actual DPI of the screen attached or physical device running the application. May return 0 if unable to determine the current DPI.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.fullScreen">
            <summary>Is the game running fullscreen?</summary>
            <value>To be added.</value>
            <remarks>It is possible to toggle fullscreen mode by changing this property:A fullscreen switch does not happen immediately; it will actually happen when the current frame is finished. See Also: SetResolution.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.GetResolution">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.height">
            <summary>The current height of the screen window in pixels (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the actual height of the player window (in fullscreen it is also the current resolution).</remarks>
        </member>
        <member name="P:UnityEngine.Screen.lockCursor">
            <summary>Should the cursor be locked?</summary>
            <value>To be added.</value>
            <remarks>The cursor will automatically be hidden, centered on view and made to never leave the view. In the web player, the cursor may only be locked after the user has clicked on the content and the user has not left the content view with the cursor. After the user presses escape or switches to another application the cursor will be automatically unlocked. The cursor lock will also be lost when exiting full screen mode. You can query if the cursor is currently locked by checking the lockCursor state. To provide a good user experience it is recommended to only lock the cursor as a result of pressing a button. Also you should check if the cursor got unlocked, in order to e.g. pause the game or bring up a game menu. In the Web Player and Editor the cursor will automatically be unlocked when you press escape. In the Standalone Player you have full control over mouse locking thus it won't automatically lose mouse lock unless you switch applications.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.orientation">
            <summary>Specifies logical orientation of the screen.</summary>
            <value>To be added.</value>
            <remarks>Default value is taken from the 'Default Orientation' in Player Settings. As an example, if we take 480x320 resolution on iPhone, horizontal orientation is treated as 480x320 resolution and vertical orientation as 320x480. Note: logical orientation affects not only screen orientation, but also touch coordinates. You should expect drastic changes in the touch positions after changing logical orientation, since touch positions will be rotated clockwise or counter-clockwise to match screen coordinates. Currently screen orientation is only relevant on mobile platforms.If the value is set to ScreenOrientation.AutoRotate then the screen will select from any of the options (enabled by autoRotateToPortrait, etc) automatically as the device orientation changes. See Also:ScreenOrientation, ScreenOrientation.AutoRotate.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.resolutions">
            <summary>All fullscreen resolutions supported by the monitor (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The returned resolutions are sorted by width, lower resolutions come first.See Also: Resolution structure, SetResolution.</remarks>
        </member>
        <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,System.Boolean)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="fullscreen">To be added.</param>
            <summary>Switches the screen resolution.</summary>
            <remarks>A width by height resolution will be used. If no matching resolution is supported, the closest one will be used. If preferredRefreshRate is 0 (default) Unity will switch to the highest refresh rate supported by the monitor. If preferredRefreshRate is not 0 Unity will use it if the monitor supports it, otherwise will choose the highest supported one. In the web player you may only switch resolutions after the user has clicked on the content. The recommended way of doing it is to switch resolutions only when the user clicks on a designated button. On Android fullscreen controls the SYSTEM_UI_FLAG_LOW_PROFILE flag to View.setSystemUiVisibility(), on devices running Honeycomb (OS 3.0 / API 11) or later. On Windows Store Apps, switching to non-native resolution is only supported starting from Windows 8.1 and newer. A resolution switch does not happen immediately; it will actually happen when the current frame is finished.Another example:Another example:See Also: resolutions property.</remarks>
        </member>
        <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="fullscreen">To be added.</param>
            <param name="preferredRefreshRate">To be added.</param>
            <summary>Switches the screen resolution.</summary>
            <remarks>A width by height resolution will be used. If no matching resolution is supported, the closest one will be used. If preferredRefreshRate is 0 (default) Unity will switch to the highest refresh rate supported by the monitor. If preferredRefreshRate is not 0 Unity will use it if the monitor supports it, otherwise will choose the highest supported one. In the web player you may only switch resolutions after the user has clicked on the content. The recommended way of doing it is to switch resolutions only when the user clicks on a designated button. On Android fullscreen controls the SYSTEM_UI_FLAG_LOW_PROFILE flag to View.setSystemUiVisibility(), on devices running Honeycomb (OS 3.0 / API 11) or later. On Windows Store Apps, switching to non-native resolution is only supported starting from Windows 8.1 and newer. A resolution switch does not happen immediately; it will actually happen when the current frame is finished.Another example:Another example:See Also: resolutions property.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.showCursor">
            <summary>Should the cursor be visible?</summary>
            <value>To be added.</value>
            <remarks>It is entirely possible to implement a custom cursor instead of the system one. To do this you would hide the system one, track mouse position or movement and display your own image in the needed place.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.sleepTimeout">
            <summary>A power saving setting, allowing the screen to dim some time after the last active user interaction.</summary>
            <value>To be added.</value>
            <remarks>Most useful for handheld devices, allowing OS to preserve battery life in most efficient ways. Does nothing on non-handheld devices. sleepTimeout is measured in seconds. The default value varies from platform to platform, generally being non-zero. On mobile devices it would be useful to set sleepTimeout to [SleepTimeout.NeverSleep] for games using accelerometer as the main source of input. However, such games should allow screen dimming while in menu or paused. Currently you will only be able to set this property to one of the values predefined in [SleepTimeout] class. A get will return either one of the predefined values, or the actual number of seconds until screen gets dimmed, as specified in system preferences of the device.</remarks>
        </member>
        <member name="P:UnityEngine.Screen.width">
            <summary>The current width of the screen window in pixels (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the actual width of the player window (in fullscreen it is also the current resolution).</remarks>
        </member>
        <member name="T:UnityEngine.ScreenOrientation">
            <summary>Describes screen orientation.</summary>
            <remarks>Currently this is only relevant on mobile devices. See Also: Screen.orientation.</remarks>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.AutoRotation">
            <summary>Auto-rotates the screen as necessary toward any of the enabled orientations.</summary>
            <remarks>When this option is assigned to the orientation property, the screen will auto-rotate so that the bottom of the screen image points downwards. The orientations that can be used are set by the autorotateToLandscapeLeft, autorotateToLandscapeRight, autorotateToPortrait and ::autorotateToPortraitUpsideDown properties. For example, if autorotateToPortrait and ::autorotateToPortraitUpsideDown are both true but the others are false then the auto-rotation will never choose either of the landscape options even when the device is held with the long side of the screen pointing downwards.See Also: Screen.orientation.</remarks>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.Landscape">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.LandscapeLeft">
            <summary>Landscape orientation, counter-clockwise from the portrait orientation.</summary>
            <remarks>See Also: Screen.orientation.</remarks>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.LandscapeRight">
            <summary>Landscape orientation, clockwise from the portrait orientation.</summary>
            <remarks>Available on iOS and on Android 2.3+. On older Androids falls back to LandscapeLeft. See Also: Screen.orientation.</remarks>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.Portrait">
            <summary>Portrait orientation.</summary>
            <remarks>See Also: Screen.orientation.</remarks>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.PortraitUpsideDown">
            <summary>Portrait orientation, upside down.</summary>
            <remarks>Available on iOS and on Android 2.3+. On older Androids falls back to Portrait. See Also: Screen.orientation.</remarks>
        </member>
        <member name="F:UnityEngine.ScreenOrientation.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.ScriptableObject">
            <summary>A class you can derive from if you want to create objects that don't need to be attached to GameObjects.</summary>
            <remarks>This is most useful for assets which are only meant to store data.</remarks>
        </member>
        <member name="C:UnityEngine.ScriptableObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ScriptableObject.CreateInstance(System.String)">
            <param name="className">To be added.</param>
            <summary>Creates an instance of a scriptable object with className.Creates an instance of a scriptable object with type.Creates an instance of a scriptable object with T.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ScriptableObject.CreateInstance(System.Type)">
            <param name="type">To be added.</param>
            <summary>Creates an instance of a scriptable object with className.Creates an instance of a scriptable object with type.Creates an instance of a scriptable object with T.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ScriptableObject.CreateInstance``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.ScriptableObject.SetDirty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Security">
            <summary>Webplayer security related class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Security">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Security.GetChainOfTrustValue(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Security.LoadAndVerifyAssembly(System.Byte[])">
            <param name="assemblyData">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Security.PrefetchSocketPolicy(System.String,System.Int32)">
            <param name="ip">To be added.</param>
            <param name="atPort">To be added.</param>
            <summary>Prefetch the webplayer socket security policy from a non-default port number.</summary>
            <returns>To be added.</returns>
            <remarks>Socket connections attempted in a webplayer need to be validated by a socket policy.  When the policy is hosted on a port different than the default port number (843) it needs to  be explicitly fetched with this API call before any socket connections are attempted. The timeout argument is in milliseconds. The return value indicates if a policy was successfully retrieved or not. See more about the webplayer security sandbox in the manual.</remarks>
        </member>
        <member name="M:UnityEngine.Security.PrefetchSocketPolicy(System.String,System.Int32,System.Int32)">
            <param name="ip">To be added.</param>
            <param name="atPort">To be added.</param>
            <param name="timeout">To be added.</param>
            <summary>Prefetch the webplayer socket security policy from a non-default port number.</summary>
            <returns>To be added.</returns>
            <remarks>Socket connections attempted in a webplayer need to be validated by a socket policy.  When the policy is hosted on a port different than the default port number (843) it needs to  be explicitly fetched with this API call before any socket connections are attempted. The timeout argument is in milliseconds. The return value indicates if a policy was successfully retrieved or not. See more about the webplayer security sandbox in the manual.</remarks>
        </member>
        <member name="T:UnityEngine.SendMessageOptions">
            <summary>Options for how to send a message.</summary>
            <remarks>This is used by SendMessage &amp; BroadcastMessage in GameObject &amp; Component.</remarks>
        </member>
        <member name="F:UnityEngine.SendMessageOptions.DontRequireReceiver">
            <summary>No receiver is required for SendMessage.</summary>
            <remarks>If no Component (script) on the GameObject implements the method no error will be generated. See Also: GameObject.SendMessage</remarks>
        </member>
        <member name="F:UnityEngine.SendMessageOptions.RequireReceiver">
            <summary>A receiver is required for SendMessage.</summary>
            <remarks>If no receiver is found, an error is printed to the console. (This is the default value.) See Also: GameObject.SendMessage</remarks>
        </member>
        <member name="T:UnityEngine.SerializeField">
            <summary>Force Unity to serialize a private field.</summary>
            <remarks>You will almost never need this. When Unity serializes your scripts, it will only serialize public fields. If in addition to that you also want Unity to serialize one of your private fields you can add the SerializeField attribute to the field. Unity will serialize all your script components, reload the new assemblies, and recreate your script components from the serialized verions. This serialization does not happen with .NET's serialization functionality, but with an internal Unity one. The serialization system used can do the following: - CAN serialize public nonstatic fields (of serializable types) - CAN serialize nonpublic nonstatic fields marked with the [SerializeField] attribute. - CANNOT serialize static fields. - CANNOT serialize properties.  Your field will only serialize if it is of a type that Unity can serialize: Serializable types are: - All classes inheriting from UnityEngine.Object, for example GameObject, Component, MonoBehaviour, Texture2D, AnimationClip.. - All basic data types like int, string, float, bool. - Some built-in types like Vector2, Vector3, Vector4, Quaternion, Matrix4x4, Color, Rect, LayerMask.. - Arrays of a serializable type - List of a serializable type (new in Unity2.6) - Enums Headsup note: if you put one element in a list (or array) twice, when the list gets serialized, you'll get two copies of that element, instead of one copy being in the new list twice. Hint: Unity won't serialize Dictionary, however you could store a List for keys and a List for values, and sew them up in a non serialized dictionary on Awake(). This doesn't solve the problem of when you want to modify the dictionary and have it "saved" back, but it is a handy trick in a lot of other cases. For UnityScript users: Fields in c# is a script variable in UnityScript, and [SerializeField] becomes @SerializeField. [Serializable] on a class becomes @script Serializable in a UnityScript.</remarks>
        </member>
        <member name="C:UnityEngine.SerializeField">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SerializePrivateVariables">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SerializePrivateVariables">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Shader">
            <summary>Shader scripts used for all rendering.</summary>
            <remarks>Most of the advanced rendering is controlled via Material class. Shader class is mostly used just to check whether a shader can run on the user's hardware ( isSupported property) and to find shaders by name ( Find method). See Also: Material class, Materials, ShaderLab documentation.</remarks>
        </member>
        <member name="C:UnityEngine.Shader">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.DisableKeyword(System.String)">
            <param name="keyword">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.EnableKeyword(System.String)">
            <param name="keyword">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.Find(System.String)">
            <param name="name">To be added.</param>
            <summary>Finds a shader with the given name.</summary>
            <returns>To be added.</returns>
            <remarks>Shader.Find can be used to switch to another shader without having to keep a reference to the shader. name is the name you can see in the shader popup of any material. Common names are: "Diffuse", "Bumped Diffuse", "VertexLit", "Transparent/Diffuse" etc. When building a player, a shader will only be included if it is assigned to a material that is used in any scene or if the shader is placed in a "Resources" folder. See Also: Material class.Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Shader.globalMaximumLOD">
            <summary>Shader LOD level for all shaders.</summary>
            <value>To be added.</value>
            <remarks>See Also: Shader Level of Detail, maximumLOD.</remarks>
        </member>
        <member name="P:UnityEngine.Shader.isSupported">
            <summary>Can this shader run on the end-users graphics card? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if the shader itself or any fallbacks setup in the shader are supported. Most often you use this when implementing special effects. For example, image effects in Unity Pro automatically disable themselves if the shader is not supported.See Also: Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="P:UnityEngine.Shader.maximumLOD">
            <summary>Shader LOD level for this shader.</summary>
            <value>To be added.</value>
            <remarks>See Also: Shader Level of Detail, Shader.globalMaximumLOD.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.PropertyToID(System.String)">
            <param name="name">To be added.</param>
            <summary>Gets unique identifier for a shader property name.</summary>
            <returns>To be added.</returns>
            <remarks>Using property identifiers is more efficient than passing strings to all material property functions. For example if you are calling Material.SetColor a lot, or using MaterialPropertyBlock, then it is better to get the identifiers of the properties you need just once. Each name of shader property (for example, _MainTex or _Color ) is assigned an unique integer number in Unity, that stays the same for the whole game. The numbers will not be the same between different runs of the game or between machines, so do not store them or send them over network. See Also: Material, MaterialPropertyBlock.</remarks>
        </member>
        <member name="P:UnityEngine.Shader.renderQueue">
            <summary>Render queue of this shader. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: Material.renderQueue, RenderQueue tag.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalBuffer(System.String,UnityEngine.ComputeBuffer)">
            <param name="propertyName">To be added.</param>
            <param name="buffer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalColor(System.Int32,UnityEngine.Color)">
            <param name="nameID">To be added.</param>
            <param name="color">To be added.</param>
            <summary>Sets a global color property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" color (for example, color of the sun). Then you can set the global property from script and don't have to setup the same color in all materials. See Also: SetGlobalFloat, SetGlobalVector, SetGlobalTexture ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalColor(System.String,UnityEngine.Color)">
            <param name="propertyName">To be added.</param>
            <param name="color">To be added.</param>
            <summary>Sets a global color property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" color (for example, color of the sun). Then you can set the global property from script and don't have to setup the same color in all materials. See Also: SetGlobalFloat, SetGlobalVector, SetGlobalTexture ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalFloat(System.Int32,System.Single)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets a global float property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" float (for example, density of some custom fog type). Then you can set the global property from script and don't have to setup the same float in all materials. See Also: SetGlobalColor, SetGlobalTexture ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalFloat(System.String,System.Single)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets a global float property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" float (for example, density of some custom fog type). Then you can set the global property from script and don't have to setup the same float in all materials. See Also: SetGlobalColor, SetGlobalTexture ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalInt(System.Int32,System.Int32)">
            <param name="nameID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalInt(System.String,System.Int32)">
            <param name="propertyName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalMatrix(System.Int32,UnityEngine.Matrix4x4)">
            <param name="nameID">To be added.</param>
            <param name="mat">To be added.</param>
            <summary>Sets a global matrix property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). See Also: SetGlobalColor, SetGlobalFloat ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalMatrix(System.String,UnityEngine.Matrix4x4)">
            <param name="propertyName">To be added.</param>
            <param name="mat">To be added.</param>
            <summary>Sets a global matrix property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). See Also: SetGlobalColor, SetGlobalFloat ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalTexGenMode(System.String,UnityEngine.TexGenMode)">
            <param name="propertyName">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalTexture(System.Int32,UnityEngine.Texture)">
            <param name="nameID">To be added.</param>
            <param name="tex">To be added.</param>
            <summary>Sets a global texture property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" texture (for example, custom diffuse-lighting cubemap). Then you can set the global property from script and don't have to setup the same texture in all materials. See Also: SetGlobalColor, SetGlobalFloat ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalTexture(System.String,UnityEngine.Texture)">
            <param name="propertyName">To be added.</param>
            <param name="tex">To be added.</param>
            <summary>Sets a global texture property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" texture (for example, custom diffuse-lighting cubemap). Then you can set the global property from script and don't have to setup the same texture in all materials. See Also: SetGlobalColor, SetGlobalFloat ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalTextureMatrixName(System.String,System.String)">
            <param name="propertyName">To be added.</param>
            <param name="matrixName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalVector(System.Int32,UnityEngine.Vector4)">
            <param name="nameID">To be added.</param>
            <param name="vec">To be added.</param>
            <summary>Sets a global vector property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" vector (for example, wind direction). Then you can set the global property from script and don't have to setup the same vector in all materials. See Also: SetGlobalFloat, SetGlobalColor, SetGlobalTexture ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.SetGlobalVector(System.String,UnityEngine.Vector4)">
            <param name="propertyName">To be added.</param>
            <param name="vec">To be added.</param>
            <summary>Sets a global vector property for all shaders.</summary>
            <remarks>Global properties are used if a shader needs them but the material does not have them defined (for example, if the shader does not expose them in Properties block). Usually this is used if you have a set of custom shaders that all use the same "global" vector (for example, wind direction). Then you can set the global property from script and don't have to setup the same vector in all materials. See Also: SetGlobalFloat, SetGlobalColor, SetGlobalTexture ; Material class, ShaderLab documentation.</remarks>
        </member>
        <member name="M:UnityEngine.Shader.WarmupAllShaders">
            <summary>Fully load all shaders to prevent future performance hiccups.</summary>
            <remarks>Usually graphics drivers do not actually prepare shaders until they are first needed. However when some object is first rendered with a previously unused shader, there can be a hiccup because the driver is compiling/optimizing the shader. This can be quite noticeable on mobile platforms. Calling this function will perform dummy one-invisible-triangle rendering with all permutations of all currently loaded shaders. This can take some time but helps to avoid hiccups in the future. Please be aware that this function will only warmup shaders that are currently loaded.  If you use Resources.Load to load shaders, you will need to call WarmupAllShaders again. Also, different fog modes are implemented through shader patching,  so if you change fog mode at runtime, you need to do so before calling WarmupAllShaders.</remarks>
        </member>
        <member name="T:UnityEngine.ShadowProjection">
            <summary>Shadow projection type for Quality Settings.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.ShadowProjection.CloseFit">
            <summary>Close fit shadow maps with linear fadeout.</summary>
        </member>
        <member name="F:UnityEngine.ShadowProjection.StableFit">
            <summary>Stable shadow maps with spherical fadeout.</summary>
        </member>
        <member name="T:UnityEngine.SkeletonBone">
            <summary>Details of the Transform name mapped to a model's skeleton bone and its default position and rotation in the T-pose.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SkeletonBone.name">
            <summary>The name of the Transform mapped to the bone.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SkeletonBone.position">
            <summary>The T-pose position of the bone in local space.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SkeletonBone.rotation">
            <summary>The T-pose rotation of the bone in local space.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SkeletonBone.scale">
            <summary>The T-pose scaling of the bone in local space.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SkeletonBone.transformModified">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SkinnedCloth">
            <summary>The SkinnedCloth component works together with the SkinnedMeshRenderer to simulate clothing on a character.</summary>
            <remarks>See the SkinnedCloth component reference for an extensive description on how it works.</remarks>
        </member>
        <member name="C:UnityEngine.SkinnedCloth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedCloth.coefficients">
            <summary>The cloth skinning coefficients used to set up how the cloth interacts with the skinned mesh.</summary>
            <value>To be added.</value>
            <remarks>See the SkinnedCloth component reference for a description how these are used, and how to set them up in the Unity editor.</remarks>
        </member>
        <member name="M:UnityEngine.SkinnedCloth.SetEnabledFading(System.Boolean)">
            <param name="enabled">To be added.</param>
            <summary>Fade the cloth simulation in or out, and enabled or disable the SkinnedCloth.</summary>
            <remarks>This function lets you enable or disabe the SkinnedCloth component, by setting the enabled parameter. Unlike setting the /Cloth.enabled/ property directly, this will delay the action, and smoothly interpolate the mesh between the normal skinned mesh and the cloth simulation over a time of interpolationTime seconds. This helps you to turn on and off clothing simulation on characters without letting users notice the transition. Turning on and off clothing simulation is useful for managing the performance of your game, as cloth simulation is rather expensive. Calling this function repeatedly with the same parameters has no additional effect.</remarks>
        </member>
        <member name="M:UnityEngine.SkinnedCloth.SetEnabledFading(System.Boolean,System.Single)">
            <param name="enabled">To be added.</param>
            <param name="interpolationTime">To be added.</param>
            <summary>Fade the cloth simulation in or out, and enabled or disable the SkinnedCloth.</summary>
            <remarks>This function lets you enable or disabe the SkinnedCloth component, by setting the enabled parameter. Unlike setting the /Cloth.enabled/ property directly, this will delay the action, and smoothly interpolate the mesh between the normal skinned mesh and the cloth simulation over a time of interpolationTime seconds. This helps you to turn on and off clothing simulation on characters without letting users notice the transition. Turning on and off clothing simulation is useful for managing the performance of your game, as cloth simulation is rather expensive. Calling this function repeatedly with the same parameters has no additional effect.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedCloth.worldAccelerationScale">
            <summary>How much world-space acceleration of the character will affect cloth vertices.</summary>
            <value>To be added.</value>
            <remarks>The higher this value is, the more the cloth will move as a reaction to world space acceleration of the GameObject. If the cloth appears lifeless, try increasing this value. If it appears to get unstable when the character accelerates, try decreasing the value.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedCloth.worldVelocityScale">
            <summary>How much world-space movement of the character will affect cloth vertices.</summary>
            <value>To be added.</value>
            <remarks>The higher this value is, the more the cloth will move as a reaction to world space movement of the GameObject. Basically, this defines the air friction of the SkinnedCloth.</remarks>
        </member>
        <member name="T:UnityEngine.SkinnedMeshRenderer">
            <summary>The Skinned Mesh filter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SkinnedMeshRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SkinnedMeshRenderer.BakeMesh(UnityEngine.Mesh)">
            <summary>Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.</summary>
            <remarks>The vertices are relative to the SkinnedMeshRenderer Transform component. Note that the snapshot is still computed even when updateWhenOffscreen is set to false and the skinned mesh object is currently offscreen.</remarks>
            <param name="mesh">A static mesh that will receive the snapshot of the skinned mesh.</param>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.bones">
            <summary>The bones used to skin the mesh.</summary>
            <value>To be added.</value>
            <remarks>See the code example for Mesh.bindposes for further details.</remarks>
        </member>
        <member name="M:UnityEngine.SkinnedMeshRenderer.GetBlendShapeWeight(System.Int32)">
            <param name="index">To be added.</param>
            <summary>Returns weight of BlendShape on this renderer.</summary>
            <returns>To be added.</returns>
            <remarks>Index must be smaller than Mesh.blendShapeCount of a mesh attached to this renderer.  At weight 0 BlendShape has no influence, at weight 1 BlendShape is fully active,  but weight is not limited to [0; 1] range. See Also: SetBlendShapeWeight, Mesh.blendShapes.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.localBounds">
            <summary>AABB of this Skinned Mesh in its local space.</summary>
            <value>To be added.</value>
            <remarks>It is precomputed on import for imported models based on animations associated with that model, which means that the bounding box might be much bigger than the mesh itself. It is recomputed every time when updateWhenOffscreen is enabled, but in this case it would be exactly the size of the mesh at that frame. See Also: updateWhenOffscreen.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.quality">
            <summary>The maximum number of bones affecting a single vertex.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.rootBone">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SkinnedMeshRenderer.SetBlendShapeWeight(System.Int32,System.Single)">
            <param name="index">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets weight of BlendShape on this renderer.</summary>
            <remarks>Index must be smaller than Mesh.blendShapeCount of a mesh attached to this renderer.  At weight 0 BlendShape has no influence, at weight 1 BlendShape is fully active,  but weight is not limited to [0; 1] range. See Also: GetBlendShapeWeight, Mesh.blendShapes.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.sharedMesh">
            <summary>The mesh used for skinning.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.skinNormals">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SkinnedMeshRenderer.updateWhenOffscreen">
            <summary>If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.</summary>
            <value>To be added.</value>
            <remarks>See Also: Skinned Mesh Renderer component.</remarks>
        </member>
        <member name="T:UnityEngine.SkinQuality">
            <summary>/ The maximum number of bones affecting a single vertex.</summary>
            <remarks>/ See Also: SkinnedMeshRenderer.quality.</remarks>
        </member>
        <member name="F:UnityEngine.SkinQuality.Auto">
            <summary>Chooses the number of bones from the number current QualitySettings. (Default)</summary>
        </member>
        <member name="F:UnityEngine.SkinQuality.Bone1">
            <summary>Use only 1 bone to deform a single vertex. (The most important bone will be used).</summary>
        </member>
        <member name="F:UnityEngine.SkinQuality.Bone2">
            <summary>Use 2 bones to deform a single vertex. (The most important bones will be used).</summary>
        </member>
        <member name="F:UnityEngine.SkinQuality.Bone4">
            <summary>Use 4 bones to deform a single vertex.</summary>
        </member>
        <member name="T:UnityEngine.Skybox">
            <summary>A script interface for the skybox component.</summary>
            <remarks>The skybox class has only the material property. See Also: skybox component.</remarks>
        </member>
        <member name="C:UnityEngine.Skybox">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Skybox.material">
            <summary>The material used by the skybox.</summary>
            <value>To be added.</value>
            <remarks>See Also: skybox component.</remarks>
        </member>
        <member name="T:UnityEngine.SleepTimeout">
            <summary>Constants for special values of Screen.sleepTimeout.</summary>
            <remarks>Use them to specify something other than a fixed amount of seconds before dimming the screen.</remarks>
        </member>
        <member name="C:UnityEngine.SleepTimeout">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SleepTimeout.NeverSleep">
            <summary>Prevent screen dimming.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SleepTimeout.SystemSetting">
            <summary>Set the sleep timeout to whatever user has specified in the system settings.</summary>
            <remarks>Useful when restoring back to the state the system was in before running your app.</remarks>
        </member>
        <member name="T:UnityEngine.SliderJoint2D">
            <summary>Joint that restricts the motion of a Rigidbody2D object to a single line.</summary>
            <remarks>See Also: Rigidbody2D class, DistanceJoint2D class, HingeJoint2D class, SpringJoint2D class.</remarks>
        </member>
        <member name="C:UnityEngine.SliderJoint2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.anchor">
            <summary>The joint's anchor point on the object that has the HingeJoint2D component.</summary>
            <value>To be added.</value>
            <remarks>See Also: connectedAnchor.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.angle">
            <summary>The angle of the line in space.</summary>
            <value>To be added.</value>
            <remarks>The line along which the joint can slide is specified by its angle (relative to the coordinate system) and optionally by endpoint limits along its length. See Also: limits.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.connectedAnchor">
            <summary>The joint's anchor point on the second object (ie, the one which doesn't have the component).</summary>
            <value>To be added.</value>
            <remarks>See Also: anchor.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.limits">
            <summary>Restrictions on how far the joint can slide in each direction along the line.</summary>
            <value>To be added.</value>
            <remarks>The line along which the joint can slide is specified by its angle (relative to the coordinate system) and optionally by endpoint limits along its length. See Also: angle.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.motor">
            <summary>Parameters for a motor force that is applied automatically to the Rigibody2D along the line.</summary>
            <value>To be added.</value>
            <remarks>See Also: useMotor.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.useLimits">
            <summary>Should motion limits be used?</summary>
            <value>To be added.</value>
            <remarks>See Also: limits.</remarks>
        </member>
        <member name="P:UnityEngine.SliderJoint2D.useMotor">
            <summary>Should a motor force be applied automatically to the Rigidbody2D?</summary>
            <value>To be added.</value>
            <remarks>See Also: motor.</remarks>
        </member>
        <member name="T:UnityEngine.Social">
            <summary>Generic access to the Social API.</summary>
            <remarks>Social.Active can be used to target a specific social platform implementation, but by default GameCenter is used on iOS. All other  platforms default to the Local implementation which can be used for testing.  See Social API Reference Manual for an overview. The Social class should always be used as an entry point. It contains helper functions for accessing the current active implementation and always uses the interfaces of the other Social API classes. This way it is easier to use versions of the interfaces which have been extended beoynd the generic API by the implementation.   There are varoius classes accociated with the Social API and all of these reside in the UnityEngine.SocialPlatforms namespace. You need to import/use this namespace in order to use these classes.   See Also: SocialPlatforms.GameCenter.GameCenterPlatform.</remarks>
        </member>
        <member name="P:UnityEngine.Social.Active">
            <summary>This is the currently active social platform.</summary>
            <value>To be added.</value>
            <remarks>If not explicitly set, a default is picked depending on the target platform.</remarks>
        </member>
        <member name="M:UnityEngine.Social.CreateAchievement">
            <summary>Create an IAchievement instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Social.CreateLeaderboard">
            <summary>Create an ILeaderboard instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Social.LoadAchievementDescriptions(System.Action{UnityEngine.SocialPlatforms.IAchievementDescription[]})">
            <param name="callback">To be added.</param>
            <summary>Loads the achievement descriptions accociated with this application.</summary>
            <remarks>This is usually set up outside Unity on some external service provided by the implementation provider. For example, when using GameCenter you need to set up the achievements using iTunes Connect.</remarks>
        </member>
        <member name="M:UnityEngine.Social.LoadAchievements(System.Action{UnityEngine.SocialPlatforms.IAchievement[]})">
            <param name="callback">To be added.</param>
            <summary>Load the achievements the logged in user has already achieved or reported progress on.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Social.LoadScores(System.String,System.Action{UnityEngine.SocialPlatforms.IScore[]})">
            <param name="leaderboardID">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>Load a default set of scores from the given leaderboard.</summary>
            <remarks>This uses default leaderboard parameters.</remarks>
        </member>
        <member name="M:UnityEngine.Social.LoadUsers(System.String[],System.Action{UnityEngine.SocialPlatforms.IUserProfile[]})">
            <param name="userIDs">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>Load the user profiles accociated with the given array of user IDs.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Social.localUser">
            <summary>The local user (potentially not logged in).</summary>
            <value>To be added.</value>
            <remarks>Until the user logs in or authenticates himself the profile data will be invalid and no other Social API functionality will work.</remarks>
        </member>
        <member name="M:UnityEngine.Social.ReportProgress(System.String,System.Double,System.Action{System.Boolean})">
            <param name="achievementID">To be added.</param>
            <param name="progress">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>Reports the progress of an achievement.</summary>
            <remarks>The achievement ID number must match an achievement description associated with this application. Reporting a progress of 0.0 usually means the achievement can be shown if it was hidden before. Depending on the platform, partial progress cannot always be reported, in which case 100.0 is the only other value which can be used.</remarks>
        </member>
        <member name="M:UnityEngine.Social.ReportScore(System.Int64,System.String,System.Action{System.Boolean})">
            <param name="score">To be added.</param>
            <param name="board">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>Report a score to a specific leaderboard.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Social.ShowAchievementsUI">
            <summary>Show a default/system view of the games achievements.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Social.ShowLeaderboardUI">
            <summary>Show a default/system view of the games leaderboards.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SoftJointLimit">
            <summary>The limits defined by the CharacterJoint.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SoftJointLimit.bounciness">
            <summary>When the joint hits the limit, it can be made to bounce off it.</summary>
            <value>To be added.</value>
            <remarks>Bounciness determines how much to bounce off an limit. range { 0, 1 }.</remarks>
        </member>
        <member name="P:UnityEngine.SoftJointLimit.bouncyness">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SoftJointLimit.damper">
            <summary>If spring is greater than zero, the limit is soft.</summary>
            <value>To be added.</value>
            <remarks>This is the damping of spring. { 0, infinity }.</remarks>
        </member>
        <member name="P:UnityEngine.SoftJointLimit.limit">
            <summary>The limit position/angle of the joint.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SoftJointLimit.spring">
            <summary>If greater than zero, the limit is soft. The spring will pull the joint back.</summary>
            <value>To be added.</value>
            <remarks>{ 0, infinity }.</remarks>
        </member>
        <member name="T:UnityEngine.Space">
            <summary>The coordinate space in which to operate.</summary>
            <remarks>See Also: Transform.</remarks>
        </member>
        <member name="F:UnityEngine.Space.Self">
            <summary>Applies transformation relative to the local coordinate system.</summary>
        </member>
        <member name="F:UnityEngine.Space.World">
            <summary>Applies transformation relative to the world coordinate system.</summary>
        </member>
        <member name="T:UnityEngine.SphereCollider">
            <summary>A sphere-shaped primitive collider.</summary>
            <remarks>See Also: BoxCollider, CapsuleCollider, PhysicMaterial, Rigidbody.</remarks>
        </member>
        <member name="C:UnityEngine.SphereCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SphereCollider.center">
            <summary>The center of the sphere, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SphereCollider.radius">
            <summary>The radius of the sphere, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>The sphere radius will be scaled by the transform's scale.</remarks>
        </member>
        <member name="T:UnityEngine.SplatPrototype">
            <summary>A Splat prototype is just a texture that is used by the TerrainData.</summary>
            <remarks>Class on a Terrain GameObject.</remarks>
        </member>
        <member name="C:UnityEngine.SplatPrototype">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SplatPrototype.normalMap">
            <summary>Normal map of the splat applied to the Terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SplatPrototype.texture">
            <summary>Texture of the splat applied to the Terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SplatPrototype.tileOffset">
            <summary>Offset of the tile texture of the SplatPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SplatPrototype.tileSize">
            <summary>Size of the tile used in the texture of the SplatPrototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SpringJoint">
            <summary>The spring joint ties together 2 rigid bodies, spring forces will be automatically applied to keep the object at the given distance.</summary>
            <remarks>The Spring attempts to maintain the distance it has when it starts out. So if your joint's start at a rest position where the two rigidbodies are far apart, then the joint will attempt to maintain that distance. The minDistance and maxDistance properties add on top of this implicit distance.</remarks>
        </member>
        <member name="C:UnityEngine.SpringJoint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint.damper">
            <summary>The damper force used to dampen the spring force.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint.maxDistance">
            <summary>The maximum distance between the bodies relative to their initial distance.</summary>
            <value>To be added.</value>
            <remarks>The distanced that will be maintained, will be kept between minDistance and maxDistance. Both values are relative to the distance between the center of masses when the scene was first loaded.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint.minDistance">
            <summary>The minimum distance between the bodies relative to their initial distance.</summary>
            <value>To be added.</value>
            <remarks>The distanced that will be maintained, will be kept between minDistance and maxDistance. Both values are relative to the distance between the center of masses when the scene was first loaded.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint.spring">
            <summary>The spring force used to keep the two objects together.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SpringJoint2D">
            <summary>Joint that attempts to keep two Rigidbody2D objects a set distance apart by applying a force between them.</summary>
            <remarks>Note that unlike DistanceJoint2D, the length of the joint can stretch and oscillate. See Also: DistanceJoint2D class, HingeJoint2D class, SliderJoint2D class.</remarks>
        </member>
        <member name="C:UnityEngine.SpringJoint2D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint2D.anchor">
            <summary>The joint's anchor point on the object that has the SpringJoint2D component.</summary>
            <value>To be added.</value>
            <remarks>See Also: connectedAnchor.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint2D.connectedAnchor">
            <summary>The joint's anchor point on the second object (ie, the one which doesn't have the component).</summary>
            <value>To be added.</value>
            <remarks>See Also: anchor.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint2D.dampingRatio">
            <summary>The amount by which the spring force is reduced in proportion to the movement speed.</summary>
            <value>To be added.</value>
            <remarks>The spring will oscillate with a certain frequency as it attempts to reestablish the desired distance between the objects. The higher the damping ratio, the quicker the oscillation will die down to zero. See Also: frequency.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint2D.distance">
            <summary>The distance the spring will try to keep between the two objects.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SpringJoint2D.frequency">
            <summary>The frequency at which the spring oscillates around the distance distance between the objects.</summary>
            <value>To be added.</value>
            <remarks>The spring will oscillate with a certain frequency as it attempts to reestablish the desired distance between the objects. A damping ratio can be set to cause this oscillation to die down over time. See Also: dampingRatio.</remarks>
        </member>
        <member name="T:UnityEngine.Sprite">
            <summary>Represents a Sprite object for use in 2D gameplay.</summary>
            <remarks>Sprites are 2D graphic objects used for characters, props, projectiles and other elments of 2D gameplay. The graphics are obtained from bitmap images - Texture2D. The Sprite class primarily identifies the section of the image that should be used for a specific sprite. This information can then be used by a SpriteRenderer component on a GameObject to actually display the graphic. See Also: SpriteRenderer class.</remarks>
        </member>
        <member name="C:UnityEngine.Sprite">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.bounds">
            <summary>Bounds of the Sprite, specified by its center and extents in world space units.</summary>
            <value>To be added.</value>
            <remarks>See Also: rect, size.</remarks>
        </member>
        <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>Create a new Sprite object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SpriteRenderer class.</remarks>
            <param name="texture">Texture from which to obtain the sprite graphic.</param>
            <param name="rect">Rectangular section of the texture to use for the sprite.</param>
            <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
        </member>
        <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single)">
            <summary>Create a new Sprite object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SpriteRenderer class.</remarks>
            <param name="texture">Texture from which to obtain the sprite graphic.</param>
            <param name="rect">Rectangular section of the texture to use for the sprite.</param>
            <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
            <param name="pixelsToUnits">Scaling to map pixels in the image to world space units.</param>
        </member>
        <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.UInt32)">
            <param name="extrude">To be added.</param>
            <summary>Create a new Sprite object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SpriteRenderer class.</remarks>
            <param name="texture">Texture from which to obtain the sprite graphic.</param>
            <param name="rect">Rectangular section of the texture to use for the sprite.</param>
            <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
            <param name="pixelsToUnits">Scaling to map pixels in the image to world space units.</param>
        </member>
        <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.UInt32,UnityEngine.SpriteMeshType)">
            <param name="extrude">To be added.</param>
            <param name="meshType">To be added.</param>
            <summary>Create a new Sprite object.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: SpriteRenderer class.</remarks>
            <param name="texture">Texture from which to obtain the sprite graphic.</param>
            <param name="rect">Rectangular section of the texture to use for the sprite.</param>
            <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
            <param name="pixelsToUnits">Scaling to map pixels in the image to world space units.</param>
        </member>
        <member name="P:UnityEngine.Sprite.packed">
            <summary>Returns true if this Sprite is packed in an atlas.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.packingMode">
            <summary>If Sprite is packed (see Sprite.packed), returns its SpritePackingMode.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.packingRotation">
            <summary>If Sprite is packed (see Sprite.packed), returns its SpritePackingRotation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.rect">
            <summary>Location of the Sprite on the original Texture, specified in pixels.</summary>
            <value>To be added.</value>
            <remarks>See Also: bounds, size.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.texture">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.textureRect">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Sprite.textureRectOffset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SpriteAlignment">
            <summary>How a Sprite's graphic rectangle is aligned with its pivot point.</summary>
            <remarks>See Also: Sprite class.</remarks>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.BottomCenter">
            <summary>Pivot is at the center of the bottom edge of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.BottomLeft">
            <summary>Pivot is at the bottom left corner of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.BottomRight">
            <summary>Pivot is at the bottom right corner of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.Center">
            <summary>Pivot is at the center of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.Custom">
            <summary>Pivot is at a custom position within the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.LeftCenter">
            <summary>Pivot is at the center of the left edge of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.RightCenter">
            <summary>Pivot is at the center of the right edge of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.TopCenter">
            <summary>Pivot is at the center of the top edge of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.TopLeft">
            <summary>Pivot is at the top left corner of the graphic rectangle.</summary>
        </member>
        <member name="F:UnityEngine.SpriteAlignment.TopRight">
            <summary>Pivot is at the top right corner of the graphic rectangle.</summary>
        </member>
        <member name="T:UnityEngine.SpriteMeshType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SpriteMeshType.FullRect">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SpriteMeshType.Tight">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.SpritePackingMode">
            <summary>Sprite packing modes for the Sprite Packer.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SpritePackingMode.Rectangle">
            <summary>Alpha-cropped ractangle packing.</summary>
        </member>
        <member name="F:UnityEngine.SpritePackingMode.Tight">
            <summary>Tight mesh based packing.</summary>
        </member>
        <member name="T:UnityEngine.SpritePackingRotation">
            <summary>Sprite rotation modes for the Sprite Packer.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SpritePackingRotation.Any">
            <summary>Any rotation.</summary>
        </member>
        <member name="F:UnityEngine.SpritePackingRotation.None">
            <summary>No rotation.</summary>
        </member>
        <member name="T:UnityEngine.SpriteRenderer">
            <summary>Renders a Sprite for 2D graphics.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SpriteRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SpriteRenderer.color">
            <summary>Rendering color for the Sprite graphic.</summary>
            <value>To be added.</value>
            <remarks>Becomes the vertex color and can be accessed in a pixel shader.</remarks>
        </member>
        <member name="P:UnityEngine.SpriteRenderer.sprite">
            <summary>The Sprite to render.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.StackTraceUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.StackTraceUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.StackTraceUtility.ExtractStackTrace">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.StackTraceUtility.ExtractStringFromException(System.Object)">
            <param name="exception">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.StaticBatchingUtility">
            <summary>StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.</summary>
            <remarks>This step is useful as a performance optimization allowing engine to reduce number of draw-calls dramatically, but keep amount of rendered geometry intact. By calling one of the Combine methods you will create an internal mesh which will contain combined geometry, however each original GameObject will be present in the scene and will be culled individually. The fact that GameObjects can be culled individually allows run-time to render the same amount of geometry as it would without batching, unlike combining geometry in the modeling tool. Combining geometry in the modeling tool prevents efficient culling and results in much higher amount of geometry being rendered. Note that you do not need to call Combine methods on objects which were already marked as "Static" in the Editor. They will be prepared for static batching automatically during the Build Player step. IMPORTANT: only objects with the same material can be batched, thus it is useful to share as many textures/material as you can.</remarks>
        </member>
        <member name="C:UnityEngine.StaticBatchingUtility">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.StaticBatchingUtility.Combine(UnityEngine.GameObject)">
            <param name="staticBatchRoot">To be added.</param>
            <summary>Combine will prepare all children of the staticBatchRoot for static batching.Combine will prepare all gos for the static batching. staticBatchRoot will be treated as their parent.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.StaticBatchingUtility.Combine(UnityEngine.GameObject[],UnityEngine.GameObject)">
            <param name="gos">To be added.</param>
            <param name="staticBatchRoot">To be added.</param>
            <summary>Combine will prepare all children of the staticBatchRoot for static batching.Combine will prepare all gos for the static batching. staticBatchRoot will be treated as their parent.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SystemInfo">
            <summary>Access system information.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SystemInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.deviceModel">
            <summary>The model of the device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Possible examples: iPhone3,1 or iPod4,1.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.deviceName">
            <summary>The user defined name of the device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.deviceType">
            <summary>Returns the kind of device the application is running on.</summary>
            <value>To be added.</value>
            <remarks>See DeviceType enumeration for possible values.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.deviceUniqueIdentifier">
            <summary>A unique device identifier. It is guaranteed to be unique for every device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>iOS: on pre-iOS7 devices it will return hash of MAC address. On iOS7 devices it will be UIDevice identifierForVendor or, if that fails for any reason, ASIdentifierManager advertisingIdentifier.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsDeviceID">
            <summary>The identifier code of the graphics device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the PCI device ID of the user's graphics card. Together with SystemInfo.graphicsDeviceVendorID, this number uniquely identifies a particular graphics card model. The number is the same across operating systems and driver versions. See pcidatabase.com for a list of device IDs. See Also: SystemInfo.graphicsDeviceVendorID, SystemInfo.graphicsDeviceName.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsDeviceName">
            <summary>The name of the graphics device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the name of user's graphics card, as reported by the graphics driver.Note that the same graphics card can be reported by different names depending on the operating system, driver and so on. If you want to reliably identify some specific card, use SystemInfo.graphicsDeviceID SystemInfo.graphicsDeviceVendorID. See Also: SystemInfo.graphicsDeviceID, SystemInfo.graphicsDeviceVendor, SystemInfo.graphicsDeviceVersion.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsDeviceVendor">
            <summary>The vendor of the graphics device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the vendor of user's graphics card, as reported by the graphics driver. See Also: SystemInfo.graphicsDeviceName, SystemInfo.graphicsDeviceVersion.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsDeviceVendorID">
            <summary>The identifier code of the graphics device vendor (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the PCI vendor ID of the user's graphics card. This number uniquely identifies a particular graphics card maker. The number is the same across operating systems and driver versions. See pcidatabase.com for a list of vendor IDs. See Also: SystemInfo.graphicsDeviceID, SystemInfo.graphicsDeviceVendor.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsDeviceVersion">
            <summary>The graphics API version supported by the graphics device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the low-level graphics API version supported by the user's graphics card. In case of OpenGL API, the returned string will contain " OpenGL " followed by version in " major.minor " format, followed by full version string in square brackets. In case of Direct3D9 API, the returned string will contain " Direct3D 9.0c " followed by driver name and version in square brackets. See Also: SystemInfo.graphicsDeviceName, SystemInfo.graphicsDeviceVendor.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsMemorySize">
            <summary>Amount of video memory present (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the approximate amount of graphics memory in megabytes. See Also: SystemInfo.systemMemorySize.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsPixelFillrate">
            <summary>Approximate pixel fill-rate of the graphics device (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Returns pixel fill-rate in megapixels/second, or -1 if fillrate of the device is not known. See Also: SystemInfo.graphicsShaderLevel.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.graphicsShaderLevel">
            <summary>Graphics device shader capability level (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is approximate "shader capability" level of the graphics device, expressed in DirectX shader model terms. Possible values are: 50 Shader Model 5.0 (DX11.0) 41 Shader Model 4.1 (DX10.1) 40 Shader Model 4.0 (DX10.0) 30 Shader Model 3.0 20 Shader Model 2.x See Also: SystemInfo.graphicsPixelFillrate.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.maxTextureSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.npotSupport">
            <summary>What NPOTSupport support does GPU provide? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: NPOTSupport enum.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.operatingSystem">
            <summary>Operating system name with version (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.processorCount">
            <summary>Number of processors present (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is number of processors as reported by the operating system. The processors could be separate processors, cores of the same processor, or logical processors (e.g. in case of one Hyper-Threaded CPU, this would report two CPUs since that's what it looks like to the system).See Also: SystemInfo.processorType.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.processorType">
            <summary>Processor name (Read Only).</summary>
            <value>To be added.</value>
            <remarks>See Also: SystemInfo.processorCount.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportedRenderTargetCount">
            <summary>How many simultaneous render targets (MRTs) are supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: Graphics.SetRenderTarget.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supports3DTextures">
            <summary>Are 3D (volume) textures supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: Texture3D class.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsAccelerometer">
            <summary>Is an accelerometer available on the device?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsComputeShaders">
            <summary>Are compute shaders supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>See Also: ComputeShader, ComputeBuffer classes.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsGyroscope">
            <summary>Is a gyroscope available on the device?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsImageEffects">
            <summary>Are image effects supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if graphics card supports image postprocessing effects. See Also: Image Effects.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsInstancing">
            <summary>Is GPU draw call instancing supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Currently only Graphics.DrawProcedural and Graphics.DrawProceduralIndirect use instancing.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsLocationService">
            <summary>Is the device capable of reporting its location?</summary>
            <value>To be added.</value>
            <remarks>This property does not provide a detailed information on what kind of sensor can be used, it can use all kinds of underlying technology with varying accuracy.</remarks>
        </member>
        <member name="M:UnityEngine.SystemInfo.SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat)">
            <param name="format">To be added.</param>
            <summary>Is render texture format supported?</summary>
            <returns>To be added.</returns>
            <remarks>Returns true if graphics card supports given RenderTextureFormat. See Also: Render Texture assets, RenderTexture class.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsRenderTextures">
            <summary>Are render textures supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if graphics card supports Render Textures in general. Use SystemInfo.SupportsRenderTextureFormat to check for support for specific render texture format. See Also: Render Texture assets, RenderTexture class.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsRenderToCubemap">
            <summary>Are cubemap render textures supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if graphics card supports render into cubemap Render Textures. See Also: Render Texture assets, RenderTexture class.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsShadows">
            <summary>Are built-in shadows supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Returns true if graphics card has support for built-in shadows. See Also: Shadows documentation.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsStencil">
            <summary>Is the stencil buffer supported? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsVertexPrograms">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.supportsVibration">
            <summary>Is the device capable of providing the user haptic feedback by vibration?</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SystemInfo.systemMemorySize">
            <summary>Amount of system memory present (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is the approximate amount of system memory in megabytes. See Also: SystemInfo.graphicsMemorySize.</remarks>
        </member>
        <member name="T:UnityEngine.SystemLanguage">
            <summary>The language the user's operating system is running in. Returned by Application.systemLanguage.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Afrikaans">
            <summary>Afrikaans.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Arabic">
            <summary>Arabic.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Basque">
            <summary>Basque.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Belarusian">
            <summary>Belarusian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Bulgarian">
            <summary>Bulgarian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Catalan">
            <summary>Catalan.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Chinese">
            <summary>Chinese.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Czech">
            <summary>Czech.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Danish">
            <summary>Danish.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Dutch">
            <summary>Dutch.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.English">
            <summary>English.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Estonian">
            <summary>Estonian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Faroese">
            <summary>Faroese.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Finnish">
            <summary>Finnish.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.French">
            <summary>French.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.German">
            <summary>German.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Greek">
            <summary>Greek.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Hebrew">
            <summary>Hebrew.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Hugarian">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Hungarian">
            <summary>Hungarian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Icelandic">
            <summary>Icelandic.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Indonesian">
            <summary>Indonesian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Italian">
            <summary>Italian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Japanese">
            <summary>Japanese.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Korean">
            <summary>Korean.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Latvian">
            <summary>Latvian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Lithuanian">
            <summary>Lithuanian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Norwegian">
            <summary>Norwegian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Polish">
            <summary>Polish.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Portuguese">
            <summary>Portuguese.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Romanian">
            <summary>Romanian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Russian">
            <summary>Russian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.SerboCroatian">
            <summary>Serbo-Croatian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Slovak">
            <summary>Slovak.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Slovenian">
            <summary>Slovenian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Spanish">
            <summary>Spanish.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Swedish">
            <summary>Swedish.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Thai">
            <summary>Thai.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Turkish">
            <summary>Turkish.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Ukrainian">
            <summary>Ukrainian.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Unknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:UnityEngine.SystemLanguage.Vietnamese">
            <summary>Vietnamese.</summary>
        </member>
        <member name="T:UnityEngine.Terrain">
            <summary>The Terrain component renders the terrain.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Terrain">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.activeTerrain">
            <summary>The active terrain. This is a convenience function to get to the main terrain in the scene.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.activeTerrains">
            <summary>The active terrains in the scene.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Terrain.AddTreeInstance(UnityEngine.TreeInstance)">
            <param name="instance">To be added.</param>
            <summary>Adds a tree instance to the terrain.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.basemapDistance">
            <summary>Heightmap patches beyond basemap distance will use a precomputed low res basemap.</summary>
            <value>To be added.</value>
            <remarks>This improves performance for far away patches. Close up Unity renders the heightmap using splat maps by blending between any amount of provided terrain textures.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.castShadows">
            <summary>Should terrain cast shadows?.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Terrain.CreateTerrainGameObject(UnityEngine.TerrainData)">
            <param name="assignTerrain">To be added.</param>
            <summary>Creates a Terrain including collider from TerrainData.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.detailObjectDensity">
            <summary>Density of detail objects.</summary>
            <value>To be added.</value>
            <remarks>This number goes from 0.0 to 1.0, with 1.0 being the original density, and lower numbers resulting in less detail objects being rendered. See Also: detailObjectDistance.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.detailObjectDistance">
            <summary>Detail objects will be displayed up to this distance.</summary>
            <value>To be added.</value>
            <remarks>See Also: detailObjectDensity.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.editorRenderFlags">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Terrain.Flush">
            <summary>Flushes any change done in the terrain so it takes effect.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Terrain.GetPosition">
            <summary>Get the position of the terrain.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.heightmapMaximumLOD">
            <summary>Lets you essentially lower the heightmap resolution used for rendering.</summary>
            <value>To be added.</value>
            <remarks>This can be used on low end cards to never display the highest lod terrain. A value of 0 means always showing highest detail. A value of 1 means the triangle count will be reduced to 1/4th. The heightmap resolution will be halved for width and height.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.heightmapPixelError">
            <summary>An approximation of how many pixels the terrain will pop in the worst case when switching lod.</summary>
            <value>To be added.</value>
            <remarks>A higher value reduces the number of polygons drawn.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.lightmapIndex">
            <summary>The index of the lightmap applied to this renderer.</summary>
            <value>To be added.</value>
            <remarks>See Also: Renderer.lightmapIndex.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.materialTemplate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Terrain.SampleHeight(UnityEngine.Vector3)">
            <param name="worldPosition">To be added.</param>
            <summary>Samples the height at the given position defined in world space, relative to the terrain space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Terrain.SetNeighbors(UnityEngine.Terrain,UnityEngine.Terrain,UnityEngine.Terrain,UnityEngine.Terrain)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>Lets you setup the connection between neighboring Terrains.</summary>
            <remarks>This ensures LOD matches up on neighboring terrains. Note that it is not enough to call this function on one Terrain, you need to set the neighbors of each terrain.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.splatmapDistance">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.terrainData">
            <summary>The Terrain Data that stores heightmaps, terrain textures, detail meshes and trees.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.treeBillboardDistance">
            <summary>Distance from the camera where trees will be rendered as billboards only.</summary>
            <value>To be added.</value>
            <remarks>Decreasing this value improves performance but makes the transition look worse because the difference between billboards and trees will be more obvious.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.treeCrossFadeLength">
            <summary>Total distance delta that trees will use to transition from billboard orientation to mesh orientation.</summary>
            <value>To be added.</value>
            <remarks>Decreasing this value makes the transition happen faster. Setting it to 0 will produce a visible pop when switching from mesh to billboard representation.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.treeDistance">
            <summary>The maximum distance at which trees are rendered.</summary>
            <value>To be added.</value>
            <remarks>The higher this is, the further the distance trees can be seen and the slower it will run. See Also: Terrain.treeBillboardDistance.</remarks>
        </member>
        <member name="P:UnityEngine.Terrain.treeMaximumFullLODCount">
            <summary>Maximum number of trees rendered at full LOD.</summary>
            <value>To be added.</value>
            <remarks>This is an easy setting to prevent too many trees being rendered at too high resolution in dense forests. Since there will be no fade if treeMaximumFullLODCount is exceeded you should tweak the treeBillboardDistance to  not include unnecessary trees that are not being seen but, still rendered.</remarks>
        </member>
        <member name="T:UnityEngine.TerrainCollider">
            <summary>A heightmap based collider.</summary>
            <remarks>See Also: SphereCollider, CapsuleCollider, PhysicMaterial, Rigidbody.</remarks>
        </member>
        <member name="C:UnityEngine.TerrainCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainCollider.terrainData">
            <summary>The terrain that stores the heightmap.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TerrainData">
            <summary>The TerrainData class stores heightmaps, detail mesh positions, tree instances, and terrain texture alpha maps.</summary>
            <remarks>The Terrain component links to the terrain data and renders it.</remarks>
        </member>
        <member name="C:UnityEngine.TerrainData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.alphamapHeight">
            <summary>Height of the alpha map.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.alphamapLayers">
            <summary>Number of alpha map layers.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.alphamapResolution">
            <summary>Resolution of the alpha map.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.alphamapWidth">
            <summary>Width of the alpha map.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.baseMapResolution">
            <summary>Resolution of the base map used for rendering far patches on the terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.detailHeight">
            <summary>Detail height of the TerrainData.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.detailPrototypes">
            <summary>Contains the detail texture/meshes that the terrain has.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.detailResolution">
            <summary>Detail Resolution of the TerrainData.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.detailWidth">
            <summary>Detail width of the TerrainData.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetAlphamaps(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Returns the alpha map at a position x, y given a width and height.</summary>
            <returns>To be added.</returns>
            <remarks>The returned array is three-dimensional - the first two dimensions represent x and y coordinates on the map, while the third denotes the splatmap texture to which the alphamap is applied.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetDetailLayer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="xBase">To be added.</param>
            <param name="yBase">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="layer">To be added.</param>
            <summary>Returns a 2D array of the detail object density in the specific location.</summary>
            <returns>To be added.</returns>
            <remarks>The Terrain system uses detail layer density maps. Each map is essentially a grayscale image  where each pixel value denotes the number of detail objects that will be procedurally placed terrain area. That corresponds to the pixel. Since several different detail types may be used, the map is arranged  into "layers" - the array indices of the layers are determined by the order of the detail types defined  in the Terrain inspector (ie, when the Paint Details tool is selected).</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetHeight(System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Gets the height at a certain point x,y.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetHeights(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="xBase">To be added.</param>
            <param name="yBase">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Get an array of heightmap samples..</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetInterpolatedHeight(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Gets an interpolated height at a point x,y.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetInterpolatedNormal(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Get an interpolated normal at a given location.</summary>
            <returns>To be added.</returns>
            <remarks>The x and y values are normalized coordinates in the range 0..1.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetSteepness(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Gets the gradient of the terrain at point &amp;lt;x,y&amp;gt;.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.GetSupportedLayers(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="xBase">To be added.</param>
            <param name="yBase">To be added.</param>
            <param name="totalWidth">To be added.</param>
            <param name="totalHeight">To be added.</param>
            <summary>Returns an array of all supported detail layer indices in the area.</summary>
            <returns>To be added.</returns>
            <remarks>The Terrain uses a detail layer density map. Each pixel in the map the amount of details objects that will be procedurally placed in the pixel area. The layer determines the detail prototype that will be instantiated at the location.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.heightmapHeight">
            <summary>Height of the terrain in samples (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.heightmapResolution">
            <summary>Resolution of the heightmap.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.heightmapScale">
            <summary>The size of each heightmap sample.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.heightmapWidth">
            <summary>Width of the terrain in samples (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.physicMaterial">
            <summary>The physic material used by TerrainCollider using this Terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.RefreshPrototypes">
            <summary>Reloads all the values of the available prototypes (ie, detail mesh assets) in the TerrainData Object.</summary>
            <remarks>This can be used in editor scripts to update the terrain when the prototype assets change, much like the Terrain &gt; Refresh Tree and Detail Prototypes menu command.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.SetAlphamaps(System.Int32,System.Int32,System.Single[,,])">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="map">To be added.</param>
            <summary>Assign all splat values in the given map area.</summary>
            <remarks>The array supplied to this function determines the width and height of the portion to be replaced. The third dimension of the array corresponds to the number of splatmap textures.</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.SetDetailLayer(System.Int32,System.Int32,System.Int32,System.Int32[,])">
            <param name="xBase">To be added.</param>
            <param name="yBase">To be added.</param>
            <param name="layer">To be added.</param>
            <param name="details">To be added.</param>
            <summary>Sets the detail layer density map.</summary>
            <remarks>The Terrain system uses detail layer density maps. Each map is essentially a grayscale image  where each pixel value denotes the number of detail objects that will be procedurally placed terrain area that corresponds to the pixel. Since several different detail types may be used, the map is arranged  into "layers" - the array indices of the layers are determined by the order of the detail types defined in the Terrain inspector (ie, when the Paint Details tool is selected).</remarks>
        </member>
        <member name="M:UnityEngine.TerrainData.SetDetailResolution(System.Int32,System.Int32)">
            <summary>Set the resolution of the detail map.</summary>
            <remarks>To be added.</remarks>
            <param name="detailResolution">Specifies the number of pixels in the detail resolution map. A larger detailResolution, leads to more accurate detail object painting.</param>
            <param name="resolutionPerPatch">Specifies the size in pixels of each individually rendered detail patch. A larger number reduces draw calls, but might increase triangle count since detail patches are culled on a per batch basis. A recommended value is 16. If you use a very large detail object distance and your grass is very sparse, it makes sense to increase the value.</param>
        </member>
        <member name="M:UnityEngine.TerrainData.SetHeights(System.Int32,System.Int32,System.Single[,])">
            <param name="xBase">To be added.</param>
            <param name="yBase">To be added.</param>
            <param name="heights">To be added.</param>
            <summary>Set an array of heightmap samples.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.size">
            <summary>The total size in world units of the terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.splatPrototypes">
            <summary>Splat texture used by the terrain.</summary>
            <value>To be added.</value>
            <remarks>This are the ground textures.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.treeInstances">
            <summary>Contains the current trees placed in the terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.treePrototypes">
            <summary>The list of tree prototypes this are the ones available in the inspector.</summary>
            <value>To be added.</value>
            <remarks>If you change any value here, you should call TerrainData.RefreshPrototypes so the changes take effect.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.wavingGrassAmount">
            <summary>Amount of waving grass in the terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.wavingGrassSpeed">
            <summary>Speed of the waving grass.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.wavingGrassStrength">
            <summary>Strength of the waving grass in the terrain.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TerrainData.wavingGrassTint">
            <summary>Color of the waving grass that the terrain has.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TerrainRenderFlags">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TerrainRenderFlags.all">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TerrainRenderFlags.details">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TerrainRenderFlags.heightmap">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TerrainRenderFlags.trees">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.TexGenMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TexGenMode.CubeNormal">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TexGenMode.CubeReflect">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TexGenMode.EyeLinear">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TexGenMode.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TexGenMode.Object">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TexGenMode.SphereMap">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.TextAlignment">
            <summary>How multiline text should be aligned.</summary>
            <remarks>This is used by GUIText.alignment property. See Also: GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAlignment.Center">
            <summary>Text lines are centered.</summary>
            <remarks>See Also: GUIText.alignment property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAlignment.Left">
            <summary>Text lines are aligned on the left side.</summary>
            <remarks>See Also: GUIText.alignment property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAlignment.Right">
            <summary>Text lines are aligned on the right side.</summary>
            <remarks>See Also: GUIText.alignment property, GUI Text component.</remarks>
        </member>
        <member name="T:UnityEngine.TextAnchor">
            <summary>Where the anchor of the text is placed.</summary>
            <remarks>This is used by GUIText.anchor property. See Also: GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.LowerCenter">
            <summary>Text is anchored in lower side, centered horizontally.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.LowerLeft">
            <summary>Text is anchored in lower left corner.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.LowerRight">
            <summary>Text is anchored in lower right corner.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.MiddleCenter">
            <summary>Text is centered both horizontally and vertically.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.MiddleLeft">
            <summary>Text is anchored in left side, centered vertically.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.MiddleRight">
            <summary>Text is anchored in right side, centered vertically.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.UpperCenter">
            <summary>Text is anchored in upper side, centered horizontally.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.UpperLeft">
            <summary>Text is anchored in upper left corner.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="F:UnityEngine.TextAnchor.UpperRight">
            <summary>Text is anchored in upper right corner.</summary>
            <remarks>See Also: GUIText.anchor property, GUI Text component.</remarks>
        </member>
        <member name="T:UnityEngine.TextAsset">
            <summary>Text file assets.</summary>
            <remarks>You can use raw .txt files in your project as assets and get their contents through this class.</remarks>
        </member>
        <member name="C:UnityEngine.TextAsset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextAsset.bytes">
            <summary>The raw bytes of the text asset. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>If you're using the text asset to contain binary data, you should make sure the file has the .bytes extension. For any other of the extentions the TextImporter will try to strip nonascii characters if it is unable to parse the file as an utf8 string.</remarks>
        </member>
        <member name="P:UnityEngine.TextAsset.text">
            <summary>The text contents of the .txt file as a string. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextAsset.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TextClipping">
            <summary>Different methods for how the GUI system handles text being too large to fit the rectangle allocated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextClipping.Clip">
            <summary>Text gets clipped to be inside the element.</summary>
        </member>
        <member name="F:UnityEngine.TextClipping.Overflow">
            <summary>Text flows freely outside the element.</summary>
        </member>
        <member name="T:UnityEngine.TextEditor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.TextEditor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Backspace">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.CanPaste">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.ClampPos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.content">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.controlID">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Copy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Cut">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.DblClickSnap(UnityEngine.TextEditor+DblClickSnapping)">
            <param name="snapping">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Delete">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.DeleteLineBack">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.DeleteSelection">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.DeleteWordBack">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.DeleteWordForward">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.DrawCursor(System.String)">
            <param name="text">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.ExpandSelectGraphicalLineEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.ExpandSelectGraphicalLineStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.FindStartOfNextWord(System.Int32)">
            <param name="p">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.graphicalCursorPos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.graphicalSelectCursorPos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.HandleKeyEvent(UnityEngine.Event)">
            <param name="e">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.hasHorizontalCursorPos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextEditor.hasSelection">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Insert(System.Char)">
            <param name="c">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.IsOverSelection(UnityEngine.Vector2)">
            <param name="cursorPosition">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.isPasswordField">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MouseDragSelectsWholeWords(System.Boolean)">
            <param name="on">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveAltCursorToPosition(UnityEngine.Vector2)">
            <param name="cursorPosition">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveCursorToPosition(UnityEngine.Vector2)">
            <param name="cursorPosition">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveDown">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveGraphicalLineEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveGraphicalLineStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveLeft">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveLineEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveLineStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveParagraphBackward">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveParagraphForward">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveRight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveSelectionToAltCursor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveTextEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveTextStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveToEndOfPreviousWord">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveToStartOfNextWord">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveUp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveWordLeft">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.MoveWordRight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.multiline">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.OnFocus">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.OnLostFocus">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Paste">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.pos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.position">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.ReplaceSelection(System.String)">
            <param name="replace">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SaveBackup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.scrollOffset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectAll">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectCurrentParagraph">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectCurrentWord">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectDown">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextEditor.SelectedText">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectGraphicalLineEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectGraphicalLineStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectLeft">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectNone">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectParagraphBackward">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectParagraphForward">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.selectPos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectRight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectTextEnd">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectTextStart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectToEndOfPreviousWord">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectToPosition(UnityEngine.Vector2)">
            <param name="cursorPosition">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectToStartOfNextWord">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectUp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectWordLeft">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.SelectWordRight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor.style">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TextEditor.Undo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TextEditor+DblClickSnapping">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextEditor+DblClickSnapping.PARAGRAPHS">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TextEditor+DblClickSnapping.WORDS">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.TextMesh">
            <summary>A script interface for the text mesh component.</summary>
            <remarks>See Also: text mesh component.</remarks>
        </member>
        <member name="C:UnityEngine.TextMesh">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.alignment">
            <summary>How lines of text are aligned (Left, Right, Center).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.anchor">
            <summary>Which point of the text shares the position of the Transform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.characterSize">
            <summary>The size of each character (This scales the whole text).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.color">
            <summary>The color used to render the text.</summary>
            <value>To be added.</value>
            <remarks>This is the base color used to render the text. tags in rich text markup will override this.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.font">
            <summary>The Font used.</summary>
            <value>To be added.</value>
            <remarks>See Also: text mesh component.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.fontSize">
            <summary>The font size to use (for dynamic fonts).</summary>
            <value>To be added.</value>
            <remarks>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size. This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.fontStyle">
            <summary>The font style to use (for dynamic fonts).</summary>
            <value>To be added.</value>
            <remarks>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style. This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.lineSpacing">
            <summary>How much space will be in-between lines of text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.offsetZ">
            <summary>How far should the text be offset from the transform.position.z when drawing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.richText">
            <summary>Enable HTML-style tags for Text Formatting Markup.</summary>
            <value>To be added.</value>
            <remarks>Supported tags are: &amp;lt;color="htmlcolor"&amp;gt;colored text&amp;lt;/color&amp;gt;, where "htmlcolor" is a html color string, like "#ff0000" or "red". &amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;italic text&amp;lt;/i&amp;gt; &amp;lt;size=20&amp;gt;sized text&amp;lt;/size&amp;gt; &amp;lt;material=1&amp;gt;render using custom material index&amp;lt;/material&amp;gt; &amp;lt;quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5/&amp;gt;, to render a single quad using the given material and UVs, used for embedding images in text. These are only supported for fonts set to use dynamic font rendering, except for the 'color', 'material' and 'quad' tags.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.tabSize">
            <summary>How much space will be inserted for a tab '\t' character. This is a multiplum of the 'spacebar' character offset.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TextMesh.text">
            <summary>The text that is displayed.</summary>
            <value>To be added.</value>
            <remarks>See Also: text mesh component.</remarks>
        </member>
        <member name="T:UnityEngine.Texture">
            <summary>Base class for texture handling. Contains functionality that is common to both Texture2D and RenderTexture classes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Texture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.anisoLevel">
            <summary>Anisotropic filtering level of the texture.</summary>
            <value>To be added.</value>
            <remarks>Anisotropic filtering makes textures look better when viewed at a shallow angle, but comes at a performance cost in the graphics hardware. Usually you use it on floor, ground or road textures to make them look better. The value range of this variable goes from 1 to 9, where 1 equals no filtering applied and 9 equals full filtering applied. As the value gets bigger, the texture is clearer at shallow angles. Lower values mean the texture will be more blurry at shallow angles.  See Also: texture assets.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.anisotropicFiltering">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.filterMode">
            <summary>Filtering mode of the texture.</summary>
            <value>To be added.</value>
            <remarks>See Also: FilterMode, texture assets.</remarks>
        </member>
        <member name="M:UnityEngine.Texture.GetNativeTextureID">
            <summary>Retrieve native ('hardware') handle to a texture.</summary>
            <returns>To be added.</returns>
            <remarks>Use this function to retrieve an ID/handle corresponding to a particular texture as it is represented on the native graphics device level. This can be used to enable texture manipulation from native code plugins. This function is only supported on OpenGL-like devices; for a better cross-platform approach use GetNativeTexturePtr. See Also: GetNativeTexturePtr function, Native code plugins.</remarks>
        </member>
        <member name="M:UnityEngine.Texture.GetNativeTexturePtr">
            <summary>Retrieve native ('hardware') pointer to a texture.</summary>
            <returns>To be added.</returns>
            <remarks>Use this function to retrieve a pointer/handle corresponding to a particular texture as it is represented on the native graphics device level. This can be used to enable texture manipulation from native code plugins. On Direct3D-like devices this returns a pointer to the base texture type (IDirect3DBaseTexture9 on D3D9, ID3D11Resource on D3D11). On OpenGL-like devices the texture "name" is returned; cast the pointer to integer type to get it. On platforms that do not support native code plugins, this function always returns NULL. Note that calling this function when using multi-threaded rendering will synchronize with the rendering thread (a slow operation), so best practice is to set up needed texture pointers only at initialization time. See Also: Native code plugins.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.height">
            <summary>Height of the texture in pixels. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.masterTextureLimit">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.mipMapBias">
            <summary>Mip map bias of the texture.</summary>
            <value>To be added.</value>
            <remarks>A positive bias makes a texture appear extra blurry, while a negative bias sharpens the texture. Note that using large negative bias can reduce performance, so it's not recommended to use more than -0.5 negative bias. In most cases better sharpening of the texture can be achieved by using anisotropic filtering. See Also: Texture.anisoLevel, texture assets.</remarks>
        </member>
        <member name="M:UnityEngine.Texture.SetGlobalAnisotropicFilteringLimits(System.Int32,System.Int32)">
            <param name="forcedMin">To be added.</param>
            <param name="globalMax">To be added.</param>
            <summary>Sets Anisotropic limits.</summary>
            <remarks>ForcedMin value controls the minimal anisotropy level set when Anisotropy is forced. globalMax value controls the max possible anisotropy level. set any to -1 to use default values.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.texelSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.width">
            <summary>Width of the texture in pixels. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture.wrapMode">
            <summary>Wrap mode (Repeat or Clamp) of the texture.</summary>
            <value>To be added.</value>
            <remarks>Set the texture to clamp at the borders to avoid warping artifacts with TextureWrapMode.Clamp. Or tile the texture with TextureWrapMode.Repeat. See Also: Texture.wrapMode, texture assets.</remarks>
        </member>
        <member name="T:UnityEngine.Texture2D">
            <summary>Class for texture handling. Use this to create textures on the fly or to modify existing texture assets.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Texture2D(System.Int32,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Texture2D(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="format">To be added.</param>
            <param name="mipmap">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Texture2D(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="format">To be added.</param>
            <param name="mipmap">To be added.</param>
            <param name="linear">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture2D.alphaIsTransparency">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.Apply">
            <summary>Actually apply all previous SetPixel and SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. By default updateMipmaps is set to true. If makeNoLongerReadable is true, texture will be marked as no longer readable and memory will be freed after uploading to GPU. By default makeNoLongerReadable is set to false. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. The texture has to have Is Readable flag set in the import settings.See Also: SetPixel, SetPixels functions.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.Apply(System.Boolean)">
            <param name="updateMipmaps">To be added.</param>
            <summary>Actually apply all previous SetPixel and SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. By default updateMipmaps is set to true. If makeNoLongerReadable is true, texture will be marked as no longer readable and memory will be freed after uploading to GPU. By default makeNoLongerReadable is set to false. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. The texture has to have Is Readable flag set in the import settings.See Also: SetPixel, SetPixels functions.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.Apply(System.Boolean,System.Boolean)">
            <param name="updateMipmaps">To be added.</param>
            <param name="makeNoLongerReadable">To be added.</param>
            <summary>Actually apply all previous SetPixel and SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. By default updateMipmaps is set to true. If makeNoLongerReadable is true, texture will be marked as no longer readable and memory will be freed after uploading to GPU. By default makeNoLongerReadable is set to false. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. The texture has to have Is Readable flag set in the import settings.See Also: SetPixel, SetPixels functions.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.Compress(System.Boolean)">
            <param name="highQuality">To be added.</param>
            <summary>Compress texture into DXT format.</summary>
            <remarks>Use this to compress textures generated at runtime. Compressed textures use less graphics memory and are faster to render. After compression, texture will be in DXT1 format if the original texture had no alpha channel, and in DXT5 format if it had alpha channel. Passing true for highQuality parameter will dither the source texture during compression, which helps to reduce compression artifacts but is slightly slower. If the graphics card does not support compression or the texture is already in compressed format, then Compress will do nothing. In the Editor scripts, you probably want to use EditorUtility.CompressTexture, which will compress using slower, but higher quality DXT compression. See Also: SetPixels function, EditorUtility.CompressTexture.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.CreateExternalTexture(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean,System.IntPtr)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="format">To be added.</param>
            <param name="mipmap">To be added.</param>
            <param name="linear">To be added.</param>
            <summary>Creates Unity Texture on top of already inited native texture object.</summary>
            <returns>To be added.</returns>
            <remarks>You should make sure that params specified here are the same as the ones used for creation of native texture. Native texture object on Direct3D-like devices is a pointer to the base type, from which a texture can be created (IDirect3DBaseTexture9 on D3D9, ID3D11ShaderResourceView on D3D11). On OpenGL/OpenGL ES it is GLuint.</remarks>
            <param name="nativeTex">Native texture object.</param>
        </member>
        <member name="M:UnityEngine.Texture2D.EncodeToPNG">
            <summary>Encodes this texture into PNG format.</summary>
            <returns>To be added.</returns>
            <remarks>The returned byte array is the PNG "file". You can write them to disk to get the PNG file, send them over the network, etc. This function works only on ARGB32 and RGB24 texture formats. The texture also has to have Is Readable flag set in the import settings. The encoded PNG data will contain alpha channel for ARGB32 textures, and no alpha channel for RGB24 textures. PNG data will not contain gamma correction or color profile information.See Also: ReadPixels, WaitForEndOfFrame, LoadImage.</remarks>
        </member>
        <member name="P:UnityEngine.Texture2D.format">
            <summary>The format of the pixel data in the texture (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Use this to determine the format of the texture.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixel(System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Returns pixel color at coordinates (x, y).</summary>
            <returns>To be added.</returns>
            <remarks>If the pixel coordinates are out of bounds (larger than width/height or small than 0), they will be clamped or repeat based on the texture's wrap mode. If you are reading a large block of pixels from the texture, it may be faster to use GetPixels which returns a whole block of pixel colors. The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail. See Also: GetPixels, SetPixel, GetPixelBilinear.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixelBilinear(System.Single,System.Single)">
            <param name="u">To be added.</param>
            <param name="v">To be added.</param>
            <summary>Returns filtered pixel color at normalized coordinates (u, v).</summary>
            <returns>To be added.</returns>
            <remarks>Coordinates u and v go from 0.0 to 1.0, just like UV coordinates in meshes. If coordinates are out of bounds (larger than 1.0 or smaller than 0.0), they will be clamped or repeated based on the texture's wrap mode. Returned pixel color is bilinearly filtered. The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.See Also: GetPixel.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixels">
            <summary>Get a block of pixel colors.Get a block of pixel colors.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32)">
            <param name="miplevel">To be added.</param>
            <summary>Get a block of pixel colors.Get a block of pixel colors.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="blockWidth">To be added.</param>
            <param name="blockHeight">To be added.</param>
            <summary>Get a block of pixel colors.Get a block of pixel colors.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="blockWidth">To be added.</param>
            <param name="blockHeight">To be added.</param>
            <param name="miplevel">To be added.</param>
            <summary>Get a block of pixel colors.Get a block of pixel colors.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixels32">
            <summary>Get a block of pixel colors in Color32 format.</summary>
            <returns>To be added.</returns>
            <remarks>This function returns an array of pixel colors of the whole mip level of the texture. The returned array is a flattened 2D array, where pixels are laid out left to right, bottom to top (i.e. row after row). Array size is width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipWidth=max(1,width&gt;&gt;miplevel) and similarly for height. The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail. Using GetPixels32 can be faster than calling GetPixel repeatedly, especially for large textures. In addition, GetPixels32 can access individual mipmap levels.See Also: SetPixels, mipmapCount.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.GetPixels32(System.Int32)">
            <param name="miplevel">To be added.</param>
            <summary>Get a block of pixel colors in Color32 format.</summary>
            <returns>To be added.</returns>
            <remarks>This function returns an array of pixel colors of the whole mip level of the texture. The returned array is a flattened 2D array, where pixels are laid out left to right, bottom to top (i.e. row after row). Array size is width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipWidth=max(1,width&gt;&gt;miplevel) and similarly for height. The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail. Using GetPixels32 can be faster than calling GetPixel repeatedly, especially for large textures. In addition, GetPixels32 can access individual mipmap levels.See Also: SetPixels, mipmapCount.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.LoadImage(System.Byte[])">
            <param name="data">To be added.</param>
            <summary>Loads an image from a byte array.</summary>
            <returns>To be added.</returns>
            <remarks>This function loads a JPG or PNG image from raw byte[] array.This function replaces texture contents with new image data. After LoadImage, texture size and format might change. JPG files are loaded into RGB24 format, PNG files are loaded into ARGB32 format. If texture format before calling LoadImage is DXT1 or DXT5, then the loaded image will be DXT-compressed (into DXT1 for JPG images and DXT5 for PNG images). See Also: EncodeToPNG function.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.LoadRawTextureData(System.Byte[])">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture2D.mipmapCount">
            <summary>How many mipmap levels are in this texture (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The returned value includes the base level as well, so it is always 1 or more. Mipmap count is used if you use GetPixels or SetPixels to fetch or modify the different mip levels. For example, you could change a texture so that each mip level is tinted in a different color - then in the game you'd see which mip levels are actually visible. See Also: GetPixels function, SetPixels function.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32)">
            <summary>Packs multiple Textures into a texture atlas.</summary>
            <returns>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</returns>
            <remarks>This function will replace the current texture with the atlas made from the supplied textures. The size, format and mipmaps of any of the textures can change after packing. The resulting texture atlas will be as large as needed to fit all input textures but only up to maximumAtlasSize in each dimension. If the input textures can't all fit into a texture atlas of the desired size then they will be scaled down to fit. The atlas will have DXT1 format if all input textures are DXT1 compressed. If all input textures are compressed in DXT1 or DXT5 formats then the atlas will be in DXT5 format. If any input texture is not compressed then the atlas will be in ARGB32 uncompressed format. If none of the input textures have mipmaps then the atlas will also have no mipmaps. If you use non-zero padding and the atlas is compressed and has mipmaps then the lower-level mipmaps might not be exactly the same as in the original texture due to compression restrictions. If makeNoLongerReadable is true then the texture will be marked as no longer readable and memory will be freed after uploading to the GPU. By default makeNoLongerReadable is set to false.</remarks>
            <example />
            <param name="textures">Array of textures to pack into the atlas.</param>
            <param name="padding">Padding in pixels between the packed textures.</param>
        </member>
        <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32,System.Int32)">
            <summary>Packs multiple Textures into a texture atlas.</summary>
            <returns>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</returns>
            <remarks>This function will replace the current texture with the atlas made from the supplied textures. The size, format and mipmaps of any of the textures can change after packing. The resulting texture atlas will be as large as needed to fit all input textures but only up to maximumAtlasSize in each dimension. If the input textures can't all fit into a texture atlas of the desired size then they will be scaled down to fit. The atlas will have DXT1 format if all input textures are DXT1 compressed. If all input textures are compressed in DXT1 or DXT5 formats then the atlas will be in DXT5 format. If any input texture is not compressed then the atlas will be in ARGB32 uncompressed format. If none of the input textures have mipmaps then the atlas will also have no mipmaps. If you use non-zero padding and the atlas is compressed and has mipmaps then the lower-level mipmaps might not be exactly the same as in the original texture due to compression restrictions. If makeNoLongerReadable is true then the texture will be marked as no longer readable and memory will be freed after uploading to the GPU. By default makeNoLongerReadable is set to false.</remarks>
            <example />
            <param name="textures">Array of textures to pack into the atlas.</param>
            <param name="padding">Padding in pixels between the packed textures.</param>
            <param name="maximumAtlasSize">Maximum size of the resulting texture.</param>
        </member>
        <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32,System.Int32,System.Boolean)">
            <summary>Packs multiple Textures into a texture atlas.</summary>
            <returns>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</returns>
            <remarks>This function will replace the current texture with the atlas made from the supplied textures. The size, format and mipmaps of any of the textures can change after packing. The resulting texture atlas will be as large as needed to fit all input textures but only up to maximumAtlasSize in each dimension. If the input textures can't all fit into a texture atlas of the desired size then they will be scaled down to fit. The atlas will have DXT1 format if all input textures are DXT1 compressed. If all input textures are compressed in DXT1 or DXT5 formats then the atlas will be in DXT5 format. If any input texture is not compressed then the atlas will be in ARGB32 uncompressed format. If none of the input textures have mipmaps then the atlas will also have no mipmaps. If you use non-zero padding and the atlas is compressed and has mipmaps then the lower-level mipmaps might not be exactly the same as in the original texture due to compression restrictions. If makeNoLongerReadable is true then the texture will be marked as no longer readable and memory will be freed after uploading to the GPU. By default makeNoLongerReadable is set to false.</remarks>
            <example />
            <param name="textures">Array of textures to pack into the atlas.</param>
            <param name="padding">Padding in pixels between the packed textures.</param>
            <param name="maximumAtlasSize">Maximum size of the resulting texture.</param>
            <param name="makeNoLongerReadable">Should the texture be marked as no longer readable?</param>
        </member>
        <member name="M:UnityEngine.Texture2D.ReadPixels(UnityEngine.Rect,System.Int32,System.Int32)">
            <summary>Read screen pixels into the saved texture data.</summary>
            <remarks>This will copy a rectangular pixel area from the currently active RenderTexture or the view (specified by the source parameter) into the position defined by destX and destY. Both coordinates use pixel space - (0,0) is lower left. If recalculateMipMaps is set to true, the mip maps of the texture will also be updated. If recalculateMipMaps is set to false, you must call Apply to recalculate them. This function works only on ARGB32 and RGB24 texture formats. The texture also has to have Read/Write Enabled flag set in the import settings. ReadPixels is unsupported on Flash.See Also: EncodeToPNG.</remarks>
            <param name="source">Rectangular region of the view to read from.</param>
            <param name="destX">Horizontal pixel position in the texture to place the pixels that are read.</param>
            <param name="destY">Vertical pixel position in the texture to place the pixels that are read.</param>
        </member>
        <member name="M:UnityEngine.Texture2D.ReadPixels(UnityEngine.Rect,System.Int32,System.Int32,System.Boolean)">
            <summary>Read screen pixels into the saved texture data.</summary>
            <remarks>This will copy a rectangular pixel area from the currently active RenderTexture or the view (specified by the source parameter) into the position defined by destX and destY. Both coordinates use pixel space - (0,0) is lower left. If recalculateMipMaps is set to true, the mip maps of the texture will also be updated. If recalculateMipMaps is set to false, you must call Apply to recalculate them. This function works only on ARGB32 and RGB24 texture formats. The texture also has to have Read/Write Enabled flag set in the import settings. ReadPixels is unsupported on Flash.See Also: EncodeToPNG.</remarks>
            <param name="source">Rectangular region of the view to read from.</param>
            <param name="destX">Horizontal pixel position in the texture to place the pixels that are read.</param>
            <param name="destY">Vertical pixel position in the texture to place the pixels that are read.</param>
            <param name="recalculateMipMaps">Should the texture's mipmaps be recalculated after reading?</param>
        </member>
        <member name="M:UnityEngine.Texture2D.Resize(System.Int32,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Resizes the texture.Resizes the texture.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.Resize(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="format">To be added.</param>
            <param name="hasMipMap">To be added.</param>
            <summary>Resizes the texture.Resizes the texture.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixel(System.Int32,System.Int32,UnityEngine.Color)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="color">To be added.</param>
            <summary>Sets pixel color at coordinates (x,y).</summary>
            <remarks>Call Apply to actually upload the changed pixels to the graphics card. Uploading is an expensive operation, so you'll want to change as many pixels as possible between Apply calls. If you're constantly regenerating a texture at runtime, it may be faster to generate an array of pixel colors and set all of them at once with SetPixels. This function works only on ARGB32, RGB24 and Alpha8 texture formats. For other formats SetPixel is ignored. The texture also has to have Read/Write Enabled flag set in the import settings. See Also: SetPixels, GetPixel, Apply.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixels(UnityEngine.Color[])">
            <param name="colors">To be added.</param>
            <summary>Set a block of pixel colors.Set a block of pixel colors.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixels(UnityEngine.Color[],System.Int32)">
            <param name="colors">To be added.</param>
            <param name="miplevel">To be added.</param>
            <summary>Set a block of pixel colors.Set a block of pixel colors.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixels(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color[])">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="blockWidth">To be added.</param>
            <param name="blockHeight">To be added.</param>
            <param name="colors">To be added.</param>
            <summary>Set a block of pixel colors.Set a block of pixel colors.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixels(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color[],System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="blockWidth">To be added.</param>
            <param name="blockHeight">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="miplevel">To be added.</param>
            <summary>Set a block of pixel colors.Set a block of pixel colors.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixels32(UnityEngine.Color32[])">
            <param name="colors">To be added.</param>
            <summary>Set a block of pixel colors.</summary>
            <remarks>This function takes a Color32 array and changes the pixel colors of the whole mip level of the texture. Call Apply to actually upload the changed pixels to the graphics card. The colors array is a flattened 2D array, where pixels are laid out left to right, bottom to top (i.e. row after row). Array size must be at least width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipWidth=max(1,width&gt;&gt;miplevel) and similarly for height. This function works only on ARGB32 texture formats. For other formats SetPixels32 is ignored. The texture also has to have Is Readable flag set in the import settings. Using SetPixels32 is faster than calling SetPixels. See Also: SetPixels, GetPixels32, GetPixels, Apply, mipmapCount.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.SetPixels32(UnityEngine.Color32[],System.Int32)">
            <param name="colors">To be added.</param>
            <param name="miplevel">To be added.</param>
            <summary>Set a block of pixel colors.</summary>
            <remarks>This function takes a Color32 array and changes the pixel colors of the whole mip level of the texture. Call Apply to actually upload the changed pixels to the graphics card. The colors array is a flattened 2D array, where pixels are laid out left to right, bottom to top (i.e. row after row). Array size must be at least width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is mipWidth=max(1,width&gt;&gt;miplevel) and similarly for height. This function works only on ARGB32 texture formats. For other formats SetPixels32 is ignored. The texture also has to have Is Readable flag set in the import settings. Using SetPixels32 is faster than calling SetPixels. See Also: SetPixels, GetPixels32, GetPixels, Apply, mipmapCount.</remarks>
        </member>
        <member name="M:UnityEngine.Texture2D.UpdateExternalTexture(System.IntPtr)">
            <summary>Updates Unity Texture to use different native texture object.</summary>
            <remarks>Native texture object on Direct3D-like devices is a pointer to the base type, from which a texture can be created (IDirect3DBaseTexture9 on D3D9, ID3D11ShaderResourceView on D3D11). On OpenGL/OpenGL ES it is GLuint.</remarks>
            <param name="nativeTex">Native texture object.</param>
        </member>
        <member name="T:UnityEngine.Texture3D">
            <summary>Class for handling 3D Textures, Use this to create 3D texture assets.</summary>
            <remarks>3D textures are commonly used as lookup tables by shaders.</remarks>
        </member>
        <member name="C:UnityEngine.Texture3D(System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="depth">To be added.</param>
            <param name="format">To be added.</param>
            <param name="mipmap">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Texture3D.Apply">
            <summary>Actually apply all previous SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. See Also: SetPixels functions.</remarks>
        </member>
        <member name="M:UnityEngine.Texture3D.Apply(System.Boolean)">
            <param name="updateMipmaps">To be added.</param>
            <summary>Actually apply all previous SetPixels changes.</summary>
            <remarks>If updateMipmaps is true, the mipmap levels are recalculated as well, using the base level as a source. Usually you want to use true in all cases except when you've modified the mip levels yourself using SetPixels. This is a potentially expensive operation, so you'll want to change as many pixels as possible between Apply calls. See Also: SetPixels functions.</remarks>
        </member>
        <member name="P:UnityEngine.Texture3D.depth">
            <summary>The depth of the texture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Texture3D.format">
            <summary>The format of the pixel data in the texture (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Use this to determine the format of the texture.</remarks>
        </member>
        <member name="M:UnityEngine.Texture3D.GetPixels">
            <summary>This function returns an array of pixel colors representing one mip level of the 3D texture.</summary>
            <returns>To be added.</returns>
            <remarks>Call Apply to actually upload the changed.</remarks>
        </member>
        <member name="M:UnityEngine.Texture3D.GetPixels(System.Int32)">
            <param name="miplevel">To be added.</param>
            <summary>This function returns an array of pixel colors representing one mip level of the 3D texture.</summary>
            <returns>To be added.</returns>
            <remarks>Call Apply to actually upload the changed.</remarks>
        </member>
        <member name="M:UnityEngine.Texture3D.SetPixels(UnityEngine.Color[])">
            <summary>This function takes a color array and changes the pixel colors of the 3D texture.Sets pixel colors of a 3D texture.</summary>
            <remarks>To be added.</remarks>
            <param name="colors">The colors to set the pixels to.</param>
        </member>
        <member name="M:UnityEngine.Texture3D.SetPixels(UnityEngine.Color[],System.Int32)">
            <summary>This function takes a color array and changes the pixel colors of the 3D texture.Sets pixel colors of a 3D texture.</summary>
            <remarks>To be added.</remarks>
            <param name="colors">The colors to set the pixels to.</param>
            <param name="miplevel">The mipmap level to be affected by the new colors.</param>
        </member>
        <member name="T:UnityEngine.TextureCompressionQuality">
            <summary>Compression Quality. Corresponds to the settings in a texture inspector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TextureCompressionQuality.Best">
            <summary>Best compression.</summary>
        </member>
        <member name="F:UnityEngine.TextureCompressionQuality.Fast">
            <summary>Fast compression.</summary>
        </member>
        <member name="F:UnityEngine.TextureCompressionQuality.Normal">
            <summary>Normal compression (default).</summary>
        </member>
        <member name="T:UnityEngine.TextureFormat">
            <summary>Format of a texture. Used when creating textures from scripts.</summary>
            <remarks>See Also: Texture2D.Texture2D, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.Alpha8">
            <summary>Alpha-only texture format.</summary>
            <remarks>See Also: Texture2D.Texture2D, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ARGB32">
            <summary>Color with an alpha channel texture format.</summary>
            <remarks>See Also: Texture2D.Texture2D, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ARGB4444">
            <summary>A 16 bits/pixel texture format. Texture stores color with an alpha channel.</summary>
            <remarks>See Also: Texture2D.Texture2D, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ATC_RGB4">
            <summary>ATC (ATITC) 4 bits/pixel compressed RGB texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ATC_RGBA8">
            <summary>ATC (ATITC) 8 bits/pixel compressed RGB texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ATF_RGB_DXT1">
            <summary>Flash-specific RGB DXT1 compressed color texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ATF_RGB_JPG">
            <summary>Flash-specific RGB JPG-compressed color texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ATF_RGBA_JPG">
            <summary>Flash-specific RGBA JPG-compressed color texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.BGRA32">
            <summary>Format returned by iPhone camera.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.DXT1">
            <summary>Compressed color texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.DXT5">
            <summary>Compressed color with alpha channel texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.ETC_RGB4">
            <summary>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</summary>
            <remarks>See Also: TextureImporter.textureFormat.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_2BPP_RGB">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_2BPP_RGBA">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_4BPP_RGB">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_4BPP_RGBA">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_RGB2">
            <summary>PowerVR (iOS) 2 bits/pixel compressed color texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_RGB4">
            <summary>PowerVR (iOS) 4 bits/pixel compressed color texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_RGBA2">
            <summary>PowerVR (iOS) 2 bits/pixel compressed with alpha channel texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.PVRTC_RGBA4">
            <summary>PowerVR (iOS) 4 bits/pixel compressed with alpha channel texture format.</summary>
            <remarks>See Also: Texture2D.format, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.RGB24">
            <summary>A color texture format.</summary>
            <remarks>See Also: Texture2D.Texture2D, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.RGB565">
            <summary>A 16 bit color texture format.</summary>
            <remarks>See Also: Texture2D.Texture2D, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureFormat.RGBA32">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.TextureFormat.RGBA4444">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.TextureWrapMode">
            <summary>Wrap mode for textures. Corresponds to the settings in a texture inspector.</summary>
            <remarks>You can either Tile the texture (Repeat) or map a single texture on the object (Clamp) See Also: Texture.wrapMode, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureWrapMode.Clamp">
            <summary>Clamps the texture to the last pixel at the border.</summary>
            <remarks>This is useful for preventing wrapping artifacts when mapping an image onto an object and you don't want the texture to tile. UV coordinates will be clamped to the range 0...1. When UVs are larger than 1 or smaller than 0, the last pixel at the border will be used. See Also: Texture.wrapMode, texture assets.</remarks>
        </member>
        <member name="F:UnityEngine.TextureWrapMode.Repeat">
            <summary>Tiles the texture, creating a repeating pattern.</summary>
            <remarks>When UVs are outside of the 0...1 range, the integer part will be ignored, thus creating a repeating pattern. See Also: Texture.wrapMode, texture assets.</remarks>
        </member>
        <member name="T:UnityEngine.ThreadPriority">
            <summary>Priority of a thread.</summary>
            <remarks>Lower priority means a background operation will run less often and will take up less time, but will progress more slowly. See Also: Application.backgroundLoadingPriority, WWW.threadPriority.</remarks>
        </member>
        <member name="F:UnityEngine.ThreadPriority.BelowNormal">
            <summary>Below normal thread priority.</summary>
        </member>
        <member name="F:UnityEngine.ThreadPriority.High">
            <summary>Highest thread priority.</summary>
        </member>
        <member name="F:UnityEngine.ThreadPriority.Low">
            <summary>Lowest thread priority.</summary>
        </member>
        <member name="F:UnityEngine.ThreadPriority.Normal">
            <summary>Normal thread priority.</summary>
        </member>
        <member name="T:UnityEngine.ThreadSafeAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.ThreadSafeAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Time">
            <summary>The interface to get time information from Unity.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Time">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Time.captureFramerate">
            <summary>Slows game playback time to allow screenshots to be saved between frames.</summary>
            <value>To be added.</value>
            <remarks>If this property has a non-zero value then frame update will occur at an interval of (1.0 / captureFramerate) regardless of real time and the time required to render a frame. This is useful if you want to capture a movie where you need a constant frame rate and leave enough time between frames to save screen images.</remarks>
        </member>
        <member name="P:UnityEngine.Time.deltaTime">
            <summary>The time in seconds it took to complete the last frame (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Use this function to make your game frame rate independent. If you add or subtract to a value every frame chances are you should multiply with Time.deltaTime. When you multiply with Time.deltaTime you essentially express: I want to move this object 10 meters per second instead of 10 meters per frame. When called from inside MonoBehaviour's FixedUpdate, returns the fixed framerate delta time. Note that you should not rely on Time.deltaTime from inside OnGUI since OnGUI can be called multiple times per frame and deltaTime would hold the same value each call, until next frame where it would be updated again.</remarks>
        </member>
        <member name="P:UnityEngine.Time.fixedDeltaTime">
            <summary>The interval in seconds at which physics and other fixed frame rate updates (like MonoBehaviour's FixedUpdate) are performed.</summary>
            <value>To be added.</value>
            <remarks>For reading the delta time it is recommended to use Time.deltaTime instead because it automatically returns the right delta time if you are inside a FixedUpdate function or Update function. Note that the fixedDeltaTime interval is with respect to the in-game time affected by timeScale.</remarks>
        </member>
        <member name="P:UnityEngine.Time.fixedTime">
            <summary>The time the latest FixedUpdate has started (Read Only). This is the time in seconds since the start of the game.</summary>
            <value>To be added.</value>
            <remarks>Fixed time is updated in regular intervals (equal to fixedDeltaTime ) until time property is reached.</remarks>
        </member>
        <member name="P:UnityEngine.Time.frameCount">
            <summary>The total number of frames that have passed (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Time.maximumDeltaTime">
            <summary>The maximum time a frame can take. Physics and other fixed frame rate updates (like MonoBehaviour's FixedUpdate).</summary>
            <value>To be added.</value>
            <remarks>Will be performed only for this duration of time per frame. Use this function to avoid low frame rate spikes occurring due to combination of GarbageCollector and expensive physics or other fixed frame rate updates. If frame will take longer than specified value, then less physics and other fixed frame rate updates will be performed. That will temporarily  slow down the gameplay, but will allow frame rate to catchup avoiding nasty stuttering. It is advisable to keep maximum time for frame between 1/10th and 1/3th of a second.</remarks>
        </member>
        <member name="P:UnityEngine.Time.realtimeSinceStartup">
            <summary>The real time in seconds since the game started (Read Only).</summary>
            <value>To be added.</value>
            <remarks>In almost all cases you can and should use Time.time instead. realtimeSinceStartup returns the time since startup, not affected by Time.timeScale. realtimeSinceStartup also keeps increasing while the player is paused (in the background). Using realtimeSinceStartup is useful when you want to pause the game by setting Time.timeScale to zero, but still want to be able to measure time somehow. Note that realtimeSinceStartup returns time as reported by system timer. Depending on the platform and the hardware, it may report the same time even in several consecutive frames. If you're dividing something by time difference, take this into account (time difference may become zero!).Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Time.renderedFrameCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Time.smoothDeltaTime">
            <summary>A smoothed out Time.deltaTime (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Time.time">
            <summary>The time this frame has started (Read Only). This is the time in seconds since the start of the game.</summary>
            <value>To be added.</value>
            <remarks>When called from inside MonoBehaviour's FixedUpdate, returns fixedTime property.</remarks>
        </member>
        <member name="P:UnityEngine.Time.timeScale">
            <summary>The scale at which the time is passing. This can be used for slow motion effects.</summary>
            <value>To be added.</value>
            <remarks>When timeScale is 1.0 the time is passing as fast as realtime. When timeScale is 0.5 the time is passing 2x slower than realtime. When timeScale is set to zero the game is basically paused if all your functions are frame rate independent. Except for realtimeSinceStartup, timeScale affects all the time and delta time measuring variables of the Time class. If you lower timeScale it is recommended to also lower Time.fixedDeltaTime by the same amount. FixedUpdate functions will not be called when timeScale is set to zero.</remarks>
        </member>
        <member name="P:UnityEngine.Time.timeSinceLevelLoad">
            <summary>The time this frame has started (Read Only). This is the time in seconds since the last level has been loaded.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Touch">
            <summary>Structure describing the status of a finger touching the screen.</summary>
            <remarks>Devices can track a number of different pieces of data about a touch on a touchscreen, including its phase (ie, whether it has just started, ended or moved), its position and whether the touch was a single contact or several taps. Furthermore, the continuity of a touch between frame updates can be detected by the device, so a consistent ID number can be reported across frames and used to determine how a particular finger is moving. The Touch struct is used by Unity to store data relating to a single touch instance and is returned by the Input.GetTouch function. Fresh calls to GetTouch will be required on each frame update to obtain the latest touch information from the device but the fingerID property can be used to identify the same touch between frames. See Also: Input.GetTouch, TouchPhase enum.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.deltaPosition">
            <summary>The position delta since last change.</summary>
            <value>To be added.</value>
            <remarks>The absolute position of the touch is recorded periodically and available in the position property. The deltaPosition value is a Vector2 that represents the difference between the touch position recorded on the most recent update and that recorded on the previous update. The deltaTime value gives the time that elapsed between the previous and current updates; you can calculate the touch's speed of motion by dividing deltaPosition.magnitude by deltaTime. See Also: deltaTime.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.deltaTime">
            <summary>Amount of time that has passed since the last recorded change in Touch values.</summary>
            <value>To be added.</value>
            <remarks>Values for the various touch properties are updated periodically. The deltaTime value is simply the amount of time that elapsed between the previous update and the current one. This is primarily useful for determining the movement speed of the touch position with reference to deltaPosition. See Also: deltaPosition.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.fingerId">
            <summary>The unique index for the touch.</summary>
            <value>To be added.</value>
            <remarks>All current touches are reported in the Input.touches array or by using the Input.GetTouch function with the equivalent array index. However, the array index is not guaranteed to be the same from one frame to the next. The fingerID value, however, consistently refers to the same touch across frames. This ID value is very useful when analysing gestures and is more reliable than identifying fingers by their proximity to previous position, etc.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.phase">
            <summary>Describes the phase of the touch.</summary>
            <value>To be added.</value>
            <remarks>The touch phase refers to the action the finger has taken on the most recent frame update. Since a touch is tracked over its "lifetime" by the device, the start and end of a touch and movements in between can be reported on the frames they occur. The phase property can be used as the basis of a "switch' statement or as part of a more sophisitcated state handling system.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.position">
            <summary>The position of the touch in pixel coordinates.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.rawPosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Touch.tapCount">
            <summary>Number of taps.</summary>
            <value>To be added.</value>
            <remarks>This is intended as a way to detect "double-clicks", etc, from the finger in a particular position. In some circumstances, two fingers may be tapped alternately and this may incorrectly register as a single finger tapping and simultaneously moving.</remarks>
        </member>
        <member name="T:UnityEngine.TouchPhase">
            <summary>Describes phase of a finger touch.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TouchPhase.Began">
            <summary>A finger touched the screen.</summary>
        </member>
        <member name="F:UnityEngine.TouchPhase.Canceled">
            <summary>The system cancelled tracking for the touch.</summary>
            <remarks>This might happen if, for example, the user puts the device to her face or simultaneously applies more touches than the system can track (the exact number varies with different platforms). This is the final phase of a touch.</remarks>
        </member>
        <member name="F:UnityEngine.TouchPhase.Ended">
            <summary>A finger was lifted from the screen. This is the final phase of a touch.</summary>
        </member>
        <member name="F:UnityEngine.TouchPhase.Moved">
            <summary>A finger moved on the screen.</summary>
        </member>
        <member name="F:UnityEngine.TouchPhase.Stationary">
            <summary>A finger is touching the screen but hasn't moved.</summary>
        </member>
        <member name="T:UnityEngine.TouchScreenKeyboard">
            <summary>Interface into the native iPhone and Android on-screen keyboards - it is not available on other platforms.</summary>
            <remarks>This interface allows to display different types of the keyboard: ASCII, Numbers, URL, Email, and others. Because the appearance of the keyboard has the potential to obscure portions of your user interface, it is up to you to make sure that parts of your user interface are not obscured when the keyboard is being displayed. TouchScreenKeyboard.visible and TouchScreenKeyboard.area should be used to determine if the keyboard is being shown (activated) and what portion of the screen is using.</remarks>
        </member>
        <member name="C:UnityEngine.TouchScreenKeyboard(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <param name="text">To be added.</param>
            <param name="keyboardType">To be added.</param>
            <param name="autocorrection">To be added.</param>
            <param name="multiline">To be added.</param>
            <param name="secure">To be added.</param>
            <param name="alert">To be added.</param>
            <param name="textPlaceholder">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.active">
            <summary>Is the keyboard visible or sliding into the position on the screen?</summary>
            <value>To be added.</value>
            <remarks>Use this property to bring previously hidden keyboard back on the screen.</remarks>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.area">
            <summary>Returns portion of the screen which is covered by the keyboard.</summary>
            <value>To be added.</value>
            <remarks>Returns zero-Rect on Android.</remarks>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.done">
            <summary>Specifies if input process was finished. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>Keyboard input process can be finished either by user tapping "Done" button or script setting active property to false. Note that keyboard might be temporarily inactive (either by sliding in/out due to orientation change or by appearance of another keyboard), however it's input process might still be not finished and will be resumed automatically.</remarks>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.hideInput">
            <summary>Will text input field above the keyboard be hidden when the keyboard is on screen?</summary>
            <value>To be added.</value>
            <remarks>This property is applicable for single line text fields that have assigned keyboard with alphanumeric keys. Number-only keyboards will show text input field no matter if this flag is set to true or false.</remarks>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
            <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
            <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
            <param name="autocorrection">Is autocorrection applied?</param>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
            <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
            <param name="autocorrection">Is autocorrection applied?</param>
            <param name="multiline">Can more than one line of text be entered?</param>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
            <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
            <param name="autocorrection">Is autocorrection applied?</param>
            <param name="multiline">Can more than one line of text be entered?</param>
            <param name="secure">Is the text masked (for passwords, etc)?</param>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
            <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
            <param name="autocorrection">Is autocorrection applied?</param>
            <param name="multiline">Can more than one line of text be entered?</param>
            <param name="secure">Is the text masked (for passwords, etc)?</param>
            <param name="alert">Is the keyboard opened in alert mode?</param>
        </member>
        <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>Opens the native keyboard provided by OS on the screen.</summary>
            <returns>To be added.</returns>
            <remarks>The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action. The multiline determines if user can input more than one line of text. The secure identifies whether the keyboard is used for password. Text in the input field will be hidden from the user except the recently typed character. The keyboard can be opened in the alert mode too. The placeholder string will be displayed when there is no other text in the input field of the keyboard.</remarks>
            <param name="text">Text to edit.</param>
            <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
            <param name="autocorrection">Is autocorrection applied?</param>
            <param name="multiline">Can more than one line of text be entered?</param>
            <param name="secure">Is the text masked (for passwords, etc)?</param>
            <param name="alert">Is the keyboard opened in alert mode?</param>
            <param name="textPlaceholder">Text to be used if no other text is present.</param>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.text">
            <summary>Returns the text displayed by the input field of the keyboard.</summary>
            <value>To be added.</value>
            <remarks>This value can be accessed at any moment, even if user has not yet finished input process.</remarks>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.visible">
            <summary>Returns true whenever any keyboard is completely visible on the screen.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TouchScreenKeyboard.wasCanceled">
            <summary>Specifies if input process was canceled. (Read Only)</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TouchScreenKeyboardType">
            <summary>Describes the type of keyboard.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.ASCIICapable">
            <summary>Keyboard displays standard ASCII characters.</summary>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.Default">
            <summary>Default keyboard for the current input method.</summary>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.EmailAddress">
            <summary>Keyboard optimized for specifying email addresses.</summary>
            <remarks>It features the "@", "." and space characters prominently.</remarks>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.NamePhonePad">
            <summary>Keypad designed for entering a person's name or phone number.</summary>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.NumberPad">
            <summary>Numeric keypad designed for PIN entry.</summary>
            <remarks>It features the numbers 0 through 9 prominently.</remarks>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.NumbersAndPunctuation">
            <summary>Keyboard with numbers and punctuation.</summary>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.PhonePad">
            <summary>Keypad designed for entering telephone numbers.</summary>
            <remarks>It features the numbers 0 through 9 and the "*" and "#" characters prominently.</remarks>
        </member>
        <member name="F:UnityEngine.TouchScreenKeyboardType.URL">
            <summary>Keyboard optimized for URL entry.</summary>
            <remarks>It features ".", "/", and ".com" prominently.</remarks>
        </member>
        <member name="T:UnityEngine.TrackedReference">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.TrackedReference">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TrackedReference.Equals(System.Object)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TrackedReference.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TrackedReference.op_Equality(UnityEngine.TrackedReference,UnityEngine.TrackedReference)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TrackedReference.op_Implicit(UnityEngine.TrackedReference)~System.Boolean">
            <param name="exists">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.TrackedReference.op_Inequality(UnityEngine.TrackedReference,UnityEngine.TrackedReference)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TrailRenderer">
            <summary>The trail renderer is used to make trails behind objects in the scene as they move about.</summary>
            <remarks>This class is a script interface for a trail renderer component.</remarks>
        </member>
        <member name="C:UnityEngine.TrailRenderer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TrailRenderer.autodestruct">
            <summary>Does the GameObject of this trail renderer auto destructs?</summary>
            <value>To be added.</value>
            <remarks>When set to true, the GameObject will be destroyed when it is not moving anymore.</remarks>
        </member>
        <member name="P:UnityEngine.TrailRenderer.endWidth">
            <summary>The width of the trail at the end of the trail.</summary>
            <value>To be added.</value>
            <remarks>See Also: startWidth variable.</remarks>
        </member>
        <member name="P:UnityEngine.TrailRenderer.startWidth">
            <summary>The width of the trail at the spawning point.</summary>
            <value>To be added.</value>
            <remarks>See Also: endWidth variable.</remarks>
        </member>
        <member name="P:UnityEngine.TrailRenderer.time">
            <summary>How long does the trail take to fade out.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Transform">
            <summary>Position, rotation and scale of an object.</summary>
            <remarks>Every object in a scene has a Transform. It's used to store and manipulate the position, rotation and scale of the object. Every Transform can have a parent, which allows you to apply position, rotation and scale hierarchically. This is the hierarchy seen in the Hierarchy pane. They also support enumerators so you can loop through children using:See Also: The component reference, Physics class.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.childCount">
            <summary>The number of children the Transform has.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.DetachChildren">
            <summary>Unparents all children.</summary>
            <remarks>Useful if you want to destroy the root of a hierarchy without destroying the children.See Also: Transform.parent to detach/change the parent of a single transform.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.eulerAngles">
            <summary>The rotation as Euler angles in degrees.</summary>
            <value>To be added.</value>
            <remarks>The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order). Only use this variable to read and set the angles to absolute values. Don't increment them, as it will fail when the angle exceeds 360 degrees. Use Transform.Rotate instead.Do not set one of the eulerAngles axis separately (eg. eulerAngles.x = 10; ) since this will lead to drift and undesired rotations. When setting them to a new value set them all at once as shown above. Unity will convert the angles to and from the rotation stored in Transform.rotation.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Find(System.String)">
            <param name="name">To be added.</param>
            <summary>Finds a child by name and returns it.</summary>
            <returns>To be added.</returns>
            <remarks>If no child with name can be found, null is returned. If name contains a '/' character it will traverse the hierarchy like a path name.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.FindChild(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.forward">
            <summary>The blue axis of the transform in world space.</summary>
            <value>To be added.</value>
            <remarks>Another example:</remarks>
        </member>
        <member name="M:UnityEngine.Transform.GetChild(System.Int32)">
            <summary>Returns a transform child by index.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
            <param name="index">Index of the child transform to return. Must be smaller then Transform.childCount.</param>
        </member>
        <member name="M:UnityEngine.Transform.GetChildCount">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.hasChanged">
            <summary>Has the transform changed since the last time the flag was set to 'false'?</summary>
            <value>To be added.</value>
            <remarks>A change to the transform can be anything that can cause its matrix to be recalculated: any adjustment to its position, rotation or scale. Note that operations which can change the transform will not actually check if the old and new value are different before setting this flag. So setting, for instance, transform.position will always set hasChanged on the transform, regardless of there being any actual change.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.InverseTransformDirection(UnityEngine.Vector3)">
            <param name="direction">To be added.</param>
            <summary>Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.Transforms the direction x, y, z from world space to local space. The opposite of Transform.TransformDirection.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.InverseTransformDirection(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.Transforms the direction x, y, z from world space to local space. The opposite of Transform.TransformDirection.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.InverseTransformPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from world space to local space. The opposite of Transform.TransformPoint.Transforms the position x, y, z from world space to local space. The opposite of Transform.TransformPoint.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.InverseTransformPoint(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Transforms position from world space to local space. The opposite of Transform.TransformPoint.Transforms the position x, y, z from world space to local space. The opposite of Transform.TransformPoint.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.IsChildOf(UnityEngine.Transform)">
            <param name="parent">To be added.</param>
            <summary>Is this transform a child of parent?</summary>
            <returns>To be added.</returns>
            <remarks>Returns a boolean value that indicates whether the transform is a child of a given transform. true if this transform is a child, deep child (child of a child) or identical to this transform, otherwise false.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.localEulerAngles">
            <summary>The rotation as Euler angles in degrees relative to the parent transform's rotation.</summary>
            <value>To be added.</value>
            <remarks>The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order). Only use this variable to read and set the angles to absolute values. Don't increment them, as it will fail when the angle exceeds 360 degrees. Use Transform.Rotate instead.Unity automatically converts the angles to and from the rotation stored in Transform.localRotation.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.localPosition">
            <summary>Position of the transform relative to the parent transform.</summary>
            <value>To be added.</value>
            <remarks>If the transform has no parent, it is the same as Transform.position.Note that the parent transform's world rotation and scale are applied to the local position when calculating the world position. This means that while 1 unit in Transform.position is always 1 unit, 1 unit in Transform.localPosition will get scaled by the scale of all ancestors.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.localRotation">
            <summary>The rotation of the transform relative to the parent transform's rotation.</summary>
            <value>To be added.</value>
            <remarks>Unity stores rotations as Quaternions internally. To rotate an object, use Transform.Rotate. Use Transform.localEulerAngles for modifying the rotation as euler angles.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.localScale">
            <summary>The scale of the transform relative to the parent.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.localToWorldMatrix">
            <summary>Matrix that transforms a point from local space into world space (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If you're not familiar with using matrices for coordinate transformations, use Transform.TransformPoint instead. IMPORTANT: If you're setting shader parameters you MUST use Renderer.localToWorldMatrix instead.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Transform)">
            <summary>Rotates the transform so the forward vector points at target's current position.Rotates the transform so the forward vector points at worldPosition.</summary>
            <remarks>To be added.</remarks>
            <param name="target">Object to point towards.</param>
        </member>
        <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Vector3)">
            <summary>Rotates the transform so the forward vector points at target's current position.Rotates the transform so the forward vector points at worldPosition.</summary>
            <remarks>To be added.</remarks>
            <param name="worldPosition">Point to look at.</param>
        </member>
        <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Rotates the transform so the forward vector points at target's current position.Rotates the transform so the forward vector points at worldPosition.</summary>
            <remarks>To be added.</remarks>
            <param name="target">Object to point towards.</param>
            <param name="worldUp">Vector specifying the upward direction.</param>
        </member>
        <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Rotates the transform so the forward vector points at target's current position.Rotates the transform so the forward vector points at worldPosition.</summary>
            <remarks>To be added.</remarks>
            <param name="worldPosition">Point to look at.</param>
            <param name="worldUp">Vector specifying the upward direction.</param>
        </member>
        <member name="P:UnityEngine.Transform.lossyScale">
            <summary>The global scale of the object (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Please note that if you have a parent transform with scale and a child that is arbitrarily rotated, the scale will be skewed. Thus scale can not be represented correctly in a 3 component vector but only a 3x3 matrix. Such a representation is quite inconvenient to work with however. lossyScale is a convenience property that attempts to match the actual world scale as much as it can. If your objects are not skewed the value will be completely correct and  most likely the value will not be very different if it contains skew too.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.parent">
            <summary>The parent of the transform.</summary>
            <value>To be added.</value>
            <remarks>Changing the parent will modify the parent-relative position, scale and rotation but keep the world space position, rotation and scale the same.Another example:</remarks>
        </member>
        <member name="P:UnityEngine.Transform.position">
            <summary>The position of the transform in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.right">
            <summary>The red axis of the transform in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.root">
            <summary>Returns the topmost transform in the hierarchy.</summary>
            <value>To be added.</value>
            <remarks>(This never returns null, if this Transform doesn't have a parent it returns itself.)</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3)">
            <param name="eulerAngles">To be added.</param>
            <summary>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).Applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).Rotates the transform around axis by angle degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).Applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).Rotates the transform around axis by angle degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,UnityEngine.Space)">
            <param name="eulerAngles">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).Applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).Rotates the transform around axis by angle degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single)">
            <param name="xAngle">To be added.</param>
            <param name="yAngle">To be added.</param>
            <param name="zAngle">To be added.</param>
            <summary>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).Applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).Rotates the transform around axis by angle degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single,UnityEngine.Space)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).Applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).Rotates the transform around axis by angle degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single,UnityEngine.Space)">
            <param name="xAngle">To be added.</param>
            <param name="yAngle">To be added.</param>
            <param name="zAngle">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).Applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).Rotates the transform around axis by angle degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.RotateAround(UnityEngine.Vector3,System.Single)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>Rotates the transform about axis passing through point in world coordinates by angle degrees.</summary>
            <remarks>This modifies both the position and the rotation of the transform.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.RotateAround(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="point">To be added.</param>
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>Rotates the transform about axis passing through point in world coordinates by angle degrees.</summary>
            <remarks>This modifies both the position and the rotation of the transform.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.RotateAroundLocal(UnityEngine.Vector3,System.Single)">
            <param name="axis">To be added.</param>
            <param name="angle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.rotation">
            <summary>The rotation of the transform in world space stored as a Quaternion.</summary>
            <value>To be added.</value>
            <remarks>Unity stores rotations as Quaternions internally. To rotate an object, use Transform.Rotate. Use Transform.eulerAngles for setting the rotation as euler angles.Another example:</remarks>
        </member>
        <member name="M:UnityEngine.Transform.TransformDirection(UnityEngine.Vector3)">
            <param name="direction">To be added.</param>
            <summary>Transforms direction from local space to world space.Transforms direction x, y, z from local space to world space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.TransformDirection(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Transforms direction from local space to world space.Transforms direction x, y, z from local space to world space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.TransformPoint(UnityEngine.Vector3)">
            <param name="position">To be added.</param>
            <summary>Transforms position from local space to world space.Transforms the position x, y, z from local space to world space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.TransformPoint(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Transforms position from local space to world space.Transforms the position x, y, z from local space to world space.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3)">
            <param name="translation">To be added.</param>
            <summary>Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Space)">
            <param name="translation">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Transform)">
            <param name="translation">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Space)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="relativeTo">To be added.</param>
            <summary>Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.Moves the transform in the direction and distance of translation.Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.up">
            <summary>The green axis of the transform in world space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Transform.worldToLocalMatrix">
            <summary>Matrix that transforms a point from world space into local space (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If you're not familiar with using matrices for coordinate transformations, use Transform.InverseTransformPoint instead. IMPORTANT: If you're setting shader parameters you MUST use Renderer.worldToLocalMatrix instead.</remarks>
        </member>
        <member name="T:UnityEngine.TransparencySortMode">
            <summary>Transparent object sorting mode of a Camera.</summary>
            <remarks>By default, perspective cameras sort objects based on distance from camera position to the object center; and orthographic cameras sort based on distance along the view direction. If you're making a 2D game with a perspective camera, you might want to use TransparencySortMode.Orthographic sort mode so that objects are sorted based on distance along the camera's view. See Also: Camera.transparencySortMode.</remarks>
        </member>
        <member name="F:UnityEngine.TransparencySortMode.Default">
            <summary>Default sorting mode.</summary>
            <remarks>See Also: Camera.transparencySortMode.</remarks>
        </member>
        <member name="F:UnityEngine.TransparencySortMode.Orthographic">
            <summary>Orthographic sorting mode.</summary>
            <remarks>Transparent objects will be sorted based on distance along the camera's view. See Also: Camera.transparencySortMode.</remarks>
        </member>
        <member name="F:UnityEngine.TransparencySortMode.Perspective">
            <summary>Perspective sorting mode.</summary>
            <remarks>Transparent objects will be sorted based on distance from camera position to the object center. See Also: Camera.transparencySortMode.</remarks>
        </member>
        <member name="T:UnityEngine.Tree">
            <summary>Tree Component for the tree creator.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Tree">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Tree.data">
            <summary>Data asociated to the Tree.</summary>
            <value>To be added.</value>
            <remarks>Check the tree creator.</remarks>
        </member>
        <member name="T:UnityEngine.TreeInstance">
            <summary>Contains information about a tree placed in the Terrain GameObject.</summary>
            <remarks>This struct can be accessed from the TerrainData Object.</remarks>
        </member>
        <member name="P:UnityEngine.TreeInstance.color">
            <summary>Color of this instance.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreeInstance.heightScale">
            <summary>Height scale of this instance (compared to the prototype's size).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreeInstance.lightmapColor">
            <summary>Lightmap color calculated for this instance.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreeInstance.position">
            <summary>Position of the tree.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreeInstance.prototypeIndex">
            <summary>Index of this instance in the TerrainData.treePrototypes array.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreeInstance.widthScale">
            <summary>Width scale of this instance (compared to the prototype's size).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.TreePrototype">
            <summary>Simple class that contains a pointer to a tree prototype.</summary>
            <remarks>This class is used by the TerrainData gameObject.</remarks>
        </member>
        <member name="C:UnityEngine.TreePrototype">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreePrototype.bendFactor">
            <summary>Bend factor of the tree prototype.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.TreePrototype.prefab">
            <summary>Retrieves the actual GameObect used by the tree.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Types">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Types.GetType(System.String,System.String)">
            <param name="typeName">To be added.</param>
            <param name="assemblyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.UnassignedReferenceException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnassignedReferenceException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnassignedReferenceException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnassignedReferenceException(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">To be added.</param>
            <param name="context">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnassignedReferenceException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.UnityException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnityException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnityException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnityException(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">To be added.</param>
            <param name="context">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.UnityException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.UserAuthorization">
            <summary>Constants to pass to Application.RequestUserAuthorization.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.UserAuthorization.Microphone">
            <summary>Request permission to use any audio input sources attached to the computer.</summary>
        </member>
        <member name="F:UnityEngine.UserAuthorization.WebCam">
            <summary>Request permission to use any video input sources attached to the computer.</summary>
        </member>
        <member name="T:UnityEngine.Vector2">
            <summary>Representation of 2D vectors and points.</summary>
            <remarks>This structure is used in some places to represent 2D positions and vectors (e.g. texture coordinates in a Mesh or texture offsets in Material ). In the majority of other cases a Vector3 is used.</remarks>
        </member>
        <member name="C:UnityEngine.Vector2(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>Returns the angle in degrees between from and to.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.ClampMagnitude(UnityEngine.Vector2,System.Single)">
            <param name="vector">To be added.</param>
            <param name="maxLength">To be added.</param>
            <summary>Returns a copy of vector with its magnitude clamped to maxLength.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns the distance between a and b.</summary>
            <returns>To be added.</returns>
            <remarks>Vector2.Distance(a,b) is the same as (a-b).magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Dot(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Dot Product of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>Returns lhs . rhs. For normalized vectors Dot returns 1 if they point in exactly the same direction; -1 if they point in completely opposite directions; and a number in between for other cases (e.g. Dot returns zero if vectors are perpendicular). For vectors of arbitrary length the Dot return values are similar: they get larger when the angle between vectors decreases.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector2.kEpsilon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Lerp(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Linearly interpolates between two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>Interpolates between from and to by amount t. t is clamped between [0...1]. When t = 0 returns from. When t = 1 returns to. When t = 0.5 returns the average of from and to.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.magnitude">
            <summary>Returns the length of this vector (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The length of the vector is square root of (x*x+y*y). If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them using sqrMagnitude (computing squared magnitudes is faster). See Also: sqrMagnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Max(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Returns a vector that is made from the largest components of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Min function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Min(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Returns a vector that is made from the smallest components of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Max function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <param name="current">To be added.</param>
            <param name="target">To be added.</param>
            <param name="maxDistanceDelta">To be added.</param>
            <summary>Moves a point current towards target.</summary>
            <returns>To be added.</returns>
            <remarks>This is essentially the same as Vector2.Lerp but instead the function will ensure that the speed never exceeds maxDistanceDelta. Negative values of maxDistanceDelta pushes the vector away from target.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Normalize">
            <summary>Makes this vector have a magnitude of 1.</summary>
            <remarks>When normalized, a vector keeps the same direction but its length is 1.0. Note that this function will change the current vector. If you want to keep the current vector unchanged, use normalized variable. If this vector is too small to be normalized it will be set to zero. See Also: normalized variable.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.normalized">
            <summary>Returns this vector with a magnitude of 1 (Read Only).</summary>
            <value>To be added.</value>
            <remarks>When normalized, a vector keeps the same direction but its length is 1.0. Note that the current vector is unchanged and a new normalized vector is returned. If you want to normalize the current vector, use Normalize function. If the vector is too small to be normalized a zero vector will be returned. See Also: Normalize function.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.one">
            <summary>Shorthand for writing Vector2(1, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Addition(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Division(UnityEngine.Vector2,System.Single)">
            <param name="a">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Equality(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Implicit(UnityEngine.Vector2)~UnityEngine.Vector3">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Implicit(UnityEngine.Vector3)~UnityEngine.Vector2">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Inequality(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Multiply(System.Single,UnityEngine.Vector2)">
            <param name="d">To be added.</param>
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Multiply(UnityEngine.Vector2,System.Single)">
            <param name="a">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_Subtraction(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.op_UnaryNegation(UnityEngine.Vector2)">
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.right">
            <summary>Shorthand for writing Vector2(1, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Scale(UnityEngine.Vector2)">
            <param name="scale">To be added.</param>
            <summary>Multiplies two vectors component-wise.Multiplies every component of this vector by the same component of scale.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Scale(UnityEngine.Vector2,UnityEngine.Vector2)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Multiplies two vectors component-wise.Multiplies every component of this vector by the same component of scale.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.Set(System.Single,System.Single)">
            <param name="new_x">To be added.</param>
            <param name="new_y">To be added.</param>
            <summary>Set x and y components of an existing Vector2.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.sqrMagnitude">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.SqrMagnitude">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.SqrMagnitude(UnityEngine.Vector2)">
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.ToString">
            <summary>Returns a nicely formatted string for this vector.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector2.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for this vector.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.up">
            <summary>Shorthand for writing Vector2(0, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector2.x">
            <summary>X component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector2.y">
            <summary>Y component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector2.zero">
            <summary>Shorthand for writing Vector2(0, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Vector3">
            <summary>Representation of 3D vectors and points.</summary>
            <remarks>This structure is used throughout Unity to pass 3D positions and directions around. It also contains functions for doing common vector operations. Besides the functions listed below, other classes can be used to manipulate vectors and points as well. For example the Quaternion and the Matrix4x4 classes are useful for rotating or transforming vectors and points.</remarks>
        </member>
        <member name="C:UnityEngine.Vector3(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Vector3(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Returns the angle in degrees between from and to.</summary>
            <returns>To be added.</returns>
            <remarks>The angle returned is always the acute angle between the two vector (ie, the smaller of the two possible angles between them and never greater than 180 degrees).</remarks>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
        </member>
        <member name="M:UnityEngine.Vector3.AngleBetween(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.back">
            <summary>Shorthand for writing Vector3(0, 0, -1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.ClampMagnitude(UnityEngine.Vector3,System.Single)">
            <param name="vector">To be added.</param>
            <param name="maxLength">To be added.</param>
            <summary>Returns a copy of vector with its magnitude clamped to maxLength.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Cross(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Cross Product of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>The cross product of two vectors results in a third vector which is perpendicular to the two input vectors. The result's magnitude is equal to the magnitudes of the two inputs multiplied together and then multiplied by the sine of the angle between the inputs. You can determine the direction of the result vector using the "left hand rule".</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns the distance between a and b.</summary>
            <returns>To be added.</returns>
            <remarks>Vector3.Distance(a,b) is the same as (a-b).magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Dot(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Dot Product of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>The dot product is a float value equal to the magnitudes of the two vectors multiplied together and then multiplied by the cosine of the angle between them. For normalized vectors Dot returns 1 if they point in exactly the same direction, -1 if they point in completely opposite directions and zero if the vectors are perpendicular.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.down">
            <summary>Shorthand for writing Vector3(0, -1, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Exclude(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="excludeThis">To be added.</param>
            <param name="fromThat">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.forward">
            <summary>Shorthand for writing Vector3(0, 0, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.fwd">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector3.kEpsilon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.left">
            <summary>Shorthand for writing Vector3(-1, 0, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Lerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Linearly interpolates between two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>Interpolates between from and to by the fraction t. This is most commonly used to find a point some fraction of the way along a line between two endpoints (eg, to move an object gradually between those points). This fraction is clamped to the range [0...1]. When t = 0 returns from. When t = 1 returns to. When t = 0.5 returns the point midway between from and to.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.magnitude">
            <summary>Returns the length of this vector (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The length of the vector is square root of (x*x+y*y+z*z). If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them using sqrMagnitude (computing squared magnitudes is faster). See Also: sqrMagnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Magnitude(UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <summary>Returns the length of this vector (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The length of the vector is square root of (x*x+y*y+z*z). If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them using sqrMagnitude (computing squared magnitudes is faster). See Also: sqrMagnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Returns a vector that is made from the largest components of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Min function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Returns a vector that is made from the smallest components of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Max function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.MoveTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="current">To be added.</param>
            <param name="target">To be added.</param>
            <param name="maxDistanceDelta">To be added.</param>
            <summary>Moves a point current in a straight line towards a target point.</summary>
            <returns>To be added.</returns>
            <remarks>The value returned by this function is a point maxDistanceDelta units closer to a target point along a line between current and target. If the target is closer than maxDistanceDelta then the returned value will be equal to target (ie, the movement will not overshoot the target). Negative values of maxDistanceDelta can be used to push the point away from the target.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Normalize">
            <summary>Makes this vector have a magnitude of 1.</summary>
            <remarks>When normalized, a vector keeps the same direction but its length is 1.0. Note that this function will change the current vector. If you want to keep the current vector unchanged, use normalized variable. If this vector is too small to be normalized it will be set to zero. See Also: normalized variable.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Normalize(UnityEngine.Vector3)">
            <param name="value">To be added.</param>
            <summary>Makes this vector have a magnitude of 1.</summary>
            <returns>To be added.</returns>
            <remarks>When normalized, a vector keeps the same direction but its length is 1.0. Note that this function will change the current vector. If you want to keep the current vector unchanged, use normalized variable. If this vector is too small to be normalized it will be set to zero. See Also: normalized variable.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.normalized">
            <summary>Returns this vector with a magnitude of 1 (Read Only).</summary>
            <value>To be added.</value>
            <remarks>When normalized, a vector keeps the same direction but its length is 1.0. Note that the current vector is unchanged and a new normalized vector is returned. If you want to normalize the current vector, use Normalize function. If the vector is too small to be normalized a zero vector will be returned. See Also: Normalize function.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.one">
            <summary>Shorthand for writing Vector3(1, 1, 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Division(UnityEngine.Vector3,System.Single)">
            <param name="a">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Equality(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Inequality(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Multiply(System.Single,UnityEngine.Vector3)">
            <param name="d">To be added.</param>
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Multiply(UnityEngine.Vector3,System.Single)">
            <param name="a">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.op_UnaryNegation(UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.OrthoNormalize(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <param name="normal">To be added.</param>
            <param name="tangent">To be added.</param>
            <summary>Makes vectors normalized and orthogonal to each other.Makes vectors normalized and orthogonal to each other.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.OrthoNormalize(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <param name="normal">To be added.</param>
            <param name="tangent">To be added.</param>
            <param name="binormal">To be added.</param>
            <summary>Makes vectors normalized and orthogonal to each other.Makes vectors normalized and orthogonal to each other.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Project(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="vector">To be added.</param>
            <param name="onNormal">To be added.</param>
            <summary>Projects a vector onto another vector.</summary>
            <returns>To be added.</returns>
            <remarks>To understand vector projection, imagine that onNormal is resting on a line pointing in its direction. Somewhere along that line will be the nearest point to the tip of vector. The projection is just onNormal rescaled so that it reaches that point on the line.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Reflect(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="inDirection">To be added.</param>
            <param name="inNormal">To be added.</param>
            <summary>Reflects a vector off the plane defined by a normal.</summary>
            <returns>To be added.</returns>
            <remarks>The inNormal vector defines a plane (a plane's normal is the vector that is perpendicular to its surface). the inDirection vector is treated as a directional arrow coming in to the plane. The returned value is a vector of equal magnitude to inDirection but with its direction reflected.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.right">
            <summary>Shorthand for writing Vector3(1, 0, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.RotateTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <param name="current">To be added.</param>
            <param name="target">To be added.</param>
            <param name="maxRadiansDelta">To be added.</param>
            <param name="maxMagnitudeDelta">To be added.</param>
            <summary>Rotates a vector current towards target.</summary>
            <returns>To be added.</returns>
            <remarks>This function is similar to MoveTowards except that the vector is treated as a direction rather than a position. The current vector will be rotated round toward the target direction by an angle of maxRadiansDelta, although it will land exactly on the target rather than overshoot. If the magnitudes of current and target are different then the magnitude of the result will be linearly interpolated during the rotation. If a negative value is used for maxRadiansDelta, the vector will rotate away from target until it is pointing in exactly the opposite direction, then stop.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Scale(UnityEngine.Vector3)">
            <param name="scale">To be added.</param>
            <summary>Multiplies two vectors component-wise.Multiplies every component of this vector by the same component of scale.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Scale(UnityEngine.Vector3,UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Multiplies two vectors component-wise.Multiplies every component of this vector by the same component of scale.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Set(System.Single,System.Single,System.Single)">
            <param name="new_x">To be added.</param>
            <param name="new_y">To be added.</param>
            <param name="new_z">To be added.</param>
            <summary>Set x, y and z components of an existing Vector3.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.Slerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Spherically interpolates between two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>Interpolates between from and to by amount t. The difference between this and linear interpolation (aka, "lerp") is that the vectors are treated as directions rather than points in space. The direction of the returned vector is interpolated by the angle and its magnitude is interpolated between the magnitudes of from and to. t is clamped between [0...1]. See Also: Lerp function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single)">
            <summary>Gradually changes a vector towards a desired goal over time.</summary>
            <returns>To be added.</returns>
            <remarks>The vector is smoothed by some spring-damper like function, which will never overshoot. The most common use is for smoothing a follow camera.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
        </member>
        <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single,System.Single)">
            <summary>Gradually changes a vector towards a desired goal over time.</summary>
            <returns>To be added.</returns>
            <remarks>The vector is smoothed by some spring-damper like function, which will never overshoot. The most common use is for smoothing a follow camera.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
            <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
        </member>
        <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single,System.Single,System.Single)">
            <summary>Gradually changes a vector towards a desired goal over time.</summary>
            <returns>To be added.</returns>
            <remarks>The vector is smoothed by some spring-damper like function, which will never overshoot. The most common use is for smoothing a follow camera.</remarks>
            <param name="current">The current position.</param>
            <param name="target">The position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
            <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
            <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
            <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
        </member>
        <member name="P:UnityEngine.Vector3.sqrMagnitude">
            <summary>Returns the squared length of this vector (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The magnitude of a vector v is calculated as Mathf.Sqrt(Vector3.Dot(v, v)). However, the Sqrt calculation is quite complicated and takes longer to execute than the normal arithmetic operations.  Calculating the squared magnitude instead of using the magnitude property is much faster - the calculation is basically the same only without the slow Sqrt call. If you are using magnitudes simply to compare distances, then you can just as well compare squared magnitudes against the squares of distances since the comparison will give the same result. See Also: magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.SqrMagnitude(UnityEngine.Vector3)">
            <param name="a">To be added.</param>
            <summary>Returns the squared length of this vector (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The magnitude of a vector v is calculated as Mathf.Sqrt(Vector3.Dot(v, v)). However, the Sqrt calculation is quite complicated and takes longer to execute than the normal arithmetic operations.  Calculating the squared magnitude instead of using the magnitude property is much faster - the calculation is basically the same only without the slow Sqrt call. If you are using magnitudes simply to compare distances, then you can just as well compare squared magnitudes against the squares of distances since the comparison will give the same result. See Also: magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.ToString">
            <summary>Returns a nicely formatted string for this vector.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector3.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for this vector.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.up">
            <summary>Shorthand for writing Vector3(0, 1, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector3.x">
            <summary>X component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector3.y">
            <summary>Y component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector3.z">
            <summary>Z component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector3.zero">
            <summary>Shorthand for writing Vector3(0, 0, 0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Vector4">
            <summary>Representation of four-dimensional vectors.</summary>
            <remarks>This structure is used in some places to represent four component vectors (e.g. mesh tangents, parameters for shaders). In the majority of other cases a Vector3 is used.</remarks>
        </member>
        <member name="C:UnityEngine.Vector4(System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Vector4(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Vector4(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <param name="w">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Distance(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Returns the distance between a and b.</summary>
            <returns>To be added.</returns>
            <remarks>Vector4.Distance(a,b) is the same as (a-b).magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Dot(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Dot Product of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>Returns lhs . rhs.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector4.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector4.kEpsilon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Lerp(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
            <param name="from">To be added.</param>
            <param name="to">To be added.</param>
            <param name="t">To be added.</param>
            <summary>Linearly interpolates between two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>Interpolates between from and to by amount t. t is clamped between [0...1]. When t = 0 returns from. When t = 1 returns to. When t = 0.5 returns the average of from and to.</remarks>
        </member>
        <member name="P:UnityEngine.Vector4.magnitude">
            <summary>Returns the length of this vector (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The length of the vector is square root of (x*x+y*y+z*z+w*w). If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them using sqrMagnitude (computing squared magnitudes is faster). See Also: sqrMagnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Magnitude(UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <summary>Returns the length of this vector (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The length of the vector is square root of (x*x+y*y+z*z+w*w). If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them using sqrMagnitude (computing squared magnitudes is faster). See Also: sqrMagnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Max(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Returns a vector that is made from the largest components of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Min function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Min(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>Returns a vector that is made from the smallest components of two vectors.</summary>
            <returns>To be added.</returns>
            <remarks>See Also: Max function.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.MoveTowards(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
            <param name="current">To be added.</param>
            <param name="target">To be added.</param>
            <param name="maxDistanceDelta">To be added.</param>
            <summary>Moves a point current towards target.</summary>
            <returns>To be added.</returns>
            <remarks>This is essentially the same as Vector4.Lerp but instead the function will ensure that the speed never exceeds maxDistanceDelta. Negative values of maxDistanceDelta pushes the vector away from target.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Normalize">
            <summary>Makes this vector have a magnitude of 1.</summary>
            <remarks>Note that this function will change the current vector. If you want to keep the current vector unchanged, use normalized variable. If this vector is too small to be normalized it will be set to zero. See Also: normalized variable.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Normalize(UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <summary>Makes this vector have a magnitude of 1.</summary>
            <returns>To be added.</returns>
            <remarks>Note that this function will change the current vector. If you want to keep the current vector unchanged, use normalized variable. If this vector is too small to be normalized it will be set to zero. See Also: normalized variable.</remarks>
        </member>
        <member name="P:UnityEngine.Vector4.normalized">
            <summary>Returns this vector with a magnitude of 1 (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Note that the current vector is unchanged and a new normalized vector is returned. If you want to normalize the current vector, use Normalize function. If the vector is too small to be normalized a zero vector will be returned. See Also: Normalize function.</remarks>
        </member>
        <member name="P:UnityEngine.Vector4.one">
            <summary>Shorthand for writing Vector4(1,1,1,1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Addition(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Division(UnityEngine.Vector4,System.Single)">
            <param name="a">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Equality(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Implicit(UnityEngine.Vector2)~UnityEngine.Vector4">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Implicit(UnityEngine.Vector3)~UnityEngine.Vector4">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Implicit(UnityEngine.Vector4)~UnityEngine.Vector2">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Implicit(UnityEngine.Vector4)~UnityEngine.Vector3">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Inequality(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="lhs">To be added.</param>
            <param name="rhs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Multiply(System.Single,UnityEngine.Vector4)">
            <param name="d">To be added.</param>
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Multiply(UnityEngine.Vector4,System.Single)">
            <param name="a">To be added.</param>
            <param name="d">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_Subtraction(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.op_UnaryNegation(UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Project(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Projects a vector onto another vector.</summary>
            <returns>To be added.</returns>
            <remarks>Returns a projected onto b.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Scale(UnityEngine.Vector4)">
            <param name="scale">To be added.</param>
            <summary>Multiplies two vectors component-wise.Multiplies every component of this vector by the same component of scale.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Scale(UnityEngine.Vector4,UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>Multiplies two vectors component-wise.Multiplies every component of this vector by the same component of scale.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.Set(System.Single,System.Single,System.Single,System.Single)">
            <param name="new_x">To be added.</param>
            <param name="new_y">To be added.</param>
            <param name="new_z">To be added.</param>
            <param name="new_w">To be added.</param>
            <summary>Set x, y, z and w components of an existing Vector4.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector4.sqrMagnitude">
            <summary>Returns the squared length of this vector (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Calculating the squared magnitude instead of the magnitude is much faster. See Also: magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.SqrMagnitude">
            <summary>Returns the squared length of this vector (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>Calculating the squared magnitude instead of the magnitude is much faster. See Also: magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.SqrMagnitude(UnityEngine.Vector4)">
            <param name="a">To be added.</param>
            <summary>Returns the squared length of this vector (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>Calculating the squared magnitude instead of the magnitude is much faster. See Also: magnitude.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.ToString">
            <summary>Returns a nicely formatted string for this vector.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Vector4.ToString(System.String)">
            <param name="format">To be added.</param>
            <summary>Returns a nicely formatted string for this vector.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector4.w">
            <summary>W component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector4.x">
            <summary>X component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector4.y">
            <summary>Y component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Vector4.z">
            <summary>Z component of the vector.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Vector4.zero">
            <summary>Shorthand for writing Vector4(0,0,0,0).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WaitForEndOfFrame">
            <summary>Waits until the end of the frame after all cameras and GUI is rendered, just before displaying the frame on screen.</summary>
            <remarks>You can use it to read the display into a texture, encode it as an image file (see Texture2D.ReadPixels and Texture2D.EncodeToPNG) and send it somewhere.Another example:</remarks>
        </member>
        <member name="C:UnityEngine.WaitForEndOfFrame">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WaitForFixedUpdate">
            <summary>Waits until next fixed frame rate update function. See Also: FixedUpdate.</summary>
            <remarks>WaitForFixedUpdate can only be used with a yield statement in coroutines.</remarks>
        </member>
        <member name="C:UnityEngine.WaitForFixedUpdate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WaitForSeconds">
            <summary>Suspends the coroutine execution for the given amount of seconds.</summary>
            <remarks>WaitForSeconds can only be used with a yield statement in coroutines.</remarks>
        </member>
        <member name="C:UnityEngine.WaitForSeconds(System.Single)">
            <param name="seconds">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WebCamDevice">
            <summary>A structure describing the webcam device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamDevice.isFrontFacing">
            <summary>True if camera faces the same direction a screen does, false otherwise.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamDevice.name">
            <summary>A human-readable name of the device. Varies across different systems.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WebCamFlags">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.WebCamFlags.FrontFacing">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.WebCamTexture">
            <summary>WebCam Textures are textures onto which the live video input is rendered.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WebCamTexture">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WebCamTexture(System.String)">
            <param name="deviceName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WebCamTexture(System.Int32,System.Int32)">
            <param name="requestedWidth">To be added.</param>
            <param name="requestedHeight">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WebCamTexture(System.Int32,System.Int32,System.Int32)">
            <param name="requestedWidth">To be added.</param>
            <param name="requestedHeight">To be added.</param>
            <param name="requestedFPS">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WebCamTexture(System.String,System.Int32,System.Int32)">
            <param name="deviceName">To be added.</param>
            <param name="requestedWidth">To be added.</param>
            <param name="requestedHeight">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WebCamTexture(System.String,System.Int32,System.Int32,System.Int32)">
            <param name="deviceName">To be added.</param>
            <param name="requestedWidth">To be added.</param>
            <param name="requestedHeight">To be added.</param>
            <param name="requestedFPS">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.deviceName">
            <summary>Set this to specify the name of the device to use.</summary>
            <value>To be added.</value>
            <remarks>This only has an effect when set while the camera is not running.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.devices">
            <summary>Return a list of available devices.</summary>
            <value>To be added.</value>
            <remarks>This queries the system for the list of devices connected and it can be slow. You should cache this value by keeping a copy of the result if you want to use it repeatedly.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.didUpdateThisFrame">
            <summary>Did the video buffer update this frame?</summary>
            <value>To be added.</value>
            <remarks>Use this to check if the video buffer has changed since the last frame. When setting a low frame rate, it is likely that the video updates slower then the game, so it does not make sense to do expensive video processing in each Update call, so check this value before doing any processing.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.GetPixel(System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Returns pixel color at coordinates (x, y).</summary>
            <returns>To be added.</returns>
            <remarks>If the pixel coordinates are out of bounds (larger than width/height or small than 0), they will be clamped or repeat based on the texture's wrap mode. If you are reading a large block of pixels from the texture, it may be faster to use GetPixels which returns a whole block of pixel colors.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.GetPixels">
            <summary>Get a block of pixel colors.Get a block of pixel colors.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="blockWidth">To be added.</param>
            <param name="blockHeight">To be added.</param>
            <summary>Get a block of pixel colors.Get a block of pixel colors.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.GetPixels32">
            <summary>Returns the pixels data in raw format.</summary>
            <returns>To be added.</returns>
            <remarks>This can be faster then calling GetPixels, as pixel data does not have to be converted to color structs, so you may want to use it if you need to do continuous processing on the video feed. You can optionally pass in an array of Color32s to use in colors to avoid allocating new memory each frame, which is faster when you are continuously reading data from the camera. The array needs to be initialized to a length matching width * height of the texture. If you don't pass an  array, GetPixels32 will allocate one for you and return it.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.GetPixels32(UnityEngine.Color32[])">
            <summary>Returns the pixels data in raw format.</summary>
            <returns>To be added.</returns>
            <remarks>This can be faster then calling GetPixels, as pixel data does not have to be converted to color structs, so you may want to use it if you need to do continuous processing on the video feed. You can optionally pass in an array of Color32s to use in colors to avoid allocating new memory each frame, which is faster when you are continuously reading data from the camera. The array needs to be initialized to a length matching width * height of the texture. If you don't pass an  array, GetPixels32 will allocate one for you and return it.</remarks>
            <param name="colors">Optional array to receive pixel data.</param>
        </member>
        <member name="P:UnityEngine.WebCamTexture.isPlaying">
            <summary>Returns if the camera is currently playing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.isReadable">
            <summary>Returns if the WebCamTexture is non-readable. (iOS only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.MarkNonReadable">
            <summary>Marks WebCamTexture as unreadable (no GetPixel* functions will be available (iOS only)).</summary>
            <remarks>This might allow unity to do some optimizations. On the other hand, as we skip almost all processing of WebCam data, you need to check videoVerticallyMirrored property for possible mirroring.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.Pause">
            <summary>Pauses the camera.</summary>
            <remarks>Note that if you want to use WebCamTextures in the web player, you need to get the user's permission to do so. Call Application.RequestUserAuthorization before creating a WebCamTexture.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.Play">
            <summary>Starts the camera.</summary>
            <remarks>Note that if you want to use WebCamTextures in the web player, you need to get the user's permission to do so. Call Application.RequestUserAuthorization before creating a WebCamTexture.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.requestedFPS">
            <summary>Set the requested frame rate of the camera device (in frames per second).</summary>
            <value>To be added.</value>
            <remarks>It will use a closest frame rate to the one requested which is supported by the camera. The requested values only have an effect when set while the camera is not running.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.requestedHeight">
            <summary>Set the requested height of the camera device.</summary>
            <value>To be added.</value>
            <remarks>It will use a closest resolution to the one requested which is supported by the camera. The requested values only have an effect when set while the camera is not running.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.requestedWidth">
            <summary>Set the requested width of the camera device.</summary>
            <value>To be added.</value>
            <remarks>It will use a closest resolution to the one requested which is supported by the camera. The requested values only have an effect when set while the camera is not running.</remarks>
        </member>
        <member name="M:UnityEngine.WebCamTexture.Stop">
            <summary>Stops the camera.</summary>
            <remarks>Note that if you want to use WebCamTextures in the web player, you need to get the user's permission to do so. Call Application.RequestUserAuthorization before creating a WebCamTexture.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.videoRotationAngle">
            <summary>Returns an clockwise angle, which can be used to rotate a polygon so camera contents are shown in correct orientation.</summary>
            <value>To be added.</value>
            <remarks>Note that if you want to use WebCamTextures in the web player, you need to get the user's permission to do so. Call Application.RequestUserAuthorization before creating a WebCamTexture.</remarks>
        </member>
        <member name="P:UnityEngine.WebCamTexture.videoVerticallyMirrored">
            <summary>Returns if the texture image is vertically flipped.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WheelCollider">
            <summary>A special collider for vehicle wheels.</summary>
            <remarks>Wheel collider is used to model vehicle wheels. It simulates a spring and damper suspension setup,  and uses a slip based tire friction model to calculate wheel contact forces. Wheel's collision detection is performed by casting a ray from center downwards the local y-axis. The wheel has a radius and can extend downwards by suspensionDistance amount. The wheel is controlled with motorTorque, brakeTorque and steerAngle properties. Wheel collider computes friction separately from the rest of physics engine, using a slip based friction model. This allows for more realistic behaviour, but makes wheel colliders ignore standard PhysicMaterial settings. Simulation of different road materials is done by changing the forwardFriction and sidewaysFriction based on what material the wheel is hitting. See Also: GetGroundHit and WheelFrictionCurve.</remarks>
        </member>
        <member name="C:UnityEngine.WheelCollider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.brakeTorque">
            <summary>Brake torque. Must be positive.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.center">
            <summary>The center of the wheel, measured in the object's local space.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.forwardFriction">
            <summary>Properties of tire friction in the direction the wheel is pointing in.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WheelCollider.GetGroundHit(UnityEngine.WheelHit@)">
            <param name="hit">To be added.</param>
            <summary>Gets ground collision data for the wheel.</summary>
            <returns>To be added.</returns>
            <remarks>If the wheel collides with something, returns true and fills the hit structure. If the wheel is not colliding, returns false and leaves hit structure unchanged. The reported hit is always the closest one. Because the tire friction model does not automatically respond to other PhysicMaterial s, any simulation of different ground materials must be done manually by adjusting forwardFriction and sidewaysFriction based on collider's material returned here.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.isGrounded">
            <summary>Indicates whether the wheel currently collides with something (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.mass">
            <summary>The mass of the wheel. Must be larger than zero.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.motorTorque">
            <summary>Motor torque on the wheel axle. Positive or negative depending on direction.</summary>
            <value>To be added.</value>
            <remarks>To simulate brakes, do not use negative motor torque - use brakeTorque instead.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.radius">
            <summary>The radius of the wheel, measured in local space.</summary>
            <value>To be added.</value>
            <remarks>The radius will be scaled by the transform's scale.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.rpm">
            <summary>Current wheel axle rotation speed, in rotations per minute (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.sidewaysFriction">
            <summary>Properties of tire friction in the sideways direction.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.steerAngle">
            <summary>Steering angle in degrees, always around the local y-axis.</summary>
            <value>To be added.</value>
            <remarks>At high velocities use only small steer angles; a few degrees should suffice.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.suspensionDistance">
            <summary>Maximum extension distance of wheel suspension, measured in local space.</summary>
            <value>To be added.</value>
            <remarks>Suspension always extends downwards the local y-axis. Suspension travel will be scaled by the transform's scale.</remarks>
        </member>
        <member name="P:UnityEngine.WheelCollider.suspensionSpring">
            <summary>The parameters of wheel's suspension. The suspension attempts to reach a target position.</summary>
            <value>To be added.</value>
            <remarks>By adding spring and damping forces. The /suspensionSpring.spring/ force attempts to reach the target position. A larger value makes the suspension reach the target position faster. The /suspensionSpring.damper/ force dampens the suspension velocity. A larger value makes the suspension reach the goal slower. The suspension tries to reach /suspensionSpring.targetPosition/, which is the rest length of the suspension along the suspensionDistance. Zero value maps to full extension along the suspension travel, a value of one maps to fully compressed suspension. Default value is zero, which matches the behavior of regular car's suspension.</remarks>
        </member>
        <member name="T:UnityEngine.WheelFrictionCurve">
            <summary>WheelFrictionCurve is used by the WheelCollider to describe friction properties of the wheel tire.</summary>
            <remarks>The curve takes a measure of tire slip as an input and gives a force as output. The curve is approximated by a two-piece spline. The first section goes from (0,0) to (extremumSlip,extremumValue), at which point the curve's tangent is zero. The second section goes from (extremumSlip,extremumValue) to (asymptoteSlip,asymptoteValue), where curve's tangent is again zero:</remarks>
        </member>
        <member name="P:UnityEngine.WheelFrictionCurve.asymptoteSlip">
            <summary>Asymptote point slip (default 2).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelFrictionCurve.asymptoteValue">
            <summary>Force at the asymptote slip (default 10000).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelFrictionCurve.extremumSlip">
            <summary>Extremum point slip (default 1).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelFrictionCurve.extremumValue">
            <summary>Force at the extremum slip (default 20000).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelFrictionCurve.stiffness">
            <summary>Multiplier for the extremumValue and asymptoteValue values (default 1).</summary>
            <value>To be added.</value>
            <remarks>Changes the stiffness of the friction. Setting this to zero will completely disable all friction from the wheel. Usually you modify stiffness to simulate various ground materials (e.g. lower the stiffness when driving on grass). See Also: WheelCollider.GetGroundHit.</remarks>
        </member>
        <member name="T:UnityEngine.WheelHit">
            <summary>Contact information for the wheel, reported by WheelCollider.</summary>
            <remarks>Friction for the WheelCollider is computed separately from the rest of the physics, using a slip based tire friction model. This allows for more realistic behaviour, but makes wheel colliders ignore standard PhysicMaterial settings. The way to simulate different ground materials is to query WheelCollider for its collision information (see WheelCollider.GetGroundHit). Usually you get the other collider the wheel is hitting, and modify wheel's forwardFriction and sidewaysFriction based on ground's material. The other members of WheelHit structure are usually queried for information purposes or special effects. E.g. a "slipping tire" sound can be played if forwardSlip or sidewaysSlip exceed some threshold. See Also: WheelCollider.GetGroundHit.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.collider">
            <summary>The other Collider the wheel is hitting.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.force">
            <summary>The magnitude of the force being applied for the contact.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.forwardDir">
            <summary>The direction the wheel is pointing in.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.forwardSlip">
            <summary>Tire slip in the rolling direction. Acceleration slip is negative, braking slip is positive.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.normal">
            <summary>The normal at the point of contact.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.point">
            <summary>The point of contact between the wheel and the ground.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.sidewaysDir">
            <summary>The sideways direction of the wheel.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WheelHit.sidewaysSlip">
            <summary>Tire slip in the sideways direction.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WrapMode">
            <summary>Determines how time is treated outside of the keyframed range of an AnimationClip or AnimationCurve.</summary>
            <remarks>The WrapMode that the animation system uses for a specific animation is determined this way: You can set the WrapMode of an AnimationClip in the import settings of the clip. This is the recommended way to control the WrapMode. When an AnimationState is created, it inherits its WrapMode from the AnimationClip it is created from, but you can also change it from code. If the WrapMode of an AnimationState is set to Default, the animation system will use the WrapMode from the Animation component.</remarks>
        </member>
        <member name="F:UnityEngine.WrapMode.Clamp">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.WrapMode.ClampForever">
            <summary>Plays back the animation. When it reaches the end, it will keep playing the last frame and never stop playing.</summary>
            <remarks>When playing backwards it will reach the first frame and will keep playing that. This is useful for additive animations, which should never be stopped when they reach the maximum. See Also: AnimationState.wrapMode, AnimationState.time, AnimationState.speed properties.</remarks>
        </member>
        <member name="F:UnityEngine.WrapMode.Default">
            <summary>Reads the default repeat mode set higher up.</summary>
            <remarks>If you haven't changed wrapMode on AnimationClip or on Animation, then WrapMode.Default resolves to WrapMode.Once. See Also: WrapMode for me details.</remarks>
        </member>
        <member name="F:UnityEngine.WrapMode.Loop">
            <summary>When time reaches the end of the animation clip, time will continue at the beginning.</summary>
            <remarks>When playing backwards it will do the opposite - it will jump to the end of the clip and continue from there. The animation will never automatically stop playing. See Also: AnimationState.wrapMode, AnimationState.time, AnimationState.speed properties.</remarks>
        </member>
        <member name="F:UnityEngine.WrapMode.Once">
            <summary>When time reaches the end of the animation clip, the clip will automatically stop playing and time will be reset to beginning of the clip.</summary>
            <remarks>Note that when playing backwards and when the time reaches the beginning the clip will automatically stop playing, but the time won't be  reset to the end - it will be kept at the beginning. See Also: AnimationState.wrapMode, AnimationState.time, AnimationState.speed properties.</remarks>
        </member>
        <member name="F:UnityEngine.WrapMode.PingPong">
            <summary>When time reaches the end of the animation clip, time will ping pong back between beginning and end.</summary>
            <remarks>It has same behaviour when playing backwards - when time reaches the beginning of the animation clip, time will ping pong back  between beginning and end. The animation will never automatically stop playing. See Also: AnimationState.wrapMode, AnimationState.time, AnimationState.speed properties.</remarks>
        </member>
        <member name="T:UnityEngine.WWW">
            <summary>Simple access to web pages.</summary>
            <remarks>This is a small utility module for retrieving the contents of URLs. You start a download in the background by calling WWW(url) which returns a new WWW object. You can inspect the isDone property to see if the download has completed or yield the download object to automatically wait until it is (without blocking the rest of the game). Use it if you want to get some data from a web server for integration with a game such as highscore lists or calling home for some reason. There is also functionality to create textures from images downloaded from the web and to stream &amp; load new web player data files. The WWW class can be used to send both GET and POST requests to the server. The WWW class will use GET by default and POST if you supply a postData parameter. See Also: WWWForm for a way to build valid form data for the postData parameter. Note: URLs passed to WWW class must be '%' escaped. Note: http://, https:// and file:// protocols are supported on iPhone. ftp:// protocol support is limited to anonymous downloads only. Other protocols are not supported. ''Note:'' When using file protocol on Windows and Windows Store Apps for accessing local files, you have to specify file:///__ (with three slashes). Note: The security sandbox present in web-player builds prevents you from accessing content not hosted the server where the webplayer is hosted.</remarks>
        </member>
        <member name="C:UnityEngine.WWW(System.String)">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WWW(System.String,System.Byte[])">
            <param name="url">To be added.</param>
            <param name="postData">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WWW(System.String,UnityEngine.WWWForm)">
            <param name="url">To be added.</param>
            <param name="form">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.WWW(System.String,System.Byte[],System.Collections.Hashtable)">
            <param name="url">To be added.</param>
            <param name="postData">To be added.</param>
            <param name="headers">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.assetBundle">
            <summary>Streams an AssetBundle that can contain any kind of asset from the project folder.</summary>
            <value>To be added.</value>
            <remarks>See Also: AssetBundle class.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.audioClip">
            <summary>Returns a AudioClip generated from the downloaded data (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones,Flash), WAV, XM, IT, MOD or S3M format. The clip will be downloaded completely before it's ready to play. Use the overloaded GetAudioClip (bool threeD, bool stream) to stream the audio, instead of downloading the entire clip.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.bytes">
            <summary>Returns the contents of the fetched web page as a byte array (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If the object has not finished downloading the data, it will return an empty byte array. Use isDone or yield to see if the data is available. See Also: bytes property.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.bytesDownloaded">
            <summary>The number of bytes downloaded by this WWW query (read only).</summary>
            <value>To be added.</value>
            <remarks>Returns the number of bytes downloaded when fetching content from a WWW source.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.data">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.error">
            <summary>Returns an error message if there was an error during the download (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If there was no error, error will return null or an empty string (this is because some platforms don't allow nulls for string values). We recommend that you use String.IsNullOrEmpty to check for the presence of an error so that both cases are covered. If the object has not finished downloading the data, it will block until the download has finished. Use isDone or yield to see if the data is available.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.EscapeURL(System.String)">
            <summary>Escapes characters in a string to ensure they are URL-friendly.</summary>
            <returns>To be added.</returns>
            <remarks>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.See Also: UnEscapeURL.</remarks>
            <param name="s">A string with characters to be escaped.</param>
        </member>
        <member name="M:UnityEngine.WWW.EscapeURL(System.String,System.Text.Encoding)">
            <summary>Escapes characters in a string to ensure they are URL-friendly.</summary>
            <returns>To be added.</returns>
            <remarks>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.See Also: UnEscapeURL.</remarks>
            <param name="s">A string with characters to be escaped.</param>
            <param name="e">The text encoding to use.</param>
        </member>
        <member name="M:UnityEngine.WWW.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean)">
            <summary>Returns an AudioClip generated from the downloaded data (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back.</remarks>
            <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip the .audioClip property defaults to 3D.</param>
        </member>
        <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean,System.Boolean)">
            <summary>Returns an AudioClip generated from the downloaded data (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back.</remarks>
            <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip the .audioClip property defaults to 3D.</param>
            <param name="stream">Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true). The latter will disable seeking on the clip (with .time and/or .timeSamples).</param>
        </member>
        <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean,System.Boolean,UnityEngine.AudioType)">
            <param name="audioType">To be added.</param>
            <summary>Returns an AudioClip generated from the downloaded data (Read Only).</summary>
            <returns>To be added.</returns>
            <remarks>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back.</remarks>
            <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip the .audioClip property defaults to 3D.</param>
            <param name="stream">Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true). The latter will disable seeking on the clip (with .time and/or .timeSamples).</param>
        </member>
        <member name="M:UnityEngine.WWW.GetTextureFromURL(System.String)">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.GetURL(System.String)">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.InitWWW(System.String,System.Byte[],System.String[])">
            <param name="url">To be added.</param>
            <param name="postData">To be added.</param>
            <param name="iHeaders">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.isDone">
            <summary>Is the download already finished? (Read Only)</summary>
            <value>To be added.</value>
            <remarks>You should not write loops that spin until download is done; use coroutines instead. An empty loop that waits for isDone will block in the web player.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,System.Int32)">
            <summary>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</summary>
            <returns>A WWW instance, which can be used to access the data once the load/download operation is completed.</returns>
            <remarks>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality. Cached AssetBundles are uniquely identified solely by the filename and version number; all domain and path information in url is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. For WebPlayer applications that use the shared cache, Caching adds unique identifying information to identically-named AssetBundles in order to prevent name collisions between applications. If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call. This function can only be used to access AssetBundles. No other types or content are cacheable. Note: URL must be '%' escaped.See Also: BuildPipeline.BuildAssetBundle, BuildPipeline.BuildStreamedSceneAssetBundle.</remarks>
            <example>function Start ()  {  var www = WWW.LoadFromCacheOrDownload ("http://myserver.com/myassetBundle.unity3d", 5); yield www; if (!String.IsNullOrEmpty(www.error))  {   Debug.Log (www.error);   return;  }  var myLoadedAssetBundle = www.assetBundle; var asset = myLoadedAssetBundle.mainAsset;  }</example>
            <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
            <param name="version">Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same version parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBunlde from url.</param>
        </member>
        <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,System.Int32,System.UInt32)">
            <summary>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</summary>
            <returns>A WWW instance, which can be used to access the data once the load/download operation is completed.</returns>
            <remarks>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality. Cached AssetBundles are uniquely identified solely by the filename and version number; all domain and path information in url is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. For WebPlayer applications that use the shared cache, Caching adds unique identifying information to identically-named AssetBundles in order to prevent name collisions between applications. If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call. This function can only be used to access AssetBundles. No other types or content are cacheable. Note: URL must be '%' escaped.See Also: BuildPipeline.BuildAssetBundle, BuildPipeline.BuildStreamedSceneAssetBundle.</remarks>
            <example>function Start ()  {  var www = WWW.LoadFromCacheOrDownload ("http://myserver.com/myassetBundle.unity3d", 5); yield www; if (!String.IsNullOrEmpty(www.error))  {   Debug.Log (www.error);   return;  }  var myLoadedAssetBundle = www.assetBundle; var asset = myLoadedAssetBundle.mainAsset;  }</example>
            <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
            <param name="version">Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same version parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBunlde from url.</param>
            <param name="crc">An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.</param>
        </member>
        <member name="M:UnityEngine.WWW.LoadImageIntoTexture(UnityEngine.Texture2D)">
            <summary>Replaces the contents of an existing Texture2D with an image from the downloaded data.</summary>
            <remarks>The data must be an image in JPG or PNG format. If the data is not a valid image, the generated texture will be a small image of a question mark. It is recommended to use power-of-two size for each dimension of the image; arbitrary sizes will also work but can load slightly slower and take up a bit more memory. For PNG files, gamma correction is applied to the texture if PNG file contains gamma information. Display gamma for correction is assumed to be 2.0. If file does not contain gamma information, no color correction will be performed. This function replaces texture contents with downloaded image data, so texture size and format might change. JPG files are loaded into RGB24 format, PNG files are loaded into ARGB32 format. If texture format before calling LoadImage is DXT1 or DXT5, then the loaded image will be DXT-compressed (into DXT1 for JPG images and DXT5 for PNG images). If the data has not finished downloading the texture will be left untouched. Use isDone or yield to see if the data is available.</remarks>
            <param name="tex">An existing texture object to be overwritten with the image data.</param>
        </member>
        <member name="M:UnityEngine.WWW.LoadUnityWeb">
            <summary>Loads the new web player data file.</summary>
            <remarks>The first level of the loaded .unity3d file will automatically be loaded. All objects, scripts and static variables from the previous .unity3d file will be unloaded. You can move information between the two sessions using PlayerPrefs class. This function is only supported in the web player. If the object has not finished downloading the unity3d file will not be loaded. Use isDone or yield to see if the data is available.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.movie">
            <summary>Returns a MovieTexture generated from the downloaded data (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The data must be a movie in Ogg Theora format. Even if the movie is not yet completely downloaded, this returns immediately, allowing you to start playing the partial movie as it downloads. See Also: MovieTexture.audioClip.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.oggVorbis">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.progress">
            <summary>How far has the download progressed (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is a value between zero and one; 0 means nothing is downloaded, 1 means download complete. progress will remain at 0.0 while sending the request to the server. For monitoring progress when uploading files to a web server, see WWW.uploadProgress.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.responseHeaders">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.size">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.text">
            <summary>Returns the contents of the fetched web page as a string (Read Only).</summary>
            <value>To be added.</value>
            <remarks>If the object has not finished downloading the data, it will return an empty string. Use isDone or yield to see if the data is available. This function expects the web page contents in UTF-8 or ASCII character set. The returned string might be not correct for other characters or binary data. Use bytes property to get raw byte array in these cases. See Also: bytes property.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.texture">
            <summary>Returns a Texture2D generated from the downloaded data (Read Only).</summary>
            <value>To be added.</value>
            <remarks>The data must be an image in JPG or PNG format. If the data is not a valid image, the generated texture will be a small image of a question mark. It is recommended to use power-of-two size for each dimension of the image; arbitrary sizes will also work but can load slightly slower and take up a bit more memory. Each invocation of texture property allocates a new Texture2D. If you continously download textures you must use LoadImageIntoTexture or Destroy the previously created texture. For PNG files, gamma correction is applied to the texture if PNG file contains gamma information. Display gamma for correction is assumed to be 2.0. If file does not contain gamma information, no color correction will be performed. JPG files are loaded into RGB24 format, PNG files are loaded into ARGB32 format. If you want to DXT-compress the downloaded image, use LoadImageIntoTexture instead. If the object has not finished downloading the data a dummy image will be returned. Use isDone or yield to see if the data is available.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.textureNonReadable">
            <summary>Returns a non-readable Texture2D generated from the downloaded data (Read Only).</summary>
            <value>To be added.</value>
            <remarks>Same as texture, but marks texture as non-readable, effectively freeing system memory. SA TextureImporter.isReadable.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.threadPriority">
            <summary>Priority of AssetBundle decompression thread.</summary>
            <value>To be added.</value>
            <remarks>You can control decompression speed vs. impact on frame rate tradeoff when downloading Asset Bundles in the background. When using lower priority, decompression will take longer, but will not have such a big impact on frame rates. Default value is ThreadPriority.Normal.</remarks>
        </member>
        <member name="M:UnityEngine.WWW.UnEscapeURL(System.String)">
            <summary>Converts URL-friendly escape sequences back to normal text.</summary>
            <returns>To be added.</returns>
            <remarks>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.See Also: EscapeURL.</remarks>
            <param name="s">A string containing escaped characters.</param>
        </member>
        <member name="M:UnityEngine.WWW.UnEscapeURL(System.String,System.Text.Encoding)">
            <summary>Converts URL-friendly escape sequences back to normal text.</summary>
            <returns>To be added.</returns>
            <remarks>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.See Also: EscapeURL.</remarks>
            <param name="s">A string containing escaped characters.</param>
            <param name="e">The text encoding to use.</param>
        </member>
        <member name="P:UnityEngine.WWW.uploadProgress">
            <summary>How far has the upload progressed (Read Only).</summary>
            <value>To be added.</value>
            <remarks>This is a value between zero and one; 0 means nothing is sent yet, 1 means upload complete. uploadProgress is currently not fully implemented in the Web Player. If used in a Web Player it will report 0.5 during the upload and 1.0 when the upload is complete. Since all sending of data to the server is done before receiving data, uploadProgress will always be 1.0 when progress is larger than 0.</remarks>
        </member>
        <member name="P:UnityEngine.WWW.url">
            <summary>The URL of this WWW request (Read Only).</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.WWWForm">
            <summary>Helper class to generate form data to post to web servers using the WWW class.</summary>
            <remarks>Here is a sample script that retrieves the high scores stored in a table in an SQL database.Here is a sample Perl script that processes the high scores stored in a table in an SQL database.</remarks>
        </member>
        <member name="C:UnityEngine.WWWForm">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[])">
            <param name="fieldName">To be added.</param>
            <param name="contents">To be added.</param>
            <summary>Add binary data to the form.</summary>
            <remarks>Use this function to upload files and images to a web server application. Note that the data is read from the contents of byte array and not from a file. The fileName parameter is for telling the server what filename to use when saving the uploaded file. If mimeType is not given and first 8 bytes of the data match PNG format header, then the data is sent with " image/png " mimetype. Otherwise it is sent with " application/octet-stream " mimetype.</remarks>
        </member>
        <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[],System.String)">
            <param name="fieldName">To be added.</param>
            <param name="contents">To be added.</param>
            <param name="fileName">To be added.</param>
            <summary>Add binary data to the form.</summary>
            <remarks>Use this function to upload files and images to a web server application. Note that the data is read from the contents of byte array and not from a file. The fileName parameter is for telling the server what filename to use when saving the uploaded file. If mimeType is not given and first 8 bytes of the data match PNG format header, then the data is sent with " image/png " mimetype. Otherwise it is sent with " application/octet-stream " mimetype.</remarks>
        </member>
        <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[],System.String,System.String)">
            <param name="fieldName">To be added.</param>
            <param name="contents">To be added.</param>
            <param name="fileName">To be added.</param>
            <param name="mimeType">To be added.</param>
            <summary>Add binary data to the form.</summary>
            <remarks>Use this function to upload files and images to a web server application. Note that the data is read from the contents of byte array and not from a file. The fileName parameter is for telling the server what filename to use when saving the uploaded file. If mimeType is not given and first 8 bytes of the data match PNG format header, then the data is sent with " image/png " mimetype. Otherwise it is sent with " application/octet-stream " mimetype.</remarks>
        </member>
        <member name="M:UnityEngine.WWWForm.AddField(System.String,System.Int32)">
            <param name="fieldName">To be added.</param>
            <param name="i">To be added.</param>
            <summary>Add a simple field to the form.Adds a simple field to the form.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWWForm.AddField(System.String,System.String)">
            <param name="fieldName">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a simple field to the form.Adds a simple field to the form.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.WWWForm.AddField(System.String,System.String,System.Text.Encoding)">
            <param name="fieldName">To be added.</param>
            <param name="value">To be added.</param>
            <param name="e">To be added.</param>
            <summary>Add a simple field to the form.Adds a simple field to the form.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.WWWForm.data">
            <summary>(Read Only) The raw data to pass as the POST request body when sending the form.</summary>
            <value>To be added.</value>
            <remarks>Usually, you just pass the WWWForm object directly to the WWW constructor, but you will need this variable if you want to change the request headers sent to the web server. See Also: headers variable.</remarks>
        </member>
        <member name="P:UnityEngine.WWWForm.headers">
            <summary>(Read Only) Returns the correct request headers for posting the form using the WWW class.</summary>
            <value>To be added.</value>
            <remarks>This field only contains one header, /"Content-Type"/, which is set to the correct mime type for the form: " application/x-www-form-urlencoded " for normal forms and " multipart/form-data " for forms containing data added using AddBinaryData.</remarks>
        </member>
        <member name="T:UnityEngine.YieldInstruction">
            <summary>Base class for all yield instructions.</summary>
            <remarks>See WaitForSeconds, WaitForFixedUpdate, Coroutine and MonoBehaviour.StartCoroutine for more information.</remarks>
        </member>
        <member name="C:UnityEngine.YieldInstruction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Flash.ActionScript">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Flash.ActionScript">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Flash.ActionScript.Expression``1(System.String,System.Object[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="formatString">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Flash.ActionScript.Import(System.String)">
            <param name="package">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Flash.ActionScript.Statement(System.String,System.Object[])">
            <param name="formatString">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Flash.FlashPlayer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Flash.FlashPlayer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Flash.FlashPlayer.TargetSwfVersion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Flash.FlashPlayer.TargetVersion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Internal.DefaultValueAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Internal.DefaultValueAttribute(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Internal.DefaultValueAttribute.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Internal.DefaultValueAttribute.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.Internal.DefaultValueAttribute.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Internal.ExcludeFromDocsAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Internal.ExcludeFromDocsAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.Rendering.BlendMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.DstAlpha">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.DstColor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.One">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.OneMinusDstAlpha">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.OneMinusDstColor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.OneMinusSrcColor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.SrcAlpha">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.SrcAlphaSaturate">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.SrcColor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendMode.Zero">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.BlendOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.Add">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalAnd">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalAndInverted">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalAndReverse">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalClear">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalCopy">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalCopyInverted">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalEquivalence">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalInvert">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalNand">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalNoop">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalNor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalOr">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalOrInverted">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalOrReverse">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalSet">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.LogicalXor">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.Max">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.Min">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.ReverseSubtract">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.BlendOp.Subtract">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.ColorWriteMask">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Rendering.ColorWriteMask.All">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorWriteMask.Alpha">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorWriteMask.Blue">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorWriteMask.Green">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorWriteMask.Red">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.CompareFunction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.Always">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.Disabled">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.Equal">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.Greater">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.GreaterEqual">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.Less">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.LessEqual">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.Never">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CompareFunction.NotEqual">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.CullMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Rendering.CullMode.Back">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CullMode.Front">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CullMode.Off">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.StencilOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.DecrementSaturate">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.DecrementWrap">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.IncrementSaturate">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.IncrementWrap">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.Invert">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.Keep">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.Replace">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.StencilOp.Zero">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.Serialization.UnitySurrogateSelector">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.Serialization.UnitySurrogateSelector">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Serialization.UnitySurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Serialization.UnitySurrogateSelector.GetNextSelector">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.Serialization.UnitySurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <param name="type">To be added.</param>
            <param name="context">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.IAchievement">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievement.completed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievement.hidden">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievement.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievement.lastReportedDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievement.percentCompleted">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.IAchievement.ReportProgress(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.IAchievementDescription">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.achievedDescription">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.hidden">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.image">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.points">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.unachievedDescription">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.ILeaderboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.loading">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ILeaderboard.LoadScores(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.localUserScore">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.maxRange">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.range">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.scores">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ILeaderboard.SetUserFilter(System.String[])">
            <param name="userIDs">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.timeScope">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.userScope">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.ILocalUser">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ILocalUser.Authenticate(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILocalUser.authenticated">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILocalUser.friends">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ILocalUser.LoadFriends(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ILocalUser.underage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.IScore">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IScore.date">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IScore.formattedValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IScore.leaderboardID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IScore.rank">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.IScore.ReportScore(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IScore.userID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IScore.value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.ISocialPlatform">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.Authenticate(UnityEngine.SocialPlatforms.ILocalUser,System.Action{System.Boolean})">
            <param name="user">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.CreateAchievement">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.CreateLeaderboard">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.GetLoading(UnityEngine.SocialPlatforms.ILeaderboard)">
            <param name="board">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadAchievementDescriptions(System.Action{UnityEngine.SocialPlatforms.IAchievementDescription[]})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadAchievements(System.Action{UnityEngine.SocialPlatforms.IAchievement[]})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadFriends(UnityEngine.SocialPlatforms.ILocalUser,System.Action{System.Boolean})">
            <param name="user">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadScores(System.String,System.Action{UnityEngine.SocialPlatforms.IScore[]})">
            <param name="leaderboardID">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadScores(UnityEngine.SocialPlatforms.ILeaderboard,System.Action{System.Boolean})">
            <param name="board">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadUsers(System.String[],System.Action{UnityEngine.SocialPlatforms.IUserProfile[]})">
            <param name="userIDs">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.ISocialPlatform.localUser">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ReportProgress(System.String,System.Double,System.Action{System.Boolean})">
            <param name="achievementID">To be added.</param>
            <param name="progress">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ReportScore(System.Int64,System.String,System.Action{System.Boolean})">
            <param name="score">To be added.</param>
            <param name="board">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ShowAchievementsUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ShowLeaderboardUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.IUserProfile">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IUserProfile.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IUserProfile.image">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IUserProfile.isFriend">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IUserProfile.state">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.IUserProfile.userName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Local">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Local">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.CreateAchievement">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.CreateLeaderboard">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.LoadAchievementDescriptions(System.Action{UnityEngine.SocialPlatforms.IAchievementDescription[]})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.LoadAchievements(System.Action{UnityEngine.SocialPlatforms.IAchievement[]})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.LoadScores(System.String,System.Action{UnityEngine.SocialPlatforms.IScore[]})">
            <param name="leaderboardID">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.LoadUsers(System.String[],System.Action{UnityEngine.SocialPlatforms.IUserProfile[]})">
            <param name="userIDs">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Local.localUser">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.ReportProgress(System.String,System.Double,System.Action{System.Boolean})">
            <param name="id">To be added.</param>
            <param name="progress">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.ReportScore(System.Int64,System.String,System.Action{System.Boolean})">
            <param name="score">To be added.</param>
            <param name="board">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.ShowAchievementsUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.ShowLeaderboardUI">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.UnityEngine#SocialPlatforms#ISocialPlatform#Authenticate(UnityEngine.SocialPlatforms.ILocalUser,System.Action{System.Boolean})">
            <param name="user">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.UnityEngine#SocialPlatforms#ISocialPlatform#GetLoading(UnityEngine.SocialPlatforms.ILeaderboard)">
            <param name="board">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.UnityEngine#SocialPlatforms#ISocialPlatform#LoadFriends(UnityEngine.SocialPlatforms.ILocalUser,System.Action{System.Boolean})">
            <param name="user">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Local.UnityEngine#SocialPlatforms#ISocialPlatform#LoadScores(UnityEngine.SocialPlatforms.ILeaderboard,System.Action{System.Boolean})">
            <param name="board">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Range">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Range(System.Int32,System.Int32)">
            <param name="fromValue">To be added.</param>
            <param name="valueCount">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Range.count">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Range.from">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.TimeScope">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.TimeScope.AllTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.TimeScope.Today">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.TimeScope.Week">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.UserScope">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserScope.FriendsOnly">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserScope.Global">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.UserState">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserState.Offline">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserState.Online">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserState.OnlineAndAway">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserState.OnlineAndBusy">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.UserState.Playing">
            <summary>To be added.</summary>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform.ResetAllAchievements(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform.ShowDefaultAchievementCompletionBanner(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform.ShowLeaderboardUI(System.String,UnityEngine.SocialPlatforms.TimeScope)">
            <param name="leaderboardID">To be added.</param>
            <param name="timeScope">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Impl.Achievement">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Achievement">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Achievement(System.String,System.Double)">
            <param name="id">To be added.</param>
            <param name="percent">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Achievement(System.String,System.Double,System.Boolean,System.Boolean,System.DateTime)">
            <param name="id">To be added.</param>
            <param name="percentCompleted">To be added.</param>
            <param name="completed">To be added.</param>
            <param name="hidden">To be added.</param>
            <param name="lastReportedDate">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.completed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.hidden">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.lastReportedDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.percentCompleted">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.ReportProgress(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.SetCompleted(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.SetHidden(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.SetLastReportedDate(System.DateTime)">
            <param name="date">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Impl.AchievementDescription">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.AchievementDescription(System.String,System.String,UnityEngine.Texture2D,System.String,System.String,System.Boolean,System.Int32)">
            <param name="id">To be added.</param>
            <param name="title">To be added.</param>
            <param name="image">To be added.</param>
            <param name="achievedDescription">To be added.</param>
            <param name="unachievedDescription">To be added.</param>
            <param name="hidden">To be added.</param>
            <param name="points">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.achievedDescription">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.hidden">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.image">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.points">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.AchievementDescription.SetImage(UnityEngine.Texture2D)">
            <param name="image">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.AchievementDescription.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.unachievedDescription">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Impl.Leaderboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Leaderboard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.GetUserFilter">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.loading">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.LoadScores(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.localUserScore">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.maxRange">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.range">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.scores">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetLocalUserScore(UnityEngine.SocialPlatforms.IScore)">
            <param name="score">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetMaxRange(System.UInt32)">
            <param name="maxRange">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetScores(UnityEngine.SocialPlatforms.IScore[])">
            <param name="scores">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetTitle(System.String)">
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetUserFilter(System.String[])">
            <param name="userIDs">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.timeScope">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.userScope">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Impl.LocalUser">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.LocalUser">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.Authenticate(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.LocalUser.authenticated">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.LocalUser.friends">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.LoadFriends(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.SetAuthenticated(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.SetFriends(UnityEngine.SocialPlatforms.IUserProfile[])">
            <param name="friends">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.SetUnderage(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.LocalUser.underage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Impl.Score">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Score">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Score(System.String,System.Int64)">
            <param name="leaderboardID">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.Score(System.String,System.Int64,System.String,System.DateTime,System.String,System.Int32)">
            <param name="leaderboardID">To be added.</param>
            <param name="value">To be added.</param>
            <param name="userID">To be added.</param>
            <param name="date">To be added.</param>
            <param name="formattedValue">To be added.</param>
            <param name="rank">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Score.date">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Score.formattedValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Score.leaderboardID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Score.rank">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Score.ReportScore(System.Action{System.Boolean})">
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetDate(System.DateTime)">
            <param name="date">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetFormattedValue(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetRank(System.Int32)">
            <param name="rank">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetUserID(System.String)">
            <param name="userID">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.Score.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Score.userID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.Score.value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngine.SocialPlatforms.Impl.UserProfile">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.UserProfile">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.UserProfile(System.String,System.String,System.Boolean)">
            <param name="name">To be added.</param>
            <param name="id">To be added.</param>
            <param name="friend">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngine.SocialPlatforms.Impl.UserProfile(System.String,System.String,System.Boolean,UnityEngine.SocialPlatforms.UserState,UnityEngine.Texture2D)">
            <param name="name">To be added.</param>
            <param name="id">To be added.</param>
            <param name="friend">To be added.</param>
            <param name="state">To be added.</param>
            <param name="image">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.image">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.isFriend">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Impl.UserProfile.m_ID">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Impl.UserProfile.m_Image">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Impl.UserProfile.m_IsFriend">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Impl.UserProfile.m_State">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngine.SocialPlatforms.Impl.UserProfile.m_UserName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetImage(UnityEngine.Texture2D)">
            <param name="image">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetIsFriend(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetState(UnityEngine.SocialPlatforms.UserState)">
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetUserID(System.String)">
            <param name="id">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetUserName(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.state">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.userName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngineInternal.FastCallExceptionHandler">
            <param name="ex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngineInternal.GenericStack">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngineInternal.GenericStack">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngineInternal.Reproduction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngineInternal.Reproduction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngineInternal.Reproduction.CaptureScreenshot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngineInternal.TypeInferenceRuleAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngineInternal.TypeInferenceRuleAttribute(System.String)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:UnityEngineInternal.TypeInferenceRuleAttribute(UnityEngineInternal.TypeInferenceRules)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:UnityEngineInternal.TypeInferenceRuleAttribute.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:UnityEngineInternal.TypeInferenceRules">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:UnityEngineInternal.TypeInferenceRules.ArrayOfTypeReferencedByFirstArgument">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngineInternal.TypeInferenceRules.TypeOfFirstArgument">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngineInternal.TypeInferenceRules.TypeReferencedByFirstArgument">
            <summary>To be added.</summary>
        </member>
        <member name="F:UnityEngineInternal.TypeInferenceRules.TypeReferencedBySecondArgument">
            <summary>To be added.</summary>
        </member>
    </members>
</doc>
